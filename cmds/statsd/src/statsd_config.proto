syntax = "proto2";
package android.os.statsd;

option optimize_for = LITE_RUNTIME;

option java_package = "com.android.internal.os";
option java_outer_classname = "StatsdConfigProto";

import "frameworks/base/cmds/statsd/src/stats_constants.proto";

message KeyMatcher {
  optional KeyId key = 1;
  optional bool as_package_name = 2 [ default = false ];
}

message KeyValueMatcher {
  optional KeyMatcher key_matcher = 1;

  oneof value_matcher {
    bool eq_bool = 2;
    string eq_string = 3;
    int32 eq_int = 4;

    // Numeric comparisons. Lt means strictly less than.
    int64 lt_int = 5;
    int64 gt_int = 6;
    float lt_float = 7;
    float gt_float = 8;

    // Numeric comparisons with equality. Lte means less than or equal.
    int64 lte_int = 9;
    int64 gte_int = 10;
  }
}

enum LogicalOperation {
  AND = 1;
  OR = 2;
  NOT = 3;
  NAND = 4;
  NOR = 5;
}

message SimpleLogEntryMatcher {
  repeated TagId tag = 1;

  repeated KeyValueMatcher key_value_matcher = 2;
}

message LogEntryMatcher {
  optional string name = 1;

  message Combination {
    optional LogicalOperation operation = 1;
    repeated LogEntryMatcher matcher = 2;
  }
  oneof contents {
    SimpleLogEntryMatcher simple_log_entry_matcher = 2;
    Combination combination = 3;
  }
}

message SimpleCondition {
  optional string start = 1;

  optional string stop = 2;

  optional bool count_nesting = 3 [default = true];

  optional string stop_all = 4;
}

message Condition {
  optional string name = 1;

  message Combination {
    optional LogicalOperation operation = 1;

    repeated string condition = 2;
  }

  oneof contents {
    SimpleCondition simple_condition = 2;
    Combination combination = 3;
  }
}

message Bucket {
  optional int64 bucket_size_millis = 1;
}

message EventMetric {
  optional int64 metric_id = 1;

  optional string what = 2;

  optional string condition = 3;
}

message CountMetric {
  optional int64 metric_id = 1;

  optional string what = 2;

  optional string condition = 3;

  repeated KeyMatcher dimension = 4;

  optional Bucket bucket = 5;
}

message StatsdConfig {
  optional int64 config_id = 1;

  repeated EventMetric event_metric = 2;

  repeated CountMetric count_metric = 3;

  repeated LogEntryMatcher log_entry_matcher = 4;

  repeated Condition condition = 5;
}
