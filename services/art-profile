HSPLcom/android/server/-$$Lambda$AlarmManagerService$ZVedZIeWdB3G6AGM0_-9P_GEO24;->test(Ljava/lang/Object;)Z
HSPLcom/android/server/AlarmManagerService$Alarm;->matches(Landroid/app/PendingIntent;Landroid/app/IAlarmListener;)Z
HSPLcom/android/server/AlarmManagerService$AppStandbyTracker;->onAppIdleStateChanged(Ljava/lang/String;IZII)V
HSPLcom/android/server/AlarmManagerService$Batch;->remove(Ljava/util/function/Predicate;)Z
HSPLcom/android/server/AlarmManagerService$BatchTimeOrder;->compare(Lcom/android/server/AlarmManagerService$Batch;Lcom/android/server/AlarmManagerService$Batch;)I
HSPLcom/android/server/AlarmManagerService$BatchTimeOrder;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
HSPLcom/android/server/AlarmManagerService;->attemptCoalesceLocked(JJ)I
HSPLcom/android/server/AlarmManagerService;->rebatchAllAlarmsLocked(Z)V
HSPLcom/android/server/AlarmManagerService;->removeLocked(Landroid/app/PendingIntent;Landroid/app/IAlarmListener;)V
HSPLcom/android/server/AppStateTracker$StandbyTracker;->onAppIdleStateChanged(Ljava/lang/String;IZII)V
HSPLcom/android/server/AppStateTracker;->isUidActive(I)Z
HSPLcom/android/server/BinderCallsStatsService$AuthorizedWorkSourceProvider;->getCallingUid()I
HSPLcom/android/server/BinderCallsStatsService$AuthorizedWorkSourceProvider;->resolveWorkSourceUid(I)I
HSPLcom/android/server/ConnectivityService$5;->onUidRulesChanged(II)V
HSPLcom/android/server/ConnectivityService$InternalHandler;->handleMessage(Landroid/os/Message;)V
HSPLcom/android/server/ConnectivityService;->getNetworkAgentInfoForNetwork(Landroid/net/Network;)Lcom/android/server/connectivity/NetworkAgentInfo;
HSPLcom/android/server/ConnectivityService;->getNetworkInfoForUid(Landroid/net/Network;IZ)Landroid/net/NetworkInfo;
HSPLcom/android/server/ConnectivityService;->handleUidRulesChanged(II)V
HSPLcom/android/server/DeviceIdleController$BinderService;->isPowerSaveWhitelistExceptIdleApp(Ljava/lang/String;)Z
HSPLcom/android/server/DeviceIdleController;->isPowerSaveWhitelistExceptIdleAppInternal(Ljava/lang/String;)Z
HSPLcom/android/server/DropBoxManagerService$EntryFile;-><init>(Ljava/io/File;I)V
HSPLcom/android/server/DropBoxManagerService$EntryFile;->compareTo(Lcom/android/server/DropBoxManagerService$EntryFile;)I
HSPLcom/android/server/DropBoxManagerService$EntryFile;->compareTo(Ljava/lang/Object;)I
HSPLcom/android/server/DropBoxManagerService$FileList;->compareTo(Lcom/android/server/DropBoxManagerService$FileList;)I
HSPLcom/android/server/DropBoxManagerService$FileList;->compareTo(Ljava/lang/Object;)I
HSPLcom/android/server/DropBoxManagerService;->enrollEntry(Lcom/android/server/DropBoxManagerService$EntryFile;)V
HSPLcom/android/server/DropBoxManagerService;->init()V
HSPLcom/android/server/IntentResolver;->addFilter(Landroid/content/IntentFilter;)V
HSPLcom/android/server/IntentResolver;->addFilter(Landroid/util/ArrayMap;Ljava/lang/String;Landroid/content/IntentFilter;)V
HSPLcom/android/server/IntentResolver;->buildResolveList(Landroid/content/Intent;Landroid/util/FastImmutableArraySet;ZZLjava/lang/String;Ljava/lang/String;[Landroid/content/IntentFilter;Ljava/util/List;I)V
HSPLcom/android/server/IntentResolver;->collectFilters([Landroid/content/IntentFilter;Landroid/content/IntentFilter;)Ljava/util/ArrayList;
HSPLcom/android/server/IntentResolver;->filterEquals(Landroid/content/IntentFilter;Landroid/content/IntentFilter;)Z
HSPLcom/android/server/IntentResolver;->filterResults(Ljava/util/List;)V
HSPLcom/android/server/IntentResolver;->findFilters(Landroid/content/IntentFilter;)Ljava/util/ArrayList;
HSPLcom/android/server/IntentResolver;->queryIntent(Landroid/content/Intent;Ljava/lang/String;ZI)Ljava/util/List;
HSPLcom/android/server/IntentResolver;->queryIntentFromList(Landroid/content/Intent;Ljava/lang/String;ZLjava/util/ArrayList;I)Ljava/util/List;
HSPLcom/android/server/IntentResolver;->register_mime_types(Landroid/content/IntentFilter;Ljava/lang/String;)I
HSPLcom/android/server/LockGuard;->guard(I)V
HSPLcom/android/server/NetworkManagementService$LocalService;->isNetworkRestrictedForUid(I)Z
HSPLcom/android/server/NetworkManagementService;->getFirewallChainState(I)Z
HSPLcom/android/server/NetworkManagementService;->getUidFirewallRulesLR(I)Landroid/util/SparseIntArray;
HSPLcom/android/server/NetworkManagementService;->isNetworkRestrictedInternal(I)Z
HSPLcom/android/server/NetworkManagementService;->setFirewallUidRules(I[I[I)V
HSPLcom/android/server/NetworkManagementService;->updateFirewallUidRuleLocked(III)Z
HSPLcom/android/server/NetworkScoreService;->getActiveScorerPackage()Ljava/lang/String;
HSPLcom/android/server/PersistentDataBlockService;->computeDigestLocked([B)[B
HSPLcom/android/server/PinnerService$PinRangeSourceStream;->read(Lcom/android/server/PinnerService$PinRange;)Z
HSPLcom/android/server/PinnerService;->pinFileRanges(Ljava/lang/String;ILcom/android/server/PinnerService$PinRangeSource;)Lcom/android/server/PinnerService$PinnedFile;
HSPLcom/android/server/StorageManagerService$StorageManagerInternalImpl;->prepareSandboxForApp(Ljava/lang/String;ILjava/lang/String;I)V
HSPLcom/android/server/StorageManagerService;->isUserKeyUnlocked(I)Z
HSPLcom/android/server/SystemServiceManager;->startBootPhase(I)V
HSPLcom/android/server/SystemServiceManager;->warnIfTooLong(JLcom/android/server/SystemService;Ljava/lang/String;)V
HSPLcom/android/server/TelephonyRegistry;->add(Landroid/os/IBinder;)Lcom/android/server/TelephonyRegistry$Record;
HSPLcom/android/server/ThreadPriorityBooster;->boost()V
HSPLcom/android/server/ThreadPriorityBooster;->reset()V
HSPLcom/android/server/accounts/AccountManagerService;->getUidsOfInstalledOrUpdatedPackagesAsUser(I)Landroid/util/SparseBooleanArray;
HSPLcom/android/server/am/-$$Lambda$ActivityManagerService$XMDHDkKdzWb8nQlDZRKevGp6Oa8;->needed(Lcom/android/internal/os/ProcessCpuTracker$Stats;)Z
HSPLcom/android/server/am/ActiveUids;->valueAt(I)Lcom/android/server/am/UidRecord;
HSPLcom/android/server/am/ActivityManagerService$18;->run()V
HSPLcom/android/server/am/ActivityManagerService$21;->compare(Lcom/android/server/am/ProcessMemInfo;Lcom/android/server/am/ProcessMemInfo;)I
HSPLcom/android/server/am/ActivityManagerService$21;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
HSPLcom/android/server/am/ActivityManagerService$2;->allowFilterResult(Lcom/android/server/am/BroadcastFilter;Ljava/util/List;)Z
HSPLcom/android/server/am/ActivityManagerService$2;->newArray(I)[Landroid/content/IntentFilter;
HSPLcom/android/server/am/ActivityManagerService$2;->newArray(I)[Lcom/android/server/am/BroadcastFilter;
HSPLcom/android/server/am/ActivityManagerService$Injector;->isNetworkRestrictedForUid(I)Z
HSPLcom/android/server/am/ActivityManagerService$LocalService;->checkContentProviderAccess(Ljava/lang/String;I)Ljava/lang/String;
HSPLcom/android/server/am/ActivityManagerService;->appendBasicMemEntry(Ljava/lang/StringBuilder;IIJJLjava/lang/String;)V
HSPLcom/android/server/am/ActivityManagerService;->boostPriorityForLockedSection()V
HSPLcom/android/server/am/ActivityManagerService;->checkContentProviderAccess(Ljava/lang/String;I)Ljava/lang/String;
HSPLcom/android/server/am/ActivityManagerService;->checkContentProviderPermissionLocked(Landroid/content/pm/ProviderInfo;Lcom/android/server/am/ProcessRecord;IZ)Ljava/lang/String;
HSPLcom/android/server/am/ActivityManagerService;->checkPermission(Ljava/lang/String;II)I
HSPLcom/android/server/am/ActivityManagerService;->dispatchUidsChanged()V
HSPLcom/android/server/am/ActivityManagerService;->dispatchUidsChangedForObserver(Landroid/app/IUidObserver;Lcom/android/server/am/ActivityManagerService$UidObserverRegistration;I)V
HSPLcom/android/server/am/ActivityManagerService;->enforceNotIsolatedCaller(Ljava/lang/String;)V
HSPLcom/android/server/am/ActivityManagerService;->ensureAllowedAssociations()V
HSPLcom/android/server/am/ActivityManagerService;->getPackageManagerInternalLocked()Landroid/content/pm/PackageManagerInternal;
HSPLcom/android/server/am/ActivityManagerService;->getRecordForAppLocked(Landroid/app/IApplicationThread;)Lcom/android/server/am/ProcessRecord;
HSPLcom/android/server/am/ActivityManagerService;->handleIncomingUser(IIIZZLjava/lang/String;Ljava/lang/String;)I
HSPLcom/android/server/am/ActivityManagerService;->incrementProcStateSeqAndNotifyAppsLocked()V
HSPLcom/android/server/am/ActivityManagerService;->isInstantApp(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;I)Z
HSPLcom/android/server/am/ActivityManagerService;->isReceivingBroadcastLocked(Lcom/android/server/am/ProcessRecord;Landroid/util/ArraySet;)Z
HSPLcom/android/server/am/ActivityManagerService;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
HSPLcom/android/server/am/ActivityManagerService;->registerReceiver(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/IIntentReceiver;Landroid/content/IntentFilter;Ljava/lang/String;II)Landroid/content/Intent;
HSPLcom/android/server/am/ActivityManagerService;->reportMemUsage(Ljava/util/ArrayList;)V
HSPLcom/android/server/am/ActivityManagerService;->resetPriorityAfterLockedSection()V
HSPLcom/android/server/am/ActivityManagerService;->updateCpuStatsNow()V
HSPLcom/android/server/am/ActivityManagerService;->updateLowMemStateLocked(III)Z
HSPLcom/android/server/am/BroadcastFilter;-><init>(Landroid/content/IntentFilter;Lcom/android/server/am/ReceiverList;Ljava/lang/String;Ljava/lang/String;IIZZ)V
HSPLcom/android/server/am/BroadcastQueue;->processNextBroadcastLocked(ZZ)V
HSPLcom/android/server/am/OomAdjuster;->applyOomAdjLocked(Lcom/android/server/am/ProcessRecord;ZJJ)Z
HSPLcom/android/server/am/OomAdjuster;->computeOomAdjLocked(Lcom/android/server/am/ProcessRecord;ILcom/android/server/am/ProcessRecord;ZJZ)Z
HSPLcom/android/server/am/OomAdjuster;->updateOomAdjImpl()V
HSPLcom/android/server/am/OomAdjuster;->updateOomAdjLocked()V
HSPLcom/android/server/am/ProcessList;->buildOomTag(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIZ)Ljava/lang/String;
HSPLcom/android/server/am/ProcessList;->getLRURecordForAppLocked(Landroid/app/IApplicationThread;)Lcom/android/server/am/ProcessRecord;
HSPLcom/android/server/am/ProcessList;->makeOomAdjString(IZ)Ljava/lang/String;
HSPLcom/android/server/am/ProcessList;->makeProcStateString(I)Ljava/lang/String;
HSPLcom/android/server/am/ProcessRecord;->getCurProcState()I
HSPLcom/android/server/am/ProcessRecord;->getWindowProcessController()Lcom/android/server/wm/WindowProcessController;
HSPLcom/android/server/am/ProcessRecord;->hasForegroundServices()Z
HSPLcom/android/server/am/ProcessRecord;->setCurProcState(I)V
HSPLcom/android/server/am/ProcessRecord;->setCurRawAdj(I)V
HSPLcom/android/server/am/ProcessRecord;->setCurRawProcState(I)V
HSPLcom/android/server/am/ProcessRecord;->setCurrentSchedulingGroup(I)V
HSPLcom/android/server/am/ProcessRecord;->setHasForegroundActivities(Z)V
HSPLcom/android/server/am/ReceiverList;-><init>(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessRecord;IIILandroid/content/IIntentReceiver;)V
HSPLcom/android/server/am/ReceiverList;->containsFilter(Landroid/content/IntentFilter;)Z
HSPLcom/android/server/am/ReceiverList;->hashCode()I
HSPLcom/android/server/am/UidRecord;->reset()V
HSPLcom/android/server/am/UserController;->ensureNotSpecialUser(I)V
HSPLcom/android/server/am/UserController;->getCurrentUserId()I
HSPLcom/android/server/am/UserController;->getStartedUserState(I)Lcom/android/server/am/UserState;
HSPLcom/android/server/am/UserController;->handleIncomingUser(IIIZILjava/lang/String;Ljava/lang/String;)I
HSPLcom/android/server/am/UserController;->isUserRunning(II)Z
HSPLcom/android/server/am/UserController;->unsafeConvertIncomingUser(I)I
HSPLcom/android/server/appop/AppOpsService$AppOpsManagerInternalImpl;->setAllPkgModesToDefault(II)V
HSPLcom/android/server/appop/AppOpsService$AppOpsManagerInternalImpl;->setUidMode(III)V
HSPLcom/android/server/appop/AppOpsService$Op;-><init>(Lcom/android/server/appop/AppOpsService$UidState;Ljava/lang/String;I)V
HSPLcom/android/server/appop/AppOpsService$UidState;->evalForegroundOps(Landroid/util/SparseArray;)V
HSPLcom/android/server/appop/AppOpsService$UidState;->evalForegroundWatchers(ILandroid/util/SparseArray;Landroid/util/SparseBooleanArray;)V
HSPLcom/android/server/appop/AppOpsService;->collectOps(Lcom/android/server/appop/AppOpsService$Ops;[I)Ljava/util/ArrayList;
HSPLcom/android/server/appop/AppOpsService;->enforceManageAppOpsModes(III)V
HSPLcom/android/server/appop/AppOpsService;->getOpsRawLocked(ILjava/lang/String;ZZ)Lcom/android/server/appop/AppOpsService$Ops;
HSPLcom/android/server/appop/AppOpsService;->getPackagesForOps([I)Ljava/util/List;
HSPLcom/android/server/appop/AppOpsService;->getPackagesForUid(I)[Ljava/lang/String;
HSPLcom/android/server/appop/AppOpsService;->getUidStateLocked(IZ)Lcom/android/server/appop/AppOpsService$UidState;
HSPLcom/android/server/appop/AppOpsService;->notifyWatchersOfChange(II)V
HSPLcom/android/server/appop/AppOpsService;->readPackage(Lorg/xmlpull/v1/XmlPullParser;)V
HSPLcom/android/server/appop/AppOpsService;->readState()V
HSPLcom/android/server/appop/AppOpsService;->readUid(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)V
HSPLcom/android/server/appop/AppOpsService;->setAllPkgModesToDefault(II)V
HSPLcom/android/server/appop/AppOpsService;->setUidMode(III)V
HSPLcom/android/server/appop/AppOpsService;->setUserRestrictions(Landroid/os/Bundle;Landroid/os/IBinder;I)V
HSPLcom/android/server/appop/AppOpsService;->startWatchingModeWithFlags(ILjava/lang/String;ILcom/android/internal/app/IAppOpsCallback;)V
HSPLcom/android/server/appop/AppOpsService;->systemReady()V
HSPLcom/android/server/appop/AppOpsService;->verifyIncomingUid(I)V
HSPLcom/android/server/appwidget/AppWidgetServiceImpl;->isBoundWidgetPackage(Ljava/lang/String;I)Z
HSPLcom/android/server/audio/AudioService$VolumeStreamState;->getMaxIndex()I
HSPLcom/android/server/audio/AudioService$VolumeStreamState;->getSettingNameForDevice(I)Ljava/lang/String;
HSPLcom/android/server/audio/AudioService$VolumeStreamState;->readSettings()V
HSPLcom/android/server/audio/AudioService$VolumeStreamState;->setIndex(IILjava/lang/String;)Z
HSPLcom/android/server/connectivity/PermissionMonitor;->hasPermission(Landroid/content/pm/PackageInfo;Ljava/lang/String;)Z
HSPLcom/android/server/connectivity/PermissionMonitor;->hasRestrictedNetworkPermission(Landroid/content/pm/PackageInfo;)Z
HSPLcom/android/server/connectivity/PermissionMonitor;->startMonitoring()V
HSPLcom/android/server/connectivity/PermissionMonitor;->update(Ljava/util/Set;Ljava/util/Map;Z)V
HSPLcom/android/server/content/ContentService$ObserverNode$ObserverEntry;-><init>(Lcom/android/server/content/ContentService$ObserverNode;Landroid/database/IContentObserver;ZLjava/lang/Object;III)V
HSPLcom/android/server/content/ContentService$ObserverNode;->addObserverLocked(Landroid/net/Uri;ILandroid/database/IContentObserver;ZLjava/lang/Object;III)V
HSPLcom/android/server/content/ContentService$ObserverNode;->collectObserversLocked(Landroid/net/Uri;ILandroid/database/IContentObserver;ZIILjava/util/ArrayList;)V
HSPLcom/android/server/content/ContentService$ObserverNode;->removeObserverLocked(Landroid/database/IContentObserver;)Z
HSPLcom/android/server/content/ContentService;->handleIncomingUser(Landroid/net/Uri;IIIZI)I
HSPLcom/android/server/content/ContentService;->registerContentObserver(Landroid/net/Uri;ZLandroid/database/IContentObserver;II)V
HSPLcom/android/server/content/SyncLogger$RotatingFileLogger;->logInner(J[Ljava/lang/Object;)V
HSPLcom/android/server/content/SyncStorageEngine;->readAccountInfoLocked()V
HSPLcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;->readAttributeValues(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;Ljava/util/Collection;)V
HSPLcom/android/server/display/BrightnessMappingStrategy$PhysicalMappingStrategy;-><init>(Landroid/hardware/display/BrightnessConfiguration;[F[IF)V
HSPLcom/android/server/display/BrightnessMappingStrategy;->create(Landroid/content/res/Resources;)Lcom/android/server/display/BrightnessMappingStrategy;
HSPLcom/android/server/display/BrightnessMappingStrategy;->normalizeAbsoluteBrightness(I)F
HSPLcom/android/server/display/BrightnessTracker;->readEventsLocked(Ljava/io/InputStream;)V
HSPLcom/android/server/display/DisplayManagerService$BinderService;->getDisplayInfo(I)Landroid/view/DisplayInfo;
HSPLcom/android/server/display/DisplayManagerService;->getDisplayInfoInternal(II)Landroid/view/DisplayInfo;
HSPLcom/android/server/display/LogicalDisplay;->getDisplayInfoLocked()Landroid/view/DisplayInfo;
HSPLcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$InputMethodAndSubtypeList;->getSortedInputMethodAndSubtypeList(ZZ)Ljava/util/List;
HSPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->getEnabledInputMethodSubtypeListLocked(Landroid/view/inputmethod/InputMethodInfo;)Ljava/util/List;
HSPLcom/android/server/inputmethod/InputMethodUtils;->getImplicitlyApplicableSubtypesLockedImpl(Landroid/content/res/Resources;Landroid/view/inputmethod/InputMethodInfo;)Ljava/util/ArrayList;
HSPLcom/android/server/job/-$$Lambda$JobSchedulerService$Lfddr1PhKRLtm92W7niRGMWO69M;->accept(Ljava/lang/Object;)V
HSPLcom/android/server/job/-$$Lambda$JobStore$JobSet$D9839QVHHu4X-hnxouyIMkP5NWA;->test(Ljava/lang/Object;)Z
HSPLcom/android/server/job/-$$Lambda$JobStore$JobSet$id1Y3Yh8Y9sEb-njlNCUNay6U9k;->test(Ljava/lang/Object;)Z
HSPLcom/android/server/job/JobConcurrencyManager;->assignJobsToContextsInternalLocked()V
HSPLcom/android/server/job/JobSchedulerService$MaybeReadyJobQueueFunctor;->accept(Lcom/android/server/job/controllers/JobStatus;)V
HSPLcom/android/server/job/JobSchedulerService$MaybeReadyJobQueueFunctor;->accept(Ljava/lang/Object;)V
HSPLcom/android/server/job/JobSchedulerService$StandbyTracker;->onAppIdleStateChanged(Ljava/lang/String;IZII)V
HSPLcom/android/server/job/JobSchedulerService;->isReadyToBeExecutedLocked(Lcom/android/server/job/controllers/JobStatus;)Z
HSPLcom/android/server/job/JobSchedulerService;->lambda$onBootPhase$2$JobSchedulerService(Lcom/android/server/job/controllers/JobStatus;)V
HSPLcom/android/server/job/JobSchedulerService;->reportActiveLocked()V
HSPLcom/android/server/job/JobStore$JobSet;->countJobsForUid(I)I
HSPLcom/android/server/job/JobStore$JobSet;->forEachJob(Ljava/util/function/Predicate;Ljava/util/function/Consumer;)V
HSPLcom/android/server/job/JobStore$JobSet;->get(II)Lcom/android/server/job/controllers/JobStatus;
HSPLcom/android/server/job/JobStore$JobSet;->removeAll(Ljava/util/function/Predicate;)V
HSPLcom/android/server/job/JobStore$ReadJobMapFromDiskRunnable;->readJobMapImpl(Ljava/io/FileInputStream;Z)Ljava/util/List;
HSPLcom/android/server/job/JobStore$ReadJobMapFromDiskRunnable;->restoreJobFromXml(ZLorg/xmlpull/v1/XmlPullParser;)Lcom/android/server/job/controllers/JobStatus;
HSPLcom/android/server/job/controllers/-$$Lambda$QuotaController$StandbyTracker$UNCXPiY4xGPFhTnC-LuVzvqiAl4;->run()V
HSPLcom/android/server/job/controllers/ConnectivityController$2;->onUidRulesChanged(II)V
HSPLcom/android/server/job/controllers/ConnectivityController;->evaluateStateLocked(Lcom/android/server/job/controllers/JobStatus;)V
HSPLcom/android/server/job/controllers/ConnectivityController;->isSatisfied(Lcom/android/server/job/controllers/JobStatus;Landroid/net/Network;Landroid/net/NetworkCapabilities;Lcom/android/server/job/JobSchedulerService$Constants;)Z
HSPLcom/android/server/job/controllers/ConnectivityController;->updateConstraintsSatisfied(Lcom/android/server/job/controllers/JobStatus;Landroid/net/Network;Landroid/net/NetworkCapabilities;)Z
HSPLcom/android/server/job/controllers/ConnectivityController;->updateTrackedJobs(ILandroid/net/Network;)V
HSPLcom/android/server/job/controllers/ConnectivityController;->updateTrackedJobsLocked(Landroid/util/ArraySet;Landroid/net/Network;Landroid/util/SparseArray;)Z
HSPLcom/android/server/job/controllers/JobStatus;->getProtoConstraint(I)I
HSPLcom/android/server/job/controllers/JobStatus;->setConstraintSatisfied(IZ)Z
HSPLcom/android/server/job/controllers/JobStatus;->wouldBeReadyWithConstraint(I)Z
HSPLcom/android/server/job/controllers/QuotaController$StandbyTracker;->lambda$onAppIdleStateChanged$0$QuotaController$StandbyTracker(IILjava/lang/String;)V
HSPLcom/android/server/job/controllers/QuotaController$StandbyTracker;->lambda$onAppIdleStateChanged$0(Lcom/android/server/job/controllers/QuotaController$StandbyTracker;IILjava/lang/String;)V
HSPLcom/android/server/job/controllers/QuotaController$StandbyTracker;->onAppIdleStateChanged(Ljava/lang/String;IZII)V
HSPLcom/android/server/job/controllers/QuotaController$UserPackageMap;->get(ILjava/lang/String;)Ljava/lang/Object;
HSPLcom/android/server/job/controllers/QuotaController;->getExecutionStatsLocked(ILjava/lang/String;IZ)Lcom/android/server/job/controllers/QuotaController$ExecutionStats;
HSPLcom/android/server/job/controllers/QuotaController;->isUnderJobCountQuotaLocked(Lcom/android/server/job/controllers/QuotaController$ExecutionStats;I)Z
HSPLcom/android/server/job/controllers/QuotaController;->isWithinQuotaLocked(ILjava/lang/String;I)Z
HSPLcom/android/server/job/controllers/StateController;->evaluateStateLocked(Lcom/android/server/job/controllers/JobStatus;)V
HSPLcom/android/server/job/controllers/StateController;->wouldBeReadyWithConstraintLocked(Lcom/android/server/job/controllers/JobStatus;I)Z
HSPLcom/android/server/job/controllers/TimeController;->checkExpiredDelaysAndResetAlarm()V
HSPLcom/android/server/job/controllers/TimeController;->evaluateStateLocked(Lcom/android/server/job/controllers/JobStatus;)V
HSPLcom/android/server/job/controllers/TimeController;->maybeStartTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;)V
HSPLcom/android/server/location/GnssConfiguration;->loadPropertiesFromCarrierConfig()V
HSPLcom/android/server/locksettings/LockSettingsService;->checkReadPermission(Ljava/lang/String;I)V
HSPLcom/android/server/locksettings/LockSettingsStorage$Cache$CacheKey;->hashCode()I
HSPLcom/android/server/net/NetworkIdentitySet;-><init>(Ljava/io/DataInputStream;)V
HSPLcom/android/server/net/NetworkPolicyLogger$Data;-><init>()V
HSPLcom/android/server/net/NetworkPolicyLogger;->appIdleStateChanged(IZ)V
HSPLcom/android/server/net/NetworkPolicyManagerService$17;->handleMessage(Landroid/os/Message;)Z
HSPLcom/android/server/net/NetworkPolicyManagerService$AppIdleStateChangeListener;->onAppIdleStateChanged(Ljava/lang/String;IZII)V
HSPLcom/android/server/net/NetworkPolicyManagerService;->dispatchUidRulesChanged(Landroid/net/INetworkPolicyListener;II)V
HSPLcom/android/server/net/NetworkPolicyManagerService;->hasInternetPermissions(I)Z
HSPLcom/android/server/net/NetworkPolicyManagerService;->isUidIdle(I)Z
HSPLcom/android/server/net/NetworkPolicyManagerService;->isWhitelistedFromPowerSaveUL(IZ)Z
HSPLcom/android/server/net/NetworkPolicyManagerService;->updateRuleForAppIdleUL(I)V
HSPLcom/android/server/net/NetworkPolicyManagerService;->updateRulesForAllAppsUL(I)V
HSPLcom/android/server/net/NetworkPolicyManagerService;->updateRulesForAppIdleUL()V
HSPLcom/android/server/net/NetworkPolicyManagerService;->updateRulesForDataUsageRestrictionsUL(I)V
HSPLcom/android/server/net/NetworkPolicyManagerService;->updateRulesForDataUsageRestrictionsULInner(I)V
HSPLcom/android/server/net/NetworkPolicyManagerService;->updateRulesForPowerRestrictionsUL(IIZ)I
HSPLcom/android/server/net/NetworkPolicyManagerService;->updateRulesForPowerRestrictionsULInner(IIZ)I
HSPLcom/android/server/net/NetworkStatsCollection$Key;-><init>(Lcom/android/server/net/NetworkIdentitySet;III)V
HSPLcom/android/server/net/NetworkStatsCollection$Key;->hashCode()I
HSPLcom/android/server/net/NetworkStatsCollection;->read(Ljava/io/DataInputStream;)V
HSPLcom/android/server/net/NetworkStatsCollection;->recordHistory(Lcom/android/server/net/NetworkStatsCollection$Key;Landroid/net/NetworkStatsHistory;)V
HSPLcom/android/server/net/watchlist/DigestUtils;->getSha256Hash(Ljava/io/File;)[B
HSPLcom/android/server/notification/PreferencesHelper;->getOrCreatePackagePreferences(Ljava/lang/String;IIIIZZ)Lcom/android/server/notification/PreferencesHelper$PackagePreferences;
HSPLcom/android/server/notification/PreferencesHelper;->isGroupBlocked(Ljava/lang/String;ILjava/lang/String;)Z
HSPLcom/android/server/notification/PreferencesHelper;->lockChannelsForOEM([Ljava/lang/String;)V
HSPLcom/android/server/notification/PreferencesHelper;->readXml(Lorg/xmlpull/v1/XmlPullParser;ZI)V
HSPLcom/android/server/notification/PreferencesHelper;->updateChannelsBypassingDnd(I)V
HSPLcom/android/server/notification/PreferencesHelper;->writeXml(Lorg/xmlpull/v1/XmlSerializer;ZI)V
HSPLcom/android/server/om/-$$Lambda$OverlayManagerSettings$bX7CTrJVR3B_eQmD43OOHtRIxgw;->test(Ljava/lang/Object;)Z
HSPLcom/android/server/om/-$$Lambda$OverlayManagerSettings$mq-CHAn1jQBVquxuOUv0eQANHIY;->test(Ljava/lang/Object;)Z
HSPLcom/android/server/om/OverlayManagerService;->updateOverlayPaths(ILjava/util/List;)V
HSPLcom/android/server/om/OverlayManagerServiceImpl;->getEnabledOverlayPackageNames(Ljava/lang/String;I)Ljava/util/List;
HSPLcom/android/server/om/OverlayManagerServiceImpl;->updateOverlaysForUser(I)Ljava/util/ArrayList;
HSPLcom/android/server/om/OverlayManagerSettings;->init(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;ZILjava/lang/String;)V
HSPLcom/android/server/om/OverlayManagerSettings;->select(Ljava/lang/String;I)I
HSPLcom/android/server/pm/-$$Lambda$ComponentResolver$PuHbZd5KEOMGjkH8xDOhOwfLtC0;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
HSPLcom/android/server/pm/-$$Lambda$ParallelPackageParser$FTtinPrp068lVeI7K6bC1tNE3iM;->run()V
HSPLcom/android/server/pm/CompilerStats$PackageStats;->setCompileTime(Ljava/lang/String;J)V
HSPLcom/android/server/pm/CompilerStats;->createPackageStats(Ljava/lang/String;)Lcom/android/server/pm/CompilerStats$PackageStats;
HSPLcom/android/server/pm/CompilerStats;->getOrCreatePackageStats(Ljava/lang/String;)Lcom/android/server/pm/CompilerStats$PackageStats;
HSPLcom/android/server/pm/CompilerStats;->read(Ljava/io/Reader;)Z
HSPLcom/android/server/pm/ComponentResolver$ActivityIntentResolver;->addActivity(Landroid/content/pm/PackageParser$Activity;Ljava/lang/String;Ljava/util/List;)V
HSPLcom/android/server/pm/ComponentResolver$ActivityIntentResolver;->allowFilterResult(Landroid/content/IntentFilter;Ljava/util/List;)Z
HSPLcom/android/server/pm/ComponentResolver$ActivityIntentResolver;->allowFilterResult(Landroid/content/pm/PackageParser$ActivityIntentInfo;Ljava/util/List;)Z
HSPLcom/android/server/pm/ComponentResolver$ActivityIntentResolver;->isFilterStopped(Landroid/content/IntentFilter;I)Z
HSPLcom/android/server/pm/ComponentResolver$ActivityIntentResolver;->isFilterStopped(Landroid/content/pm/PackageParser$ActivityIntentInfo;I)Z
HSPLcom/android/server/pm/ComponentResolver$ActivityIntentResolver;->isPackageForFilter(Ljava/lang/String;Landroid/content/IntentFilter;)Z
HSPLcom/android/server/pm/ComponentResolver$ActivityIntentResolver;->newArray(I)[Landroid/content/IntentFilter;
HSPLcom/android/server/pm/ComponentResolver$ActivityIntentResolver;->queryIntentForPackage(Landroid/content/Intent;Ljava/lang/String;ILjava/util/List;I)Ljava/util/List;
HSPLcom/android/server/pm/ComponentResolver$ProviderIntentResolver;->addProvider(Landroid/content/pm/PackageParser$Provider;)V
HSPLcom/android/server/pm/ComponentResolver$ServiceIntentResolver;->addService(Landroid/content/pm/PackageParser$Service;)V
HSPLcom/android/server/pm/ComponentResolver$ServiceIntentResolver;->allowFilterResult(Landroid/content/IntentFilter;Ljava/util/List;)Z
HSPLcom/android/server/pm/ComponentResolver$ServiceIntentResolver;->allowFilterResult(Landroid/content/pm/PackageParser$ServiceIntentInfo;Ljava/util/List;)Z
HSPLcom/android/server/pm/ComponentResolver$ServiceIntentResolver;->isPackageForFilter(Ljava/lang/String;Landroid/content/IntentFilter;)Z
HSPLcom/android/server/pm/ComponentResolver$ServiceIntentResolver;->newArray(I)[Landroid/content/IntentFilter;
HSPLcom/android/server/pm/ComponentResolver$ServiceIntentResolver;->queryIntentForPackage(Landroid/content/Intent;Ljava/lang/String;ILjava/util/List;I)Ljava/util/List;
HSPLcom/android/server/pm/ComponentResolver;->addActivitiesLocked(Landroid/content/pm/PackageParser$Package;Ljava/util/List;Z)V
HSPLcom/android/server/pm/ComponentResolver;->addAllComponents(Landroid/content/pm/PackageParser$Package;Z)V
HSPLcom/android/server/pm/ComponentResolver;->addProvidersLocked(Landroid/content/pm/PackageParser$Package;Z)V
HSPLcom/android/server/pm/ComponentResolver;->addReceiversLocked(Landroid/content/pm/PackageParser$Package;Z)V
HSPLcom/android/server/pm/ComponentResolver;->addServicesLocked(Landroid/content/pm/PackageParser$Package;Z)V
HSPLcom/android/server/pm/ComponentResolver;->adjustPriority(Ljava/util/List;Landroid/content/pm/PackageParser$ActivityIntentInfo;Ljava/lang/String;)V
HSPLcom/android/server/pm/ComponentResolver;->findMatchingActivity(Ljava/util/List;Landroid/content/pm/ActivityInfo;)Landroid/content/pm/PackageParser$Activity;
HSPLcom/android/server/pm/ComponentResolver;->getIntentListSubset(Ljava/util/List;Lcom/android/server/pm/ComponentResolver$IterGenerator;Ljava/util/Iterator;)V
HSPLcom/android/server/pm/ComponentResolver;->lambda$static$0(Landroid/content/pm/ResolveInfo;Landroid/content/pm/ResolveInfo;)I
HSPLcom/android/server/pm/ComponentResolver;->queryProvider(Ljava/lang/String;II)Landroid/content/pm/ProviderInfo;
HSPLcom/android/server/pm/ComponentResolver;->queryProviders(Ljava/lang/String;Ljava/lang/String;III)Ljava/util/List;
HSPLcom/android/server/pm/Installer;->checkBeforeRemote()Z
HSPLcom/android/server/pm/Installer;->createAppData(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)J
HSPLcom/android/server/pm/KeySetManagerService$PublicKeyHandle;->getKey()Ljava/security/PublicKey;
HSPLcom/android/server/pm/KeySetManagerService;->addRefCountsFromSavedPackagesLPw(Landroid/util/ArrayMap;)V
HSPLcom/android/server/pm/KeySetManagerService;->addScannedPackageLPw(Landroid/content/pm/PackageParser$Package;)V
HSPLcom/android/server/pm/KeySetManagerService;->addSigningKeySetToPackageLPw(Lcom/android/server/pm/PackageSetting;Landroid/util/ArraySet;)V
HSPLcom/android/server/pm/KeySetManagerService;->assertScannedPackageValid(Landroid/content/pm/PackageParser$Package;)V
HSPLcom/android/server/pm/KeySetManagerService;->getIdForPublicKeyLPr(Ljava/security/PublicKey;)J
HSPLcom/android/server/pm/KeySetManagerService;->getIdFromKeyIdsLPr(Ljava/util/Set;)J
HSPLcom/android/server/pm/KeySetManagerService;->getPublicKeysFromKeySetLPr(J)Landroid/util/ArraySet;
HSPLcom/android/server/pm/KeySetManagerService;->readKeySetListLPw(Lorg/xmlpull/v1/XmlPullParser;)V
HSPLcom/android/server/pm/KeySetManagerService;->readKeysLPw(Lorg/xmlpull/v1/XmlPullParser;)V
HSPLcom/android/server/pm/KeySetManagerService;->shouldCheckUpgradeKeySetLocked(Lcom/android/server/pm/PackageSettingBase;I)Z
HSPLcom/android/server/pm/KeySetManagerService;->writeKeySetsLPr(Lorg/xmlpull/v1/XmlSerializer;)V
HSPLcom/android/server/pm/PackageInstallerService;->isStageName(Ljava/lang/String;)Z
HSPLcom/android/server/pm/PackageKeySetData;-><init>()V
HSPLcom/android/server/pm/PackageKeySetData;->getAliases()Landroid/util/ArrayMap;
HSPLcom/android/server/pm/PackageKeySetData;->getProperSigningKeySet()J
HSPLcom/android/server/pm/PackageKeySetData;->isUsingUpgradeKeySets()Z
HSPLcom/android/server/pm/PackageKeySetData;->setProperSigningKeySet(J)V
HSPLcom/android/server/pm/PackageManagerService$1;->onPermissionUpdated([IZ)V
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->filterAppAccess(Landroid/content/pm/PackageParser$Package;II)Z
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getApplicationEnabledState(Ljava/lang/String;I)I
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getDisabledComponents(Ljava/lang/String;I)Landroid/util/ArraySet;
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getDisabledSystemPackage(Ljava/lang/String;)Landroid/content/pm/PackageParser$Package;
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getEnabledComponents(Ljava/lang/String;I)Landroid/util/ArraySet;
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getInstantAppPackageName(I)Ljava/lang/String;
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getKnownPackageName(II)Ljava/lang/String;
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getOverlayPackages(I)Ljava/util/List;
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getPackage(Ljava/lang/String;)Landroid/content/pm/PackageParser$Package;
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getPackageList(Landroid/content/pm/PackageManagerInternal$PackageListObserver;)Landroid/content/pm/PackageList;
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getTargetPackageNames(I)Ljava/util/List;
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->isEnabledAndMatches(Landroid/content/pm/ComponentInfo;II)Z
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->isLegacySystemApp(Landroid/content/pm/PackageParser$Package;)Z
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->isPackageEphemeral(ILjava/lang/String;)Z
HSPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->setEnabledOverlayPackages(ILjava/lang/String;Ljava/util/List;)Z
HSPLcom/android/server/pm/PackageManagerService$PackageParserCallback;->getOverlayApks(Ljava/lang/String;)[Ljava/lang/String;
HSPLcom/android/server/pm/PackageManagerService$PackageParserCallback;->getOverlayPaths(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
HSPLcom/android/server/pm/PackageManagerService$PackageParserCallback;->getStaticOverlayPackages(Ljava/util/Collection;Ljava/lang/String;)Ljava/util/List;
HSPLcom/android/server/pm/PackageManagerService$PackageParserCallback;->getStaticOverlayPaths(Ljava/util/List;Ljava/lang/String;)[Ljava/lang/String;
HSPLcom/android/server/pm/PackageManagerService$ParallelPackageParserCallback;->getStaticOverlayPaths(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
HSPLcom/android/server/pm/PackageManagerService$ReconcileRequest;-><init>(Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Lcom/android/server/pm/PackageManagerService$1;)V
HSPLcom/android/server/pm/PackageManagerService$ReconciledPackage;-><init>(Lcom/android/server/pm/PackageManagerService$InstallArgs;Lcom/android/server/pm/PackageSetting;Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;Lcom/android/server/pm/PackageManagerService$PrepareResult;Lcom/android/server/pm/PackageManagerService$ScanResult;Lcom/android/server/pm/PackageManagerService$DeletePackageAction;Ljava/util/List;Landroid/content/pm/PackageParser$SigningDetails;ZZLcom/android/server/pm/PackageManagerService$1;)V
HSPLcom/android/server/pm/PackageManagerService$ReconciledPackage;->hasDynamicSharedLibraries()Z
HSPLcom/android/server/pm/PackageManagerService$ScanRequest;-><init>(Landroid/content/pm/PackageParser$Package;Lcom/android/server/pm/SharedUserSetting;Landroid/content/pm/PackageParser$Package;Lcom/android/server/pm/PackageSetting;Lcom/android/server/pm/PackageSetting;Lcom/android/server/pm/PackageSetting;Ljava/lang/String;IIZLandroid/os/UserHandle;)V
HSPLcom/android/server/pm/PackageManagerService$ScanResult;-><init>(Lcom/android/server/pm/PackageManagerService$ScanRequest;ZLcom/android/server/pm/PackageSetting;Ljava/util/List;ZLandroid/content/pm/SharedLibraryInfo;Ljava/util/List;)V
HSPLcom/android/server/pm/PackageManagerService;-><init>(Landroid/content/Context;Lcom/android/server/pm/Installer;ZZ)V
HSPLcom/android/server/pm/PackageManagerService;->addForInitLI(Landroid/content/pm/PackageParser$Package;IIJLandroid/os/UserHandle;)Landroid/content/pm/PackageParser$Package;
HSPLcom/android/server/pm/PackageManagerService;->addPackageHoldingPermissions(Ljava/util/ArrayList;Lcom/android/server/pm/PackageSetting;[Ljava/lang/String;[ZII)V
HSPLcom/android/server/pm/PackageManagerService;->addSharedLibraryLPr(Landroid/content/pm/PackageParser$Package;Ljava/util/Set;Landroid/content/pm/SharedLibraryInfo;Landroid/content/pm/PackageParser$Package;)V
HSPLcom/android/server/pm/PackageManagerService;->adjustScanFlags(ILcom/android/server/pm/PackageSetting;Lcom/android/server/pm/PackageSetting;Landroid/os/UserHandle;Landroid/content/pm/PackageParser$Package;)I
HSPLcom/android/server/pm/PackageManagerService;->applyDefiningSharedLibraryUpdateLocked(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/SharedLibraryInfo;Ljava/util/function/BiConsumer;)V
HSPLcom/android/server/pm/PackageManagerService;->applyPolicy(Landroid/content/pm/PackageParser$Package;IILandroid/content/pm/PackageParser$Package;)V
HSPLcom/android/server/pm/PackageManagerService;->assertPackageIsValid(Landroid/content/pm/PackageParser$Package;II)V
HSPLcom/android/server/pm/PackageManagerService;->assertPackageKnownAndInstalled(Ljava/lang/String;Ljava/lang/String;I)V
HSPLcom/android/server/pm/PackageManagerService;->calculateBundledApkRoot(Ljava/lang/String;)Ljava/lang/String;
HSPLcom/android/server/pm/PackageManagerService;->checkUidPermission(Ljava/lang/String;I)I
HSPLcom/android/server/pm/PackageManagerService;->checkUidPermissionImpl(Ljava/lang/String;I)I
HSPLcom/android/server/pm/PackageManagerService;->collectAbsoluteCodePaths()Ljava/util/List;
HSPLcom/android/server/pm/PackageManagerService;->collectCertificatesLI(Lcom/android/server/pm/PackageSetting;Landroid/content/pm/PackageParser$Package;ZZ)V
HSPLcom/android/server/pm/PackageManagerService;->collectSharedLibraryInfos(Landroid/content/pm/PackageParser$Package;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)Ljava/util/ArrayList;
HSPLcom/android/server/pm/PackageManagerService;->collectSharedLibraryInfos(Ljava/util/List;[J[[Ljava/lang/String;Ljava/lang/String;ZILjava/util/ArrayList;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)Ljava/util/ArrayList;
HSPLcom/android/server/pm/PackageManagerService;->commitPackageSettings(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;Lcom/android/server/pm/PackageSetting;IZLcom/android/server/pm/PackageManagerService$ReconciledPackage;)V
HSPLcom/android/server/pm/PackageManagerService;->commitReconciledScanResultLocked(Lcom/android/server/pm/PackageManagerService$ReconciledPackage;)V
HSPLcom/android/server/pm/PackageManagerService;->deriveCodePathName(Ljava/lang/String;)Ljava/lang/String;
HSPLcom/android/server/pm/PackageManagerService;->derivePackageAbi(Landroid/content/pm/PackageParser$Package;Ljava/lang/String;Z)V
HSPLcom/android/server/pm/PackageManagerService;->executeSharedLibrariesUpdateLPr(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;Ljava/util/ArrayList;)V
HSPLcom/android/server/pm/PackageManagerService;->filterAppAccessLPr(Lcom/android/server/pm/PackageSetting;ILandroid/content/ComponentName;II)Z
HSPLcom/android/server/pm/PackageManagerService;->filterSharedLibPackageLPr(Lcom/android/server/pm/PackageSetting;III)Z
HSPLcom/android/server/pm/PackageManagerService;->forEachPackage(Ljava/util/function/Consumer;)V
HSPLcom/android/server/pm/PackageManagerService;->generatePackageInfo(Lcom/android/server/pm/PackageSetting;II)Landroid/content/pm/PackageInfo;
HSPLcom/android/server/pm/PackageManagerService;->getAllowedSharedLibInfos(Lcom/android/server/pm/PackageManagerService$ScanResult;Ljava/util/Map;)Ljava/util/List;
HSPLcom/android/server/pm/PackageManagerService;->getApplicationInfo(Ljava/lang/String;II)Landroid/content/pm/ApplicationInfo;
HSPLcom/android/server/pm/PackageManagerService;->getApplicationInfoInternal(Ljava/lang/String;III)Landroid/content/pm/ApplicationInfo;
HSPLcom/android/server/pm/PackageManagerService;->getInstalledApplicationsListInternal(III)Ljava/util/List;
HSPLcom/android/server/pm/PackageManagerService;->getInstalledPackages(II)Landroid/content/pm/ParceledListSlice;
HSPLcom/android/server/pm/PackageManagerService;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
HSPLcom/android/server/pm/PackageManagerService;->getInstantAppPackageName(I)Ljava/lang/String;
HSPLcom/android/server/pm/PackageManagerService;->getLatestSharedLibraVersionLPr(Landroid/content/pm/PackageParser$Package;)Landroid/content/pm/SharedLibraryInfo;
HSPLcom/android/server/pm/PackageManagerService;->getOriginalPackageLocked(Landroid/content/pm/PackageParser$Package;Ljava/lang/String;)Lcom/android/server/pm/PackageSetting;
HSPLcom/android/server/pm/PackageManagerService;->getPackageUid(Ljava/lang/String;II)I
HSPLcom/android/server/pm/PackageManagerService;->getPackagesForUid(I)[Ljava/lang/String;
HSPLcom/android/server/pm/PackageManagerService;->getPackagesHoldingPermissions([Ljava/lang/String;II)Landroid/content/pm/ParceledListSlice;
HSPLcom/android/server/pm/PackageManagerService;->getPersistentApplicationsInternal(I)Ljava/util/List;
HSPLcom/android/server/pm/PackageManagerService;->getRealPackageName(Landroid/content/pm/PackageParser$Package;Ljava/lang/String;)Ljava/lang/String;
HSPLcom/android/server/pm/PackageManagerService;->getSettingsVersionForPackage(Landroid/content/pm/PackageParser$Package;)Lcom/android/server/pm/Settings$VersionInfo;
HSPLcom/android/server/pm/PackageManagerService;->getSharedLibLatestVersionSetting(Lcom/android/server/pm/PackageManagerService$ScanResult;)Lcom/android/server/pm/PackageSetting;
HSPLcom/android/server/pm/PackageManagerService;->getSharedLibraryInfo(Ljava/lang/String;JLjava/util/Map;Ljava/util/Map;)Landroid/content/pm/SharedLibraryInfo;
HSPLcom/android/server/pm/PackageManagerService;->isCompatSignatureUpdateNeeded(Lcom/android/server/pm/Settings$VersionInfo;)Z
HSPLcom/android/server/pm/PackageManagerService;->isExternal(Lcom/android/server/pm/PackageSetting;)Z
HSPLcom/android/server/pm/PackageManagerService;->isPackageRenamed(Landroid/content/pm/PackageParser$Package;Ljava/lang/String;)Z
HSPLcom/android/server/pm/PackageManagerService;->isRecentsAccessingChildProfiles(II)Z
HSPLcom/android/server/pm/PackageManagerService;->isRecoverSignatureUpdateNeeded(Lcom/android/server/pm/Settings$VersionInfo;)Z
HSPLcom/android/server/pm/PackageManagerService;->isSystemApp(Landroid/content/pm/PackageParser$Package;)Z
HSPLcom/android/server/pm/PackageManagerService;->isUpgrade()Z
HSPLcom/android/server/pm/PackageManagerService;->lambda$new$0$PackageManagerService(Ljava/util/List;I)V
HSPLcom/android/server/pm/PackageManagerService;->lambda$new$0(Lcom/android/server/pm/PackageManagerService;Ljava/util/List;I)V
HSPLcom/android/server/pm/PackageManagerService;->maybeClearProfilesForUpgradesLI(Lcom/android/server/pm/PackageSetting;Landroid/content/pm/PackageParser$Package;)V
HSPLcom/android/server/pm/PackageManagerService;->maybeMigrateAppDataLIF(Landroid/content/pm/PackageParser$Package;I)Z
HSPLcom/android/server/pm/PackageManagerService;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
HSPLcom/android/server/pm/PackageManagerService;->prepareAppDataContentsLeafLIF(Landroid/content/pm/PackageParser$Package;II)V
HSPLcom/android/server/pm/PackageManagerService;->prepareAppDataLIF(Landroid/content/pm/PackageParser$Package;II)V
HSPLcom/android/server/pm/PackageManagerService;->prepareAppDataLeafLIF(Landroid/content/pm/PackageParser$Package;II)V
HSPLcom/android/server/pm/PackageManagerService;->prepareScanResultLocked(Lcom/android/server/pm/PackageManagerService$ScanResult;)V
HSPLcom/android/server/pm/PackageManagerService;->reconcileApps(Ljava/lang/String;)V
HSPLcom/android/server/pm/PackageManagerService;->reconcileAppsDataLI(Ljava/lang/String;IIZZ)Ljava/util/List;
HSPLcom/android/server/pm/PackageManagerService;->reconcilePackagesLocked(Lcom/android/server/pm/PackageManagerService$ReconcileRequest;Lcom/android/server/pm/KeySetManagerService;)Ljava/util/Map;
HSPLcom/android/server/pm/PackageManagerService;->resolveContentProvider(Ljava/lang/String;II)Landroid/content/pm/ProviderInfo;
HSPLcom/android/server/pm/PackageManagerService;->resolveContentProviderInternal(Ljava/lang/String;II)Landroid/content/pm/ProviderInfo;
HSPLcom/android/server/pm/PackageManagerService;->resolveInternalPackageNameLPr(Ljava/lang/String;J)Ljava/lang/String;
HSPLcom/android/server/pm/PackageManagerService;->scanDirLI(Ljava/io/File;IIJ)V
HSPLcom/android/server/pm/PackageManagerService;->scanPackageChildLI(Landroid/content/pm/PackageParser$Package;IIJLandroid/os/UserHandle;)Landroid/content/pm/PackageParser$Package;
HSPLcom/android/server/pm/PackageManagerService;->scanPackageNewLI(Landroid/content/pm/PackageParser$Package;IIJLandroid/os/UserHandle;)Lcom/android/server/pm/PackageManagerService$ScanResult;
HSPLcom/android/server/pm/PackageManagerService;->scanPackageOnlyLI(Lcom/android/server/pm/PackageManagerService$ScanRequest;ZJ)Lcom/android/server/pm/PackageManagerService$ScanResult;
HSPLcom/android/server/pm/PackageManagerService;->setInstantAppForUser(Lcom/android/server/pm/PackageSetting;IZZ)V
HSPLcom/android/server/pm/PackageManagerService;->setNativeLibraryPaths(Landroid/content/pm/PackageParser$Package;Ljava/io/File;)V
HSPLcom/android/server/pm/PackageManagerService;->unsuspendForSuspendingPackages(Ljava/util/function/Predicate;I)V
HSPLcom/android/server/pm/PackageManagerService;->updateAllSharedLibrariesLPw(Landroid/content/pm/PackageParser$Package;)Ljava/util/ArrayList;
HSPLcom/android/server/pm/PackageManagerService;->updateFlagsForPackage(IILjava/lang/Object;)I
HSPLcom/android/server/pm/PackageManagerService;->updateFlagsForResolve(IILandroid/content/Intent;IZ)I
HSPLcom/android/server/pm/PackageManagerService;->updateFlagsForResolve(IILandroid/content/Intent;IZZ)I
HSPLcom/android/server/pm/PackageManagerServiceUtils;->compareSignatures([Landroid/content/pm/Signature;[Landroid/content/pm/Signature;)I
HSPLcom/android/server/pm/PackageManagerServiceUtils;->deriveAbiOverride(Ljava/lang/String;Lcom/android/server/pm/PackageSetting;)Ljava/lang/String;
HSPLcom/android/server/pm/PackageManagerServiceUtils;->getCompressedFiles(Ljava/lang/String;)[Ljava/io/File;
HSPLcom/android/server/pm/PackageManagerServiceUtils;->getLastModifiedTime(Landroid/content/pm/PackageParser$Package;)J
HSPLcom/android/server/pm/PackageManagerServiceUtils;->isApkVerificationForced(Lcom/android/server/pm/PackageSetting;)Z
HSPLcom/android/server/pm/PackageManagerServiceUtils;->verifySignatures(Lcom/android/server/pm/PackageSetting;Lcom/android/server/pm/PackageSetting;Landroid/content/pm/PackageParser$SigningDetails;ZZ)Z
HSPLcom/android/server/pm/PackageSetting;-><init>(Lcom/android/server/pm/PackageSetting;)V
HSPLcom/android/server/pm/PackageSetting;-><init>(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;Ljava/io/File;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JIILjava/lang/String;Ljava/util/List;I[Ljava/lang/String;[J)V
HSPLcom/android/server/pm/PackageSetting;->getPermissionsState()Lcom/android/server/pm/permission/PermissionsState;
HSPLcom/android/server/pm/PackageSettingBase;-><init>(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;Ljava/io/File;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JIILjava/lang/String;Ljava/util/List;[Ljava/lang/String;[J)V
HSPLcom/android/server/pm/PackageSettingBase;->doCopy(Lcom/android/server/pm/PackageSettingBase;)V
HSPLcom/android/server/pm/PackageSettingBase;->getNotInstalledUserIds()[I
HSPLcom/android/server/pm/PackageSettingBase;->getSigningDetails()Landroid/content/pm/PackageParser$SigningDetails;
HSPLcom/android/server/pm/PackageSettingBase;->init(Ljava/io/File;Ljava/io/File;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)V
HSPLcom/android/server/pm/PackageSettingBase;->modifyUserState(I)Landroid/content/pm/PackageUserState;
HSPLcom/android/server/pm/PackageSettingBase;->readUserState(I)Landroid/content/pm/PackageUserState;
HSPLcom/android/server/pm/PackageSettingBase;->setEnabled(IILjava/lang/String;)V
HSPLcom/android/server/pm/PackageSettingBase;->setUserState(IJIZZZZIZLjava/lang/String;Landroid/content/pm/SuspendDialogInfo;Landroid/os/PersistableBundle;Landroid/os/PersistableBundle;ZZLjava/lang/String;Landroid/util/ArraySet;Landroid/util/ArraySet;IIILjava/lang/String;)V
HSPLcom/android/server/pm/PackageSettingBase;->updateFrom(Lcom/android/server/pm/PackageSettingBase;)Lcom/android/server/pm/PackageSettingBase;
HSPLcom/android/server/pm/PackageSignatures;->readCertsListXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/util/ArrayList;Ljava/util/ArrayList;IZLandroid/content/pm/PackageParser$SigningDetails$Builder;)I
HSPLcom/android/server/pm/PackageSignatures;->readXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/util/ArrayList;)V
HSPLcom/android/server/pm/PackageSignatures;->writeCertsListXml(Lorg/xmlpull/v1/XmlSerializer;Ljava/util/ArrayList;[Landroid/content/pm/Signature;Z)V
HSPLcom/android/server/pm/PackageSignatures;->writeXml(Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/util/ArrayList;)V
HSPLcom/android/server/pm/PackageUsage;->parseAsLong(Ljava/lang/String;)J
HSPLcom/android/server/pm/PackageUsage;->readToken(Ljava/io/InputStream;Ljava/lang/StringBuffer;C)Ljava/lang/String;
HSPLcom/android/server/pm/PackageUsage;->readVersion1LP(Ljava/util/Map;Ljava/io/InputStream;Ljava/lang/StringBuffer;)V
HSPLcom/android/server/pm/ParallelPackageParser;->lambda$submit$0$ParallelPackageParser(Ljava/io/File;I)V
HSPLcom/android/server/pm/ParallelPackageParser;->lambda$submit$0(Lcom/android/server/pm/ParallelPackageParser;Ljava/io/File;I)V
HSPLcom/android/server/pm/ParallelPackageParser;->parsePackage(Landroid/content/pm/PackageParser;Ljava/io/File;I)Landroid/content/pm/PackageParser$Package;
HSPLcom/android/server/pm/ParallelPackageParser;->take()Lcom/android/server/pm/ParallelPackageParser$ParseResult;
HSPLcom/android/server/pm/Policy;->getMatchedSeInfo(Landroid/content/pm/PackageParser$Package;)Ljava/lang/String;
HSPLcom/android/server/pm/PreferredComponent;-><init>(Lcom/android/server/pm/PreferredComponent$Callbacks;Lorg/xmlpull/v1/XmlPullParser;)V
HSPLcom/android/server/pm/SELinuxMMAC;->getSeInfo(Landroid/content/pm/PackageParser$Package;ZII)Ljava/lang/String;
HSPLcom/android/server/pm/SettingBase;-><init>(II)V
HSPLcom/android/server/pm/SettingBase;->setFlags(I)V
HSPLcom/android/server/pm/SettingBase;->setPrivateFlags(I)V
HSPLcom/android/server/pm/Settings$RuntimePermissionPersistence;->parsePermissionsLPr(Lorg/xmlpull/v1/XmlPullParser;Lcom/android/server/pm/permission/PermissionsState;I)V
HSPLcom/android/server/pm/Settings$RuntimePermissionPersistence;->parseRuntimePermissionsLPr(Lorg/xmlpull/v1/XmlPullParser;I)V
HSPLcom/android/server/pm/Settings$RuntimePermissionPersistence;->writePermissions(Lorg/xmlpull/v1/XmlSerializer;Ljava/util/List;)V
HSPLcom/android/server/pm/Settings$RuntimePermissionPersistence;->writePermissionsForUserAsyncLPr(I)V
HSPLcom/android/server/pm/Settings$RuntimePermissionPersistence;->writePermissionsSync(I)V
HSPLcom/android/server/pm/Settings;->acquireAndRegisterNewAppIdLPw(Lcom/android/server/pm/SettingBase;)I
HSPLcom/android/server/pm/Settings;->addPackageLPw(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;Ljava/io/File;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IJIILjava/lang/String;Ljava/util/List;[Ljava/lang/String;[J)Lcom/android/server/pm/PackageSetting;
HSPLcom/android/server/pm/Settings;->addPackageSettingLPw(Lcom/android/server/pm/PackageSetting;Lcom/android/server/pm/SharedUserSetting;)V
HSPLcom/android/server/pm/Settings;->getAllUsers(Lcom/android/server/pm/UserManagerService;)Ljava/util/List;
HSPLcom/android/server/pm/Settings;->getDisabledSystemPkgLPr(Ljava/lang/String;)Lcom/android/server/pm/PackageSetting;
HSPLcom/android/server/pm/Settings;->getInstallerPackageNameLPr(Ljava/lang/String;)Ljava/lang/String;
HSPLcom/android/server/pm/Settings;->getPackageLPr(Ljava/lang/String;)Lcom/android/server/pm/PackageSetting;
HSPLcom/android/server/pm/Settings;->getRenamedPackageLPr(Ljava/lang/String;)Ljava/lang/String;
HSPLcom/android/server/pm/Settings;->getSettingLPr(I)Lcom/android/server/pm/SettingBase;
HSPLcom/android/server/pm/Settings;->getVolumePackagesLPr(Ljava/lang/String;)Ljava/util/List;
HSPLcom/android/server/pm/Settings;->insertPackageSettingLPw(Lcom/android/server/pm/PackageSetting;Landroid/content/pm/PackageParser$Package;)V
HSPLcom/android/server/pm/Settings;->isDisabledSystemPackageLPr(Ljava/lang/String;)Z
HSPLcom/android/server/pm/Settings;->readComponentsLPr(Lorg/xmlpull/v1/XmlPullParser;)Landroid/util/ArraySet;
HSPLcom/android/server/pm/Settings;->readCrossProfileIntentFiltersLPw(Lorg/xmlpull/v1/XmlPullParser;I)V
HSPLcom/android/server/pm/Settings;->readInstallPermissionsLPr(Lorg/xmlpull/v1/XmlPullParser;Lcom/android/server/pm/permission/PermissionsState;)V
HSPLcom/android/server/pm/Settings;->readLPw(Ljava/util/List;)Z
HSPLcom/android/server/pm/Settings;->readPackageLPw(Lorg/xmlpull/v1/XmlPullParser;)V
HSPLcom/android/server/pm/Settings;->readPackageRestrictionsLPr(I)V
HSPLcom/android/server/pm/Settings;->registerExistingAppIdLPw(ILcom/android/server/pm/SettingBase;Ljava/lang/Object;)Z
HSPLcom/android/server/pm/Settings;->updatePackageSetting(Lcom/android/server/pm/PackageSetting;Lcom/android/server/pm/PackageSetting;Lcom/android/server/pm/SharedUserSetting;Ljava/io/File;Ljava/io/File;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/util/List;Lcom/android/server/pm/UserManagerService;[Ljava/lang/String;[J)V
HSPLcom/android/server/pm/Settings;->writeChildPackagesLPw(Lorg/xmlpull/v1/XmlSerializer;Ljava/util/List;)V
HSPLcom/android/server/pm/Settings;->writeIntToFile(Ljava/io/File;I)V
HSPLcom/android/server/pm/Settings;->writeKernelMappingLPr()V
HSPLcom/android/server/pm/Settings;->writeKernelMappingLPr(Lcom/android/server/pm/PackageSetting;)V
HSPLcom/android/server/pm/Settings;->writeKernelMappingLPr(Ljava/lang/String;I[I)V
HSPLcom/android/server/pm/Settings;->writeKeySetAliasesLPr(Lorg/xmlpull/v1/XmlSerializer;Lcom/android/server/pm/PackageKeySetData;)V
HSPLcom/android/server/pm/Settings;->writeLPr()V
HSPLcom/android/server/pm/Settings;->writePackageLPr(Lorg/xmlpull/v1/XmlSerializer;Lcom/android/server/pm/PackageSetting;)V
HSPLcom/android/server/pm/Settings;->writePackageListLPr(I)V
HSPLcom/android/server/pm/Settings;->writePackageRestrictionsLPr(I)V
HSPLcom/android/server/pm/Settings;->writePermissionsLPr(Lorg/xmlpull/v1/XmlSerializer;Ljava/util/List;)V
HSPLcom/android/server/pm/Settings;->writeUpgradeKeySetsLPr(Lorg/xmlpull/v1/XmlSerializer;Lcom/android/server/pm/PackageKeySetData;)V
HSPLcom/android/server/pm/Settings;->writeUserRestrictionsLPw(Lcom/android/server/pm/PackageSetting;Lcom/android/server/pm/PackageSetting;)V
HSPLcom/android/server/pm/Settings;->writeUsesStaticLibLPw(Lorg/xmlpull/v1/XmlSerializer;[Ljava/lang/String;[J)V
HSPLcom/android/server/pm/SharedUserSetting;->getNotInstalledUserIds()[I
HSPLcom/android/server/pm/UserManagerService$LocalService;->exists(I)Z
HSPLcom/android/server/pm/UserManagerService$LocalService;->isUserUnlockingOrUnlocked(I)Z
HSPLcom/android/server/pm/UserManagerService;->exists(I)Z
HSPLcom/android/server/pm/UserManagerService;->getInstance()Lcom/android/server/pm/UserManagerService;
HSPLcom/android/server/pm/UserManagerService;->getUserIds()[I
HSPLcom/android/server/pm/UserManagerService;->getUserInfoLU(I)Landroid/content/pm/UserInfo;
HSPLcom/android/server/pm/UserManagerService;->getUserInfoNoChecks(I)Landroid/content/pm/UserInfo;
HSPLcom/android/server/pm/UserManagerService;->getUsers(Z)Ljava/util/List;
HSPLcom/android/server/pm/UserManagerService;->hasManageOrCreateUsersPermission()Z
HSPLcom/android/server/pm/UserManagerService;->hasManagedProfile(I)Z
HSPLcom/android/server/pm/UserRestrictionsUtils;->readRestrictions(Lorg/xmlpull/v1/XmlPullParser;Landroid/os/Bundle;)V
HSPLcom/android/server/pm/dex/DexManager$PackageCodeLocations;->mergeAppDataDirs(Ljava/lang/String;I)V
HSPLcom/android/server/pm/dex/DexManager$PackageCodeLocations;->searchDex(Ljava/lang/String;I)I
HSPLcom/android/server/pm/dex/DexManager$PackageCodeLocations;->updateCodeLocation(Ljava/lang/String;[Ljava/lang/String;)V
HSPLcom/android/server/pm/dex/DexManager;->cachePackageCodeLocation(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;I)V
HSPLcom/android/server/pm/dex/DexManager;->getDexPackage(Landroid/content/pm/ApplicationInfo;Ljava/lang/String;I)Lcom/android/server/pm/dex/DexManager$DexSearchResult;
HSPLcom/android/server/pm/dex/DexManager;->loadInternal(Ljava/util/Map;)V
HSPLcom/android/server/pm/dex/PackageDynamicCodeLoading$PackageDynamicCode;->syncData(Ljava/util/Map;Ljava/util/Set;)V
HSPLcom/android/server/pm/permission/BasePermission;->createOrUpdate(Lcom/android/server/pm/permission/BasePermission;Landroid/content/pm/PackageParser$Permission;Landroid/content/pm/PackageParser$Package;Ljava/util/Collection;Z)Lcom/android/server/pm/permission/BasePermission;
HSPLcom/android/server/pm/permission/BasePermission;->findPermissionTree(Ljava/util/Collection;Ljava/lang/String;)Lcom/android/server/pm/permission/BasePermission;
HSPLcom/android/server/pm/permission/BasePermission;->generatePermissionInfo(Ljava/lang/String;I)Landroid/content/pm/PermissionInfo;
HSPLcom/android/server/pm/permission/BasePermission;->readInt(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;Ljava/lang/String;I)I
HSPLcom/android/server/pm/permission/BasePermission;->readLPw(Ljava/util/Map;Lorg/xmlpull/v1/XmlPullParser;)Z
HSPLcom/android/server/pm/permission/BasePermission;->writeLPr(Lorg/xmlpull/v1/XmlSerializer;)V
HSPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->addAllPermissionGroups(Landroid/content/pm/PackageParser$Package;Z)V
HSPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->addAllPermissions(Landroid/content/pm/PackageParser$Package;Z)V
HSPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->checkUidPermission(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;II)I
HSPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->enforceCrossUserPermission(IIZZLjava/lang/String;)V
HSPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->isPermissionUsageInfoRequired(Ljava/lang/String;)Z
HSPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->addAllPermissionGroups(Landroid/content/pm/PackageParser$Package;Z)V
HSPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->addAllPermissions(Landroid/content/pm/PackageParser$Package;Z)V
HSPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->checkUidPermission(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;II)I
HSPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->enforceCrossUserPermission(IIZZLjava/lang/String;)V
HSPLcom/android/server/pm/permission/PermissionManagerService;->addAllPermissionGroups(Landroid/content/pm/PackageParser$Package;Z)V
HSPLcom/android/server/pm/permission/PermissionManagerService;->addAllPermissions(Landroid/content/pm/PackageParser$Package;Z)V
HSPLcom/android/server/pm/permission/PermissionManagerService;->checkUidPermission(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;II)I
HSPLcom/android/server/pm/permission/PermissionManagerService;->enforceCrossUserPermission(IIZZZLjava/lang/String;)V
HSPLcom/android/server/pm/permission/PermissionManagerService;->getPermissionInfoByGroup(Ljava/lang/String;II)Ljava/util/List;
HSPLcom/android/server/pm/permission/PermissionManagerService;->grantSignaturePermission(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;Lcom/android/server/pm/permission/BasePermission;Lcom/android/server/pm/permission/PermissionsState;)Z
HSPLcom/android/server/pm/permission/PermissionManagerService;->hasPrivappWhitelistEntry(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;)Z
HSPLcom/android/server/pm/permission/PermissionManagerService;->isNewPlatformPermissionForPackage(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;)Z
HSPLcom/android/server/pm/permission/PermissionManagerService;->restorePermissionState(Landroid/content/pm/PackageParser$Package;ZLjava/lang/String;Lcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
HSPLcom/android/server/pm/permission/PermissionManagerService;->restorePermissionState(Landroid/content/pm/PackageParser$Package;ZLjava/lang/String;Lcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
HSPLcom/android/server/pm/permission/PermissionManagerService;->revokePermissionsNoLongerImplicitLocked(Lcom/android/server/pm/permission/PermissionsState;Landroid/content/pm/PackageParser$Package;[I)[I
HSPLcom/android/server/pm/permission/PermissionManagerService;->setAppOpsLocked(Lcom/android/server/pm/permission/PermissionsState;Landroid/content/pm/PackageParser$Package;)V
HSPLcom/android/server/pm/permission/PermissionManagerService;->setInitialGrantForNewImplicitPermissionsLocked(Lcom/android/server/pm/permission/PermissionsState;Lcom/android/server/pm/permission/PermissionsState;Landroid/content/pm/PackageParser$Package;[I)[I
HSPLcom/android/server/pm/permission/PermissionManagerService;->updatePermissions(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;I)I
HSPLcom/android/server/pm/permission/PermissionManagerService;->updatePermissions(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;Ljava/lang/String;ILjava/util/Collection;Lcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
HSPLcom/android/server/pm/permission/PermissionManagerService;->updatePermissions(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;Ljava/lang/String;ILjava/util/Collection;Lcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
HSPLcom/android/server/pm/permission/PermissionSettings;->getAllPermissionTreesLocked()Ljava/util/Collection;
HSPLcom/android/server/pm/permission/PermissionSettings;->getPermission(Ljava/lang/String;)Lcom/android/server/pm/permission/BasePermission;
HSPLcom/android/server/pm/permission/PermissionSettings;->getPermissionLocked(Ljava/lang/String;)Lcom/android/server/pm/permission/BasePermission;
HSPLcom/android/server/pm/permission/PermissionSettings;->putPermissionLocked(Ljava/lang/String;Lcom/android/server/pm/permission/BasePermission;)V
HSPLcom/android/server/pm/permission/PermissionSettings;->readPermissions(Landroid/util/ArrayMap;Lorg/xmlpull/v1/XmlPullParser;)V
HSPLcom/android/server/pm/permission/PermissionSettings;->writePermissions(Lorg/xmlpull/v1/XmlSerializer;)V
HSPLcom/android/server/pm/permission/PermissionsState$PermissionData;-><init>(Lcom/android/server/pm/permission/PermissionsState$PermissionData;)V
HSPLcom/android/server/pm/permission/PermissionsState$PermissionData;->grant(I)Z
HSPLcom/android/server/pm/permission/PermissionsState$PermissionData;->updateFlags(III)Z
HSPLcom/android/server/pm/permission/PermissionsState;->computeGids(I)[I
HSPLcom/android/server/pm/permission/PermissionsState;->copyFrom(Lcom/android/server/pm/permission/PermissionsState;)V
HSPLcom/android/server/pm/permission/PermissionsState;->ensurePermissionData(Lcom/android/server/pm/permission/BasePermission;)Lcom/android/server/pm/permission/PermissionsState$PermissionData;
HSPLcom/android/server/pm/permission/PermissionsState;->getPermissionState(Ljava/lang/String;I)Lcom/android/server/pm/permission/PermissionsState$PermissionState;
HSPLcom/android/server/pm/permission/PermissionsState;->getPermissionStatesInternal(I)Ljava/util/List;
HSPLcom/android/server/pm/permission/PermissionsState;->getPermissions(I)Ljava/util/Set;
HSPLcom/android/server/pm/permission/PermissionsState;->getRuntimePermissionState(Ljava/lang/String;I)Lcom/android/server/pm/permission/PermissionsState$PermissionState;
HSPLcom/android/server/pm/permission/PermissionsState;->getRuntimePermissionStates(I)Ljava/util/List;
HSPLcom/android/server/pm/permission/PermissionsState;->grantInstallPermission(Lcom/android/server/pm/permission/BasePermission;)I
HSPLcom/android/server/pm/permission/PermissionsState;->grantPermission(Lcom/android/server/pm/permission/BasePermission;I)I
HSPLcom/android/server/pm/permission/PermissionsState;->grantRuntimePermission(Lcom/android/server/pm/permission/BasePermission;I)I
HSPLcom/android/server/pm/permission/PermissionsState;->hasInstallPermission(Ljava/lang/String;)Z
HSPLcom/android/server/pm/permission/PermissionsState;->hasPermission(Ljava/lang/String;I)Z
HSPLcom/android/server/pm/permission/PermissionsState;->hasRequestedPermission(Ljava/lang/String;)Z
HSPLcom/android/server/pm/permission/PermissionsState;->hasRuntimePermission(Ljava/lang/String;I)Z
HSPLcom/android/server/pm/permission/PermissionsState;->revokeInstallPermission(Lcom/android/server/pm/permission/BasePermission;)I
HSPLcom/android/server/pm/permission/PermissionsState;->revokePermission(Lcom/android/server/pm/permission/BasePermission;I)I
HSPLcom/android/server/pm/permission/PermissionsState;->setGlobalGids([I)V
HSPLcom/android/server/pm/permission/PermissionsState;->updatePermissionFlags(Lcom/android/server/pm/permission/BasePermission;III)Z
HSPLcom/android/server/policy/PhoneWindowManager;->applyKeyguardPolicyLw(Lcom/android/server/policy/WindowManagerPolicy$WindowState;Lcom/android/server/policy/WindowManagerPolicy$WindowState;)V
HSPLcom/android/server/policy/PhoneWindowManager;->canBeHiddenByKeyguardLw(Lcom/android/server/policy/WindowManagerPolicy$WindowState;)Z
HSPLcom/android/server/policy/WindowManagerPolicy;->getWindowLayerFromTypeLw(IZ)I
HSPLcom/android/server/power/PowerManagerService;->acquireWakeLockInternal(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;Landroid/os/WorkSource;Ljava/lang/String;II)V
HSPLcom/android/server/power/PowerManagerService;->getWakeLockSummaryFlags(Lcom/android/server/power/PowerManagerService$WakeLock;)I
HSPLcom/android/server/power/PowerManagerService;->updateWakeLockSummaryLocked(I)V
HSPLcom/android/server/role/-$$Lambda$RoleManagerService$puhjbRBOtgaj-Pp3Y2aQs0UA-58;->acceptOrThrow(Ljava/lang/Object;)V
HSPLcom/android/server/role/RoleManagerService;->lambda$computeComponentStateHash$0(Ljava/io/ByteArrayOutputStream;Landroid/content/pm/PackageManagerInternal;ILandroid/content/pm/PackageParser$Package;)V
HSPLcom/android/server/stats/StatsCompanionService;->informAllUidsLocked(Landroid/content/Context;)V
HSPLcom/android/server/usage/AppIdleHistory;->getAppUsageHistory(Ljava/lang/String;IJ)Lcom/android/server/usage/AppIdleHistory$AppUsageHistory;
HSPLcom/android/server/usage/AppIdleHistory;->getElapsedTime(J)J
HSPLcom/android/server/usage/AppIdleHistory;->getPackageHistory(Landroid/util/ArrayMap;Ljava/lang/String;JZ)Lcom/android/server/usage/AppIdleHistory$AppUsageHistory;
HSPLcom/android/server/usage/AppIdleHistory;->getScreenOnTime(J)J
HSPLcom/android/server/usage/AppIdleHistory;->getThresholdIndex(Ljava/lang/String;IJ[J[J)I
HSPLcom/android/server/usage/AppIdleHistory;->isIdle(Ljava/lang/String;IJ)Z
HSPLcom/android/server/usage/AppIdleHistory;->readAppIdleTimes(ILandroid/util/ArrayMap;)V
HSPLcom/android/server/usage/AppIdleHistory;->setAppStandbyBucket(Ljava/lang/String;IJII)V
HSPLcom/android/server/usage/AppIdleHistory;->setAppStandbyBucket(Ljava/lang/String;IJIIZ)V
HSPLcom/android/server/usage/AppIdleHistory;->shouldInformListeners(Ljava/lang/String;IJI)Z
HSPLcom/android/server/usage/AppStandbyController$AppStandbyHandler;->handleMessage(Landroid/os/Message;)V
HSPLcom/android/server/usage/AppStandbyController$Injector;->getActiveNetworkScorer()Ljava/lang/String;
HSPLcom/android/server/usage/AppStandbyController$Injector;->isBoundWidgetPackage(Landroid/appwidget/AppWidgetManager;Ljava/lang/String;I)Z
HSPLcom/android/server/usage/AppStandbyController$Injector;->isPowerSaveWhitelistExceptIdleApp(Ljava/lang/String;)Z
HSPLcom/android/server/usage/AppStandbyController$StandbyUpdateRecord;->obtain(Ljava/lang/String;IIIZ)Lcom/android/server/usage/AppStandbyController$StandbyUpdateRecord;
HSPLcom/android/server/usage/AppStandbyController$StandbyUpdateRecord;->recycle()V
HSPLcom/android/server/usage/AppStandbyController;->checkAndUpdateStandbyState(Ljava/lang/String;IIJ)V
HSPLcom/android/server/usage/AppStandbyController;->checkIdleStates(I)Z
HSPLcom/android/server/usage/AppStandbyController;->getBucketForLocked(Ljava/lang/String;IJ)I
HSPLcom/android/server/usage/AppStandbyController;->getIdleUidsForUser(I)[I
HSPLcom/android/server/usage/AppStandbyController;->informListeners(Ljava/lang/String;IIIZ)V
HSPLcom/android/server/usage/AppStandbyController;->isActiveDeviceAdmin(Ljava/lang/String;I)Z
HSPLcom/android/server/usage/AppStandbyController;->isAppIdleFiltered(Ljava/lang/String;IIJ)Z
HSPLcom/android/server/usage/AppStandbyController;->isAppIdleUnfiltered(Ljava/lang/String;IJ)Z
HSPLcom/android/server/usage/AppStandbyController;->isAppSpecial(Ljava/lang/String;II)Z
HSPLcom/android/server/usage/AppStandbyController;->isCarrierApp(Ljava/lang/String;)Z
HSPLcom/android/server/usage/AppStandbyController;->maybeInformListeners(Ljava/lang/String;IJIIZ)V
HSPLcom/android/server/usage/AppStandbyController;->reportEvent(Landroid/app/usage/UsageEvents$Event;JI)V
HSPLcom/android/server/usage/IntervalStats;->addEvent(Landroid/app/usage/UsageEvents$Event;)V
HSPLcom/android/server/usage/IntervalStats;->buildEvent(Landroid/util/proto/ProtoInputStream;Ljava/util/List;)Landroid/app/usage/UsageEvents$Event;
HSPLcom/android/server/usage/IntervalStats;->getOrCreateUsageStats(Ljava/lang/String;)Landroid/app/usage/UsageStats;
HSPLcom/android/server/usage/IntervalStats;->update(Ljava/lang/String;Ljava/lang/String;JII)V
HSPLcom/android/server/usage/UnixCalendar;->getTimeInMillis()J
HSPLcom/android/server/usage/UsageStatsDatabase;->parseBeginTime(Ljava/io/File;)J
HSPLcom/android/server/usage/UsageStatsDatabase;->readLocked(Landroid/util/AtomicFile;Lcom/android/server/usage/IntervalStats;I)V
HSPLcom/android/server/usage/UsageStatsProto;->loadConfigStats(Landroid/util/proto/ProtoInputStream;JLcom/android/server/usage/IntervalStats;)V
HSPLcom/android/server/usage/UsageStatsProto;->loadEvent(Landroid/util/proto/ProtoInputStream;JLcom/android/server/usage/IntervalStats;Ljava/util/List;)V
HSPLcom/android/server/usage/UsageStatsProto;->loadUsageStats(Landroid/util/proto/ProtoInputStream;JLcom/android/server/usage/IntervalStats;Ljava/util/List;)V
HSPLcom/android/server/usage/UsageStatsProto;->read(Ljava/io/InputStream;Lcom/android/server/usage/IntervalStats;)V
HSPLcom/android/server/usage/UsageStatsProto;->readStringPool(Landroid/util/proto/ProtoInputStream;)Ljava/util/List;
HSPLcom/android/server/usage/UsageStatsProto;->write(Ljava/io/OutputStream;Lcom/android/server/usage/IntervalStats;)V
HSPLcom/android/server/usage/UsageStatsProto;->writeChooserCounts(Landroid/util/proto/ProtoOutputStream;Landroid/app/usage/UsageStats;)V
HSPLcom/android/server/usage/UsageStatsProto;->writeEvent(Landroid/util/proto/ProtoOutputStream;JLcom/android/server/usage/IntervalStats;Landroid/app/usage/UsageEvents$Event;)V
HSPLcom/android/server/usage/UsageStatsProto;->writeStringPool(Landroid/util/proto/ProtoOutputStream;Lcom/android/server/usage/IntervalStats;)V
HSPLcom/android/server/usage/UsageStatsProto;->writeUsageStats(Landroid/util/proto/ProtoOutputStream;JLcom/android/server/usage/IntervalStats;Landroid/app/usage/UsageStats;)V
HSPLcom/android/server/usage/UsageStatsService$1;->onAppIdleStateChanged(Ljava/lang/String;IZII)V
HSPLcom/android/server/usage/UsageStatsService$H;->handleMessage(Landroid/os/Message;)V
HSPLcom/android/server/usage/UsageStatsService$LocalService;->isAppIdle(Ljava/lang/String;II)Z
HSPLcom/android/server/usage/UsageStatsService;->checkAndGetTimeLocked()J
HSPLcom/android/server/usage/UsageStatsService;->getUserDataAndInitializeIfNeededLocked(IJ)Lcom/android/server/usage/UserUsageStatsService;
HSPLcom/android/server/usage/UsageStatsService;->reportEvent(Landroid/app/usage/UsageEvents$Event;I)V
HSPLcom/android/server/usage/UserUsageStatsService;->reportEvent(Landroid/app/usage/UsageEvents$Event;)V
HSPLcom/android/server/wifi/scanner/KnownBandsChannelHelper;->setBandChannels([I[I[I)V
HSPLcom/android/server/wm/-$$Lambda$DisplayContent$JibsaX4YnJd0ta_wiDDdSp-PjQk;->accept(Ljava/lang/Object;)V
HSPLcom/android/server/wm/ActivityStack;->getDisplay()Lcom/android/server/wm/ActivityDisplay;
HSPLcom/android/server/wm/ActivityStack;->topRunningActivityLocked()Lcom/android/server/wm/ActivityRecord;
HSPLcom/android/server/wm/ActivityStack;->topRunningActivityLocked(Z)Lcom/android/server/wm/ActivityRecord;
HSPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->isCallerRecents(I)Z
HSPLcom/android/server/wm/ActivityTaskManagerService;->getGlobalConfigurationForPid(I)Landroid/content/res/Configuration;
HSPLcom/android/server/wm/ActivityTaskManagerService;->getRecentTasks()Lcom/android/server/wm/RecentTasks;
HSPLcom/android/server/wm/AppWindowToken;->forAllWindows(Lcom/android/internal/util/ToBooleanFunction;Z)Z
HSPLcom/android/server/wm/AppWindowToken;->forAllWindowsUnchecked(Lcom/android/internal/util/ToBooleanFunction;Z)Z
HSPLcom/android/server/wm/AppWindowToken;->getTask()Lcom/android/server/wm/Task;
HSPLcom/android/server/wm/ConfigurationContainer;->getActivityType()I
HSPLcom/android/server/wm/ConfigurationContainer;->getBounds()Landroid/graphics/Rect;
HSPLcom/android/server/wm/ConfigurationContainer;->getConfiguration()Landroid/content/res/Configuration;
HSPLcom/android/server/wm/ConfigurationContainer;->getMergedOverrideConfiguration()Landroid/content/res/Configuration;
HSPLcom/android/server/wm/ConfigurationContainer;->getRequestedOverrideBounds()Landroid/graphics/Rect;
HSPLcom/android/server/wm/ConfigurationContainer;->getRequestedOverrideConfiguration()Landroid/content/res/Configuration;
HSPLcom/android/server/wm/ConfigurationContainer;->getWindowConfiguration()Landroid/app/WindowConfiguration;
HSPLcom/android/server/wm/ConfigurationContainer;->getWindowingMode()I
HSPLcom/android/server/wm/ConfigurationContainer;->inPinnedWindowingMode()Z
HSPLcom/android/server/wm/ConfigurationContainer;->inSplitScreenPrimaryWindowingMode()Z
HSPLcom/android/server/wm/ConfigurationContainer;->matchParentBounds()Z
HSPLcom/android/server/wm/Dimmer;->resetDimStates()V
HSPLcom/android/server/wm/Dimmer;->updateDims(Landroid/view/SurfaceControl$Transaction;Landroid/graphics/Rect;)Z
HSPLcom/android/server/wm/DisplayContent$NonAppWindowContainers;->getDimmer()Lcom/android/server/wm/Dimmer;
HSPLcom/android/server/wm/DisplayContent$TaskStackContainers;->forAllExitingAppTokenWindows(Lcom/android/internal/util/ToBooleanFunction;Z)Z
HSPLcom/android/server/wm/DisplayContent$TaskStackContainers;->forAllWindows(Lcom/android/internal/util/ToBooleanFunction;Z)Z
HSPLcom/android/server/wm/DisplayContent$TaskStackContainers;->getHomeStack()Lcom/android/server/wm/TaskStack;
HSPLcom/android/server/wm/DisplayContent;->forAllWindows(Lcom/android/internal/util/ToBooleanFunction;Z)Z
HSPLcom/android/server/wm/DisplayContent;->getDisplayId()I
HSPLcom/android/server/wm/DisplayContent;->getDisplayPolicy()Lcom/android/server/wm/DisplayPolicy;
HSPLcom/android/server/wm/DisplayContent;->getHomeStack()Lcom/android/server/wm/TaskStack;
HSPLcom/android/server/wm/DisplayContent;->lambda$new$7$DisplayContent(Lcom/android/server/wm/WindowState;)V
HSPLcom/android/server/wm/DisplayPolicy;->applyPostLayoutPolicyLw(Lcom/android/server/wm/WindowState;Landroid/view/WindowManager$LayoutParams;Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)V
HSPLcom/android/server/wm/DisplayPolicy;->hasNavigationBar()Z
HSPLcom/android/server/wm/DisplayPolicy;->navigationBarCanMove()Z
HSPLcom/android/server/wm/DisplayPolicy;->navigationBarPosition(III)I
HSPLcom/android/server/wm/InputMonitor$UpdateInputForAllWindowsConsumer;->accept(Lcom/android/server/wm/WindowState;)V
HSPLcom/android/server/wm/InputMonitor$UpdateInputForAllWindowsConsumer;->accept(Ljava/lang/Object;)V
HSPLcom/android/server/wm/PolicyControl;->getWindowFlags(Lcom/android/server/wm/WindowState;Landroid/view/WindowManager$LayoutParams;)I
HSPLcom/android/server/wm/RecentTasks;->isCallerRecents(I)Z
HSPLcom/android/server/wm/RootActivityContainer;->getActivityDisplay(I)Lcom/android/server/wm/ActivityDisplay;
HSPLcom/android/server/wm/RootWindowContainer;->getDisplayContent(I)Lcom/android/server/wm/DisplayContent;
HSPLcom/android/server/wm/RootWindowContainer;->performSurfacePlacement(Z)V
HSPLcom/android/server/wm/SurfaceAnimator;->hasLeash()Z
HSPLcom/android/server/wm/SurfaceAnimator;->isAnimating()Z
HSPLcom/android/server/wm/TaskStack;->getDisplayContent()Lcom/android/server/wm/DisplayContent;
HSPLcom/android/server/wm/TaskStack;->getStackOutset()I
HSPLcom/android/server/wm/WindowAnimator;->scheduleAnimation()V
HSPLcom/android/server/wm/WindowContainer$ForAllWindowsConsumerWrapper;->apply(Ljava/lang/Object;)Z
HSPLcom/android/server/wm/WindowContainer;->checkAppWindowsReadyToShow()V
HSPLcom/android/server/wm/WindowContainer;->checkCompleteDeferredRemoval()Z
HSPLcom/android/server/wm/WindowContainer;->forAllWindows(Lcom/android/internal/util/ToBooleanFunction;Z)Z
HSPLcom/android/server/wm/WindowContainer;->forAllWindows(Ljava/util/function/Consumer;Z)V
HSPLcom/android/server/wm/WindowContainer;->getDimmer()Lcom/android/server/wm/Dimmer;
HSPLcom/android/server/wm/WindowContainer;->getDisplayedBounds()Landroid/graphics/Rect;
HSPLcom/android/server/wm/WindowContainer;->getPendingTransaction()Landroid/view/SurfaceControl$Transaction;
HSPLcom/android/server/wm/WindowContainer;->getWindow(Ljava/util/function/Predicate;)Lcom/android/server/wm/WindowState;
HSPLcom/android/server/wm/WindowContainer;->isAnimating()Z
HSPLcom/android/server/wm/WindowContainer;->isAppAnimating()Z
HSPLcom/android/server/wm/WindowContainer;->isSelfAnimating()Z
HSPLcom/android/server/wm/WindowContainer;->isSelfOrChildAnimating()Z
HSPLcom/android/server/wm/WindowContainer;->prepareSurfaces()V
HSPLcom/android/server/wm/WindowContainer;->scheduleAnimation()V
HSPLcom/android/server/wm/WindowFrames;->setContentChanged(Z)V
HSPLcom/android/server/wm/WindowManagerService;->scheduleAnimationLocked()V
HSPLcom/android/server/wm/WindowManagerThreadPriorityBooster;->boost()V
HSPLcom/android/server/wm/WindowManagerThreadPriorityBooster;->reset()V
HSPLcom/android/server/wm/WindowProcessController;->setCurrentProcState(I)V
HSPLcom/android/server/wm/WindowProcessController;->setCurrentSchedulingGroup(I)V
HSPLcom/android/server/wm/WindowProcessController;->setHasForegroundActivities(Z)V
HSPLcom/android/server/wm/WindowProcessController;->setPerceptible(Z)V
HSPLcom/android/server/wm/WindowState;->applyDims(Lcom/android/server/wm/Dimmer;)V
HSPLcom/android/server/wm/WindowState;->canAffectSystemUiFlags()Z
HSPLcom/android/server/wm/WindowState;->canReceiveKeys()Z
HSPLcom/android/server/wm/WindowState;->cantReceiveTouchInput()Z
HSPLcom/android/server/wm/WindowState;->computeDragResizing()Z
HSPLcom/android/server/wm/WindowState;->forAllWindows(Lcom/android/internal/util/ToBooleanFunction;Z)Z
HSPLcom/android/server/wm/WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;
HSPLcom/android/server/wm/WindowState;->getConfiguration()Landroid/content/res/Configuration;
HSPLcom/android/server/wm/WindowState;->getDisplayContent()Lcom/android/server/wm/DisplayContent;
HSPLcom/android/server/wm/WindowState;->getDisplayId()I
HSPLcom/android/server/wm/WindowState;->getFrameLw()Landroid/graphics/Rect;
HSPLcom/android/server/wm/WindowState;->getOrientationChanging()Z
HSPLcom/android/server/wm/WindowState;->getParentWindow()Lcom/android/server/wm/WindowState;
HSPLcom/android/server/wm/WindowState;->getProcessGlobalConfiguration()Landroid/content/res/Configuration;
HSPLcom/android/server/wm/WindowState;->getStack()Lcom/android/server/wm/TaskStack;
HSPLcom/android/server/wm/WindowState;->getTask()Lcom/android/server/wm/Task;
HSPLcom/android/server/wm/WindowState;->getTopParentWindow()Lcom/android/server/wm/WindowState;
HSPLcom/android/server/wm/WindowState;->getTouchableRegion(Landroid/graphics/Region;)V
HSPLcom/android/server/wm/WindowState;->getWindowTag()Ljava/lang/CharSequence;
HSPLcom/android/server/wm/WindowState;->inSizeCompatMode()Z
HSPLcom/android/server/wm/WindowState;->isChildWindow()Z
HSPLcom/android/server/wm/WindowState;->isDisplayedLw()Z
HSPLcom/android/server/wm/WindowState;->isDragResizeChanged()Z
HSPLcom/android/server/wm/WindowState;->isDrawnLw()Z
HSPLcom/android/server/wm/WindowState;->isGoneForLayoutLw()Z
HSPLcom/android/server/wm/WindowState;->isInputMethodTarget()Z
HSPLcom/android/server/wm/WindowState;->isOnScreen()Z
HSPLcom/android/server/wm/WindowState;->isParentWindowHidden()Z
HSPLcom/android/server/wm/WindowState;->isVisible()Z
HSPLcom/android/server/wm/WindowState;->isVisibleLw()Z
HSPLcom/android/server/wm/WindowState;->isVisibleOrAdding()Z
HSPLcom/android/server/wm/WindowState;->prepareSurfaces()V
HSPLcom/android/server/wm/WindowState;->resetContentChanged()V
HSPLcom/android/server/wm/WindowState;->transformFrameToSurfacePosition(IILandroid/graphics/Point;)V
HSPLcom/android/server/wm/WindowState;->transformSurfaceInsetsPosition(Landroid/graphics/Point;Landroid/graphics/Rect;)V
HSPLcom/android/server/wm/WindowState;->updateSurfacePosition()V
HSPLcom/android/server/wm/WindowState;->updateSurfacePosition(Landroid/view/SurfaceControl$Transaction;)V
HSPLcom/android/server/wm/WindowState;->wouldBeVisibleIfPolicyIgnored()Z
HSPLcom/android/server/wm/WindowStateAnimator;->hasSurface()Z
HSPLcom/android/server/wm/WindowStateAnimator;->prepareSurfaceLocked(Z)V
HSPLcom/android/server/wm/WindowSurfaceController;->hasSurface()Z
HSPLcom/android/server/wm/WindowToken;->getDisplayContent()Lcom/android/server/wm/DisplayContent;
HSPLcom/android/server/wm/WindowToken;->isHidden()Z
HSPLcom/android/server/wm/utils/InsetUtils;->insetsBetweenFrames(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
Landroid/hardware/authsecret/V1_0/IAuthSecret$Proxy;
Landroid/hardware/authsecret/V1_0/IAuthSecret;
Landroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprint$Proxy;
Landroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprint;
Landroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprintClientCallback$Stub;
Landroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprintClientCallback;
Landroid/hardware/configstore/V1_0/ISurfaceFlingerConfigs$Proxy;
Landroid/hardware/configstore/V1_0/ISurfaceFlingerConfigs;
Landroid/hardware/configstore/V1_0/OptionalBool;
Landroid/hardware/health/V1_0/HealthInfo;
Landroid/hardware/health/V2_0/DiskStats;
Landroid/hardware/health/V2_0/HealthInfo;
Landroid/hardware/health/V2_0/IHealth$Proxy;
Landroid/hardware/health/V2_0/IHealth;
Landroid/hardware/health/V2_0/IHealthInfoCallback$Stub;
Landroid/hardware/health/V2_0/IHealthInfoCallback;
Landroid/hardware/health/V2_0/StorageAttribute;
Landroid/hardware/health/V2_0/StorageInfo;
Landroid/hardware/oemlock/V1_0/IOemLock$Proxy;
Landroid/hardware/oemlock/V1_0/IOemLock;
Landroid/hardware/usb/V1_0/IUsb$Proxy;
Landroid/hardware/usb/V1_0/IUsb;
Landroid/hardware/usb/V1_0/IUsbCallback;
Landroid/hardware/usb/V1_0/PortStatus;
Landroid/hardware/usb/V1_1/IUsbCallback;
Landroid/hardware/usb/V1_1/PortStatus_1_1;
Landroid/hardware/usb/V1_2/IUsbCallback$Stub;
Landroid/hardware/usb/V1_2/IUsbCallback;
Landroid/hardware/weaver/V1_0/IWeaver$Proxy;
Landroid/hardware/weaver/V1_0/IWeaver$getConfigCallback;
Landroid/hardware/weaver/V1_0/IWeaver;
Landroid/hardware/weaver/V1_0/WeaverConfig;
Landroid/hardware/wifi/V1_0/IWifi$Proxy;
Landroid/hardware/wifi/V1_0/IWifi$getChipCallback;
Landroid/hardware/wifi/V1_0/IWifi$getChipIdsCallback;
Landroid/hardware/wifi/V1_0/IWifi;
Landroid/hardware/wifi/V1_0/IWifiApIface;
Landroid/hardware/wifi/V1_0/IWifiChip$ChipIfaceCombination;
Landroid/hardware/wifi/V1_0/IWifiChip$ChipIfaceCombinationLimit;
Landroid/hardware/wifi/V1_0/IWifiChip$ChipMode;
Landroid/hardware/wifi/V1_0/IWifiChip$Proxy;
Landroid/hardware/wifi/V1_0/IWifiChip$createApIfaceCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$createNanIfaceCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$createP2pIfaceCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$createRttControllerCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$createStaIfaceCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$getApIfaceCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$getApIfaceNamesCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$getAvailableModesCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$getIdCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$getModeCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$getNanIfaceCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$getNanIfaceNamesCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$getP2pIfaceCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$getP2pIfaceNamesCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$getStaIfaceCallback;
Landroid/hardware/wifi/V1_0/IWifiChip$getStaIfaceNamesCallback;
Landroid/hardware/wifi/V1_0/IWifiChip;
Landroid/hardware/wifi/V1_0/IWifiChipEventCallback$Stub;
Landroid/hardware/wifi/V1_0/IWifiChipEventCallback;
Landroid/hardware/wifi/V1_0/IWifiEventCallback$Stub;
Landroid/hardware/wifi/V1_0/IWifiEventCallback;
Landroid/hardware/wifi/V1_0/IWifiIface$getNameCallback;
Landroid/hardware/wifi/V1_0/IWifiIface$getTypeCallback;
Landroid/hardware/wifi/V1_0/IWifiIface;
Landroid/hardware/wifi/V1_0/IWifiNanIface$Proxy;
Landroid/hardware/wifi/V1_0/IWifiNanIface;
Landroid/hardware/wifi/V1_0/IWifiNanIfaceEventCallback;
Landroid/hardware/wifi/V1_0/IWifiP2pIface;
Landroid/hardware/wifi/V1_0/IWifiRttController$Proxy;
Landroid/hardware/wifi/V1_0/IWifiRttController$getCapabilitiesCallback;
Landroid/hardware/wifi/V1_0/IWifiRttController;
Landroid/hardware/wifi/V1_0/IWifiRttControllerEventCallback$Stub;
Landroid/hardware/wifi/V1_0/IWifiRttControllerEventCallback;
Landroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;
Landroid/hardware/wifi/V1_0/IWifiStaIface$getBackgroundScanCapabilitiesCallback;
Landroid/hardware/wifi/V1_0/IWifiStaIface;
Landroid/hardware/wifi/V1_0/IWifiStaIfaceEventCallback$Stub;
Landroid/hardware/wifi/V1_0/IWifiStaIfaceEventCallback;
Landroid/hardware/wifi/V1_0/NanCapabilities;
Landroid/hardware/wifi/V1_0/RttCapabilities;
Landroid/hardware/wifi/V1_0/StaBackgroundScanCapabilities;
Landroid/hardware/wifi/V1_0/WifiNanStatus;
Landroid/hardware/wifi/V1_0/WifiStatus;
Landroid/hardware/wifi/V1_1/IWifiChip;
Landroid/hardware/wifi/V1_2/IWifiChip$Proxy;
Landroid/hardware/wifi/V1_2/IWifiChip;
Landroid/hardware/wifi/V1_2/IWifiChipEventCallback$Stub;
Landroid/hardware/wifi/V1_2/IWifiChipEventCallback;
Landroid/hardware/wifi/V1_2/IWifiNanIface$Proxy;
Landroid/hardware/wifi/V1_2/IWifiNanIface;
Landroid/hardware/wifi/V1_2/IWifiNanIfaceEventCallback$Stub;
Landroid/hardware/wifi/V1_2/IWifiNanIfaceEventCallback;
Landroid/hardware/wifi/V1_3/IWifiChip$Proxy;
Landroid/hardware/wifi/V1_3/IWifiChip$getCapabilities_1_3Callback;
Landroid/hardware/wifi/V1_3/IWifiChip;
Landroid/hardware/wifi/hostapd/V1_0/HostapdStatus;
Landroid/hardware/wifi/hostapd/V1_0/IHostapd$ChannelParams;
Landroid/hardware/wifi/hostapd/V1_0/IHostapd$HwModeParams;
Landroid/hardware/wifi/hostapd/V1_0/IHostapd$IfaceParams;
Landroid/hardware/wifi/hostapd/V1_0/IHostapd$NetworkParams;
Landroid/hardware/wifi/hostapd/V1_0/IHostapd;
Landroid/hardware/wifi/hostapd/V1_1/IHostapd$AcsChannelRange;
Landroid/hardware/wifi/hostapd/V1_1/IHostapd$ChannelParams;
Landroid/hardware/wifi/hostapd/V1_1/IHostapd$IfaceParams;
Landroid/hardware/wifi/hostapd/V1_1/IHostapd;
Landroid/hardware/wifi/hostapd/V1_1/IHostapdCallback$Stub;
Landroid/hardware/wifi/hostapd/V1_1/IHostapdCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicant$IfaceInfo;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicant$Proxy;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicant$getInterfaceCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicant$listInterfacesCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicant;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface$Proxy;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface$addNetworkCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface$getNameCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface$getNetworkCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface$listNetworksCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantNetwork;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pIface$FreqRange;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pIface$connectCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pIface$createNfcHandoverRequestMessageCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pIface$createNfcHandoverSelectMessageCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pIface$getDeviceAddressCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pIface$getGroupCapabilityCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pIface$getSsidCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pIface$requestServiceDiscoveryCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pIface$startWpsPinDisplayCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pIface;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pIfaceCallback$Stub;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pIfaceCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pNetwork$getBssidCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pNetwork$getClientListCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pNetwork$getSsidCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pNetwork$isCurrentCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pNetwork$isGoCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantP2pNetwork;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIface$getMacAddressCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIface$startWpsPinDisplayCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIface;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIfaceCallback$Stub;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIfaceCallback;
Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork;
Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
Landroid/hardware/wifi/supplicant/V1_1/ISupplicant$Proxy;
Landroid/hardware/wifi/supplicant/V1_1/ISupplicant$addInterfaceCallback;
Landroid/hardware/wifi/supplicant/V1_1/ISupplicant;
Landroid/hardware/wifi/supplicant/V1_1/ISupplicantStaIface;
Landroid/hardware/wifi/supplicant/V1_1/ISupplicantStaIfaceCallback$Stub;
Landroid/hardware/wifi/supplicant/V1_1/ISupplicantStaIfaceCallback;
Landroid/hardware/wifi/supplicant/V1_2/ISupplicant;
Landroid/hardware/wifi/supplicant/V1_2/ISupplicantP2pIface;
Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;
Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$addDppPeerUriCallback;
Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$getKeyMgmtCapabilitiesCallback;
Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface;
Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIfaceCallback$Stub;
Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIfaceCallback;
Landroid/hidl/base/V1_0/IBase;
Landroid/hidl/manager/V1_0/IServiceManager$Proxy;
Landroid/hidl/manager/V1_0/IServiceManager;
Landroid/hidl/manager/V1_0/IServiceNotification$Stub;
Landroid/hidl/manager/V1_0/IServiceNotification;
Landroid/hidl/manager/V1_1/IServiceManager;
Landroid/hidl/manager/V1_2/IServiceManager$Proxy;
Landroid/hidl/manager/V1_2/IServiceManager;
Landroid/net/-$$Lambda$NetworkStackClient$EsrnifYD8E-HxTwVQsf45HJKvtM;
Landroid/net/INetd$Stub$Proxy;
Landroid/net/INetd$Stub;
Landroid/net/INetd;
Landroid/net/INetdUnsolicitedEventListener$Stub;
Landroid/net/INetdUnsolicitedEventListener;
Landroid/net/INetworkMonitor;
Landroid/net/INetworkStackConnector;
Landroid/net/NetworkStackClient$NetworkStackCallback;
Landroid/net/NetworkStackClient$NetworkStackConnection;
Landroid/net/NetworkStackClient;
Landroid/net/ProvisioningConfigurationParcelable;
Landroid/net/ProxyInfoParcelable;
Landroid/net/dhcp/IDhcpServer;
Landroid/net/ip/IIpClient;
Landroid/net/ip/IIpClientCallbacks$Stub;
Landroid/net/ip/IIpClientCallbacks;
Landroid/net/ip/InterfaceController;
Landroid/net/ip/IpClientCallbacks;
Landroid/net/ip/IpClientUtil$IpClientCallbacksProxy;
Landroid/net/ip/IpClientUtil;
Landroid/net/ip/IpServer$BaseServingState;
Landroid/net/ip/IpServer$Callback;
Landroid/net/ip/IpServer$Dependencies;
Landroid/net/ip/IpServer$InitialState;
Landroid/net/ip/IpServer$LocalHotspotState;
Landroid/net/ip/IpServer$TetheredState;
Landroid/net/ip/IpServer$UnavailableState;
Landroid/net/ip/IpServer;
Landroid/net/ip/RouterAdvertisementDaemon$RaParams;
Landroid/net/ip/RouterAdvertisementDaemon;
Landroid/net/metrics/INetdEventListener$Stub;
Landroid/net/metrics/INetdEventListener;
Landroid/net/shared/LinkPropertiesParcelableUtil;
Landroid/net/shared/PrivateDnsConfig;
Landroid/net/shared/ProvisioningConfiguration$Builder;
Landroid/net/shared/ProvisioningConfiguration;
Landroid/net/util/InterfaceParams;
Landroid/net/util/InterfaceSet;
Landroid/net/util/NetdService;
Landroid/net/util/PrefixUtils;
Landroid/net/util/SharedLog$Category;
Landroid/net/util/SharedLog;
Landroid/net/util/VersionedBroadcastListener$Receiver;
Landroid/net/util/VersionedBroadcastListener;
Landroid/net/wifi/IClientInterface$Stub$Proxy;
Landroid/net/wifi/IClientInterface$Stub;
Landroid/net/wifi/IClientInterface;
Landroid/net/wifi/IPnoScanEvent$Stub;
Landroid/net/wifi/IPnoScanEvent;
Landroid/net/wifi/IScanEvent$Stub;
Landroid/net/wifi/IScanEvent;
Landroid/net/wifi/IWifiScannerImpl$Stub$Proxy;
Landroid/net/wifi/IWifiScannerImpl$Stub;
Landroid/net/wifi/IWifiScannerImpl;
Landroid/net/wifi/IWificond$Stub$Proxy;
Landroid/net/wifi/IWificond$Stub;
Landroid/net/wifi/IWificond;
Landroid/os/IIdmap2$Stub$Proxy;
Landroid/os/IIdmap2$Stub;
Landroid/os/IIdmap2;
Lcom/android/location/provider/LocationProviderBase$Service;
Lcom/android/location/provider/LocationProviderBase;
Lcom/android/location/provider/LocationRequestUnbundled;
Lcom/android/location/provider/ProviderPropertiesUnbundled;
Lcom/android/location/provider/ProviderRequestUnbundled;
Lcom/android/server/-$$Lambda$1xUIIN0BU8izGcnYWT-VzczLBFU;
Lcom/android/server/-$$Lambda$AlarmManagerService$ZVedZIeWdB3G6AGM0_-9P_GEO24;
Lcom/android/server/-$$Lambda$AppStateTracker$zzioY8jvEm-1GnJ13CUiQGauPEE;
Lcom/android/server/-$$Lambda$BatteryService$2x73lvpB0jctMSVP4qb9sHAqRPw;
Lcom/android/server/-$$Lambda$BatteryService$D1kwd7L7yyqN5niz3KWkTepVmUk;
Lcom/android/server/-$$Lambda$ConnectivityService$SFqiR4Pfksb1C7csMC3uNxCllR8;
Lcom/android/server/-$$Lambda$ContextHubSystemService$q-5gSEKm3he-4vIHcay4DLtf85E;
Lcom/android/server/-$$Lambda$DeviceIdleController$Lhneg3gOUCFQWz6Y-5S75AWemY8;
Lcom/android/server/-$$Lambda$GraphicsStatsService$2EDVu98hsJvSwNgKvijVLSR3IrQ;
Lcom/android/server/-$$Lambda$HALkbmbB2IPr_wdFkPjiIWCzJsY;
Lcom/android/server/-$$Lambda$IpSecService$AnqunmSwm_yQvDDEPg-gokhVs5M;
Lcom/android/server/-$$Lambda$LocationManagerService$LocationProvider$nsL4uwojBLPzs1TzMfpQIBSm7p0;
Lcom/android/server/-$$Lambda$LocationManagerService$bojY6dMaI07zh6_sF7ERxgmk6U0;
Lcom/android/server/-$$Lambda$LocationManagerService$c--nwJDEsjSPyI_6OK8sVC5iClY;
Lcom/android/server/-$$Lambda$LocationManagerService$pUnNobtfzLC9eAlVqCMKySwbo3U;
Lcom/android/server/-$$Lambda$LocationManagerService$ta09t47XwQMZdhPftO1K9zdy5Mk;
Lcom/android/server/-$$Lambda$LockGuard$C107ImDhsfBAwlfWxZPBoVXIl_4;
Lcom/android/server/-$$Lambda$NetworkManagementService$JKmkb4AIm_PPzQp1XOHOgPPRswo;
Lcom/android/server/-$$Lambda$NetworkManagementService$NetdUnsolicitedEventListener$KpFpi2qBs2OPscTclZ3JRRr-G-g;
Lcom/android/server/-$$Lambda$NetworkManagementService$NetdUnsolicitedEventListener$QjjL0oku3yfQh6xuCG2xu7lWiSM;
Lcom/android/server/-$$Lambda$NetworkManagementService$NetdUnsolicitedEventListener$ne4qDQiQuX7-WNuF8Q_c7HnWnG0;
Lcom/android/server/-$$Lambda$NetworkManagementService$NetdUnsolicitedEventListener$pOV71EYm5PphEVG1PGQnV_c6XiA;
Lcom/android/server/-$$Lambda$NetworkManagementService$NetdUnsolicitedEventListener$praKgcnQG9FTHNMGfCVPTVY8mK8;
Lcom/android/server/-$$Lambda$NetworkManagementService$VhSl9D6THA_3jE0unleMmkHavJ0;
Lcom/android/server/-$$Lambda$NetworkManagementService$Yw12yNgo43yul34SibAKDtttAK8;
Lcom/android/server/-$$Lambda$NetworkManagementService$_L953cbquVj0BMBP1MZlSTm0Umg;
Lcom/android/server/-$$Lambda$NetworkManagementService$hs6djmKbGd8sG4u1TMglrogNP_s;
Lcom/android/server/-$$Lambda$NetworkManagementService$vX8dVVYxxv3YT9jQuN34bgGgRa8;
Lcom/android/server/-$$Lambda$PackageWatchdog$a9_AwAvl6vknTazIAvycouLJHwo;
Lcom/android/server/-$$Lambda$PersistentDataBlockService$EZl9OYaT2eNL7kfSr2nKUBjxidk;
Lcom/android/server/-$$Lambda$PinnerService$3$3Ta6TX4Jq9YbpUYE5Y0r8Xt8rBw;
Lcom/android/server/-$$Lambda$PinnerService$3$RQBbrt9b8esLBxJImxDgVTsP34I;
Lcom/android/server/-$$Lambda$PinnerService$GeEX-8XoHeV0LEszxat7jOSlrs4;
Lcom/android/server/-$$Lambda$QTLvklqCTz22VSzZPEWJs-o0bv4;
Lcom/android/server/-$$Lambda$ServiceWatcher$IP3HV4ye72eH3YxzGb9dMfcGWPE;
Lcom/android/server/-$$Lambda$ServiceWatcher$gVk2fFkq2-aamIua2kIpukAFtf8;
Lcom/android/server/-$$Lambda$ServiceWatcher$uru7j1zD-GiN8rndFZ3KWaTrxYo;
Lcom/android/server/-$$Lambda$StorageManagerService$o2Z_M70khUX2rrLNnknKPHIZ0_A;
Lcom/android/server/-$$Lambda$SystemServer$NlJmG18aPrQduhRqASIdcn7G0z8;
Lcom/android/server/-$$Lambda$SystemServer$RIWNR87PnJ4Y6VHItRXU0J6ocqQ;
Lcom/android/server/-$$Lambda$SystemServer$UyrPns7R814g-ZEylCbDKhe8It4;
Lcom/android/server/-$$Lambda$SystemServer$VBGb9VpEls6bUcVBPwYLtX7qDTs;
Lcom/android/server/-$$Lambda$SystemServer$Y1gEdKr_Hb7K7cbTDAo_WOJ-SYI;
Lcom/android/server/-$$Lambda$SystemServerInitThreadPool$7wfLGkZF7FvYZv7xj3ghvuiJJGk;
Lcom/android/server/-$$Lambda$UiModeManagerService$vYS4_RzjAavNRF50rrGN0tXI5JM;
Lcom/android/server/-$$Lambda$UiModeManagerService$vuGxqIEDBezs_Xyz-NAh0Bonp5g;
Lcom/android/server/-$$Lambda$YWiwiKm_Qgqb55C6tTuq_n2JzdY;
Lcom/android/server/-$$Lambda$hu439-4T6QBT8QyZnspMtXqICWs;
Lcom/android/server/-$$Lambda$qoNbXUvSu3yuTPVXPUfZW_HDrTQ;
Lcom/android/server/AlarmManagerInternal$InFlightListener;
Lcom/android/server/AlarmManagerInternal;
Lcom/android/server/AlarmManagerService$1;
Lcom/android/server/AlarmManagerService$2;
Lcom/android/server/AlarmManagerService$3;
Lcom/android/server/AlarmManagerService$6;
Lcom/android/server/AlarmManagerService$Alarm;
Lcom/android/server/AlarmManagerService$AlarmHandler;
Lcom/android/server/AlarmManagerService$AlarmThread;
Lcom/android/server/AlarmManagerService$AppStandbyTracker;
Lcom/android/server/AlarmManagerService$AppWakeupHistory;
Lcom/android/server/AlarmManagerService$Batch;
Lcom/android/server/AlarmManagerService$BatchTimeOrder;
Lcom/android/server/AlarmManagerService$BroadcastStats;
Lcom/android/server/AlarmManagerService$ClockReceiver;
Lcom/android/server/AlarmManagerService$Constants;
Lcom/android/server/AlarmManagerService$DeliveryTracker;
Lcom/android/server/AlarmManagerService$FilterStats;
Lcom/android/server/AlarmManagerService$InFlight;
Lcom/android/server/AlarmManagerService$IncreasingTimeOrder;
Lcom/android/server/AlarmManagerService$Injector;
Lcom/android/server/AlarmManagerService$InteractiveStateReceiver;
Lcom/android/server/AlarmManagerService$LocalService;
Lcom/android/server/AlarmManagerService$PriorityClass;
Lcom/android/server/AlarmManagerService$UidObserver;
Lcom/android/server/AlarmManagerService$UninstallReceiver;
Lcom/android/server/AlarmManagerService;
Lcom/android/server/AnimationThread;
Lcom/android/server/AnyMotionDetector$1;
Lcom/android/server/AnyMotionDetector$2;
Lcom/android/server/AnyMotionDetector$3;
Lcom/android/server/AnyMotionDetector$4;
Lcom/android/server/AnyMotionDetector$DeviceIdleCallback;
Lcom/android/server/AnyMotionDetector$RunningSignalStats;
Lcom/android/server/AnyMotionDetector$Vector3;
Lcom/android/server/AnyMotionDetector;
Lcom/android/server/AppStateTracker$AppOpsWatcher;
Lcom/android/server/AppStateTracker$FeatureFlagsObserver;
Lcom/android/server/AppStateTracker$Listener;
Lcom/android/server/AppStateTracker$MyHandler;
Lcom/android/server/AppStateTracker$MyReceiver;
Lcom/android/server/AppStateTracker$StandbyTracker;
Lcom/android/server/AppStateTracker$UidObserver;
Lcom/android/server/AppStateTracker;
Lcom/android/server/AttributeCache$Entry;
Lcom/android/server/AttributeCache$Package;
Lcom/android/server/AttributeCache;
Lcom/android/server/BatteryService$2;
Lcom/android/server/BatteryService$3;
Lcom/android/server/BatteryService$4;
Lcom/android/server/BatteryService$8;
Lcom/android/server/BatteryService$9;
Lcom/android/server/BatteryService$BatteryPropertiesRegistrar;
Lcom/android/server/BatteryService$BinderService;
Lcom/android/server/BatteryService$HealthHalCallback;
Lcom/android/server/BatteryService$HealthServiceWrapper$Callback;
Lcom/android/server/BatteryService$HealthServiceWrapper$IHealthSupplier;
Lcom/android/server/BatteryService$HealthServiceWrapper$IServiceManagerSupplier;
Lcom/android/server/BatteryService$HealthServiceWrapper$Notification$1;
Lcom/android/server/BatteryService$HealthServiceWrapper$Notification;
Lcom/android/server/BatteryService$HealthServiceWrapper;
Lcom/android/server/BatteryService$Led;
Lcom/android/server/BatteryService$LocalService;
Lcom/android/server/BatteryService;
Lcom/android/server/BinderCallsStatsService$AuthorizedWorkSourceProvider;
Lcom/android/server/BinderCallsStatsService$Internal;
Lcom/android/server/BinderCallsStatsService$LifeCycle;
Lcom/android/server/BinderCallsStatsService$SettingsObserver;
Lcom/android/server/BinderCallsStatsService;
Lcom/android/server/BluetoothManagerService$1;
Lcom/android/server/BluetoothManagerService$2;
Lcom/android/server/BluetoothManagerService$3;
Lcom/android/server/BluetoothManagerService$4;
Lcom/android/server/BluetoothManagerService$5;
Lcom/android/server/BluetoothManagerService$ActiveLog;
Lcom/android/server/BluetoothManagerService$BluetoothHandler;
Lcom/android/server/BluetoothManagerService$BluetoothServiceConnection;
Lcom/android/server/BluetoothManagerService$ProfileServiceConnections;
Lcom/android/server/BluetoothManagerService;
Lcom/android/server/BluetoothService;
Lcom/android/server/CachedDeviceStateService$1;
Lcom/android/server/CachedDeviceStateService;
Lcom/android/server/CertBlacklister$BlacklistObserver;
Lcom/android/server/CertBlacklister;
Lcom/android/server/ConnectivityService$1;
Lcom/android/server/ConnectivityService$2;
Lcom/android/server/ConnectivityService$3;
Lcom/android/server/ConnectivityService$4;
Lcom/android/server/ConnectivityService$5;
Lcom/android/server/ConnectivityService$6;
Lcom/android/server/ConnectivityService$7;
Lcom/android/server/ConnectivityService$InternalHandler;
Lcom/android/server/ConnectivityService$LegacyTypeTracker;
Lcom/android/server/ConnectivityService$NetworkFactoryInfo;
Lcom/android/server/ConnectivityService$NetworkRequestInfo;
Lcom/android/server/ConnectivityService$NetworkStateTrackerHandler;
Lcom/android/server/ConnectivityService$SettingsObserver;
Lcom/android/server/ConnectivityService;
Lcom/android/server/ConsumerIrService;
Lcom/android/server/ContextHubSystemService;
Lcom/android/server/CountryDetectorService$1;
Lcom/android/server/CountryDetectorService$2;
Lcom/android/server/CountryDetectorService$Receiver;
Lcom/android/server/CountryDetectorService;
Lcom/android/server/DeviceIdleController$1;
Lcom/android/server/DeviceIdleController$2;
Lcom/android/server/DeviceIdleController$3;
Lcom/android/server/DeviceIdleController$4;
Lcom/android/server/DeviceIdleController$5;
Lcom/android/server/DeviceIdleController$6;
Lcom/android/server/DeviceIdleController$7;
Lcom/android/server/DeviceIdleController$8;
Lcom/android/server/DeviceIdleController$9;
Lcom/android/server/DeviceIdleController$BinderService;
Lcom/android/server/DeviceIdleController$Constants;
Lcom/android/server/DeviceIdleController$Injector;
Lcom/android/server/DeviceIdleController$LocalService;
Lcom/android/server/DeviceIdleController$MotionListener;
Lcom/android/server/DeviceIdleController$MyHandler;
Lcom/android/server/DeviceIdleController;
Lcom/android/server/DiskStatsService;
Lcom/android/server/DisplayThread;
Lcom/android/server/DockObserver$1;
Lcom/android/server/DockObserver$2;
Lcom/android/server/DockObserver$BinderService;
Lcom/android/server/DockObserver;
Lcom/android/server/DropBoxManagerService$1$1;
Lcom/android/server/DropBoxManagerService$1;
Lcom/android/server/DropBoxManagerService$2;
Lcom/android/server/DropBoxManagerService$3;
Lcom/android/server/DropBoxManagerService$4;
Lcom/android/server/DropBoxManagerService$EntryFile;
Lcom/android/server/DropBoxManagerService$FileList;
Lcom/android/server/DropBoxManagerService;
Lcom/android/server/DynamicSystemService;
Lcom/android/server/EntropyMixer$1;
Lcom/android/server/EntropyMixer$2;
Lcom/android/server/EntropyMixer;
Lcom/android/server/EventLogTags;
Lcom/android/server/ExtconStateObserver;
Lcom/android/server/ExtconUEventObserver$ExtconInfo;
Lcom/android/server/ExtconUEventObserver;
Lcom/android/server/FgThread;
Lcom/android/server/GestureLauncherService$1;
Lcom/android/server/GestureLauncherService$2;
Lcom/android/server/GestureLauncherService$CameraLiftTriggerEventListener;
Lcom/android/server/GestureLauncherService$GestureEventListener;
Lcom/android/server/GestureLauncherService;
Lcom/android/server/GraphicsStatsService$1;
Lcom/android/server/GraphicsStatsService$ActiveBuffer;
Lcom/android/server/GraphicsStatsService$BufferInfo;
Lcom/android/server/GraphicsStatsService;
Lcom/android/server/HardwarePropertiesManagerService;
Lcom/android/server/INativeDaemonConnectorCallbacks;
Lcom/android/server/IntentResolver$1;
Lcom/android/server/IntentResolver$IteratorWrapper;
Lcom/android/server/IntentResolver;
Lcom/android/server/IoThread;
Lcom/android/server/IpSecService$1;
Lcom/android/server/IpSecService$IpSecServiceConfiguration$1;
Lcom/android/server/IpSecService$IpSecServiceConfiguration;
Lcom/android/server/IpSecService$UidFdTagger;
Lcom/android/server/IpSecService$UserResourceTracker;
Lcom/android/server/IpSecService;
Lcom/android/server/LocationManagerService$1;
Lcom/android/server/LocationManagerService$2;
Lcom/android/server/LocationManagerService$3;
Lcom/android/server/LocationManagerService$4;
Lcom/android/server/LocationManagerService$5;
Lcom/android/server/LocationManagerService$6;
Lcom/android/server/LocationManagerService$7;
Lcom/android/server/LocationManagerService$8;
Lcom/android/server/LocationManagerService$LinkedListenerBase;
Lcom/android/server/LocationManagerService$LocationProvider;
Lcom/android/server/LocationManagerService$Receiver;
Lcom/android/server/LocationManagerService$UpdateRecord;
Lcom/android/server/LocationManagerService;
Lcom/android/server/LockGuard$1;
Lcom/android/server/LockGuard$LockInfo;
Lcom/android/server/LockGuard;
Lcom/android/server/LooperStatsService$Lifecycle;
Lcom/android/server/LooperStatsService$SettingsObserver;
Lcom/android/server/LooperStatsService;
Lcom/android/server/MmsServiceBroker$1;
Lcom/android/server/MmsServiceBroker$2;
Lcom/android/server/MmsServiceBroker$3;
Lcom/android/server/MmsServiceBroker$BinderService;
Lcom/android/server/MmsServiceBroker;
Lcom/android/server/MountServiceIdler;
Lcom/android/server/NativeDaemonConnector$ResponseQueue;
Lcom/android/server/NativeDaemonConnector;
Lcom/android/server/NativeDaemonConnectorException;
Lcom/android/server/NetworkManagementInternal;
Lcom/android/server/NetworkManagementService$LocalService;
Lcom/android/server/NetworkManagementService$NetdCallbackReceiver;
Lcom/android/server/NetworkManagementService$NetdTetheringStatsProvider;
Lcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;
Lcom/android/server/NetworkManagementService$NetworkManagementEventCallback;
Lcom/android/server/NetworkManagementService$SystemServices;
Lcom/android/server/NetworkManagementService;
Lcom/android/server/NetworkScoreService$1;
Lcom/android/server/NetworkScoreService$2;
Lcom/android/server/NetworkScoreService$3;
Lcom/android/server/NetworkScoreService$4;
Lcom/android/server/NetworkScoreService$5;
Lcom/android/server/NetworkScoreService$DispatchingContentObserver;
Lcom/android/server/NetworkScoreService$Lifecycle;
Lcom/android/server/NetworkScoreService$ServiceHandler;
Lcom/android/server/NetworkScoreService;
Lcom/android/server/NetworkScorerAppManager$SettingsFacade;
Lcom/android/server/NetworkScorerAppManager;
Lcom/android/server/NetworkTimeUpdateService;
Lcom/android/server/NewNetworkTimeUpdateService$1;
Lcom/android/server/NewNetworkTimeUpdateService$2;
Lcom/android/server/NewNetworkTimeUpdateService$MyHandler;
Lcom/android/server/NewNetworkTimeUpdateService$NetworkTimeUpdateCallback;
Lcom/android/server/NewNetworkTimeUpdateService$SettingsObserver;
Lcom/android/server/NewNetworkTimeUpdateService;
Lcom/android/server/NsdService$DaemonConnection;
Lcom/android/server/NsdService$DaemonConnectionSupplier;
Lcom/android/server/NsdService$NativeCallbackReceiver;
Lcom/android/server/NsdService$NsdSettings$1;
Lcom/android/server/NsdService$NsdSettings;
Lcom/android/server/NsdService$NsdStateMachine$1;
Lcom/android/server/NsdService$NsdStateMachine$DefaultState;
Lcom/android/server/NsdService$NsdStateMachine$DisabledState;
Lcom/android/server/NsdService$NsdStateMachine$EnabledState;
Lcom/android/server/NsdService$NsdStateMachine;
Lcom/android/server/NsdService;
Lcom/android/server/PackageWatchdog$ObserverInternal;
Lcom/android/server/PackageWatchdog$PackageHealthObserver;
Lcom/android/server/PackageWatchdog;
Lcom/android/server/PersistentDataBlockManagerInternal;
Lcom/android/server/PersistentDataBlockService$1;
Lcom/android/server/PersistentDataBlockService$2;
Lcom/android/server/PersistentDataBlockService;
Lcom/android/server/PinnerService$1;
Lcom/android/server/PinnerService$2;
Lcom/android/server/PinnerService$3;
Lcom/android/server/PinnerService$BinderService;
Lcom/android/server/PinnerService$PinRange;
Lcom/android/server/PinnerService$PinRangeSource;
Lcom/android/server/PinnerService$PinRangeSourceStatic;
Lcom/android/server/PinnerService$PinRangeSourceStream;
Lcom/android/server/PinnerService$PinnedApp;
Lcom/android/server/PinnerService$PinnedFile;
Lcom/android/server/PinnerService$PinnerHandler;
Lcom/android/server/PinnerService;
Lcom/android/server/PruneInstantAppsJobService;
Lcom/android/server/RandomBlock;
Lcom/android/server/RecoverySystemService$1;
Lcom/android/server/RecoverySystemService$BinderService;
Lcom/android/server/RecoverySystemService;
Lcom/android/server/RescueParty$AppThreshold;
Lcom/android/server/RescueParty$BootThreshold;
Lcom/android/server/RescueParty$Threshold;
Lcom/android/server/RescueParty;
Lcom/android/server/RuntimeService;
Lcom/android/server/SensorNotificationService;
Lcom/android/server/SensorPrivacyService$DeathRecipient;
Lcom/android/server/SensorPrivacyService$SensorPrivacyHandler;
Lcom/android/server/SensorPrivacyService$SensorPrivacyServiceImpl;
Lcom/android/server/SensorPrivacyService;
Lcom/android/server/SerialService;
Lcom/android/server/ServiceThread;
Lcom/android/server/ServiceWatcher$1;
Lcom/android/server/ServiceWatcher$2;
Lcom/android/server/ServiceWatcher$BinderRunner;
Lcom/android/server/ServiceWatcher;
Lcom/android/server/StorageManagerService$12;
Lcom/android/server/StorageManagerService$1;
Lcom/android/server/StorageManagerService$2;
Lcom/android/server/StorageManagerService$3;
Lcom/android/server/StorageManagerService$4;
Lcom/android/server/StorageManagerService$5;
Lcom/android/server/StorageManagerService$6;
Lcom/android/server/StorageManagerService$8;
Lcom/android/server/StorageManagerService$Callbacks;
Lcom/android/server/StorageManagerService$Lifecycle;
Lcom/android/server/StorageManagerService$ObbActionHandler;
Lcom/android/server/StorageManagerService$StorageManagerInternalImpl;
Lcom/android/server/StorageManagerService$StorageManagerServiceHandler;
Lcom/android/server/StorageManagerService;
Lcom/android/server/SystemServer$1;
Lcom/android/server/SystemServer;
Lcom/android/server/SystemServerInitThreadPool;
Lcom/android/server/SystemService;
Lcom/android/server/SystemServiceManager;
Lcom/android/server/SystemUpdateManagerService;
Lcom/android/server/TelephonyRegistry$1;
Lcom/android/server/TelephonyRegistry$2;
Lcom/android/server/TelephonyRegistry$3;
Lcom/android/server/TelephonyRegistry$Record;
Lcom/android/server/TelephonyRegistry$TelephonyRegistryDeathRecipient;
Lcom/android/server/TelephonyRegistry;
Lcom/android/server/ThreadPriorityBooster$1;
Lcom/android/server/ThreadPriorityBooster$PriorityState;
Lcom/android/server/ThreadPriorityBooster;
Lcom/android/server/UiModeManagerInternal;
Lcom/android/server/UiModeManagerService$1;
Lcom/android/server/UiModeManagerService$2;
Lcom/android/server/UiModeManagerService$3;
Lcom/android/server/UiModeManagerService$4;
Lcom/android/server/UiModeManagerService$5;
Lcom/android/server/UiModeManagerService$6;
Lcom/android/server/UiModeManagerService$LocalService;
Lcom/android/server/UiModeManagerService$UserSwitchedReceiver;
Lcom/android/server/UiModeManagerService;
Lcom/android/server/UiThread;
Lcom/android/server/UpdateLockService$LockWatcher;
Lcom/android/server/UpdateLockService;
Lcom/android/server/VibratorService$1;
Lcom/android/server/VibratorService$2;
Lcom/android/server/VibratorService$3;
Lcom/android/server/VibratorService$4;
Lcom/android/server/VibratorService$5;
Lcom/android/server/VibratorService$ExternalVibratorService;
Lcom/android/server/VibratorService$ScaleLevel;
Lcom/android/server/VibratorService$SettingsObserver;
Lcom/android/server/VibratorService;
Lcom/android/server/Watchdog$1;
Lcom/android/server/Watchdog$BinderThreadMonitor;
Lcom/android/server/Watchdog$HandlerChecker;
Lcom/android/server/Watchdog$Monitor;
Lcom/android/server/Watchdog$OpenFdMonitor;
Lcom/android/server/Watchdog$RebootRequestReceiver;
Lcom/android/server/Watchdog;
Lcom/android/server/WatchdogDiagnostics;
Lcom/android/server/WiredAccessoryManager$1;
Lcom/android/server/WiredAccessoryManager$WiredAccessoryExtconObserver;
Lcom/android/server/WiredAccessoryManager$WiredAccessoryObserver$UEventInfo;
Lcom/android/server/WiredAccessoryManager$WiredAccessoryObserver;
Lcom/android/server/WiredAccessoryManager;
Lcom/android/server/ZramWriteback;
Lcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$5vwr6qV-eqdCr73CeDmVnsJlZHM;
Lcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$CNt8wbTQCYcsUnUkUCQHtKqr-tY;
Lcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$Gu-W_dQ2mWyy8l4tm19TzFxGbeM;
Lcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$K4sS36agT2_B03tVUTy8mldugxY;
Lcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$RFkfb_W9wnTTs_gy8Dg3k2uQOYQ;
Lcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$_rvRsbhZRBJitXrpMqI0NptLUa8;
Lcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$heq1MRdQjg8BGWFbpV3PEpnDVcg;
Lcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$mAPLBShddfLlktd9Q8jVo04VVXo;
Lcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$w0ifSldCn8nADYgU7v1foSdmfe0;
Lcom/android/server/accessibility/AbstractAccessibilityServiceConnection$SystemSupport;
Lcom/android/server/accessibility/AbstractAccessibilityServiceConnection;
Lcom/android/server/accessibility/AccessibilityManagerService$1;
Lcom/android/server/accessibility/AccessibilityManagerService$2;
Lcom/android/server/accessibility/AccessibilityManagerService$AccessibilityContentObserver;
Lcom/android/server/accessibility/AccessibilityManagerService$AccessibilityDisplayListener;
Lcom/android/server/accessibility/AccessibilityManagerService$Client;
Lcom/android/server/accessibility/AccessibilityManagerService$Lifecycle;
Lcom/android/server/accessibility/AccessibilityManagerService$MainHandler;
Lcom/android/server/accessibility/AccessibilityManagerService$RemoteAccessibilityConnection;
Lcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;
Lcom/android/server/accessibility/AccessibilityManagerService$UserState;
Lcom/android/server/accessibility/AccessibilityManagerService;
Lcom/android/server/accessibility/AccessibilityServiceConnection;
Lcom/android/server/accessibility/FingerprintGestureDispatcher$FingerprintGestureClient;
Lcom/android/server/accessibility/GlobalActionPerformer;
Lcom/android/server/accessibility/KeyEventDispatcher$KeyEventFilter;
Lcom/android/server/accessibility/UiAutomationManager$1;
Lcom/android/server/accessibility/UiAutomationManager;
Lcom/android/server/accounts/-$$Lambda$AccountManagerService$c6GExIY3Vh2fORdBziuAPJbExac;
Lcom/android/server/accounts/AccountAuthenticatorCache$MySerializer;
Lcom/android/server/accounts/AccountAuthenticatorCache;
Lcom/android/server/accounts/AccountManagerService$1;
Lcom/android/server/accounts/AccountManagerService$2;
Lcom/android/server/accounts/AccountManagerService$3;
Lcom/android/server/accounts/AccountManagerService$4;
Lcom/android/server/accounts/AccountManagerService$AccountManagerInternalImpl;
Lcom/android/server/accounts/AccountManagerService$Injector;
Lcom/android/server/accounts/AccountManagerService$Lifecycle;
Lcom/android/server/accounts/AccountManagerService$MessageHandler;
Lcom/android/server/accounts/AccountManagerService$UserAccounts;
Lcom/android/server/accounts/AccountManagerService;
Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper;
Lcom/android/server/accounts/AccountsDb;
Lcom/android/server/accounts/IAccountAuthenticatorCache;
Lcom/android/server/accounts/TokenCache$TokenLruCache;
Lcom/android/server/accounts/TokenCache;
Lcom/android/server/adb/AdbDebuggingManager$AdbDebuggingHandler;
Lcom/android/server/adb/AdbDebuggingManager$AdbKeyStore;
Lcom/android/server/adb/AdbDebuggingManager;
Lcom/android/server/adb/AdbService$AdbHandler;
Lcom/android/server/adb/AdbService$AdbManagerInternalImpl;
Lcom/android/server/adb/AdbService$AdbSettingsObserver;
Lcom/android/server/adb/AdbService$Lifecycle;
Lcom/android/server/adb/AdbService;
Lcom/android/server/am/-$$Lambda$5hokEl5hcign5FXeGZdl53qh2zg;
Lcom/android/server/am/-$$Lambda$ActivityManagerService$2afaFERxNQEnSdevJxY5plp1fS4;
Lcom/android/server/am/-$$Lambda$ActivityManagerService$30I5N5ZS7997YvRBJqVkTZMPd6M;
Lcom/android/server/am/-$$Lambda$ActivityManagerService$XMDHDkKdzWb8nQlDZRKevGp6Oa8;
Lcom/android/server/am/-$$Lambda$ActivityManagerService$Z3G4KWA2tlTOhqhFtAvVby1SjyQ;
Lcom/android/server/am/-$$Lambda$BatteryExternalStatsWorker$ML8sXrbYk0MflPvsY2cfCYlcU0w;
Lcom/android/server/am/-$$Lambda$BatteryExternalStatsWorker$PpNEY15dspg9oLlkg1OsyjrPTqw;
Lcom/android/server/am/-$$Lambda$BatteryExternalStatsWorker$ddVY5lmqswnSjXppAxPTOHbuzzQ;
Lcom/android/server/am/-$$Lambda$BatteryExternalStatsWorker$r3x3xYmhrLG8kgeNVPXl5EILHwU;
Lcom/android/server/am/-$$Lambda$BatteryStatsService$ZxbqtJ7ozYmzYFkkNV3m_QRd0Sk;
Lcom/android/server/am/-$$Lambda$BatteryStatsService$rRONgIFHr4sujxPESRmo9P5RJ6w;
Lcom/android/server/am/-$$Lambda$HKoBBTwYfMTyX1rzuzxIXu0s2cc;
Lcom/android/server/am/-$$Lambda$OomAdjProfiler$5x1ooCPxPmlzbXvtcEuYDu_6Uz4;
Lcom/android/server/am/-$$Lambda$PendingIntentRecord$hlEHdgdG_SS5n3v7IRr7e6QZgLQ;
Lcom/android/server/am/-$$Lambda$ProcessList$Clv-1gpwGcZ-lQ1Ghdh2VzSdPZ4;
Lcom/android/server/am/-$$Lambda$SettingsToPropertiesMapper$Rzo06OjarvWLxZlB1l32KTp3emA;
Lcom/android/server/am/-$$Lambda$Y_KRxxoOXfy-YceuDG7WHd46Y_I;
Lcom/android/server/am/-$$Lambda$gATL8uvTPRd405IfefK1RL9bNqA;
Lcom/android/server/am/ActiveInstrumentation;
Lcom/android/server/am/ActiveServices$1;
Lcom/android/server/am/ActiveServices$2;
Lcom/android/server/am/ActiveServices$4;
Lcom/android/server/am/ActiveServices$ActiveForegroundApp;
Lcom/android/server/am/ActiveServices$ForcedStandbyListener;
Lcom/android/server/am/ActiveServices$ServiceDumper;
Lcom/android/server/am/ActiveServices$ServiceLookupResult;
Lcom/android/server/am/ActiveServices$ServiceMap;
Lcom/android/server/am/ActiveServices$ServiceRestarter;
Lcom/android/server/am/ActiveServices;
Lcom/android/server/am/ActiveUids;
Lcom/android/server/am/ActivityManagerConstants$1;
Lcom/android/server/am/ActivityManagerConstants;
Lcom/android/server/am/ActivityManagerService$12;
Lcom/android/server/am/ActivityManagerService$15;
Lcom/android/server/am/ActivityManagerService$16;
Lcom/android/server/am/ActivityManagerService$17;
Lcom/android/server/am/ActivityManagerService$18;
Lcom/android/server/am/ActivityManagerService$19;
Lcom/android/server/am/ActivityManagerService$1;
Lcom/android/server/am/ActivityManagerService$20;
Lcom/android/server/am/ActivityManagerService$21;
Lcom/android/server/am/ActivityManagerService$22;
Lcom/android/server/am/ActivityManagerService$2;
Lcom/android/server/am/ActivityManagerService$3;
Lcom/android/server/am/ActivityManagerService$4;
Lcom/android/server/am/ActivityManagerService$5;
Lcom/android/server/am/ActivityManagerService$7;
Lcom/android/server/am/ActivityManagerService$AppDeathRecipient;
Lcom/android/server/am/ActivityManagerService$Association;
Lcom/android/server/am/ActivityManagerService$CpuBinder$1;
Lcom/android/server/am/ActivityManagerService$CpuBinder;
Lcom/android/server/am/ActivityManagerService$DbBinder;
Lcom/android/server/am/ActivityManagerService$DevelopmentSettingsObserver;
Lcom/android/server/am/ActivityManagerService$GraphicsBinder;
Lcom/android/server/am/ActivityManagerService$HiddenApiSettings;
Lcom/android/server/am/ActivityManagerService$Identity;
Lcom/android/server/am/ActivityManagerService$Injector;
Lcom/android/server/am/ActivityManagerService$IntentFirewallInterface;
Lcom/android/server/am/ActivityManagerService$ItemMatcher;
Lcom/android/server/am/ActivityManagerService$Lifecycle;
Lcom/android/server/am/ActivityManagerService$LocalService;
Lcom/android/server/am/ActivityManagerService$MainHandler$1;
Lcom/android/server/am/ActivityManagerService$MainHandler;
Lcom/android/server/am/ActivityManagerService$MemBinder$1;
Lcom/android/server/am/ActivityManagerService$MemBinder;
Lcom/android/server/am/ActivityManagerService$MemItem;
Lcom/android/server/am/ActivityManagerService$MemoryUsageDumpOptions;
Lcom/android/server/am/ActivityManagerService$OomAdjObserver;
Lcom/android/server/am/ActivityManagerService$PackageAssociationInfo;
Lcom/android/server/am/ActivityManagerService$PendingTempWhitelist;
Lcom/android/server/am/ActivityManagerService$PermissionController;
Lcom/android/server/am/ActivityManagerService$PidMap;
Lcom/android/server/am/ActivityManagerService$ProcessChangeItem;
Lcom/android/server/am/ActivityManagerService$ProcessInfoService;
Lcom/android/server/am/ActivityManagerService$ProfileData;
Lcom/android/server/am/ActivityManagerService$UiHandler;
Lcom/android/server/am/ActivityManagerService$UidObserverRegistration;
Lcom/android/server/am/ActivityManagerService;
Lcom/android/server/am/AppBindRecord;
Lcom/android/server/am/AppCompactor$1;
Lcom/android/server/am/AppCompactor$MemCompactionHandler;
Lcom/android/server/am/AppCompactor;
Lcom/android/server/am/AppErrorDialog$Data;
Lcom/android/server/am/AppErrorResult;
Lcom/android/server/am/AppErrors$BadProcessInfo;
Lcom/android/server/am/AppErrors;
Lcom/android/server/am/AppNotRespondingDialog$Data;
Lcom/android/server/am/AppTimeTracker;
Lcom/android/server/am/BackupRecord;
Lcom/android/server/am/BatteryExternalStatsWorker$1;
Lcom/android/server/am/BatteryExternalStatsWorker$2;
Lcom/android/server/am/BatteryExternalStatsWorker;
Lcom/android/server/am/BatteryStatsService$1;
Lcom/android/server/am/BatteryStatsService$LocalService;
Lcom/android/server/am/BatteryStatsService$WakeupReasonThread;
Lcom/android/server/am/BatteryStatsService;
Lcom/android/server/am/BroadcastConstants$SettingsObserver;
Lcom/android/server/am/BroadcastConstants;
Lcom/android/server/am/BroadcastDispatcher$1;
Lcom/android/server/am/BroadcastDispatcher$2;
Lcom/android/server/am/BroadcastDispatcher;
Lcom/android/server/am/BroadcastFilter;
Lcom/android/server/am/BroadcastQueue$1;
Lcom/android/server/am/BroadcastQueue$AppNotResponding;
Lcom/android/server/am/BroadcastQueue$BroadcastHandler;
Lcom/android/server/am/BroadcastQueue;
Lcom/android/server/am/BroadcastRecord;
Lcom/android/server/am/BroadcastStats$1;
Lcom/android/server/am/BroadcastStats$ActionEntry;
Lcom/android/server/am/BroadcastStats$PackageEntry;
Lcom/android/server/am/BroadcastStats$ViolationEntry;
Lcom/android/server/am/BroadcastStats;
Lcom/android/server/am/ConnectionRecord;
Lcom/android/server/am/ContentProviderConnection;
Lcom/android/server/am/ContentProviderRecord;
Lcom/android/server/am/CoreSettingsObserver;
Lcom/android/server/am/DumpHeapProvider;
Lcom/android/server/am/EventLogTags;
Lcom/android/server/am/HealthStatsBatteryStatsWriter;
Lcom/android/server/am/InstrumentationReporter$MyThread;
Lcom/android/server/am/InstrumentationReporter$Report;
Lcom/android/server/am/InstrumentationReporter;
Lcom/android/server/am/IntentBindRecord;
Lcom/android/server/am/MemoryStatUtil$MemoryStat;
Lcom/android/server/am/MemoryStatUtil;
Lcom/android/server/am/NativeCrashListener;
Lcom/android/server/am/OomAdjProfiler$CpuTimes;
Lcom/android/server/am/OomAdjProfiler;
Lcom/android/server/am/OomAdjuster$ComputeOomAdjWindowCallback;
Lcom/android/server/am/OomAdjuster;
Lcom/android/server/am/PendingIntentController;
Lcom/android/server/am/PendingIntentRecord$Key;
Lcom/android/server/am/PendingIntentRecord;
Lcom/android/server/am/PendingTempWhitelists;
Lcom/android/server/am/ProcessList$IsolatedUidRange;
Lcom/android/server/am/ProcessList$IsolatedUidRangeAllocator;
Lcom/android/server/am/ProcessList$KillHandler;
Lcom/android/server/am/ProcessList$MyProcessMap;
Lcom/android/server/am/ProcessList$ProcStateMemTracker;
Lcom/android/server/am/ProcessList;
Lcom/android/server/am/ProcessMemInfo;
Lcom/android/server/am/ProcessRecord$PackageList;
Lcom/android/server/am/ProcessRecord;
Lcom/android/server/am/ProcessStatsService$1;
Lcom/android/server/am/ProcessStatsService$2;
Lcom/android/server/am/ProcessStatsService$3;
Lcom/android/server/am/ProcessStatsService;
Lcom/android/server/am/ProviderMap;
Lcom/android/server/am/ReceiverList;
Lcom/android/server/am/ServiceRecord$StartItem;
Lcom/android/server/am/ServiceRecord;
Lcom/android/server/am/SettingsToPropertiesMapper$1;
Lcom/android/server/am/SettingsToPropertiesMapper;
Lcom/android/server/am/UidRecord$ChangeItem;
Lcom/android/server/am/UidRecord;
Lcom/android/server/am/UserController$Injector;
Lcom/android/server/am/UserController$UserProgressListener;
Lcom/android/server/am/UserController;
Lcom/android/server/am/UserState;
Lcom/android/server/appbinding/-$$Lambda$AppBindingService$D_3boeCn8eAANOp2ZDk6OC2rNaI;
Lcom/android/server/appbinding/-$$Lambda$xkEFYM78dwFMyAjWJXkB7AxgA2c;
Lcom/android/server/appbinding/AppBindingConstants;
Lcom/android/server/appbinding/AppBindingService$1;
Lcom/android/server/appbinding/AppBindingService$2;
Lcom/android/server/appbinding/AppBindingService$Injector;
Lcom/android/server/appbinding/AppBindingService$Lifecycle;
Lcom/android/server/appbinding/AppBindingService;
Lcom/android/server/appbinding/AppBindingUtils;
Lcom/android/server/appbinding/finders/-$$Lambda$CarrierMessagingClientServiceFinder$HEVyQ3IEZ8Eseze74Vyp3NHEREg;
Lcom/android/server/appbinding/finders/AppServiceFinder;
Lcom/android/server/appbinding/finders/CarrierMessagingClientServiceFinder$1;
Lcom/android/server/appbinding/finders/CarrierMessagingClientServiceFinder;
Lcom/android/server/appop/-$$Lambda$AppOpsService$GUeKjlbzT65s86vaxy5gvOajuhw;
Lcom/android/server/appop/AppOpsService$1;
Lcom/android/server/appop/AppOpsService$2;
Lcom/android/server/appop/AppOpsService$3;
Lcom/android/server/appop/AppOpsService$ActiveCallback;
Lcom/android/server/appop/AppOpsService$AppOpsManagerInternalImpl;
Lcom/android/server/appop/AppOpsService$ClientRestrictionState;
Lcom/android/server/appop/AppOpsService$ClientState;
Lcom/android/server/appop/AppOpsService$Constants;
Lcom/android/server/appop/AppOpsService$ModeCallback;
Lcom/android/server/appop/AppOpsService$NotedCallback;
Lcom/android/server/appop/AppOpsService$Op;
Lcom/android/server/appop/AppOpsService$Ops;
Lcom/android/server/appop/AppOpsService$Restriction;
Lcom/android/server/appop/AppOpsService$UidState;
Lcom/android/server/appop/AppOpsService;
Lcom/android/server/appop/HistoricalRegistry$1;
Lcom/android/server/appop/HistoricalRegistry$Persistence;
Lcom/android/server/appop/HistoricalRegistry;
Lcom/android/server/appprediction/AppPredictionManagerService$PredictionManagerServiceStub;
Lcom/android/server/appprediction/AppPredictionManagerService;
Lcom/android/server/appprediction/AppPredictionPerUserService;
Lcom/android/server/appprediction/RemoteAppPredictionService$RemoteAppPredictionServiceCallbacks;
Lcom/android/server/appwidget/AppWidgetService;
Lcom/android/server/appwidget/AppWidgetServiceImpl$1;
Lcom/android/server/appwidget/AppWidgetServiceImpl$AppWidgetManagerLocal;
Lcom/android/server/appwidget/AppWidgetServiceImpl$BackupRestoreController;
Lcom/android/server/appwidget/AppWidgetServiceImpl$CallbackHandler;
Lcom/android/server/appwidget/AppWidgetServiceImpl$SecurityPolicy;
Lcom/android/server/appwidget/AppWidgetServiceImpl;
Lcom/android/server/attention/AttentionManagerService$AttentionHandler;
Lcom/android/server/attention/AttentionManagerService$LocalService;
Lcom/android/server/attention/AttentionManagerService;
Lcom/android/server/audio/AudioDeviceBroker$BrokerHandler;
Lcom/android/server/audio/AudioDeviceBroker$BrokerThread;
Lcom/android/server/audio/AudioDeviceBroker;
Lcom/android/server/audio/AudioDeviceInventory;
Lcom/android/server/audio/AudioEventLogger$Event;
Lcom/android/server/audio/AudioEventLogger;
Lcom/android/server/audio/AudioService$1;
Lcom/android/server/audio/AudioService$2;
Lcom/android/server/audio/AudioService$3;
Lcom/android/server/audio/AudioService$4;
Lcom/android/server/audio/AudioService$AudioHandler;
Lcom/android/server/audio/AudioService$AudioServiceBroadcastReceiver;
Lcom/android/server/audio/AudioService$AudioServiceInternal;
Lcom/android/server/audio/AudioService$AudioServiceUserRestrictionsListener;
Lcom/android/server/audio/AudioService$AudioSystemThread;
Lcom/android/server/audio/AudioService$Lifecycle;
Lcom/android/server/audio/AudioService$MyDisplayStatusCallback;
Lcom/android/server/audio/AudioService$SettingsObserver;
Lcom/android/server/audio/AudioService$SoundPoolCallback;
Lcom/android/server/audio/AudioService$SoundPoolListenerThread;
Lcom/android/server/audio/AudioService$VolumeController;
Lcom/android/server/audio/AudioService$VolumeStreamState;
Lcom/android/server/audio/AudioService;
Lcom/android/server/audio/AudioServiceEvents$ForceUseEvent;
Lcom/android/server/audio/BtHelper$1;
Lcom/android/server/audio/BtHelper;
Lcom/android/server/audio/MediaFocusControl;
Lcom/android/server/audio/PlaybackActivityMonitor$DuckingManager;
Lcom/android/server/audio/PlaybackActivityMonitor$NewPlayerEvent;
Lcom/android/server/audio/PlaybackActivityMonitor$PlayMonitorClient;
Lcom/android/server/audio/PlaybackActivityMonitor;
Lcom/android/server/audio/PlayerFocusEnforcer;
Lcom/android/server/audio/RecordingActivityMonitor$RecMonitorClient;
Lcom/android/server/audio/RecordingActivityMonitor;
Lcom/android/server/audio/RotationHelper$AudioDisplayListener;
Lcom/android/server/audio/RotationHelper;
Lcom/android/server/autofill/-$$Lambda$AutofillManagerService$HTAoqR1LxaXvx4-rCytnamMG1c0;
Lcom/android/server/autofill/-$$Lambda$AutofillManagerServiceImpl$nyZ0mdl_PuYUAmxyoumBpVz6Dxk;
Lcom/android/server/autofill/AutofillManagerService$1;
Lcom/android/server/autofill/AutofillManagerService$AutoFillManagerServiceStub;
Lcom/android/server/autofill/AutofillManagerService$AutofillCompatState;
Lcom/android/server/autofill/AutofillManagerService$LocalService;
Lcom/android/server/autofill/AutofillManagerService;
Lcom/android/server/autofill/AutofillManagerServiceImpl;
Lcom/android/server/autofill/FieldClassificationStrategy;
Lcom/android/server/autofill/Helper;
Lcom/android/server/autofill/ui/-$$Lambda$AutoFillUI$XWhvh2-Jd9NLMoEos-e8RkZdQaI;
Lcom/android/server/autofill/ui/AutoFillUI;
Lcom/android/server/autofill/ui/OverlayControl;
Lcom/android/server/backup/BackupManagerService$Lifecycle;
Lcom/android/server/backup/BackupManagerService;
Lcom/android/server/backup/Trampoline;
Lcom/android/server/biometrics/-$$Lambda$BiometricServiceBase$F4H2HbJPkB5kHnCG99RJzq63ETk;
Lcom/android/server/biometrics/-$$Lambda$BiometricServiceBase$HtA60PD2POS70xjo2Wkv9Ds3iIM;
Lcom/android/server/biometrics/-$$Lambda$BiometricServiceBase$d8jmYuo4MyZZpxoeouUPEq4DMII;
Lcom/android/server/biometrics/-$$Lambda$BiometricServiceBase$fPrFwbkIihZrGIgPSW0LZgzpmas;
Lcom/android/server/biometrics/AuthenticationClient;
Lcom/android/server/biometrics/BiometricService$1;
Lcom/android/server/biometrics/BiometricService$Authenticator;
Lcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$1;
Lcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$BiometricTaskStackListener;
Lcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;
Lcom/android/server/biometrics/BiometricService$EnabledOnKeyguardCallback;
Lcom/android/server/biometrics/BiometricService$SettingObserver;
Lcom/android/server/biometrics/BiometricService;
Lcom/android/server/biometrics/BiometricServiceBase$1;
Lcom/android/server/biometrics/BiometricServiceBase$AuthenticationClientImpl;
Lcom/android/server/biometrics/BiometricServiceBase$BiometricTaskStackListener;
Lcom/android/server/biometrics/BiometricServiceBase$DaemonWrapper;
Lcom/android/server/biometrics/BiometricServiceBase$EnumerateClientImpl;
Lcom/android/server/biometrics/BiometricServiceBase$H;
Lcom/android/server/biometrics/BiometricServiceBase$InternalEnumerateClient;
Lcom/android/server/biometrics/BiometricServiceBase$LockoutReceiver;
Lcom/android/server/biometrics/BiometricServiceBase$LockoutResetMonitor$2;
Lcom/android/server/biometrics/BiometricServiceBase$LockoutResetMonitor;
Lcom/android/server/biometrics/BiometricServiceBase$PerformanceStats;
Lcom/android/server/biometrics/BiometricServiceBase$RemovalClientImpl;
Lcom/android/server/biometrics/BiometricServiceBase$ResetClientStateRunnable;
Lcom/android/server/biometrics/BiometricServiceBase$ResetFailedAttemptsForUserRunnable;
Lcom/android/server/biometrics/BiometricServiceBase$ServiceListener;
Lcom/android/server/biometrics/BiometricServiceBase;
Lcom/android/server/biometrics/BiometricUserState$1;
Lcom/android/server/biometrics/BiometricUserState;
Lcom/android/server/biometrics/BiometricUtils;
Lcom/android/server/biometrics/ClientMonitor;
Lcom/android/server/biometrics/EnumerateClient;
Lcom/android/server/biometrics/LoggableMonitor;
Lcom/android/server/biometrics/Metrics;
Lcom/android/server/biometrics/RemovalClient;
Lcom/android/server/biometrics/fingerprint/-$$Lambda$FingerprintService$1$3I9ge5BoesXZUovbayCOCR754fc;
Lcom/android/server/biometrics/fingerprint/-$$Lambda$FingerprintService$YOMIOLvco2SvXVeJIulOSVKdX7A;
Lcom/android/server/biometrics/fingerprint/FingerprintMetrics;
Lcom/android/server/biometrics/fingerprint/FingerprintService$1;
Lcom/android/server/biometrics/fingerprint/FingerprintService$2;
Lcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintAuthClient;
Lcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintServiceWrapper;
Lcom/android/server/biometrics/fingerprint/FingerprintService$InternalEnumerateClient;
Lcom/android/server/biometrics/fingerprint/FingerprintService$InternalRemovalClient;
Lcom/android/server/biometrics/fingerprint/FingerprintService$LockoutReceiver;
Lcom/android/server/biometrics/fingerprint/FingerprintService$ResetFailedAttemptsForUserRunnable;
Lcom/android/server/biometrics/fingerprint/FingerprintService$ServiceListenerImpl;
Lcom/android/server/biometrics/fingerprint/FingerprintService;
Lcom/android/server/biometrics/fingerprint/FingerprintUserState;
Lcom/android/server/biometrics/fingerprint/FingerprintUtils;
Lcom/android/server/broadcastradio/BroadcastRadioService;
Lcom/android/server/broadcastradio/hal1/-$$Lambda$TunerCallback$-h4udaDmWtN-rprVGi_U0x7oSJc;
Lcom/android/server/broadcastradio/hal1/-$$Lambda$TunerCallback$C_-9BcvTpHXxQ-jC-hu9LBHT0XU;
Lcom/android/server/broadcastradio/hal1/-$$Lambda$TunerCallback$QNBMPvImBEGMe4jaw6iOF4QPjns;
Lcom/android/server/broadcastradio/hal1/-$$Lambda$TunerCallback$QwopTG5nMx1CO2s6KecqSuCqviA;
Lcom/android/server/broadcastradio/hal1/-$$Lambda$TunerCallback$YlDkqdeYbHPdKcgZh23aJ5Yw8mg;
Lcom/android/server/broadcastradio/hal1/-$$Lambda$TunerCallback$mdqODkiuJlYCJRXqdXBC-d6vdp4;
Lcom/android/server/broadcastradio/hal1/-$$Lambda$TunerCallback$ndOBpfBmClsz77tzZfe3mvcA1lI;
Lcom/android/server/broadcastradio/hal1/-$$Lambda$TunerCallback$nm8WiKzJMmmFFCbXZdjr71O3V8Q;
Lcom/android/server/broadcastradio/hal1/-$$Lambda$TunerCallback$qR-bdRNnpcaEQYaUWeumt5lHhtY;
Lcom/android/server/broadcastradio/hal1/-$$Lambda$TunerCallback$yDfY5pWuRHaQpNiYhPjLkNUUrc0;
Lcom/android/server/broadcastradio/hal1/-$$Lambda$TunerCallback$yVJR7oPW6kDozlkthdDAOaT7L-4;
Lcom/android/server/broadcastradio/hal1/BroadcastRadioService;
Lcom/android/server/broadcastradio/hal1/Convert;
Lcom/android/server/broadcastradio/hal1/Tuner;
Lcom/android/server/broadcastradio/hal1/TunerCallback$RunnableThrowingRemoteException;
Lcom/android/server/broadcastradio/hal1/TunerCallback;
Lcom/android/server/camera/CameraServiceProxy$1;
Lcom/android/server/camera/CameraServiceProxy$2;
Lcom/android/server/camera/CameraServiceProxy;
Lcom/android/server/camera/CameraStatsJobService;
Lcom/android/server/clipboard/ClipboardService$ClipboardImpl;
Lcom/android/server/clipboard/ClipboardService;
Lcom/android/server/companion/-$$Lambda$CompanionDeviceManagerService$1$EelUlD0Ldboon98oq6H5kDCPW9I;
Lcom/android/server/companion/-$$Lambda$CompanionDeviceManagerService$1$IwZz9SPheLuA45R-qkZX_v1sHV4;
Lcom/android/server/companion/-$$Lambda$CompanionDeviceManagerService$CompanionDeviceManagerImpl$bdv3Vfadbb8b9nrSgkARO4oYOXU;
Lcom/android/server/companion/-$$Lambda$CompanionDeviceManagerService$bh5xRJq9-CRJoXvmerYRNjK1xEQ;
Lcom/android/server/companion/CompanionDeviceManagerService$1;
Lcom/android/server/companion/CompanionDeviceManagerService$CompanionDeviceManagerImpl;
Lcom/android/server/companion/CompanionDeviceManagerService;
Lcom/android/server/connectivity/-$$Lambda$IpConnectivityMetrics$B0oR30xfeM300kIzUVaV_zUNLCg;
Lcom/android/server/connectivity/-$$Lambda$Tethering$5JkghhOVq1MW7iK03DMZUSuLdFM;
Lcom/android/server/connectivity/-$$Lambda$Tethering$CZZ1cyMeU7DUmSuQSKselF5XA5o;
Lcom/android/server/connectivity/DataConnectionStats$1;
Lcom/android/server/connectivity/DataConnectionStats;
Lcom/android/server/connectivity/DefaultNetworkMetrics;
Lcom/android/server/connectivity/DnsManager;
Lcom/android/server/connectivity/IpConnectivityMetrics$Impl;
Lcom/android/server/connectivity/IpConnectivityMetrics$Logger;
Lcom/android/server/connectivity/IpConnectivityMetrics$LoggerImpl;
Lcom/android/server/connectivity/IpConnectivityMetrics;
Lcom/android/server/connectivity/KeepaliveTracker;
Lcom/android/server/connectivity/LingerMonitor;
Lcom/android/server/connectivity/MockableSystemProperties;
Lcom/android/server/connectivity/MultipathPolicyTracker$1;
Lcom/android/server/connectivity/MultipathPolicyTracker$2;
Lcom/android/server/connectivity/MultipathPolicyTracker$ConfigChangeReceiver;
Lcom/android/server/connectivity/MultipathPolicyTracker$Dependencies;
Lcom/android/server/connectivity/MultipathPolicyTracker$SettingsObserver;
Lcom/android/server/connectivity/MultipathPolicyTracker;
Lcom/android/server/connectivity/Nat464Xlat;
Lcom/android/server/connectivity/NetdEventListenerService$NetworkMetricsSnapshot;
Lcom/android/server/connectivity/NetdEventListenerService;
Lcom/android/server/connectivity/NetworkAgentInfo;
Lcom/android/server/connectivity/NetworkNotificationManager;
Lcom/android/server/connectivity/PacManager$1;
Lcom/android/server/connectivity/PacManager$PacRefreshIntentReceiver;
Lcom/android/server/connectivity/PacManager;
Lcom/android/server/connectivity/PermissionMonitor$PackageListObserver;
Lcom/android/server/connectivity/PermissionMonitor;
Lcom/android/server/connectivity/ProxyTracker;
Lcom/android/server/connectivity/TcpKeepaliveController;
Lcom/android/server/connectivity/Tethering$3;
Lcom/android/server/connectivity/Tethering$StateReceiver;
Lcom/android/server/connectivity/Tethering$TetherMasterSM$ErrorState;
Lcom/android/server/connectivity/Tethering$TetherMasterSM$InitialState;
Lcom/android/server/connectivity/Tethering$TetherMasterSM$OffloadWrapper;
Lcom/android/server/connectivity/Tethering$TetherMasterSM$SetDnsForwardersErrorState;
Lcom/android/server/connectivity/Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState;
Lcom/android/server/connectivity/Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState;
Lcom/android/server/connectivity/Tethering$TetherMasterSM$StartTetheringErrorState;
Lcom/android/server/connectivity/Tethering$TetherMasterSM$StopTetheringErrorState;
Lcom/android/server/connectivity/Tethering$TetherMasterSM$TetherModeAliveState;
Lcom/android/server/connectivity/Tethering$TetherMasterSM;
Lcom/android/server/connectivity/Tethering$TetherState;
Lcom/android/server/connectivity/Tethering$TetheringUserRestrictionListener;
Lcom/android/server/connectivity/Tethering;
Lcom/android/server/connectivity/Vpn$2;
Lcom/android/server/connectivity/Vpn$SystemServices;
Lcom/android/server/connectivity/Vpn;
Lcom/android/server/connectivity/tethering/-$$Lambda$OffloadController$OffloadTetheringStatsProvider$3TF0NI3fE8A-xW0925oMv3YzAOk;
Lcom/android/server/connectivity/tethering/EntitlementManager;
Lcom/android/server/connectivity/tethering/IPv6TetheringCoordinator;
Lcom/android/server/connectivity/tethering/OffloadController$OffloadTetheringStatsProvider;
Lcom/android/server/connectivity/tethering/OffloadController;
Lcom/android/server/connectivity/tethering/OffloadHardwareInterface$ForwardedStats;
Lcom/android/server/connectivity/tethering/OffloadHardwareInterface;
Lcom/android/server/connectivity/tethering/TetheringConfiguration;
Lcom/android/server/connectivity/tethering/TetheringDependencies;
Lcom/android/server/connectivity/tethering/UpstreamNetworkMonitor$UpstreamNetworkCallback;
Lcom/android/server/connectivity/tethering/UpstreamNetworkMonitor;
Lcom/android/server/content/-$$Lambda$SyncManager$68MEyNkTh36YmYoFlURJoRa_-cY;
Lcom/android/server/content/-$$Lambda$SyncManager$CjX_2uO4O4xJPQnKzeqvGwd87Dc;
Lcom/android/server/content/-$$Lambda$SyncManager$HhiSFjEoPA_Hnv3xYZGfwkalc68;
Lcom/android/server/content/-$$Lambda$SyncManager$bVs0A6OYdmGkOiq_lbp5MiBwelw;
Lcom/android/server/content/-$$Lambda$SyncManagerConstants$qo5ldQVp10jCUY9aavBZDKP2k6Q;
Lcom/android/server/content/ContentService$1;
Lcom/android/server/content/ContentService$3;
Lcom/android/server/content/ContentService$Lifecycle;
Lcom/android/server/content/ContentService$ObserverCall;
Lcom/android/server/content/ContentService$ObserverNode$ObserverEntry;
Lcom/android/server/content/ContentService$ObserverNode;
Lcom/android/server/content/ContentService;
Lcom/android/server/content/SyncJobService;
Lcom/android/server/content/SyncLogger$RotatingFileLogger$MyHandler;
Lcom/android/server/content/SyncLogger$RotatingFileLogger;
Lcom/android/server/content/SyncLogger;
Lcom/android/server/content/SyncManager$10;
Lcom/android/server/content/SyncManager$11;
Lcom/android/server/content/SyncManager$1;
Lcom/android/server/content/SyncManager$2;
Lcom/android/server/content/SyncManager$3;
Lcom/android/server/content/SyncManager$4;
Lcom/android/server/content/SyncManager$5;
Lcom/android/server/content/SyncManager$6;
Lcom/android/server/content/SyncManager$8;
Lcom/android/server/content/SyncManager$9;
Lcom/android/server/content/SyncManager$SyncHandler;
Lcom/android/server/content/SyncManager$SyncTimeTracker;
Lcom/android/server/content/SyncManager;
Lcom/android/server/content/SyncManagerConstants;
Lcom/android/server/content/SyncStorageEngine$AccountAuthorityValidator;
Lcom/android/server/content/SyncStorageEngine$AccountInfo;
Lcom/android/server/content/SyncStorageEngine$AuthorityInfo;
Lcom/android/server/content/SyncStorageEngine$DayStats;
Lcom/android/server/content/SyncStorageEngine$EndPoint;
Lcom/android/server/content/SyncStorageEngine$MyHandler;
Lcom/android/server/content/SyncStorageEngine$OnAuthorityRemovedListener;
Lcom/android/server/content/SyncStorageEngine$OnSyncRequestListener;
Lcom/android/server/content/SyncStorageEngine$PeriodicSyncAddedListener;
Lcom/android/server/content/SyncStorageEngine;
Lcom/android/server/contentcapture/-$$Lambda$ContentCaptureManagerService$mHKdlupOKTP3w3jJnNMhJi6ns5w;
Lcom/android/server/contentcapture/ContentCaptureManagerInternal;
Lcom/android/server/contentcapture/ContentCaptureManagerService$ContentCaptureManagerServiceStub;
Lcom/android/server/contentcapture/ContentCaptureManagerService$LocalService;
Lcom/android/server/contentcapture/ContentCaptureManagerService;
Lcom/android/server/contentcapture/ContentCapturePerUserService$ContentCaptureServiceRemoteCallback;
Lcom/android/server/contentcapture/ContentCapturePerUserService;
Lcom/android/server/contentcapture/RemoteContentCaptureService$ContentCaptureServiceCallbacks;
Lcom/android/server/contentcapture/RemoteContentCaptureService;
Lcom/android/server/contentsuggestions/ContentSuggestionsManagerService$ContentSuggestionsManagerStub;
Lcom/android/server/contentsuggestions/ContentSuggestionsManagerService;
Lcom/android/server/contentsuggestions/ContentSuggestionsPerUserService;
Lcom/android/server/coverage/CoverageService;
Lcom/android/server/devicepolicy/-$$Lambda$DevicePolicyManagerService$_Nw-YGl5ncBg-LJs8W81WNW6xoU;
Lcom/android/server/devicepolicy/BaseIDevicePolicyManager;
Lcom/android/server/devicepolicy/CertificateMonitor$1;
Lcom/android/server/devicepolicy/CertificateMonitor;
Lcom/android/server/devicepolicy/CryptoTestHelper;
Lcom/android/server/devicepolicy/DeviceAdminServiceController;
Lcom/android/server/devicepolicy/DevicePolicyCacheImpl;
Lcom/android/server/devicepolicy/DevicePolicyConstants;
Lcom/android/server/devicepolicy/DevicePolicyManagerService$1;
Lcom/android/server/devicepolicy/DevicePolicyManagerService$2;
Lcom/android/server/devicepolicy/DevicePolicyManagerService$3;
Lcom/android/server/devicepolicy/DevicePolicyManagerService$4;
Lcom/android/server/devicepolicy/DevicePolicyManagerService$8;
Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;
Lcom/android/server/devicepolicy/DevicePolicyManagerService$DevicePolicyConstantsObserver;
Lcom/android/server/devicepolicy/DevicePolicyManagerService$DevicePolicyData;
Lcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;
Lcom/android/server/devicepolicy/DevicePolicyManagerService$Lifecycle;
Lcom/android/server/devicepolicy/DevicePolicyManagerService$LocalService;
Lcom/android/server/devicepolicy/DevicePolicyManagerService$RestrictionsListener;
Lcom/android/server/devicepolicy/DevicePolicyManagerService$SetupContentObserver;
Lcom/android/server/devicepolicy/DevicePolicyManagerService;
Lcom/android/server/devicepolicy/OverlayPackagesProvider$DefaultInjector;
Lcom/android/server/devicepolicy/OverlayPackagesProvider$Injector;
Lcom/android/server/devicepolicy/OverlayPackagesProvider;
Lcom/android/server/devicepolicy/Owners$DeviceOwnerReadWriter;
Lcom/android/server/devicepolicy/Owners$FileReadWriter;
Lcom/android/server/devicepolicy/Owners$Injector;
Lcom/android/server/devicepolicy/Owners$OwnerInfo;
Lcom/android/server/devicepolicy/Owners$ProfileOwnerReadWriter;
Lcom/android/server/devicepolicy/Owners;
Lcom/android/server/devicepolicy/SecurityLogMonitor;
Lcom/android/server/devicepolicy/TransferOwnershipMetadataManager$Injector;
Lcom/android/server/devicepolicy/TransferOwnershipMetadataManager;
Lcom/android/server/display/-$$Lambda$AmbientBrightnessStatsTracker$vQZYn_dAhbvzT-Un4vvpuyIATII;
Lcom/android/server/display/-$$Lambda$VirtualDisplayAdapter$PFyqe-aYIEBicSVtuy5lL_bT8B0;
Lcom/android/server/display/AmbientBrightnessStatsTracker$AmbientBrightnessStats;
Lcom/android/server/display/AmbientBrightnessStatsTracker$Clock;
Lcom/android/server/display/AmbientBrightnessStatsTracker$Injector;
Lcom/android/server/display/AmbientBrightnessStatsTracker$Timer;
Lcom/android/server/display/AmbientBrightnessStatsTracker;
Lcom/android/server/display/AppSaturationController$SaturationController;
Lcom/android/server/display/AppSaturationController;
Lcom/android/server/display/AutomaticBrightnessController$2;
Lcom/android/server/display/AutomaticBrightnessController$AmbientLightRingBuffer;
Lcom/android/server/display/AutomaticBrightnessController$AutomaticBrightnessHandler;
Lcom/android/server/display/AutomaticBrightnessController$Callbacks;
Lcom/android/server/display/AutomaticBrightnessController$TaskStackListenerImpl;
Lcom/android/server/display/AutomaticBrightnessController;
Lcom/android/server/display/BrightnessIdleJob;
Lcom/android/server/display/BrightnessMappingStrategy$PhysicalMappingStrategy;
Lcom/android/server/display/BrightnessMappingStrategy;
Lcom/android/server/display/BrightnessTracker$DisplayListener;
Lcom/android/server/display/BrightnessTracker$Injector;
Lcom/android/server/display/BrightnessTracker$LightData;
Lcom/android/server/display/BrightnessTracker$Receiver;
Lcom/android/server/display/BrightnessTracker$SensorListener;
Lcom/android/server/display/BrightnessTracker$SettingsObserver;
Lcom/android/server/display/BrightnessTracker$TrackerHandler;
Lcom/android/server/display/BrightnessTracker;
Lcom/android/server/display/ColorDisplayService$1;
Lcom/android/server/display/ColorDisplayService$2;
Lcom/android/server/display/ColorDisplayService$BinderService;
Lcom/android/server/display/ColorDisplayService$ColorDisplayServiceInternal;
Lcom/android/server/display/ColorDisplayService$ColorMatrixEvaluator;
Lcom/android/server/display/ColorDisplayService$ColorTransformController;
Lcom/android/server/display/ColorDisplayService$DisplayWhiteBalanceListener;
Lcom/android/server/display/ColorDisplayService$NightDisplayTintController;
Lcom/android/server/display/ColorDisplayService$TintController;
Lcom/android/server/display/ColorDisplayService$TintHandler;
Lcom/android/server/display/ColorDisplayService;
Lcom/android/server/display/ColorFade;
Lcom/android/server/display/DisplayAdapter$1;
Lcom/android/server/display/DisplayAdapter$2;
Lcom/android/server/display/DisplayAdapter$Listener;
Lcom/android/server/display/DisplayAdapter;
Lcom/android/server/display/DisplayBlanker;
Lcom/android/server/display/DisplayDevice;
Lcom/android/server/display/DisplayDeviceInfo;
Lcom/android/server/display/DisplayManagerService$1;
Lcom/android/server/display/DisplayManagerService$BinderService;
Lcom/android/server/display/DisplayManagerService$CallbackRecord;
Lcom/android/server/display/DisplayManagerService$DisplayAdapterListener;
Lcom/android/server/display/DisplayManagerService$DisplayManagerHandler;
Lcom/android/server/display/DisplayManagerService$Injector;
Lcom/android/server/display/DisplayManagerService$LocalService$1;
Lcom/android/server/display/DisplayManagerService$LocalService;
Lcom/android/server/display/DisplayManagerService$SyncRoot;
Lcom/android/server/display/DisplayManagerService;
Lcom/android/server/display/DisplayPowerController$1;
Lcom/android/server/display/DisplayPowerController$2;
Lcom/android/server/display/DisplayPowerController$3;
Lcom/android/server/display/DisplayPowerController$4;
Lcom/android/server/display/DisplayPowerController$5;
Lcom/android/server/display/DisplayPowerController$6;
Lcom/android/server/display/DisplayPowerController$8;
Lcom/android/server/display/DisplayPowerController$DisplayControllerHandler;
Lcom/android/server/display/DisplayPowerController$SettingsObserver;
Lcom/android/server/display/DisplayPowerController;
Lcom/android/server/display/DisplayPowerState$1;
Lcom/android/server/display/DisplayPowerState$2;
Lcom/android/server/display/DisplayPowerState$3;
Lcom/android/server/display/DisplayPowerState$4;
Lcom/android/server/display/DisplayPowerState$PhotonicModulator;
Lcom/android/server/display/DisplayPowerState;
Lcom/android/server/display/DisplayTransformManager;
Lcom/android/server/display/HysteresisLevels;
Lcom/android/server/display/LocalDisplayAdapter$DisplayModeRecord;
Lcom/android/server/display/LocalDisplayAdapter$HotplugDisplayEventReceiver;
Lcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice$1;
Lcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice;
Lcom/android/server/display/LocalDisplayAdapter$PhysicalDisplayEventReceiver;
Lcom/android/server/display/LocalDisplayAdapter;
Lcom/android/server/display/LogicalDisplay;
Lcom/android/server/display/OverlayDisplayAdapter$1$1;
Lcom/android/server/display/OverlayDisplayAdapter$1;
Lcom/android/server/display/OverlayDisplayAdapter;
Lcom/android/server/display/PersistentDataStore$1;
Lcom/android/server/display/PersistentDataStore$BrightnessConfigurations;
Lcom/android/server/display/PersistentDataStore$DisplayState;
Lcom/android/server/display/PersistentDataStore$Injector;
Lcom/android/server/display/PersistentDataStore$StableDeviceValues;
Lcom/android/server/display/PersistentDataStore;
Lcom/android/server/display/RampAnimator$1;
Lcom/android/server/display/RampAnimator$Listener;
Lcom/android/server/display/RampAnimator;
Lcom/android/server/display/VirtualDisplayAdapter$SurfaceControlDisplayFactory;
Lcom/android/server/display/VirtualDisplayAdapter;
Lcom/android/server/display/WifiDisplayAdapter;
Lcom/android/server/display/color/AppSaturationController$SaturationController;
Lcom/android/server/display/color/AppSaturationController;
Lcom/android/server/display/color/ColorDisplayService$1;
Lcom/android/server/display/color/ColorDisplayService$BinderService;
Lcom/android/server/display/color/ColorDisplayService$ColorDisplayServiceInternal;
Lcom/android/server/display/color/ColorDisplayService$ColorMatrixEvaluator;
Lcom/android/server/display/color/ColorDisplayService$ColorTransformController;
Lcom/android/server/display/color/ColorDisplayService$DisplayWhiteBalanceListener;
Lcom/android/server/display/color/ColorDisplayService$DisplayWhiteBalanceTintController;
Lcom/android/server/display/color/ColorDisplayService$NightDisplayTintController;
Lcom/android/server/display/color/ColorDisplayService$TintController;
Lcom/android/server/display/color/ColorDisplayService$TintHandler;
Lcom/android/server/display/color/ColorDisplayService;
Lcom/android/server/display/color/DisplayTransformManager;
Lcom/android/server/display/utils/History;
Lcom/android/server/display/utils/Plog$SystemPlog;
Lcom/android/server/display/utils/Plog;
Lcom/android/server/display/utils/RollingBuffer;
Lcom/android/server/display/whitebalance/AmbientFilter$WeightedMovingAverageAmbientFilter;
Lcom/android/server/display/whitebalance/AmbientFilter;
Lcom/android/server/display/whitebalance/AmbientSensor$1;
Lcom/android/server/display/whitebalance/AmbientSensor$AmbientBrightnessSensor;
Lcom/android/server/display/whitebalance/AmbientSensor$AmbientColorTemperatureSensor;
Lcom/android/server/display/whitebalance/AmbientSensor;
Lcom/android/server/display/whitebalance/DisplayWhiteBalanceController$Callbacks;
Lcom/android/server/display/whitebalance/DisplayWhiteBalanceFactory;
Lcom/android/server/display/whitebalance/DisplayWhiteBalanceSettings$DisplayWhiteBalanceSettingsHandler;
Lcom/android/server/display/whitebalance/DisplayWhiteBalanceSettings$SettingsObserver;
Lcom/android/server/display/whitebalance/DisplayWhiteBalanceSettings;
Lcom/android/server/dreams/DreamController$1;
Lcom/android/server/dreams/DreamController$2;
Lcom/android/server/dreams/DreamController$Listener;
Lcom/android/server/dreams/DreamController;
Lcom/android/server/dreams/DreamManagerService$1;
Lcom/android/server/dreams/DreamManagerService$4;
Lcom/android/server/dreams/DreamManagerService$5;
Lcom/android/server/dreams/DreamManagerService$6;
Lcom/android/server/dreams/DreamManagerService$BinderService;
Lcom/android/server/dreams/DreamManagerService$DreamHandler;
Lcom/android/server/dreams/DreamManagerService$LocalService;
Lcom/android/server/dreams/DreamManagerService;
Lcom/android/server/emergency/EmergencyAffordanceService$1;
Lcom/android/server/emergency/EmergencyAffordanceService$2;
Lcom/android/server/emergency/EmergencyAffordanceService$3;
Lcom/android/server/emergency/EmergencyAffordanceService$MyHandler;
Lcom/android/server/emergency/EmergencyAffordanceService;
Lcom/android/server/ethernet/-$$Lambda$EthernetNetworkFactory$EmftAjIay22czoGb8k_mrRGmnzg;
Lcom/android/server/ethernet/-$$Lambda$EthernetNetworkFactory$KXwxO15KBNVyyYS-UjD-Flm1vQ0;
Lcom/android/server/ethernet/-$$Lambda$EthernetNetworkFactory$TVQUJVMLGgbguTOK63vgn0fV1JA;
Lcom/android/server/ethernet/-$$Lambda$EthernetNetworkFactory$b1ndnzBiSX1ihvZw7GtATwTUsto;
Lcom/android/server/ethernet/-$$Lambda$EthernetTracker$7ZSuSvoSqcExye5DLwv_gyq6gyM;
Lcom/android/server/ethernet/-$$Lambda$EthernetTracker$InterfaceObserver$RwJV-Ek3mzxwZq-yoQwiconpRi8;
Lcom/android/server/ethernet/-$$Lambda$EthernetTracker$InterfaceObserver$d1ixKZZuAxwm1Dz_AX3HmL4JVLA;
Lcom/android/server/ethernet/EthernetConfigStore;
Lcom/android/server/ethernet/EthernetNetworkFactory$NetworkInterfaceState;
Lcom/android/server/ethernet/EthernetNetworkFactory;
Lcom/android/server/ethernet/EthernetService;
Lcom/android/server/ethernet/EthernetServiceImpl;
Lcom/android/server/ethernet/EthernetTracker$InterfaceObserver;
Lcom/android/server/ethernet/EthernetTracker;
Lcom/android/server/firewall/AndFilter$1;
Lcom/android/server/firewall/AndFilter;
Lcom/android/server/firewall/CategoryFilter$1;
Lcom/android/server/firewall/CategoryFilter;
Lcom/android/server/firewall/Filter;
Lcom/android/server/firewall/FilterFactory;
Lcom/android/server/firewall/FilterList;
Lcom/android/server/firewall/IntentFirewall$1;
Lcom/android/server/firewall/IntentFirewall$AMSInterface;
Lcom/android/server/firewall/IntentFirewall$FirewallHandler;
Lcom/android/server/firewall/IntentFirewall$FirewallIntentFilter;
Lcom/android/server/firewall/IntentFirewall$FirewallIntentResolver;
Lcom/android/server/firewall/IntentFirewall$Rule;
Lcom/android/server/firewall/IntentFirewall$RuleObserver;
Lcom/android/server/firewall/IntentFirewall;
Lcom/android/server/firewall/NotFilter$1;
Lcom/android/server/firewall/NotFilter;
Lcom/android/server/firewall/OrFilter$1;
Lcom/android/server/firewall/OrFilter;
Lcom/android/server/firewall/PortFilter$1;
Lcom/android/server/firewall/PortFilter;
Lcom/android/server/firewall/SenderFilter$1;
Lcom/android/server/firewall/SenderFilter$2;
Lcom/android/server/firewall/SenderFilter$3;
Lcom/android/server/firewall/SenderFilter$4;
Lcom/android/server/firewall/SenderFilter$5;
Lcom/android/server/firewall/SenderFilter;
Lcom/android/server/firewall/SenderPackageFilter$1;
Lcom/android/server/firewall/SenderPackageFilter;
Lcom/android/server/firewall/SenderPermissionFilter$1;
Lcom/android/server/firewall/SenderPermissionFilter;
Lcom/android/server/firewall/StringFilter$10;
Lcom/android/server/firewall/StringFilter$1;
Lcom/android/server/firewall/StringFilter$2;
Lcom/android/server/firewall/StringFilter$3;
Lcom/android/server/firewall/StringFilter$4;
Lcom/android/server/firewall/StringFilter$5;
Lcom/android/server/firewall/StringFilter$6;
Lcom/android/server/firewall/StringFilter$7;
Lcom/android/server/firewall/StringFilter$8;
Lcom/android/server/firewall/StringFilter$9;
Lcom/android/server/firewall/StringFilter$ContainsFilter;
Lcom/android/server/firewall/StringFilter$EqualsFilter;
Lcom/android/server/firewall/StringFilter$IsNullFilter;
Lcom/android/server/firewall/StringFilter$PatternStringFilter;
Lcom/android/server/firewall/StringFilter$RegexFilter;
Lcom/android/server/firewall/StringFilter$StartsWithFilter;
Lcom/android/server/firewall/StringFilter$ValueProvider;
Lcom/android/server/firewall/StringFilter;
Lcom/android/server/gpu/GpuService$PackageReceiver;
Lcom/android/server/gpu/GpuService;
Lcom/android/server/hdmi/HdmiCecController;
Lcom/android/server/hdmi/HdmiControlService;
Lcom/android/server/incident/IncidentCompanionService$BinderService;
Lcom/android/server/incident/IncidentCompanionService;
Lcom/android/server/incident/PendingReports;
Lcom/android/server/incident/RequestQueue$1;
Lcom/android/server/incident/RequestQueue;
Lcom/android/server/infra/-$$Lambda$AbstractMasterSystemService$D8HGGcjBX_RP_b5u02Ee0u4nYKM;
Lcom/android/server/infra/-$$Lambda$AbstractMasterSystemService$_fKw-VUP0pSfcMMlgRqoT4OPhxw;
Lcom/android/server/infra/AbstractMasterSystemService$1;
Lcom/android/server/infra/AbstractMasterSystemService$SettingsObserver;
Lcom/android/server/infra/AbstractMasterSystemService;
Lcom/android/server/infra/AbstractPerUserSystemService;
Lcom/android/server/infra/FrameworkResourcesServiceNameResolver;
Lcom/android/server/infra/SecureSettingsServiceNameResolver;
Lcom/android/server/infra/ServiceNameResolver$NameResolverListener;
Lcom/android/server/infra/ServiceNameResolver;
Lcom/android/server/input/InputManagerService$10;
Lcom/android/server/input/InputManagerService$11;
Lcom/android/server/input/InputManagerService$12;
Lcom/android/server/input/InputManagerService$1;
Lcom/android/server/input/InputManagerService$2;
Lcom/android/server/input/InputManagerService$3;
Lcom/android/server/input/InputManagerService$4;
Lcom/android/server/input/InputManagerService$5;
Lcom/android/server/input/InputManagerService$6;
Lcom/android/server/input/InputManagerService$7;
Lcom/android/server/input/InputManagerService$8;
Lcom/android/server/input/InputManagerService$9;
Lcom/android/server/input/InputManagerService$InputManagerHandler;
Lcom/android/server/input/InputManagerService$KeyboardLayoutDescriptor;
Lcom/android/server/input/InputManagerService$KeyboardLayoutVisitor;
Lcom/android/server/input/InputManagerService$LocalService;
Lcom/android/server/input/InputManagerService$WindowManagerCallbacks;
Lcom/android/server/input/InputManagerService$WiredAccessoryCallbacks;
Lcom/android/server/input/InputManagerService;
Lcom/android/server/input/PersistentDataStore$InputDeviceState;
Lcom/android/server/input/PersistentDataStore;
Lcom/android/server/inputmethod/-$$Lambda$InputMethodManagerService$WKeggbXOK74NyV9Xn48GoWFf9Js;
Lcom/android/server/inputmethod/AdditionalSubtypeUtils;
Lcom/android/server/inputmethod/InputMethodManagerInternal$1;
Lcom/android/server/inputmethod/InputMethodManagerInternal;
Lcom/android/server/inputmethod/InputMethodManagerService$1;
Lcom/android/server/inputmethod/InputMethodManagerService$2;
Lcom/android/server/inputmethod/InputMethodManagerService$ClientDeathRecipient;
Lcom/android/server/inputmethod/InputMethodManagerService$ClientState;
Lcom/android/server/inputmethod/InputMethodManagerService$DebugFlag;
Lcom/android/server/inputmethod/InputMethodManagerService$DebugFlags;
Lcom/android/server/inputmethod/InputMethodManagerService$HardKeyboardListener;
Lcom/android/server/inputmethod/InputMethodManagerService$ImeDisplayValidator;
Lcom/android/server/inputmethod/InputMethodManagerService$ImmsBroadcastReceiver;
Lcom/android/server/inputmethod/InputMethodManagerService$Lifecycle;
Lcom/android/server/inputmethod/InputMethodManagerService$LocalServiceImpl;
Lcom/android/server/inputmethod/InputMethodManagerService$MyPackageMonitor;
Lcom/android/server/inputmethod/InputMethodManagerService$SettingsObserver;
Lcom/android/server/inputmethod/InputMethodManagerService$StartInputHistory$Entry;
Lcom/android/server/inputmethod/InputMethodManagerService$StartInputHistory;
Lcom/android/server/inputmethod/InputMethodManagerService;
Lcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$ControllerImpl;
Lcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$DynamicRotationList;
Lcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$ImeSubtypeListItem;
Lcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$InputMethodAndSubtypeList;
Lcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$StaticRotationList;
Lcom/android/server/inputmethod/InputMethodSubtypeSwitchingController;
Lcom/android/server/inputmethod/InputMethodUtils$1;
Lcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;
Lcom/android/server/inputmethod/InputMethodUtils;
Lcom/android/server/inputmethod/LocaleUtils$LocaleExtractor;
Lcom/android/server/job/-$$Lambda$JobConcurrencyManager$5dmb0pQscXPwEG6SBnhs7aCwpSs;
Lcom/android/server/job/-$$Lambda$JobSchedulerService$AauD0it1BcgWldVm_V1m2Jo7_Zc;
Lcom/android/server/job/-$$Lambda$JobSchedulerService$Lfddr1PhKRLtm92W7niRGMWO69M;
Lcom/android/server/job/-$$Lambda$JobSchedulerService$V6_ZmVmzJutg4w0s0LktDOsRAss;
Lcom/android/server/job/-$$Lambda$JobSchedulerService$nXpbkYDrU0yC5DuTafFiblXBdTY;
Lcom/android/server/job/-$$Lambda$JobStore$JobSet$D9839QVHHu4X-hnxouyIMkP5NWA;
Lcom/android/server/job/-$$Lambda$JobStore$JobSet$id1Y3Yh8Y9sEb-njlNCUNay6U9k;
Lcom/android/server/job/JobCompletedListener;
Lcom/android/server/job/JobConcurrencyManager$1;
Lcom/android/server/job/JobConcurrencyManager$JobCountTracker;
Lcom/android/server/job/JobConcurrencyManager;
Lcom/android/server/job/JobPackageTracker$DataSet;
Lcom/android/server/job/JobPackageTracker;
Lcom/android/server/job/JobSchedulerInternal$JobStorePersistStats;
Lcom/android/server/job/JobSchedulerInternal;
Lcom/android/server/job/JobSchedulerService$1;
Lcom/android/server/job/JobSchedulerService$2;
Lcom/android/server/job/JobSchedulerService$3;
Lcom/android/server/job/JobSchedulerService$Constants;
Lcom/android/server/job/JobSchedulerService$ConstantsObserver;
Lcom/android/server/job/JobSchedulerService$DeferredJobCounter;
Lcom/android/server/job/JobSchedulerService$HeartbeatAlarmListener;
Lcom/android/server/job/JobSchedulerService$JobHandler;
Lcom/android/server/job/JobSchedulerService$JobSchedulerStub;
Lcom/android/server/job/JobSchedulerService$LocalService;
Lcom/android/server/job/JobSchedulerService$MaxJobCounts;
Lcom/android/server/job/JobSchedulerService$MaxJobCountsPerMemoryTrimLevel;
Lcom/android/server/job/JobSchedulerService$MaybeReadyJobQueueFunctor;
Lcom/android/server/job/JobSchedulerService$ReadyJobQueueFunctor;
Lcom/android/server/job/JobSchedulerService$StandbyTracker;
Lcom/android/server/job/JobSchedulerService$ThermalStatusListener;
Lcom/android/server/job/JobSchedulerService;
Lcom/android/server/job/JobServiceContext$JobServiceHandler;
Lcom/android/server/job/JobServiceContext;
Lcom/android/server/job/JobStore$1;
Lcom/android/server/job/JobStore$JobSet;
Lcom/android/server/job/JobStore$ReadJobMapFromDiskRunnable;
Lcom/android/server/job/JobStore;
Lcom/android/server/job/StateChangedListener;
Lcom/android/server/job/controllers/-$$Lambda$QuotaController$Nr0Q3oPwHBGHfHSdpzIm80t7M7s;
Lcom/android/server/job/controllers/-$$Lambda$QuotaController$StandbyTracker$HBosnPX15xU_maD6xbBsC7aJqOU;
Lcom/android/server/job/controllers/-$$Lambda$QuotaController$StandbyTracker$UNCXPiY4xGPFhTnC-LuVzvqiAl4;
Lcom/android/server/job/controllers/BackgroundJobsController$1;
Lcom/android/server/job/controllers/BackgroundJobsController$UpdateJobFunctor;
Lcom/android/server/job/controllers/BackgroundJobsController;
Lcom/android/server/job/controllers/BatteryController$ChargingTracker;
Lcom/android/server/job/controllers/BatteryController;
Lcom/android/server/job/controllers/ConnectivityController$1;
Lcom/android/server/job/controllers/ConnectivityController$2;
Lcom/android/server/job/controllers/ConnectivityController;
Lcom/android/server/job/controllers/ContentObserverController;
Lcom/android/server/job/controllers/DeviceIdleJobsController$1;
Lcom/android/server/job/controllers/DeviceIdleJobsController$DeviceIdleJobsDelayHandler;
Lcom/android/server/job/controllers/DeviceIdleJobsController$DeviceIdleUpdateFunctor;
Lcom/android/server/job/controllers/DeviceIdleJobsController;
Lcom/android/server/job/controllers/IdleController;
Lcom/android/server/job/controllers/JobStatus;
Lcom/android/server/job/controllers/QuotaController$1;
Lcom/android/server/job/controllers/QuotaController$2;
Lcom/android/server/job/controllers/QuotaController$ChargingTracker;
Lcom/android/server/job/controllers/QuotaController$DeleteTimingSessionsFunctor$1;
Lcom/android/server/job/controllers/QuotaController$DeleteTimingSessionsFunctor;
Lcom/android/server/job/controllers/QuotaController$EarliestEndTimeFunctor;
Lcom/android/server/job/controllers/QuotaController$ExecutionStats;
Lcom/android/server/job/controllers/QuotaController$QcAlarmListener;
Lcom/android/server/job/controllers/QuotaController$QcHandler;
Lcom/android/server/job/controllers/QuotaController$StandbyTracker;
Lcom/android/server/job/controllers/QuotaController$Timer;
Lcom/android/server/job/controllers/QuotaController$UidConstraintUpdater;
Lcom/android/server/job/controllers/QuotaController$UserPackageMap;
Lcom/android/server/job/controllers/QuotaController;
Lcom/android/server/job/controllers/StateController;
Lcom/android/server/job/controllers/StorageController$StorageTracker;
Lcom/android/server/job/controllers/StorageController;
Lcom/android/server/job/controllers/TimeController$1;
Lcom/android/server/job/controllers/TimeController$2;
Lcom/android/server/job/controllers/TimeController;
Lcom/android/server/job/controllers/idle/-$$Lambda$DeviceIdlenessTracker$-H1-ZwZAJ-vh10A0PeYXaZLj_R0;
Lcom/android/server/job/controllers/idle/DeviceIdlenessTracker;
Lcom/android/server/job/controllers/idle/IdlenessListener;
Lcom/android/server/job/controllers/idle/IdlenessTracker;
Lcom/android/server/lights/Light;
Lcom/android/server/lights/LightsManager;
Lcom/android/server/lights/LightsService$1;
Lcom/android/server/lights/LightsService$2;
Lcom/android/server/lights/LightsService$LightImpl;
Lcom/android/server/lights/LightsService;
Lcom/android/server/location/-$$Lambda$5U-_NhZgxqnYDZhpyacq4qBxh8k;
Lcom/android/server/location/-$$Lambda$ContextHubClientBroker$CFacmt7807NhDDkp6CgbkeGnMvQ;
Lcom/android/server/location/-$$Lambda$ContextHubClientBroker$P9IUEzaG4gP8jALe00of9jdlrGw;
Lcom/android/server/location/-$$Lambda$ContextHubClientManager$f15OSYbsSONpkXn7GinnrBPeumw;
Lcom/android/server/location/-$$Lambda$ContextHubTransactionManager$sHbjr4TaLEATkCX_yhD2L7ebuxE;
Lcom/android/server/location/-$$Lambda$GeofenceProxy$nfSKchjbT2ANT9GbYwyAcTjzBwQ;
Lcom/android/server/location/-$$Lambda$GnssConfiguration$1$384RrX20Mx6OJsRiqsQcSxYdcZc;
Lcom/android/server/location/-$$Lambda$GnssConfiguration$1$5tBf0Ru8L994vqKbXOeOBj2A-CA;
Lcom/android/server/location/-$$Lambda$GnssConfiguration$1$8lp2ukEzg_Agf73p3ka-dqhWUpE;
Lcom/android/server/location/-$$Lambda$GnssConfiguration$1$9cfNUAWKKutp5KSqhvHSGJNe0ao;
Lcom/android/server/location/-$$Lambda$GnssConfiguration$1$aaV8BigB_1Oil1H82EHUb0zvWPo;
Lcom/android/server/location/-$$Lambda$GnssConfiguration$1$rRu0NBMB8DgPt3DY5__6u_WNl7A;
Lcom/android/server/location/-$$Lambda$GnssConfiguration$1$sKzdHBM7V7DxdhcWx1u8hipJYFo;
Lcom/android/server/location/-$$Lambda$GnssLocationProvider$DiR2gLZsU3wguaAfx6x4XN_Suhg;
Lcom/android/server/location/-$$Lambda$GnssLocationProvider$Q6M8z_ZBiD7BNs3kvNmVrqoHSng;
Lcom/android/server/location/-$$Lambda$GnssLocationProvider$WbIUWqWbiKrZx6NHwSpsFU1pHKI;
Lcom/android/server/location/-$$Lambda$GnssLocationProvider$jI_1ijylK8qgSMUNPTBQdsK_VgI;
Lcom/android/server/location/-$$Lambda$LocationProviderProxy$2$QT3uzVX4fLIc1b7F_cP9P1hzluA;
Lcom/android/server/location/-$$Lambda$LocationProviderProxy$p3DjIvk7Of_sUF4Dc9plMNfdklc;
Lcom/android/server/location/-$$Lambda$RemoteListenerHelper$0Rlnad83RE1JdiVK0ULOLm530JM;
Lcom/android/server/location/AbstractLocationProvider$LocationProviderManager;
Lcom/android/server/location/AbstractLocationProvider;
Lcom/android/server/location/ActivityRecognitionProxy$1;
Lcom/android/server/location/ActivityRecognitionProxy;
Lcom/android/server/location/CallerIdentity;
Lcom/android/server/location/ComprehensiveCountryDetector$1;
Lcom/android/server/location/ComprehensiveCountryDetector$2;
Lcom/android/server/location/ComprehensiveCountryDetector$3;
Lcom/android/server/location/ComprehensiveCountryDetector$4;
Lcom/android/server/location/ComprehensiveCountryDetector;
Lcom/android/server/location/ContextHubClientBroker$CallbackConsumer;
Lcom/android/server/location/ContextHubClientBroker$PendingIntentRequest;
Lcom/android/server/location/ContextHubClientBroker;
Lcom/android/server/location/ContextHubClientManager;
Lcom/android/server/location/ContextHubService$1;
Lcom/android/server/location/ContextHubService$4;
Lcom/android/server/location/ContextHubService$ContextHubServiceCallback;
Lcom/android/server/location/ContextHubService;
Lcom/android/server/location/ContextHubServiceTransaction;
Lcom/android/server/location/ContextHubServiceUtil;
Lcom/android/server/location/ContextHubTransactionManager$5;
Lcom/android/server/location/ContextHubTransactionManager;
Lcom/android/server/location/CountryDetectorBase;
Lcom/android/server/location/ExponentialBackOff;
Lcom/android/server/location/GeocoderProxy;
Lcom/android/server/location/GeofenceManager$1;
Lcom/android/server/location/GeofenceManager$GeofenceHandler;
Lcom/android/server/location/GeofenceManager;
Lcom/android/server/location/GeofenceProxy$1;
Lcom/android/server/location/GeofenceProxy$GeofenceProxyServiceConnection;
Lcom/android/server/location/GeofenceProxy;
Lcom/android/server/location/GnssBatchingProvider$GnssBatchingProviderNative;
Lcom/android/server/location/GnssBatchingProvider;
Lcom/android/server/location/GnssConfiguration$1;
Lcom/android/server/location/GnssConfiguration$HalInterfaceVersion;
Lcom/android/server/location/GnssConfiguration$SetCarrierProperty;
Lcom/android/server/location/GnssConfiguration;
Lcom/android/server/location/GnssGeofenceProvider$GnssGeofenceProviderNative;
Lcom/android/server/location/GnssGeofenceProvider;
Lcom/android/server/location/GnssLocationProvider$1;
Lcom/android/server/location/GnssLocationProvider$2;
Lcom/android/server/location/GnssLocationProvider$3;
Lcom/android/server/location/GnssLocationProvider$4;
Lcom/android/server/location/GnssLocationProvider$5;
Lcom/android/server/location/GnssLocationProvider$6;
Lcom/android/server/location/GnssLocationProvider$7;
Lcom/android/server/location/GnssLocationProvider$8;
Lcom/android/server/location/GnssLocationProvider$9;
Lcom/android/server/location/GnssLocationProvider$FusedLocationListener;
Lcom/android/server/location/GnssLocationProvider$GnssMetricsProvider;
Lcom/android/server/location/GnssLocationProvider$GnssSystemInfoProvider;
Lcom/android/server/location/GnssLocationProvider$GpsRequest;
Lcom/android/server/location/GnssLocationProvider$LocationChangeListener;
Lcom/android/server/location/GnssLocationProvider$LocationExtras;
Lcom/android/server/location/GnssLocationProvider$NetworkLocationListener;
Lcom/android/server/location/GnssLocationProvider$ProviderHandler;
Lcom/android/server/location/GnssLocationProvider;
Lcom/android/server/location/GnssMeasurementsProvider$GnssMeasurementProviderNative;
Lcom/android/server/location/GnssMeasurementsProvider;
Lcom/android/server/location/GnssNavigationMessageProvider$GnssNavigationMessageProviderNative;
Lcom/android/server/location/GnssNavigationMessageProvider$StatusChangedOperation;
Lcom/android/server/location/GnssNavigationMessageProvider;
Lcom/android/server/location/GnssNetworkConnectivityHandler$1;
Lcom/android/server/location/GnssNetworkConnectivityHandler$2;
Lcom/android/server/location/GnssNetworkConnectivityHandler$GnssNetworkListener;
Lcom/android/server/location/GnssNetworkConnectivityHandler;
Lcom/android/server/location/GnssSatelliteBlacklistHelper$1;
Lcom/android/server/location/GnssSatelliteBlacklistHelper$GnssSatelliteBlacklistCallback;
Lcom/android/server/location/GnssSatelliteBlacklistHelper;
Lcom/android/server/location/GnssStatusListenerHelper;
Lcom/android/server/location/GnssVisibilityControl;
Lcom/android/server/location/LocationBasedCountryDetector$1;
Lcom/android/server/location/LocationBasedCountryDetector$2;
Lcom/android/server/location/LocationBasedCountryDetector;
Lcom/android/server/location/LocationBlacklist;
Lcom/android/server/location/LocationFudger$1;
Lcom/android/server/location/LocationFudger;
Lcom/android/server/location/LocationProviderProxy$1;
Lcom/android/server/location/LocationProviderProxy$2;
Lcom/android/server/location/LocationProviderProxy;
Lcom/android/server/location/LocationRequestStatistics$PackageProviderKey;
Lcom/android/server/location/LocationRequestStatistics$PackageStatistics;
Lcom/android/server/location/LocationRequestStatistics;
Lcom/android/server/location/NanoAppStateManager;
Lcom/android/server/location/NtpTimeHelper$InjectNtpTimeCallback;
Lcom/android/server/location/NtpTimeHelper;
Lcom/android/server/location/PassiveProvider;
Lcom/android/server/location/RemoteListenerHelper$ListenerOperation;
Lcom/android/server/location/RemoteListenerHelper;
Lcom/android/server/locksettings/-$$Lambda$SyntheticPasswordManager$WjMV-qfQ1YUbeAiLzyAhyepqPFI;
Lcom/android/server/locksettings/LockSettingsService$2;
Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver;
Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient;
Lcom/android/server/locksettings/LockSettingsService$Injector$1;
Lcom/android/server/locksettings/LockSettingsService$Injector;
Lcom/android/server/locksettings/LockSettingsService$Lifecycle;
Lcom/android/server/locksettings/LockSettingsService$LocalService;
Lcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker;
Lcom/android/server/locksettings/LockSettingsService;
Lcom/android/server/locksettings/LockSettingsStorage$Cache$CacheKey;
Lcom/android/server/locksettings/LockSettingsStorage$Cache;
Lcom/android/server/locksettings/LockSettingsStorage$Callback;
Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash;
Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper;
Lcom/android/server/locksettings/LockSettingsStorage;
Lcom/android/server/locksettings/LockSettingsStrongAuth$1;
Lcom/android/server/locksettings/LockSettingsStrongAuth;
Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;
Lcom/android/server/locksettings/SyntheticPasswordManager;
Lcom/android/server/locksettings/recoverablekeystore/InsecureUserException;
Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy;
Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxyImpl;
Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager;
Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator;
Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStorageException;
Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;
Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage;
Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper;
Lcom/android/server/locksettings/recoverablekeystore/certificate/CertParsingException;
Lcom/android/server/locksettings/recoverablekeystore/certificate/CertValidationException;
Lcom/android/server/locksettings/recoverablekeystore/serialization/KeyChainSnapshotParserException;
Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage;
Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;
Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper;
Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage;
Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage;
Lcom/android/server/media/-$$Lambda$MediaSessionServiceImpl$a3VtB0CQuvV4UG4nWgvCgkL6hec;
Lcom/android/server/media/AudioPlayerStateMonitor$MessageHandler;
Lcom/android/server/media/AudioPlayerStateMonitor$OnAudioPlayerActiveStateChangedListener;
Lcom/android/server/media/AudioPlayerStateMonitor;
Lcom/android/server/media/MediaResourceMonitorService$MediaResourceMonitorImpl;
Lcom/android/server/media/MediaResourceMonitorService;
Lcom/android/server/media/MediaRouterService$1$1;
Lcom/android/server/media/MediaRouterService$1;
Lcom/android/server/media/MediaRouterService$2;
Lcom/android/server/media/MediaRouterService$3;
Lcom/android/server/media/MediaRouterService$ClientRecord;
Lcom/android/server/media/MediaRouterService$MediaRouterServiceBroadcastReceiver;
Lcom/android/server/media/MediaRouterService$UserHandler;
Lcom/android/server/media/MediaRouterService$UserRecord;
Lcom/android/server/media/MediaRouterService;
Lcom/android/server/media/MediaSessionRecord$3;
Lcom/android/server/media/MediaSessionRecord$ControllerStub;
Lcom/android/server/media/MediaSessionRecord$MessageHandler;
Lcom/android/server/media/MediaSessionRecord$SessionCb;
Lcom/android/server/media/MediaSessionRecord$SessionStub;
Lcom/android/server/media/MediaSessionRecord;
Lcom/android/server/media/MediaSessionService$ServiceImpl;
Lcom/android/server/media/MediaSessionService;
Lcom/android/server/media/MediaSessionServiceImpl$1;
Lcom/android/server/media/MediaSessionServiceImpl$Controller2Callback;
Lcom/android/server/media/MediaSessionServiceImpl$FullUserRecord;
Lcom/android/server/media/MediaSessionServiceImpl$MessageHandler;
Lcom/android/server/media/MediaSessionServiceImpl$Session2TokensListenerRecord;
Lcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl$1;
Lcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl$2;
Lcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl$3;
Lcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl$4;
Lcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl$5;
Lcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl$KeyEventWakeLockReceiver;
Lcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl$MediaKeyListenerResultReceiver;
Lcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;
Lcom/android/server/media/MediaSessionServiceImpl$SessionsListenerRecord;
Lcom/android/server/media/MediaSessionServiceImpl$SettingsObserver;
Lcom/android/server/media/MediaSessionServiceImpl;
Lcom/android/server/media/MediaSessionStack$OnMediaButtonSessionChangedListener;
Lcom/android/server/media/MediaSessionStack;
Lcom/android/server/media/RemoteDisplayProviderProxy$Callback;
Lcom/android/server/media/RemoteDisplayProviderWatcher$1;
Lcom/android/server/media/RemoteDisplayProviderWatcher$2;
Lcom/android/server/media/RemoteDisplayProviderWatcher$Callback;
Lcom/android/server/media/RemoteDisplayProviderWatcher;
Lcom/android/server/media/projection/MediaProjectionManagerService$1;
Lcom/android/server/media/projection/MediaProjectionManagerService$BinderService;
Lcom/android/server/media/projection/MediaProjectionManagerService$CallbackDelegate;
Lcom/android/server/media/projection/MediaProjectionManagerService$MediaRouterCallback;
Lcom/android/server/media/projection/MediaProjectionManagerService;
Lcom/android/server/midi/MidiService$1;
Lcom/android/server/midi/MidiService$Lifecycle;
Lcom/android/server/midi/MidiService;
Lcom/android/server/net/-$$Lambda$NetworkPolicyManagerService$HDTUqowtgL-W_V0Kq6psXLWC9ws;
Lcom/android/server/net/DelayedDiskWrite$Writer;
Lcom/android/server/net/DelayedDiskWrite;
Lcom/android/server/net/IpConfigStore;
Lcom/android/server/net/LockdownVpnTracker;
Lcom/android/server/net/NetworkIdentitySet;
Lcom/android/server/net/NetworkPolicyLogger$Data;
Lcom/android/server/net/NetworkPolicyLogger$LogBuffer;
Lcom/android/server/net/NetworkPolicyLogger;
Lcom/android/server/net/NetworkPolicyManagerInternal;
Lcom/android/server/net/NetworkPolicyManagerService$10;
Lcom/android/server/net/NetworkPolicyManagerService$11;
Lcom/android/server/net/NetworkPolicyManagerService$12;
Lcom/android/server/net/NetworkPolicyManagerService$13;
Lcom/android/server/net/NetworkPolicyManagerService$14;
Lcom/android/server/net/NetworkPolicyManagerService$15;
Lcom/android/server/net/NetworkPolicyManagerService$16;
Lcom/android/server/net/NetworkPolicyManagerService$17;
Lcom/android/server/net/NetworkPolicyManagerService$18;
Lcom/android/server/net/NetworkPolicyManagerService$1;
Lcom/android/server/net/NetworkPolicyManagerService$2;
Lcom/android/server/net/NetworkPolicyManagerService$3;
Lcom/android/server/net/NetworkPolicyManagerService$4;
Lcom/android/server/net/NetworkPolicyManagerService$5;
Lcom/android/server/net/NetworkPolicyManagerService$6;
Lcom/android/server/net/NetworkPolicyManagerService$7;
Lcom/android/server/net/NetworkPolicyManagerService$8;
Lcom/android/server/net/NetworkPolicyManagerService$9;
Lcom/android/server/net/NetworkPolicyManagerService$AppIdleStateChangeListener;
Lcom/android/server/net/NetworkPolicyManagerService$NetworkPolicyManagerInternalImpl;
Lcom/android/server/net/NetworkPolicyManagerService;
Lcom/android/server/net/NetworkStatsAccess;
Lcom/android/server/net/NetworkStatsCollection$Key;
Lcom/android/server/net/NetworkStatsCollection;
Lcom/android/server/net/NetworkStatsManagerInternal;
Lcom/android/server/net/NetworkStatsObservers$1;
Lcom/android/server/net/NetworkStatsObservers$StatsContext;
Lcom/android/server/net/NetworkStatsObservers;
Lcom/android/server/net/NetworkStatsRecorder$CombiningRewriter;
Lcom/android/server/net/NetworkStatsRecorder;
Lcom/android/server/net/NetworkStatsService$2;
Lcom/android/server/net/NetworkStatsService$3;
Lcom/android/server/net/NetworkStatsService$4;
Lcom/android/server/net/NetworkStatsService$5;
Lcom/android/server/net/NetworkStatsService$6;
Lcom/android/server/net/NetworkStatsService$7;
Lcom/android/server/net/NetworkStatsService$DefaultNetworkStatsSettings;
Lcom/android/server/net/NetworkStatsService$DropBoxNonMonotonicObserver;
Lcom/android/server/net/NetworkStatsService$HandlerCallback;
Lcom/android/server/net/NetworkStatsService$NetworkStatsHandler;
Lcom/android/server/net/NetworkStatsService$NetworkStatsManagerInternalImpl;
Lcom/android/server/net/NetworkStatsService$NetworkStatsSettings$Config;
Lcom/android/server/net/NetworkStatsService$NetworkStatsSettings;
Lcom/android/server/net/NetworkStatsService;
Lcom/android/server/net/ipmemorystore/IpMemoryStoreDatabase$DbHelper;
Lcom/android/server/net/ipmemorystore/IpMemoryStoreService;
Lcom/android/server/net/watchlist/-$$Lambda$WatchlistLoggingHandler$GBD0dX6RhipHIkM0Z_B5jLlwfHQ;
Lcom/android/server/net/watchlist/DigestUtils;
Lcom/android/server/net/watchlist/HarmfulDigests;
Lcom/android/server/net/watchlist/NetworkWatchlistService$1;
Lcom/android/server/net/watchlist/NetworkWatchlistService$Lifecycle;
Lcom/android/server/net/watchlist/NetworkWatchlistService;
Lcom/android/server/net/watchlist/ReportWatchlistJobService;
Lcom/android/server/net/watchlist/WatchlistConfig$CrcShaDigests;
Lcom/android/server/net/watchlist/WatchlistConfig;
Lcom/android/server/net/watchlist/WatchlistLoggingHandler;
Lcom/android/server/net/watchlist/WatchlistReportDbHelper$AggregatedResult;
Lcom/android/server/net/watchlist/WatchlistReportDbHelper;
Lcom/android/server/net/watchlist/WatchlistSettings;
Lcom/android/server/notification/-$$Lambda$NotificationManagerService$14$hWnH6mjUAxwVmpU3QRoPHh5_FyI;
Lcom/android/server/notification/-$$Lambda$NotificationManagerService$Ehw7Jxsy3ZIwTcAa2DFsHjIULas;
Lcom/android/server/notification/-$$Lambda$NotificationManagerService$NotificationListeners$T5BM1IF40aMGtqZZRr6BWGjzNxA;
Lcom/android/server/notification/-$$Lambda$ouaYRM5YVYoMkUW8dm6TnIjLfgg;
Lcom/android/server/notification/BadgeExtractor;
Lcom/android/server/notification/BubbleExtractor;
Lcom/android/server/notification/CalendarTracker$1;
Lcom/android/server/notification/CalendarTracker$Callback;
Lcom/android/server/notification/CalendarTracker$CheckEventResult;
Lcom/android/server/notification/CalendarTracker;
Lcom/android/server/notification/ConditionProviders$Callback;
Lcom/android/server/notification/ConditionProviders$ConditionRecord;
Lcom/android/server/notification/ConditionProviders;
Lcom/android/server/notification/CountdownConditionProvider$Receiver;
Lcom/android/server/notification/CountdownConditionProvider;
Lcom/android/server/notification/CriticalNotificationExtractor;
Lcom/android/server/notification/EventConditionProvider$1;
Lcom/android/server/notification/EventConditionProvider$2;
Lcom/android/server/notification/EventConditionProvider$3;
Lcom/android/server/notification/EventConditionProvider$4;
Lcom/android/server/notification/EventConditionProvider;
Lcom/android/server/notification/GlobalSortKeyComparator;
Lcom/android/server/notification/GroupHelper$Callback;
Lcom/android/server/notification/GroupHelper;
Lcom/android/server/notification/ImportanceExtractor;
Lcom/android/server/notification/ManagedServices$1;
Lcom/android/server/notification/ManagedServices$Config;
Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;
Lcom/android/server/notification/ManagedServices$UserProfiles;
Lcom/android/server/notification/ManagedServices;
Lcom/android/server/notification/NotificationAdjustmentExtractor;
Lcom/android/server/notification/NotificationChannelExtractor;
Lcom/android/server/notification/NotificationComparator$1;
Lcom/android/server/notification/NotificationComparator;
Lcom/android/server/notification/NotificationDelegate;
Lcom/android/server/notification/NotificationIntrusivenessExtractor;
Lcom/android/server/notification/NotificationManagerInternal;
Lcom/android/server/notification/NotificationManagerService$10$1;
Lcom/android/server/notification/NotificationManagerService$10;
Lcom/android/server/notification/NotificationManagerService$11;
Lcom/android/server/notification/NotificationManagerService$14;
Lcom/android/server/notification/NotificationManagerService$16;
Lcom/android/server/notification/NotificationManagerService$1;
Lcom/android/server/notification/NotificationManagerService$2;
Lcom/android/server/notification/NotificationManagerService$3;
Lcom/android/server/notification/NotificationManagerService$4;
Lcom/android/server/notification/NotificationManagerService$5;
Lcom/android/server/notification/NotificationManagerService$6;
Lcom/android/server/notification/NotificationManagerService$7;
Lcom/android/server/notification/NotificationManagerService$8;
Lcom/android/server/notification/NotificationManagerService$9;
Lcom/android/server/notification/NotificationManagerService$Archive;
Lcom/android/server/notification/NotificationManagerService$CancelNotificationRunnable;
Lcom/android/server/notification/NotificationManagerService$FlagChecker;
Lcom/android/server/notification/NotificationManagerService$NotificationAssistants;
Lcom/android/server/notification/NotificationManagerService$NotificationListeners;
Lcom/android/server/notification/NotificationManagerService$RankingHandlerWorker;
Lcom/android/server/notification/NotificationManagerService$SettingsObserver;
Lcom/android/server/notification/NotificationManagerService$WorkerHandler;
Lcom/android/server/notification/NotificationManagerService;
Lcom/android/server/notification/NotificationSignalExtractor;
Lcom/android/server/notification/NotificationUsageStats$1;
Lcom/android/server/notification/NotificationUsageStats$AggregatedStats;
Lcom/android/server/notification/NotificationUsageStats$SQLiteLog$1;
Lcom/android/server/notification/NotificationUsageStats$SQLiteLog$2;
Lcom/android/server/notification/NotificationUsageStats$SQLiteLog;
Lcom/android/server/notification/NotificationUsageStats;
Lcom/android/server/notification/PreferencesHelper$PackagePreferences;
Lcom/android/server/notification/PreferencesHelper;
Lcom/android/server/notification/PriorityExtractor;
Lcom/android/server/notification/PropConfig;
Lcom/android/server/notification/RankingConfig;
Lcom/android/server/notification/RankingHandler;
Lcom/android/server/notification/RankingHelper;
Lcom/android/server/notification/ScheduleConditionProvider$1;
Lcom/android/server/notification/ScheduleConditionProvider;
Lcom/android/server/notification/SnoozeHelper$1;
Lcom/android/server/notification/SnoozeHelper$Callback;
Lcom/android/server/notification/SnoozeHelper;
Lcom/android/server/notification/SystemConditionProviderService;
Lcom/android/server/notification/ValidateNotificationPeople$1;
Lcom/android/server/notification/ValidateNotificationPeople;
Lcom/android/server/notification/VisibilityExtractor;
Lcom/android/server/notification/ZenLog;
Lcom/android/server/notification/ZenModeConditions;
Lcom/android/server/notification/ZenModeExtractor;
Lcom/android/server/notification/ZenModeFiltering$RepeatCallers;
Lcom/android/server/notification/ZenModeFiltering;
Lcom/android/server/notification/ZenModeHelper$Callback;
Lcom/android/server/notification/ZenModeHelper$H$ConfigMessageData;
Lcom/android/server/notification/ZenModeHelper$H;
Lcom/android/server/notification/ZenModeHelper$Metrics;
Lcom/android/server/notification/ZenModeHelper$RingerModeDelegate;
Lcom/android/server/notification/ZenModeHelper$SettingsObserver;
Lcom/android/server/notification/ZenModeHelper;
Lcom/android/server/oemlock/OemLock;
Lcom/android/server/oemlock/OemLockService$1;
Lcom/android/server/oemlock/OemLockService$2;
Lcom/android/server/oemlock/OemLockService;
Lcom/android/server/oemlock/VendorLock;
Lcom/android/server/om/-$$Lambda$OverlayManagerService$_WGEV7N0qhntbqqDW3A1O-TVv5o;
Lcom/android/server/om/-$$Lambda$OverlayManagerSettings$ATr0DZmWpSWdKD0COw4t2qS-DRk;
Lcom/android/server/om/-$$Lambda$OverlayManagerSettings$IkswmT9ZZJXmNAztGRVrD3hODMw;
Lcom/android/server/om/-$$Lambda$OverlayManagerSettings$WYtPK6Ebqjgxm8_8Cot-ijv_z_8;
Lcom/android/server/om/-$$Lambda$OverlayManagerSettings$bX7CTrJVR3B_eQmD43OOHtRIxgw;
Lcom/android/server/om/-$$Lambda$OverlayManagerSettings$jZUujzDxrP0hpAqUxnqEf-b-nQc;
Lcom/android/server/om/-$$Lambda$OverlayManagerSettings$mq-CHAn1jQBVquxuOUv0eQANHIY;
Lcom/android/server/om/-$$Lambda$OverlayManagerSettings$sx0Nyvq91kCH_A-4Ctf09G_0u9M;
Lcom/android/server/om/-$$Lambda$OverlayManagerSettings$vXm2C4y9Q-F5yYZNimB-Lr6w-oI;
Lcom/android/server/om/-$$Lambda$bXuJGR0fITXNwGnQfQHv9KS-XgY;
Lcom/android/server/om/IdmapManager$1;
Lcom/android/server/om/IdmapManager;
Lcom/android/server/om/OverlayManagerService$1;
Lcom/android/server/om/OverlayManagerService$OverlayChangeListener;
Lcom/android/server/om/OverlayManagerService$PackageManagerHelper;
Lcom/android/server/om/OverlayManagerService$PackageReceiver;
Lcom/android/server/om/OverlayManagerService$UserReceiver;
Lcom/android/server/om/OverlayManagerService;
Lcom/android/server/om/OverlayManagerServiceImpl$OverlayChangeListener;
Lcom/android/server/om/OverlayManagerServiceImpl$PackageManagerHelper;
Lcom/android/server/om/OverlayManagerServiceImpl;
Lcom/android/server/om/OverlayManagerSettings$BadKeyException;
Lcom/android/server/om/OverlayManagerSettings$Serializer;
Lcom/android/server/om/OverlayManagerSettings$SettingsItem;
Lcom/android/server/om/OverlayManagerSettings;
Lcom/android/server/os/-$$Lambda$SchedulingPolicyService$ao2OiSvvlyzmJ0li0c0nhHy-IDk;
Lcom/android/server/os/BugreportManagerService;
Lcom/android/server/os/BugreportManagerServiceImpl;
Lcom/android/server/os/DeviceIdentifiersPolicyService$DeviceIdentifiersPolicy;
Lcom/android/server/os/DeviceIdentifiersPolicyService;
Lcom/android/server/os/SchedulingPolicyService$1;
Lcom/android/server/os/SchedulingPolicyService;
Lcom/android/server/pm/-$$Lambda$ApexManager$Nr-JVjEMcDAmAF2rSRdMapKh1Go;
Lcom/android/server/pm/-$$Lambda$ComponentResolver$PuHbZd5KEOMGjkH8xDOhOwfLtC0;
Lcom/android/server/pm/-$$Lambda$Installer$SebeftIfAJ7KsTmM0tju6PfW4Pc;
Lcom/android/server/pm/-$$Lambda$InstantAppRegistry$BuKCbLr_MGBazMPl54-pWTuGHYY;
Lcom/android/server/pm/-$$Lambda$InstantAppRegistry$UOn4sUy4zBQuofxUbY8RBYhkNSE;
Lcom/android/server/pm/-$$Lambda$InstantAppRegistry$eaYsiecM_Rq6dliDvliwVtj695o;
Lcom/android/server/pm/-$$Lambda$InstantAppRegistry$o-Qxi7Gaam-yhhMK-IMWv499oME;
Lcom/android/server/pm/-$$Lambda$PackageInstallerService$vra5ZkE3juVvcgDBu5xv0wVzno8;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$5hSpumAE5maEOgUlkeKZ3EJQUOU;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$9ZEk0HhVZsj2KQghpPxi82zlVQA;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$HNA1AuKrPFdIr9HtUSHHnPIBTTk;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$Iz1l7RVtATr5Ybl_zHeYuCbGMvA;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$JUo3M6zuPH65x1voKjSOJvOMHRw;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$O5iApY07YeJyXA8KUFVcxpCf1NI;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$PackageParserCallback$xinvBJUpQse3J1IBBKjvYTIW8MQ;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$QuhmYCmH6DQCctkuIoqu3zaZWSE;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$ThH5vuBggVL5a6g8JW6gf8x0jT8;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$YHri1Lu_7U5nzv2NPItDUIuocnY;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$gOdSzzOoHvFHJbKlJkAgg4fzOH8;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$gqdNHYJiYM0w_nIH0nGMWWU8yzQ;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$nmexRk77HBh5Ag-q02zd0jSuaUk;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$opO5L-t6aW9gAx6B5CGlW6sAaX8;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$sJ5w9GfSftnZPyv5hBDxQkxDJMU;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$xJ_pDKPvSH0lgOwva8xeI2zJ2ns;
Lcom/android/server/pm/-$$Lambda$PackageManagerService$xKFHvZAUir1Y_lClMWZh87peKs8;
Lcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$Fz3elZ0VmMMv9-wl_G3AN15dUU8;
Lcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$QMV-UHbRIK26QMZL5iM27MchX7U;
Lcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$ePZ6rsJ05hJ2glmOqcq1_jX6J8w;
Lcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$fMBP3pPR7BB2hICieRxkdNG-3H8;
Lcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$hVRkjdaFuAMTY9J9JQ7JyWMYCHA;
Lcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$nPt0Hym3GvYeWA2vwfOLFDxZmCE;
Lcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$p5q19y4-2x-i747j_hTNL1EMzt0;
Lcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$whx96xO50U3fax1NRe1upTcx9jc;
Lcom/android/server/pm/-$$Lambda$ParallelPackageParser$FTtinPrp068lVeI7K6bC1tNE3iM;
Lcom/android/server/pm/-$$Lambda$ShortcutBitmapSaver$AUDgG57FGyGDUVDAjL-7cuiE0pM;
Lcom/android/server/pm/-$$Lambda$ShortcutService$3$WghiV-HLnzJqZabObC5uHCmb960;
Lcom/android/server/pm/-$$Lambda$ShortcutService$3$n_VdEzyBcjs0pGZO8GnB0FoTgR0;
Lcom/android/server/pm/-$$Lambda$UserManagerService$1$DQ_02g7kZ7QrJXO6aCATwE6DYCE;
Lcom/android/server/pm/-$$Lambda$jZzCUQd1whVIqs_s1XMLbFqTP_E;
Lcom/android/server/pm/AbstractStatsBase$1;
Lcom/android/server/pm/AbstractStatsBase;
Lcom/android/server/pm/ApexManager$1;
Lcom/android/server/pm/ApexManager;
Lcom/android/server/pm/BackgroundDexOptService;
Lcom/android/server/pm/CompilerStats$PackageStats;
Lcom/android/server/pm/CompilerStats;
Lcom/android/server/pm/ComponentResolver$ActionIterGenerator;
Lcom/android/server/pm/ComponentResolver$ActivityIntentResolver;
Lcom/android/server/pm/ComponentResolver$AuthoritiesIterGenerator;
Lcom/android/server/pm/ComponentResolver$CategoriesIterGenerator;
Lcom/android/server/pm/ComponentResolver$IterGenerator;
Lcom/android/server/pm/ComponentResolver$ProviderIntentResolver;
Lcom/android/server/pm/ComponentResolver$SchemesIterGenerator;
Lcom/android/server/pm/ComponentResolver$ServiceIntentResolver;
Lcom/android/server/pm/ComponentResolver;
Lcom/android/server/pm/CrossProfileAppsService;
Lcom/android/server/pm/CrossProfileAppsServiceImpl$Injector;
Lcom/android/server/pm/CrossProfileAppsServiceImpl$InjectorImpl;
Lcom/android/server/pm/CrossProfileAppsServiceImpl;
Lcom/android/server/pm/CrossProfileIntentFilter;
Lcom/android/server/pm/CrossProfileIntentResolver;
Lcom/android/server/pm/DumpState;
Lcom/android/server/pm/DynamicCodeLoggingService;
Lcom/android/server/pm/Installer$1;
Lcom/android/server/pm/Installer$InstallerException;
Lcom/android/server/pm/Installer;
Lcom/android/server/pm/InstantAppRegistry$CookiePersistence;
Lcom/android/server/pm/InstantAppRegistry$UninstalledInstantAppState;
Lcom/android/server/pm/InstantAppRegistry;
Lcom/android/server/pm/InstantAppResolver;
Lcom/android/server/pm/InstantAppResolverConnection$ConnectionException;
Lcom/android/server/pm/InstantAppResolverConnection$GetInstantAppResolveInfoCaller$1;
Lcom/android/server/pm/InstantAppResolverConnection$GetInstantAppResolveInfoCaller;
Lcom/android/server/pm/InstantAppResolverConnection$MyServiceConnection;
Lcom/android/server/pm/InstantAppResolverConnection;
Lcom/android/server/pm/InstructionSets;
Lcom/android/server/pm/IntentFilterVerificationResponse;
Lcom/android/server/pm/IntentFilterVerificationState;
Lcom/android/server/pm/KeySetHandle;
Lcom/android/server/pm/KeySetManagerService$1;
Lcom/android/server/pm/KeySetManagerService$PublicKeyHandle;
Lcom/android/server/pm/KeySetManagerService;
Lcom/android/server/pm/LauncherAppsService$LauncherAppsImpl$MyPackageMonitor;
Lcom/android/server/pm/LauncherAppsService$LauncherAppsImpl$PackageCallbackList;
Lcom/android/server/pm/LauncherAppsService$LauncherAppsImpl$VouchesChangedMonitor;
Lcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;
Lcom/android/server/pm/LauncherAppsService;
Lcom/android/server/pm/ModuleInfoProvider;
Lcom/android/server/pm/OtaDexoptService;
Lcom/android/server/pm/PackageDexOptimizer$ForcedUpdatePackageDexOptimizer;
Lcom/android/server/pm/PackageDexOptimizer;
Lcom/android/server/pm/PackageInstallerService$1;
Lcom/android/server/pm/PackageInstallerService$2;
Lcom/android/server/pm/PackageInstallerService$Callbacks;
Lcom/android/server/pm/PackageInstallerService$InternalCallback;
Lcom/android/server/pm/PackageInstallerService;
Lcom/android/server/pm/PackageKeySetData;
Lcom/android/server/pm/PackageManagerException;
Lcom/android/server/pm/PackageManagerService$1;
Lcom/android/server/pm/PackageManagerService$2;
Lcom/android/server/pm/PackageManagerService$3;
Lcom/android/server/pm/PackageManagerService$4;
Lcom/android/server/pm/PackageManagerService$5;
Lcom/android/server/pm/PackageManagerService$6;
Lcom/android/server/pm/PackageManagerService$7;
Lcom/android/server/pm/PackageManagerService$8;
Lcom/android/server/pm/PackageManagerService$BlobXmlRestorer;
Lcom/android/server/pm/PackageManagerService$CrossProfileDomainInfo;
Lcom/android/server/pm/PackageManagerService$DeletePackageAction;
Lcom/android/server/pm/PackageManagerService$FileInstallArgs;
Lcom/android/server/pm/PackageManagerService$HandlerParams;
Lcom/android/server/pm/PackageManagerService$IFVerificationParams;
Lcom/android/server/pm/PackageManagerService$InstallArgs;
Lcom/android/server/pm/PackageManagerService$InstallParams;
Lcom/android/server/pm/PackageManagerService$IntentFilterVerifier;
Lcom/android/server/pm/PackageManagerService$IntentVerifierProxy;
Lcom/android/server/pm/PackageManagerService$MoveCallbacks;
Lcom/android/server/pm/PackageManagerService$MoveInfo;
Lcom/android/server/pm/PackageManagerService$MoveInstallArgs;
Lcom/android/server/pm/PackageManagerService$OnPermissionChangeListeners;
Lcom/android/server/pm/PackageManagerService$OriginInfo;
Lcom/android/server/pm/PackageManagerService$PackageFreezer;
Lcom/android/server/pm/PackageManagerService$PackageHandler;
Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;
Lcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;
Lcom/android/server/pm/PackageManagerService$PackageManagerNative;
Lcom/android/server/pm/PackageManagerService$PackageParserCallback;
Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;
Lcom/android/server/pm/PackageManagerService$ParallelPackageParserCallback;
Lcom/android/server/pm/PackageManagerService$PendingPackageBroadcasts;
Lcom/android/server/pm/PackageManagerService$PostInstallData;
Lcom/android/server/pm/PackageManagerService$PrepareFailure;
Lcom/android/server/pm/PackageManagerService$PrepareResult;
Lcom/android/server/pm/PackageManagerService$ReconcileFailure;
Lcom/android/server/pm/PackageManagerService$ReconcileRequest;
Lcom/android/server/pm/PackageManagerService$ReconciledPackage;
Lcom/android/server/pm/PackageManagerService$ScanRequest;
Lcom/android/server/pm/PackageManagerService$ScanResult;
Lcom/android/server/pm/PackageManagerService$SystemDeleteException;
Lcom/android/server/pm/PackageManagerService$VerificationInfo;
Lcom/android/server/pm/PackageManagerService;
Lcom/android/server/pm/PackageManagerServiceCompilerMapping;
Lcom/android/server/pm/PackageManagerServiceUtils;
Lcom/android/server/pm/PackageSender;
Lcom/android/server/pm/PackageSessionProvider;
Lcom/android/server/pm/PackageSetting;
Lcom/android/server/pm/PackageSettingBase;
Lcom/android/server/pm/PackageSignatures;
Lcom/android/server/pm/PackageUsage;
Lcom/android/server/pm/PackageVerificationResponse;
Lcom/android/server/pm/PackageVerificationState;
Lcom/android/server/pm/ParallelPackageParser$ParseResult;
Lcom/android/server/pm/ParallelPackageParser;
Lcom/android/server/pm/PersistentPreferredIntentResolver;
Lcom/android/server/pm/Policy$1;
Lcom/android/server/pm/Policy$PolicyBuilder;
Lcom/android/server/pm/Policy;
Lcom/android/server/pm/PolicyComparator;
Lcom/android/server/pm/PreferredActivity;
Lcom/android/server/pm/PreferredComponent$Callbacks;
Lcom/android/server/pm/PreferredComponent;
Lcom/android/server/pm/PreferredIntentResolver;
Lcom/android/server/pm/ProcessLoggingHandler;
Lcom/android/server/pm/ProtectedPackages;
Lcom/android/server/pm/SELinuxMMAC;
Lcom/android/server/pm/SettingBase;
Lcom/android/server/pm/Settings$1;
Lcom/android/server/pm/Settings$KernelPackageState;
Lcom/android/server/pm/Settings$RestoredPermissionGrant;
Lcom/android/server/pm/Settings$RuntimePermissionPersistence$MyHandler;
Lcom/android/server/pm/Settings$RuntimePermissionPersistence;
Lcom/android/server/pm/Settings$VersionInfo;
Lcom/android/server/pm/Settings;
Lcom/android/server/pm/SharedUserSetting;
Lcom/android/server/pm/ShortcutBitmapSaver;
Lcom/android/server/pm/ShortcutDumpFiles;
Lcom/android/server/pm/ShortcutRequestPinProcessor;
Lcom/android/server/pm/ShortcutService$1;
Lcom/android/server/pm/ShortcutService$2;
Lcom/android/server/pm/ShortcutService$3;
Lcom/android/server/pm/ShortcutService$4;
Lcom/android/server/pm/ShortcutService$5;
Lcom/android/server/pm/ShortcutService$InvalidFileFormatException;
Lcom/android/server/pm/ShortcutService$Lifecycle;
Lcom/android/server/pm/ShortcutService$LocalService;
Lcom/android/server/pm/ShortcutService;
Lcom/android/server/pm/StagingManager;
Lcom/android/server/pm/UserDataPreparer;
Lcom/android/server/pm/UserManagerService$1;
Lcom/android/server/pm/UserManagerService$2;
Lcom/android/server/pm/UserManagerService$3;
Lcom/android/server/pm/UserManagerService$4;
Lcom/android/server/pm/UserManagerService$LifeCycle;
Lcom/android/server/pm/UserManagerService$LocalService;
Lcom/android/server/pm/UserManagerService$MainHandler;
Lcom/android/server/pm/UserManagerService$UserData;
Lcom/android/server/pm/UserManagerService;
Lcom/android/server/pm/UserRestrictionsUtils;
Lcom/android/server/pm/dex/-$$Lambda$ArtManagerService$MEVzU-orlv4msZVF-bA5NLti04g;
Lcom/android/server/pm/dex/-$$Lambda$ArtManagerService$_rD0Y6OPSJHMdjTIOtucoGQ1xag;
Lcom/android/server/pm/dex/ArtManagerService$1;
Lcom/android/server/pm/dex/ArtManagerService$ArtManagerInternalImpl;
Lcom/android/server/pm/dex/ArtManagerService;
Lcom/android/server/pm/dex/DexLogger;
Lcom/android/server/pm/dex/DexManager$DexSearchResult;
Lcom/android/server/pm/dex/DexManager$PackageCodeLocations;
Lcom/android/server/pm/dex/DexManager$RegisterDexModuleResult;
Lcom/android/server/pm/dex/DexManager;
Lcom/android/server/pm/dex/DexoptOptions;
Lcom/android/server/pm/dex/DexoptUtils;
Lcom/android/server/pm/dex/DynamicCodeLogger;
Lcom/android/server/pm/dex/PackageDexUsage$DexUseInfo;
Lcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;
Lcom/android/server/pm/dex/PackageDexUsage;
Lcom/android/server/pm/dex/PackageDynamicCodeLoading$DynamicCodeFile;
Lcom/android/server/pm/dex/PackageDynamicCodeLoading$PackageDynamicCode;
Lcom/android/server/pm/dex/PackageDynamicCodeLoading;
Lcom/android/server/pm/dex/ViewCompiler;
Lcom/android/server/pm/permission/BasePermission;
Lcom/android/server/pm/permission/DefaultPermissionGrantPolicy$1;
Lcom/android/server/pm/permission/DefaultPermissionGrantPolicy$DefaultPermissionGrant;
Lcom/android/server/pm/permission/DefaultPermissionGrantPolicy$DefaultPermissionGrantedCallback;
Lcom/android/server/pm/permission/DefaultPermissionGrantPolicy;
Lcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;
Lcom/android/server/pm/permission/PermissionManagerInternal;
Lcom/android/server/pm/permission/PermissionManagerService$1;
Lcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;
Lcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;
Lcom/android/server/pm/permission/PermissionManagerService;
Lcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;
Lcom/android/server/pm/permission/PermissionManagerServiceInternal;
Lcom/android/server/pm/permission/PermissionSettings;
Lcom/android/server/pm/permission/PermissionsState$PermissionData;
Lcom/android/server/pm/permission/PermissionsState$PermissionState;
Lcom/android/server/pm/permission/PermissionsState;
Lcom/android/server/policy/GlobalActionsProvider;
Lcom/android/server/policy/GlobalKeyManager;
Lcom/android/server/policy/IconUtilities;
Lcom/android/server/policy/LogDecelerateInterpolator;
Lcom/android/server/policy/PhoneWindowManager$10;
Lcom/android/server/policy/PhoneWindowManager$11;
Lcom/android/server/policy/PhoneWindowManager$12;
Lcom/android/server/policy/PhoneWindowManager$13;
Lcom/android/server/policy/PhoneWindowManager$1;
Lcom/android/server/policy/PhoneWindowManager$2;
Lcom/android/server/policy/PhoneWindowManager$3;
Lcom/android/server/policy/PhoneWindowManager$4;
Lcom/android/server/policy/PhoneWindowManager$5;
Lcom/android/server/policy/PhoneWindowManager$6;
Lcom/android/server/policy/PhoneWindowManager$7;
Lcom/android/server/policy/PhoneWindowManager$8;
Lcom/android/server/policy/PhoneWindowManager$HdmiVideoExtconUEventObserver;
Lcom/android/server/policy/PhoneWindowManager$MyWakeGestureListener;
Lcom/android/server/policy/PhoneWindowManager$PolicyHandler;
Lcom/android/server/policy/PhoneWindowManager$ScreenLockTimeout;
Lcom/android/server/policy/PhoneWindowManager$ScreenshotRunnable;
Lcom/android/server/policy/PhoneWindowManager$SettingsObserver;
Lcom/android/server/policy/PhoneWindowManager;
Lcom/android/server/policy/ShortcutManager$ShortcutInfo;
Lcom/android/server/policy/ShortcutManager;
Lcom/android/server/policy/WakeGestureListener$1;
Lcom/android/server/policy/WakeGestureListener$2;
Lcom/android/server/policy/WakeGestureListener;
Lcom/android/server/policy/WindowManagerPolicy$DisplayContentInfo;
Lcom/android/server/policy/WindowManagerPolicy$WindowManagerFuncs;
Lcom/android/server/policy/WindowManagerPolicy$WindowState;
Lcom/android/server/policy/WindowManagerPolicy;
Lcom/android/server/policy/WindowOrientationListener$OrientationJudge;
Lcom/android/server/policy/WindowOrientationListener$OrientationSensorJudge$1;
Lcom/android/server/policy/WindowOrientationListener$OrientationSensorJudge;
Lcom/android/server/policy/WindowOrientationListener;
Lcom/android/server/policy/keyguard/KeyguardServiceDelegate$1;
Lcom/android/server/policy/keyguard/KeyguardServiceDelegate$DrawnListener;
Lcom/android/server/policy/keyguard/KeyguardServiceDelegate$KeyguardShowDelegate;
Lcom/android/server/policy/keyguard/KeyguardServiceDelegate$KeyguardState;
Lcom/android/server/policy/keyguard/KeyguardServiceDelegate;
Lcom/android/server/policy/keyguard/KeyguardServiceWrapper;
Lcom/android/server/policy/keyguard/KeyguardStateMonitor$StateCallback;
Lcom/android/server/policy/keyguard/KeyguardStateMonitor;
Lcom/android/server/policy/role/LegacyRoleResolutionPolicy;
Lcom/android/server/power/-$$Lambda$PowerManagerService$FUW_os-Z9SregUE_DR9vDwaRuXo;
Lcom/android/server/power/-$$Lambda$ThermalManagerService$9JFHCKCwrnUIYoXDsqNamhlY5VU;
Lcom/android/server/power/-$$Lambda$ThermalManagerService$ThermalHal20Wrapper$R9S8YWn8x1F3V2TOvXtmky1V44Q;
Lcom/android/server/power/-$$Lambda$ThermalManagerService$ZPQKzo9ZjU-hL4QYH693hWuTqjk;
Lcom/android/server/power/-$$Lambda$ThermalManagerService$x5obtNvJKZxnpguOiQsFBDmBZ4k;
Lcom/android/server/power/AttentionDetector$1;
Lcom/android/server/power/AttentionDetector;
Lcom/android/server/power/Notifier$6;
Lcom/android/server/power/Notifier$7;
Lcom/android/server/power/Notifier$8;
Lcom/android/server/power/Notifier$NotifierHandler;
Lcom/android/server/power/Notifier;
Lcom/android/server/power/PowerManagerService$1;
Lcom/android/server/power/PowerManagerService$2;
Lcom/android/server/power/PowerManagerService$3;
Lcom/android/server/power/PowerManagerService$4;
Lcom/android/server/power/PowerManagerService$BatteryReceiver;
Lcom/android/server/power/PowerManagerService$BinderService;
Lcom/android/server/power/PowerManagerService$Constants;
Lcom/android/server/power/PowerManagerService$DockReceiver;
Lcom/android/server/power/PowerManagerService$DreamReceiver;
Lcom/android/server/power/PowerManagerService$ForegroundProfileObserver;
Lcom/android/server/power/PowerManagerService$Injector;
Lcom/android/server/power/PowerManagerService$LocalService;
Lcom/android/server/power/PowerManagerService$NativeWrapper;
Lcom/android/server/power/PowerManagerService$PowerManagerHandler;
Lcom/android/server/power/PowerManagerService$ProfilePowerState;
Lcom/android/server/power/PowerManagerService$SettingsObserver;
Lcom/android/server/power/PowerManagerService$SuspendBlockerImpl;
Lcom/android/server/power/PowerManagerService$UidState;
Lcom/android/server/power/PowerManagerService$UserSwitchedReceiver;
Lcom/android/server/power/PowerManagerService$WakeLock;
Lcom/android/server/power/PowerManagerService;
Lcom/android/server/power/SuspendBlocker;
Lcom/android/server/power/ThermalManagerService$1;
Lcom/android/server/power/ThermalManagerService$ThermalHal20Wrapper$1;
Lcom/android/server/power/ThermalManagerService$ThermalHal20Wrapper;
Lcom/android/server/power/ThermalManagerService$ThermalHalWrapper$DeathRecipient;
Lcom/android/server/power/ThermalManagerService$ThermalHalWrapper$TemperatureChangedCallback;
Lcom/android/server/power/ThermalManagerService$ThermalHalWrapper;
Lcom/android/server/power/ThermalManagerService;
Lcom/android/server/power/WirelessChargerDetector$1;
Lcom/android/server/power/WirelessChargerDetector$2;
Lcom/android/server/power/WirelessChargerDetector;
Lcom/android/server/power/batterysaver/-$$Lambda$BatterySaverPolicy$rfw31Sb8JX1OVD2rGHGtCXyfop8;
Lcom/android/server/power/batterysaver/-$$Lambda$BatterySaverStateMachine$SSfmWJrD4RBoVg8A8loZrS-jhAo;
Lcom/android/server/power/batterysaver/-$$Lambda$BatterySaverStateMachine$fEidyt_9TXlXBpF6D2lhOOrfOC4;
Lcom/android/server/power/batterysaver/-$$Lambda$FileUpdater$NUmipjKCJwbgmFbIcGS3uaz3QFk;
Lcom/android/server/power/batterysaver/BatterySaverController$1;
Lcom/android/server/power/batterysaver/BatterySaverController$MyHandler;
Lcom/android/server/power/batterysaver/BatterySaverController$Plugin;
Lcom/android/server/power/batterysaver/BatterySaverController;
Lcom/android/server/power/batterysaver/BatterySaverLocationPlugin;
Lcom/android/server/power/batterysaver/BatterySaverPolicy$BatterySaverPolicyListener;
Lcom/android/server/power/batterysaver/BatterySaverPolicy$Policy;
Lcom/android/server/power/batterysaver/BatterySaverPolicy;
Lcom/android/server/power/batterysaver/BatterySaverStateMachine$1;
Lcom/android/server/power/batterysaver/BatterySaverStateMachine;
Lcom/android/server/power/batterysaver/BatterySavingStats$BatterySaverState;
Lcom/android/server/power/batterysaver/BatterySavingStats$DozeState;
Lcom/android/server/power/batterysaver/BatterySavingStats$InteractiveState;
Lcom/android/server/power/batterysaver/BatterySavingStats$Stat;
Lcom/android/server/power/batterysaver/BatterySavingStats;
Lcom/android/server/power/batterysaver/CpuFrequencies;
Lcom/android/server/power/batterysaver/FileUpdater;
Lcom/android/server/print/PrintManagerService$PrintManagerImpl$1;
Lcom/android/server/print/PrintManagerService$PrintManagerImpl$2;
Lcom/android/server/print/PrintManagerService$PrintManagerImpl;
Lcom/android/server/print/PrintManagerService;
Lcom/android/server/restrictions/RestrictionsManagerService$RestrictionsManagerImpl;
Lcom/android/server/restrictions/RestrictionsManagerService;
Lcom/android/server/role/-$$Lambda$RemoteRoleControllerService$Connection$Call$quCS1zX7o0cTn5na72KxrDUH02Q;
Lcom/android/server/role/-$$Lambda$RemoteRoleControllerService$Connection$JT0tphPh3CS3yG7jQxEV-ehCZIw;
Lcom/android/server/role/-$$Lambda$RemoteRoleControllerService$Connection$yJ60VDeVaOyaxXiM-qb5uWJhTkw;
Lcom/android/server/role/-$$Lambda$RoleManagerService$puhjbRBOtgaj-Pp3Y2aQs0UA-58;
Lcom/android/server/role/-$$Lambda$awRgkWhcVYhq1r1FVyYMnmMSXMs;
Lcom/android/server/role/RemoteRoleControllerService$Connection$Call$CallExecutor;
Lcom/android/server/role/RemoteRoleControllerService$Connection$Call$CallbackDelegate;
Lcom/android/server/role/RemoteRoleControllerService$Connection$Call;
Lcom/android/server/role/RemoteRoleControllerService$Connection;
Lcom/android/server/role/RemoteRoleControllerService;
Lcom/android/server/role/RoleManagerInternal;
Lcom/android/server/role/RoleManagerService$1;
Lcom/android/server/role/RoleManagerService$2;
Lcom/android/server/role/RoleManagerService$3;
Lcom/android/server/role/RoleManagerService$4;
Lcom/android/server/role/RoleManagerService$DefaultBrowserProvider;
Lcom/android/server/role/RoleManagerService$DefaultHomeProvider;
Lcom/android/server/role/RoleManagerService$Internal;
Lcom/android/server/role/RoleManagerService$RoleHoldersResolver;
Lcom/android/server/role/RoleManagerService$Stub;
Lcom/android/server/role/RoleManagerService;
Lcom/android/server/role/RoleUserState$Callback;
Lcom/android/server/role/RoleUserState;
Lcom/android/server/rollback/-$$Lambda$RollbackManagerServiceImpl$2_NDf9EpLcTKkJVpkadZhudKips;
Lcom/android/server/rollback/-$$Lambda$RollbackManagerServiceImpl$9jRyv0ATJ7l2lc6xAd3tmkVmx7g;
Lcom/android/server/rollback/AppDataRollbackHelper;
Lcom/android/server/rollback/RollbackManagerService;
Lcom/android/server/rollback/RollbackManagerServiceImpl$1;
Lcom/android/server/rollback/RollbackManagerServiceImpl$2;
Lcom/android/server/rollback/RollbackManagerServiceImpl$3;
Lcom/android/server/rollback/RollbackManagerServiceImpl$4;
Lcom/android/server/rollback/RollbackManagerServiceImpl$SessionCallback;
Lcom/android/server/rollback/RollbackManagerServiceImpl;
Lcom/android/server/rollback/RollbackPackageHealthObserver;
Lcom/android/server/rollback/RollbackStore;
Lcom/android/server/search/SearchManagerService$GlobalSearchProviderObserver;
Lcom/android/server/search/SearchManagerService$Lifecycle;
Lcom/android/server/search/SearchManagerService$MyPackageMonitor;
Lcom/android/server/search/SearchManagerService;
Lcom/android/server/security/KeyAttestationApplicationIdProviderService;
Lcom/android/server/security/KeyChainSystemService$1;
Lcom/android/server/security/KeyChainSystemService;
Lcom/android/server/security/VerityUtils$SetupResult;
Lcom/android/server/security/VerityUtils;
Lcom/android/server/signedconfig/SignedConfigService$UpdateReceiver;
Lcom/android/server/signedconfig/SignedConfigService;
Lcom/android/server/slice/-$$Lambda$PinnedSliceState$KzxFkvfomRuMb5PD8_pIHDIhUUE;
Lcom/android/server/slice/-$$Lambda$PinnedSliceState$TZdoqC_LDA8If7sQ7WXz9LM6VHg;
Lcom/android/server/slice/-$$Lambda$SliceManagerService$LkusK1jmu9JKJTiMRWqWxNGEGbY;
Lcom/android/server/slice/-$$Lambda$SliceManagerService$ic_PW16x_KcVi-NszMwHhErqI0s;
Lcom/android/server/slice/-$$Lambda$SliceManagerService$pJ39TkC3AEVezLFEPuJgSQSTDJM;
Lcom/android/server/slice/DirtyTracker$Persistable;
Lcom/android/server/slice/DirtyTracker;
Lcom/android/server/slice/PinnedSliceState$ListenerInfo;
Lcom/android/server/slice/PinnedSliceState;
Lcom/android/server/slice/SliceClientPermissions$SliceAuthority;
Lcom/android/server/slice/SliceClientPermissions;
Lcom/android/server/slice/SliceManagerService$1;
Lcom/android/server/slice/SliceManagerService$Lifecycle;
Lcom/android/server/slice/SliceManagerService$PackageMatchingCache;
Lcom/android/server/slice/SliceManagerService;
Lcom/android/server/slice/SlicePermissionManager$H;
Lcom/android/server/slice/SlicePermissionManager$ParserHolder;
Lcom/android/server/slice/SlicePermissionManager$PkgUser;
Lcom/android/server/slice/SlicePermissionManager;
Lcom/android/server/slice/SliceProviderPermissions;
Lcom/android/server/soundtrigger/SoundTriggerDbHelper;
Lcom/android/server/soundtrigger/SoundTriggerHelper$MyCallStateListener;
Lcom/android/server/soundtrigger/SoundTriggerHelper;
Lcom/android/server/soundtrigger/SoundTriggerInternal;
Lcom/android/server/soundtrigger/SoundTriggerService$LocalSoundTriggerService;
Lcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;
Lcom/android/server/soundtrigger/SoundTriggerService;
Lcom/android/server/stats/StatsCompanionService$1;
Lcom/android/server/stats/StatsCompanionService$AnomalyAlarmListener;
Lcom/android/server/stats/StatsCompanionService$AppUpdateReceiver;
Lcom/android/server/stats/StatsCompanionService$CompanionHandler;
Lcom/android/server/stats/StatsCompanionService$ConnectivityStatsCallback;
Lcom/android/server/stats/StatsCompanionService$Lifecycle;
Lcom/android/server/stats/StatsCompanionService$PeriodicAlarmListener;
Lcom/android/server/stats/StatsCompanionService$PullingAlarmListener;
Lcom/android/server/stats/StatsCompanionService$ShutdownEventReceiver;
Lcom/android/server/stats/StatsCompanionService$StatsdDeathRecipient;
Lcom/android/server/stats/StatsCompanionService$ThermalEventListener;
Lcom/android/server/stats/StatsCompanionService;
Lcom/android/server/statusbar/-$$Lambda$StatusBarManagerService$Ex4WQoiXjzWDsRHD7oXCkXIQBB4;
Lcom/android/server/statusbar/-$$Lambda$StatusBarManagerService$QO0p6KVnf0wFwF8hglhodfvx26s;
Lcom/android/server/statusbar/-$$Lambda$StatusBarManagerService$UR67Ud0NgV9VHyelUmYzZNtR6O4;
Lcom/android/server/statusbar/-$$Lambda$StatusBarManagerService$yr21OX4Hyd_XfExwnVnVIn3Jfe4;
Lcom/android/server/statusbar/StatusBarManagerInternal;
Lcom/android/server/statusbar/StatusBarManagerService$1;
Lcom/android/server/statusbar/StatusBarManagerService$2;
Lcom/android/server/statusbar/StatusBarManagerService$DeathRecipient;
Lcom/android/server/statusbar/StatusBarManagerService$DisableRecord;
Lcom/android/server/statusbar/StatusBarManagerService$UiState;
Lcom/android/server/statusbar/StatusBarManagerService;
Lcom/android/server/storage/AppFuseBridge$MountScope;
Lcom/android/server/storage/AppFuseBridge;
Lcom/android/server/storage/CacheQuotaStrategy;
Lcom/android/server/storage/DeviceStorageMonitorInternal;
Lcom/android/server/storage/DeviceStorageMonitorService$1;
Lcom/android/server/storage/DeviceStorageMonitorService$2;
Lcom/android/server/storage/DeviceStorageMonitorService$3;
Lcom/android/server/storage/DeviceStorageMonitorService$CacheFileDeletedObserver;
Lcom/android/server/storage/DeviceStorageMonitorService$State;
Lcom/android/server/storage/DeviceStorageMonitorService;
Lcom/android/server/storage/DiskStatsLoggingService;
Lcom/android/server/telecom/-$$Lambda$TelecomLoaderService$-gelHWcVU9jWWZhCeN99A3Sudtw;
Lcom/android/server/telecom/-$$Lambda$TelecomLoaderService$VVmvEgI0M6umDuBUYKUoUMO7-l0;
Lcom/android/server/telecom/-$$Lambda$TelecomLoaderService$lBXoYxesURvEmfzumX9uIBbg66M;
Lcom/android/server/telecom/TelecomLoaderService$1;
Lcom/android/server/telecom/TelecomLoaderService$2;
Lcom/android/server/telecom/TelecomLoaderService$TelecomServiceConnection$1;
Lcom/android/server/telecom/TelecomLoaderService$TelecomServiceConnection;
Lcom/android/server/telecom/TelecomLoaderService;
Lcom/android/server/testharness/TestHarnessModeService$1;
Lcom/android/server/testharness/TestHarnessModeService;
Lcom/android/server/textclassifier/TextClassificationManagerService$Lifecycle;
Lcom/android/server/textclassifier/TextClassificationManagerService$UserState$TextClassifierServiceConnection;
Lcom/android/server/textclassifier/TextClassificationManagerService$UserState;
Lcom/android/server/textclassifier/TextClassificationManagerService;
Lcom/android/server/textservices/-$$Lambda$TextServicesManagerService$otJ1a5fe5mYJvLrIEr3o1Ia1kSo;
Lcom/android/server/textservices/LazyIntToIntMap;
Lcom/android/server/textservices/TextServicesManagerInternal$1;
Lcom/android/server/textservices/TextServicesManagerInternal;
Lcom/android/server/textservices/TextServicesManagerService$Lifecycle$1;
Lcom/android/server/textservices/TextServicesManagerService$Lifecycle;
Lcom/android/server/textservices/TextServicesManagerService$TextServicesData;
Lcom/android/server/textservices/TextServicesManagerService$TextServicesMonitor;
Lcom/android/server/textservices/TextServicesManagerService;
Lcom/android/server/timedetector/SimpleTimeDetectorStrategy;
Lcom/android/server/timedetector/TimeDetectorService$1;
Lcom/android/server/timedetector/TimeDetectorService$Lifecycle;
Lcom/android/server/timedetector/TimeDetectorService;
Lcom/android/server/timedetector/TimeDetectorStrategy$Callback;
Lcom/android/server/timedetector/TimeDetectorStrategy;
Lcom/android/server/timedetector/TimeDetectorStrategyCallbackImpl;
Lcom/android/server/trust/-$$Lambda$TrustManagerService$1$98HKBkg-C1PLlz_Q1vJz1OJtw4c;
Lcom/android/server/trust/TrustArchive;
Lcom/android/server/trust/TrustManagerService$1;
Lcom/android/server/trust/TrustManagerService$2;
Lcom/android/server/trust/TrustManagerService$3;
Lcom/android/server/trust/TrustManagerService$AgentInfo;
Lcom/android/server/trust/TrustManagerService$Receiver;
Lcom/android/server/trust/TrustManagerService$SettingsAttrs;
Lcom/android/server/trust/TrustManagerService$SettingsObserver;
Lcom/android/server/trust/TrustManagerService$StrongAuthTracker;
Lcom/android/server/trust/TrustManagerService;
Lcom/android/server/tv/TvInputHal$Callback;
Lcom/android/server/tv/TvInputHal;
Lcom/android/server/tv/TvInputManagerService;
Lcom/android/server/tv/TvRemoteService;
Lcom/android/server/tv/UinputBridge;
Lcom/android/server/twilight/TwilightListener;
Lcom/android/server/twilight/TwilightManager;
Lcom/android/server/twilight/TwilightService$1;
Lcom/android/server/twilight/TwilightService;
Lcom/android/server/uri/GrantUri;
Lcom/android/server/uri/UriGrantsManagerInternal;
Lcom/android/server/uri/UriGrantsManagerService$H;
Lcom/android/server/uri/UriGrantsManagerService$Lifecycle;
Lcom/android/server/uri/UriGrantsManagerService$LocalService;
Lcom/android/server/uri/UriGrantsManagerService;
Lcom/android/server/uri/UriPermissionOwner$ExternalToken;
Lcom/android/server/uri/UriPermissionOwner;
Lcom/android/server/usage/AppIdleHistory$AppUsageHistory;
Lcom/android/server/usage/AppIdleHistory;
Lcom/android/server/usage/AppStandbyController$1;
Lcom/android/server/usage/AppStandbyController$2;
Lcom/android/server/usage/AppStandbyController$AppStandbyHandler;
Lcom/android/server/usage/AppStandbyController$DeviceStateReceiver;
Lcom/android/server/usage/AppStandbyController$Injector;
Lcom/android/server/usage/AppStandbyController$Lock;
Lcom/android/server/usage/AppStandbyController$PackageReceiver;
Lcom/android/server/usage/AppStandbyController$SettingsObserver;
Lcom/android/server/usage/AppStandbyController$StandbyUpdateRecord;
Lcom/android/server/usage/AppStandbyController;
Lcom/android/server/usage/AppTimeLimitController$Lock;
Lcom/android/server/usage/AppTimeLimitController$MyHandler;
Lcom/android/server/usage/AppTimeLimitController$TimeLimitCallbackListener;
Lcom/android/server/usage/AppTimeLimitController$UserData;
Lcom/android/server/usage/AppTimeLimitController;
Lcom/android/server/usage/IntervalStats$EventTracker;
Lcom/android/server/usage/IntervalStats;
Lcom/android/server/usage/StorageStatsService$1;
Lcom/android/server/usage/StorageStatsService$H;
Lcom/android/server/usage/StorageStatsService$Lifecycle;
Lcom/android/server/usage/StorageStatsService;
Lcom/android/server/usage/UnixCalendar;
Lcom/android/server/usage/UsageStatsDatabase$1;
Lcom/android/server/usage/UsageStatsDatabase$StatCombiner;
Lcom/android/server/usage/UsageStatsDatabase;
Lcom/android/server/usage/UsageStatsProto;
Lcom/android/server/usage/UsageStatsService$1;
Lcom/android/server/usage/UsageStatsService$2;
Lcom/android/server/usage/UsageStatsService$3;
Lcom/android/server/usage/UsageStatsService$ActivityData;
Lcom/android/server/usage/UsageStatsService$BinderService;
Lcom/android/server/usage/UsageStatsService$H;
Lcom/android/server/usage/UsageStatsService$LocalService;
Lcom/android/server/usage/UsageStatsService$UserActionsReceiver;
Lcom/android/server/usage/UsageStatsService;
Lcom/android/server/usage/UserUsageStatsService$1;
Lcom/android/server/usage/UserUsageStatsService$2;
Lcom/android/server/usage/UserUsageStatsService$3;
Lcom/android/server/usage/UserUsageStatsService$StatsUpdatedListener;
Lcom/android/server/usage/UserUsageStatsService;
Lcom/android/server/usb/-$$Lambda$UsbHostManager$XT3F5aQci4H6VWSBYBQQNSzpnvs;
Lcom/android/server/usb/-$$Lambda$UsbPortManager$FUqGOOupcl6RrRkZBk-BnrRQyPI;
Lcom/android/server/usb/-$$Lambda$UsbProfileGroupSettingsManager$IQKTzU0q3lyaW9nLL_sbxJPW8ME;
Lcom/android/server/usb/MtpNotificationManager$OnOpenInAppListener;
Lcom/android/server/usb/MtpNotificationManager$Receiver;
Lcom/android/server/usb/MtpNotificationManager;
Lcom/android/server/usb/UsbAlsaJackDetector;
Lcom/android/server/usb/UsbAlsaManager;
Lcom/android/server/usb/UsbDeviceManager$1;
Lcom/android/server/usb/UsbDeviceManager$2;
Lcom/android/server/usb/UsbDeviceManager$3;
Lcom/android/server/usb/UsbDeviceManager$4;
Lcom/android/server/usb/UsbDeviceManager$UsbHandler$AdbTransport;
Lcom/android/server/usb/UsbDeviceManager$UsbHandler;
Lcom/android/server/usb/UsbDeviceManager$UsbHandlerHal$ServiceNotification;
Lcom/android/server/usb/UsbDeviceManager$UsbHandlerHal$UsbGadgetCallback;
Lcom/android/server/usb/UsbDeviceManager$UsbHandlerHal$UsbGadgetDeathRecipient;
Lcom/android/server/usb/UsbDeviceManager$UsbHandlerHal;
Lcom/android/server/usb/UsbDeviceManager$UsbUEventObserver;
Lcom/android/server/usb/UsbDeviceManager;
Lcom/android/server/usb/UsbHandlerManager;
Lcom/android/server/usb/UsbHostManager$ConnectionRecord;
Lcom/android/server/usb/UsbHostManager;
Lcom/android/server/usb/UsbMidiDevice$2;
Lcom/android/server/usb/UsbMidiDevice$3;
Lcom/android/server/usb/UsbMidiDevice;
Lcom/android/server/usb/UsbPortManager$1;
Lcom/android/server/usb/UsbPortManager$DeathRecipient;
Lcom/android/server/usb/UsbPortManager$HALCallback;
Lcom/android/server/usb/UsbPortManager$PortInfo;
Lcom/android/server/usb/UsbPortManager$RawPortInfo$1;
Lcom/android/server/usb/UsbPortManager$RawPortInfo;
Lcom/android/server/usb/UsbPortManager$ServiceNotification;
Lcom/android/server/usb/UsbPortManager;
Lcom/android/server/usb/UsbProfileGroupSettingsManager$MyPackageMonitor;
Lcom/android/server/usb/UsbProfileGroupSettingsManager$UserPackage;
Lcom/android/server/usb/UsbProfileGroupSettingsManager;
Lcom/android/server/usb/UsbService$1;
Lcom/android/server/usb/UsbService$Lifecycle;
Lcom/android/server/usb/UsbService;
Lcom/android/server/usb/UsbSettingsManager;
Lcom/android/server/usb/UsbUserSettingsManager;
Lcom/android/server/usb/descriptors/UsbDescriptor;
Lcom/android/server/usb/descriptors/UsbDescriptorParser;
Lcom/android/server/usb/descriptors/UsbDeviceDescriptor;
Lcom/android/server/usb/descriptors/report/Reporting;
Lcom/android/server/utils/ManagedApplicationService$BinderChecker;
Lcom/android/server/utils/ManagedApplicationService$EventCallback;
Lcom/android/server/utils/ManagedApplicationService$LogFormattable;
Lcom/android/server/utils/PriorityDump$PriorityDumper;
Lcom/android/server/utils/PriorityDump;
Lcom/android/server/utils/UserTokenWatcher$Callback;
Lcom/android/server/utils/UserTokenWatcher;
Lcom/android/server/voiceinteraction/DatabaseHelper;
Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$1;
Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$LocalService;
Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$2;
Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$RoleObserver;
Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$SettingsObserver;
Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;
Lcom/android/server/voiceinteraction/VoiceInteractionManagerService;
Lcom/android/server/vr/EnabledComponentsObserver$1;
Lcom/android/server/vr/EnabledComponentsObserver$EnabledComponentChangeListener;
Lcom/android/server/vr/EnabledComponentsObserver;
Lcom/android/server/vr/SettingsObserver$1;
Lcom/android/server/vr/SettingsObserver$2;
Lcom/android/server/vr/SettingsObserver$SettingChangeListener;
Lcom/android/server/vr/SettingsObserver;
Lcom/android/server/vr/Vr2dDisplay$1;
Lcom/android/server/vr/Vr2dDisplay;
Lcom/android/server/vr/VrManagerInternal;
Lcom/android/server/vr/VrManagerService$1;
Lcom/android/server/vr/VrManagerService$2;
Lcom/android/server/vr/VrManagerService$3;
Lcom/android/server/vr/VrManagerService$4;
Lcom/android/server/vr/VrManagerService$5;
Lcom/android/server/vr/VrManagerService$LocalService;
Lcom/android/server/vr/VrManagerService$NotificationAccessManager;
Lcom/android/server/vr/VrManagerService$VrState;
Lcom/android/server/vr/VrManagerService;
Lcom/android/server/wallpaper/-$$Lambda$WallpaperManagerService$SxaUJpgTTfzUoz6u3AWuAOQdoNw;
Lcom/android/server/wallpaper/-$$Lambda$WallpaperManagerService$UhAlBGB5jhuZrLndUPRmIvoHRZc;
Lcom/android/server/wallpaper/-$$Lambda$WallpaperManagerService$WallpaperConnection$NrNkceFJLqjCb8eAxErUhpLd5c8;
Lcom/android/server/wallpaper/-$$Lambda$WallpaperManagerService$WallpaperConnection$QhODF3v-swnwSYvDbeEhU85gOBw;
Lcom/android/server/wallpaper/-$$Lambda$WallpaperManagerService$la7x4YHA-l88Cd6HFTscnLBbKfI;
Lcom/android/server/wallpaper/-$$Lambda$WallpaperManagerService$tRb4SPHGj0pcxb3p7arcqKFqs08;
Lcom/android/server/wallpaper/-$$Lambda$WallpaperManagerService$xeJGAwCI8tssclwKFf8jMsYdoKQ;
Lcom/android/server/wallpaper/IWallpaperManagerService;
Lcom/android/server/wallpaper/WallpaperManagerService$1;
Lcom/android/server/wallpaper/WallpaperManagerService$2;
Lcom/android/server/wallpaper/WallpaperManagerService$3;
Lcom/android/server/wallpaper/WallpaperManagerService$4;
Lcom/android/server/wallpaper/WallpaperManagerService$DisplayData;
Lcom/android/server/wallpaper/WallpaperManagerService$Lifecycle;
Lcom/android/server/wallpaper/WallpaperManagerService$MyPackageMonitor;
Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection$DisplayConnector;
Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection;
Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;
Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperObserver;
Lcom/android/server/wallpaper/WallpaperManagerService;
Lcom/android/server/webkit/SystemImpl$LazyHolder;
Lcom/android/server/webkit/SystemImpl;
Lcom/android/server/webkit/SystemInterface;
Lcom/android/server/webkit/WebViewUpdateService$1;
Lcom/android/server/webkit/WebViewUpdateService$BinderService;
Lcom/android/server/webkit/WebViewUpdateService;
Lcom/android/server/webkit/WebViewUpdateServiceImpl;
Lcom/android/server/webkit/WebViewUpdater$ProviderAndPackageInfo;
Lcom/android/server/webkit/WebViewUpdater$WebViewPackageMissingException;
Lcom/android/server/webkit/WebViewUpdater;
Lcom/android/server/wifi/-$$Lambda$AvailableNetworkNotifier$uFi1H-bLBjC8591OGivQMgKmiaU;
Lcom/android/server/wifi/-$$Lambda$DppManager$J9Orgg4nAdvBMsVtJK-uYWJzo2s;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$0fExlzrQXvHvboqrhwLsuIEN8sQ;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$BkJ-u2mnM7l_bsdJ9qDxHZJRcVM;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$ErxCpEghr4yhQpGHX1NQPumvouc;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$GV5vgwCMe-GctE92pSijMSntP7M;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$G_a1DJorXSzwXeeGcyX-nUw44LU;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$InterfaceRttControllerLifecycleCallbackProxy$Jq3jiK0PF_ihQmDGnOqjWGZKR74;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$InterfaceRttControllerLifecycleCallbackProxy$Vt8Gvz01jOxC1TqVEIeBuJ45xAg;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$J6ItBAiUMCzTjCuPD7lYSuJSIGU;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$J_rq9pD25U5x_bgsE9o4bIVv6Rs;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$ListenerProxy$EUZ7m5GXHY27oKauEW_8pihGjbw;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$ListenerProxy$YGLSZf58sxTORRCaSB1wOY_oquo;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$MPjapT5h9jFZYNnOBjLSEdwh6tg;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$NbsSOlQ2rIfa_a-hKmLVOeqJ0sk;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$OnsWneK7WJWdtu1Yc97G_SlWc5w;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$SeJCUxQL5U06-W-tkK8XwQet85g;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$WPv-AGl6UabBR2Zo5mjPN7Pljlo;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$X9vx2J4m1oo365x_oO3URsq_nqo;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$Y4lM61kLmbzKhU2PVXYtGOePWWM;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$bTmsDoAj9faJCBOTeT1Q3Ww5yNM;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$eCjBY_x53LlceEqam19pM9GP8Hg;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$hzrxXx9RDE1QCGSaFElLzJYP5ag;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$jNAzj5YlVhwJm5NjZ6HiKskQStI;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$jZreS4fq6SFMLm2Ky9h8uCsiqO8;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$kKpeJmcjHk7E6pKqNwVTgOU76EA;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$kMV_gE_EG84f-tY-S0Yp4P7U_NM;
Lcom/android/server/wifi/-$$Lambda$HalDeviceManager$yPcf5jFsIHD8FLJVWQLrQ1Z9fSc;
Lcom/android/server/wifi/-$$Lambda$HostapdHal$BanSRPFiiwZZpFD4d63QpeU1xBA;
Lcom/android/server/wifi/-$$Lambda$HostapdHal$ykyXfQPF5iy3e1W0s1ikBBPfH-Y;
Lcom/android/server/wifi/-$$Lambda$SarManager$VrXGaN2lCt0CybxxEfgneaY4FvY;
Lcom/android/server/wifi/-$$Lambda$SarManager$cF1vmoM2QYZACA-YzJsns9WSQI4;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$2ubym8DdxOpNx3j5LJMa4TR8Ymw;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$3BgnlkDDdIw0PJrJmWjhjGZmtCg;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$HYy_ivRYb5h7sLwkHNoi3DEuZxA;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$MZb8lbLDfmk9dJzRNOzLSOYC9_Y;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$Mgp0Eoph8SizT8uo8FHJiCwug2k;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$MsPuzKcT4xAfuigKAAOs1rYm9CU;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$QKKt5Vr7ONbMGW-5Dn_SiW886n4;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$RN5yy1Bc5d6E1Z6k9lqZIMdLATc;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$RSD0ugMIGhWHhmPxXCkALD2N5cU;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$RyQnT_v7B4l3vVijvOVBxHlvVoY;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$Tm7D8fgqduAQdeOyODnUSwEesVo;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$VAcJuhn-A2EvvfEuRumjrowBtmo;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$XsrWSKX1XbMPWPdWWAyIK9DGRmM;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$YDQh6cDTkoX-9I2n83JHX76YpAA;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$baCrbI3eo-P-3PfmPzF28q6ekLM;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$cXGuXuTjj3krF9NRtvw_FHEGZiQ;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$hjOhCW02yzYNlDwHJaely2IS-v0;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$iSySXJBDDsRLtEbI_9u6zKZ-gXU;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$jt86rUfXpbjU1MKB5KeL4Iv2b0k;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$kPu1HFl0FicFP9N2B4hh_sincE8;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$oY40I1ZV1zNoEKNITjSxjIr7WaE;
Lcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$obLcU23CRIRzqBy01VuBJv-lyUg;
Lcom/android/server/wifi/-$$Lambda$WifiLockManager$1$CkMHEvkkoNUZsaBQmCb9B-0F8lI;
Lcom/android/server/wifi/-$$Lambda$WifiNative$NetworkObserverInternal$x2MXZjJ72D1RHdyNl7XjvdO7CHI;
Lcom/android/server/wifi/-$$Lambda$WifiNetworkFactory$FWSc-VL5YZolV22WpOQkmaAHmpU;
Lcom/android/server/wifi/-$$Lambda$WifiServiceImpl$W4P-xarfb3gYRA7uctWs90nU6nM;
Lcom/android/server/wifi/-$$Lambda$WifiServiceImpl$WH1yXObMcpzajFG1KwwEOakTA7o;
Lcom/android/server/wifi/-$$Lambda$WifiServiceImpl$ck1sc9jNKsBP5gycroIN0Rn-f5Q;
Lcom/android/server/wifi/-$$Lambda$WifiVendorHal$XwdlM1fW3hc4x8NTlPEdTo9qP_w;
Lcom/android/server/wifi/-$$Lambda$WifiVendorHal$qPUuRnlo2XMDrsA1gI_KLrbvPAI;
Lcom/android/server/wifi/ActiveModeManager;
Lcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ClientModeActiveState$ClientListener;
Lcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ClientModeActiveState;
Lcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ModeActiveState;
Lcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ScanOnlyModeActiveState$ScanOnlyListener;
Lcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ScanOnlyModeActiveState;
Lcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$WifiDisabledState;
Lcom/android/server/wifi/ActiveModeWarden$ModeStateMachine;
Lcom/android/server/wifi/ActiveModeWarden$WifiNativeStatusListener;
Lcom/android/server/wifi/ActiveModeWarden;
Lcom/android/server/wifi/AggressiveConnectedScore;
Lcom/android/server/wifi/AvailableNetworkNotifier$1;
Lcom/android/server/wifi/AvailableNetworkNotifier$AvailableNetworkNotifierStoreData;
Lcom/android/server/wifi/AvailableNetworkNotifier$NotificationEnabledSettingObserver;
Lcom/android/server/wifi/AvailableNetworkNotifier;
Lcom/android/server/wifi/BackupManagerProxy;
Lcom/android/server/wifi/BaseWifiDiagnostics;
Lcom/android/server/wifi/BuildProperties;
Lcom/android/server/wifi/CarrierNetworkConfig$1;
Lcom/android/server/wifi/CarrierNetworkConfig$2;
Lcom/android/server/wifi/CarrierNetworkConfig;
Lcom/android/server/wifi/CarrierNetworkEvaluator;
Lcom/android/server/wifi/CarrierNetworkNotifier;
Lcom/android/server/wifi/ClientModeImpl$1;
Lcom/android/server/wifi/ClientModeImpl$2;
Lcom/android/server/wifi/ClientModeImpl$3;
Lcom/android/server/wifi/ClientModeImpl$ConnectModeState;
Lcom/android/server/wifi/ClientModeImpl$ConnectedState;
Lcom/android/server/wifi/ClientModeImpl$DefaultState;
Lcom/android/server/wifi/ClientModeImpl$DisconnectedState;
Lcom/android/server/wifi/ClientModeImpl$DisconnectingState;
Lcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;
Lcom/android/server/wifi/ClientModeImpl$L2ConnectedState$RssiEventHandler;
Lcom/android/server/wifi/ClientModeImpl$L2ConnectedState;
Lcom/android/server/wifi/ClientModeImpl$McastLockManagerFilterController;
Lcom/android/server/wifi/ClientModeImpl$ObtainingIpState;
Lcom/android/server/wifi/ClientModeImpl$RoamingState;
Lcom/android/server/wifi/ClientModeImpl$WifiNetworkAgent;
Lcom/android/server/wifi/ClientModeImpl;
Lcom/android/server/wifi/ClientModeManager$ClientModeStateMachine$1;
Lcom/android/server/wifi/ClientModeManager$ClientModeStateMachine$IdleState;
Lcom/android/server/wifi/ClientModeManager$ClientModeStateMachine$StartedState;
Lcom/android/server/wifi/ClientModeManager$ClientModeStateMachine;
Lcom/android/server/wifi/ClientModeManager$Listener;
Lcom/android/server/wifi/ClientModeManager;
Lcom/android/server/wifi/Clock;
Lcom/android/server/wifi/CompatibiltyScorer;
Lcom/android/server/wifi/ConfigurationMap;
Lcom/android/server/wifi/ConnectToNetworkNotificationBuilder;
Lcom/android/server/wifi/ConnectedScore;
Lcom/android/server/wifi/DefaultModeManager;
Lcom/android/server/wifi/DeletedEphemeralSsidsStoreData;
Lcom/android/server/wifi/DppManager$1;
Lcom/android/server/wifi/DppManager;
Lcom/android/server/wifi/DppMetrics;
Lcom/android/server/wifi/DummyLogMessage;
Lcom/android/server/wifi/ExtendedWifiInfo;
Lcom/android/server/wifi/FakeWifiLog;
Lcom/android/server/wifi/FrameworkFacade;
Lcom/android/server/wifi/HalDeviceManager$1;
Lcom/android/server/wifi/HalDeviceManager$IfaceCreationData;
Lcom/android/server/wifi/HalDeviceManager$InterfaceAvailableForRequestListener;
Lcom/android/server/wifi/HalDeviceManager$InterfaceAvailableForRequestListenerProxy;
Lcom/android/server/wifi/HalDeviceManager$InterfaceCacheEntry;
Lcom/android/server/wifi/HalDeviceManager$InterfaceDestroyedListener;
Lcom/android/server/wifi/HalDeviceManager$InterfaceDestroyedListenerProxy;
Lcom/android/server/wifi/HalDeviceManager$InterfaceRttControllerLifecycleCallback;
Lcom/android/server/wifi/HalDeviceManager$InterfaceRttControllerLifecycleCallbackProxy;
Lcom/android/server/wifi/HalDeviceManager$ListenerProxy;
Lcom/android/server/wifi/HalDeviceManager$ManagerStatusListener;
Lcom/android/server/wifi/HalDeviceManager$ManagerStatusListenerProxy;
Lcom/android/server/wifi/HalDeviceManager$WifiChipInfo;
Lcom/android/server/wifi/HalDeviceManager$WifiEventCallback;
Lcom/android/server/wifi/HalDeviceManager$WifiIfaceInfo;
Lcom/android/server/wifi/HalDeviceManager;
Lcom/android/server/wifi/HostapdHal$1;
Lcom/android/server/wifi/HostapdHal$HostapdCallback;
Lcom/android/server/wifi/HostapdHal$HostapdDeathRecipient;
Lcom/android/server/wifi/HostapdHal$ServiceManagerDeathRecipient;
Lcom/android/server/wifi/HostapdHal;
Lcom/android/server/wifi/LastMileLogger;
Lcom/android/server/wifi/LinkProbeManager$1;
Lcom/android/server/wifi/LinkProbeManager;
Lcom/android/server/wifi/LogcatLog$RealLogMessage;
Lcom/android/server/wifi/LogcatLog;
Lcom/android/server/wifi/NetworkListSharedStoreData;
Lcom/android/server/wifi/NetworkListStoreData;
Lcom/android/server/wifi/NetworkListUserStoreData;
Lcom/android/server/wifi/NetworkRequestStoreData$DataSource;
Lcom/android/server/wifi/NetworkRequestStoreData;
Lcom/android/server/wifi/NetworkSuggestionEvaluator;
Lcom/android/server/wifi/NetworkSuggestionStoreData$DataSource;
Lcom/android/server/wifi/NetworkSuggestionStoreData;
Lcom/android/server/wifi/NetworkUpdateResult;
Lcom/android/server/wifi/OpenNetworkNotifier;
Lcom/android/server/wifi/PropertyService;
Lcom/android/server/wifi/RandomizedMacStoreData;
Lcom/android/server/wifi/SIMAccessor;
Lcom/android/server/wifi/SarInfo;
Lcom/android/server/wifi/SarManager$1;
Lcom/android/server/wifi/SarManager$SarSensorEventListener;
Lcom/android/server/wifi/SarManager$WifiPhoneStateListener;
Lcom/android/server/wifi/SarManager;
Lcom/android/server/wifi/SavedNetworkEvaluator;
Lcom/android/server/wifi/ScanDetail;
Lcom/android/server/wifi/ScanDetailCache;
Lcom/android/server/wifi/ScanOnlyModeManager$Listener;
Lcom/android/server/wifi/ScanOnlyModeManager$ScanOnlyModeStateMachine$1;
Lcom/android/server/wifi/ScanOnlyModeManager$ScanOnlyModeStateMachine$IdleState;
Lcom/android/server/wifi/ScanOnlyModeManager$ScanOnlyModeStateMachine$StartedState;
Lcom/android/server/wifi/ScanOnlyModeManager$ScanOnlyModeStateMachine;
Lcom/android/server/wifi/ScanOnlyModeManager;
Lcom/android/server/wifi/ScanRequestProxy$GlobalScanListener;
Lcom/android/server/wifi/ScanRequestProxy$ThrottleEnabledSettingObserver;
Lcom/android/server/wifi/ScanRequestProxy;
Lcom/android/server/wifi/ScanResultMatchInfo;
Lcom/android/server/wifi/ScoreCardBasedScorer;
Lcom/android/server/wifi/ScoredNetworkEvaluator$1;
Lcom/android/server/wifi/ScoredNetworkEvaluator;
Lcom/android/server/wifi/ScoringParams$1;
Lcom/android/server/wifi/ScoringParams$Values;
Lcom/android/server/wifi/ScoringParams;
Lcom/android/server/wifi/SelfRecovery;
Lcom/android/server/wifi/SoftApManager;
Lcom/android/server/wifi/SoftApModeConfiguration;
Lcom/android/server/wifi/SsidSetStoreData$DataSource;
Lcom/android/server/wifi/SsidSetStoreData;
Lcom/android/server/wifi/StateChangeResult;
Lcom/android/server/wifi/SupplicantStaIfaceHal$1;
Lcom/android/server/wifi/SupplicantStaIfaceHal$ServiceManagerDeathRecipient;
Lcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantDeathRecipient;
Lcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallback;
Lcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_1;
Lcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_2;
Lcom/android/server/wifi/SupplicantStaIfaceHal;
Lcom/android/server/wifi/SupplicantStaNetworkHal;
Lcom/android/server/wifi/SupplicantStateTracker$CompletedState;
Lcom/android/server/wifi/SupplicantStateTracker$ConnectionActiveState;
Lcom/android/server/wifi/SupplicantStateTracker$DefaultState;
Lcom/android/server/wifi/SupplicantStateTracker$DisconnectedState;
Lcom/android/server/wifi/SupplicantStateTracker$DormantState;
Lcom/android/server/wifi/SupplicantStateTracker$HandshakeState;
Lcom/android/server/wifi/SupplicantStateTracker$InactiveState;
Lcom/android/server/wifi/SupplicantStateTracker$ScanState;
Lcom/android/server/wifi/SupplicantStateTracker$UninitializedState;
Lcom/android/server/wifi/SupplicantStateTracker;
Lcom/android/server/wifi/SystemBuildProperties;
Lcom/android/server/wifi/SystemPropertyService;
Lcom/android/server/wifi/UntrustedWifiNetworkFactory;
Lcom/android/server/wifi/VelocityBasedConnectedScore;
Lcom/android/server/wifi/WakeupConfigStoreData$DataSource;
Lcom/android/server/wifi/WakeupConfigStoreData;
Lcom/android/server/wifi/WakeupController$1;
Lcom/android/server/wifi/WakeupController$2;
Lcom/android/server/wifi/WakeupController$IsActiveDataSource;
Lcom/android/server/wifi/WakeupController;
Lcom/android/server/wifi/WakeupEvaluator;
Lcom/android/server/wifi/WakeupLock$WakeupLockDataSource;
Lcom/android/server/wifi/WakeupLock;
Lcom/android/server/wifi/WakeupNotificationFactory;
Lcom/android/server/wifi/WakeupOnboarding$1;
Lcom/android/server/wifi/WakeupOnboarding$IsOnboardedDataSource;
Lcom/android/server/wifi/WakeupOnboarding$NotificationsDataSource;
Lcom/android/server/wifi/WakeupOnboarding;
Lcom/android/server/wifi/WifiApConfigStore$1;
Lcom/android/server/wifi/WifiApConfigStore;
Lcom/android/server/wifi/WifiBackupDataParser;
Lcom/android/server/wifi/WifiBackupDataV1Parser;
Lcom/android/server/wifi/WifiBackupRestore$SupplicantBackupMigration$SupplicantNetworks;
Lcom/android/server/wifi/WifiBackupRestore$SupplicantBackupMigration;
Lcom/android/server/wifi/WifiBackupRestore;
Lcom/android/server/wifi/WifiCandidates$CandidateScorer;
Lcom/android/server/wifi/WifiConfigManager$1;
Lcom/android/server/wifi/WifiConfigManager$2;
Lcom/android/server/wifi/WifiConfigManager$3;
Lcom/android/server/wifi/WifiConfigManager$OnSavedNetworkUpdateListener;
Lcom/android/server/wifi/WifiConfigManager;
Lcom/android/server/wifi/WifiConfigStore$1;
Lcom/android/server/wifi/WifiConfigStore$2;
Lcom/android/server/wifi/WifiConfigStore$StoreData;
Lcom/android/server/wifi/WifiConfigStore$StoreFile;
Lcom/android/server/wifi/WifiConfigStore;
Lcom/android/server/wifi/WifiConfigStoreLegacy$IpConfigStoreWrapper;
Lcom/android/server/wifi/WifiConfigStoreLegacy;
Lcom/android/server/wifi/WifiConfigurationUtil$WifiConfigurationComparator;
Lcom/android/server/wifi/WifiConfigurationUtil;
Lcom/android/server/wifi/WifiConnectivityHelper;
Lcom/android/server/wifi/WifiConnectivityManager$1;
Lcom/android/server/wifi/WifiConnectivityManager$2;
Lcom/android/server/wifi/WifiConnectivityManager$3;
Lcom/android/server/wifi/WifiConnectivityManager$AllSingleScanListener;
Lcom/android/server/wifi/WifiConnectivityManager$OnSavedNetworkUpdateListener;
Lcom/android/server/wifi/WifiConnectivityManager$PnoScanListener;
Lcom/android/server/wifi/WifiConnectivityManager;
Lcom/android/server/wifi/WifiController$1;
Lcom/android/server/wifi/WifiController$ClientModeCallback;
Lcom/android/server/wifi/WifiController$DefaultState;
Lcom/android/server/wifi/WifiController$EcmState;
Lcom/android/server/wifi/WifiController$ScanOnlyCallback;
Lcom/android/server/wifi/WifiController$StaDisabledState;
Lcom/android/server/wifi/WifiController$StaDisabledWithScanState;
Lcom/android/server/wifi/WifiController$StaEnabledState;
Lcom/android/server/wifi/WifiController;
Lcom/android/server/wifi/WifiCountryCode;
Lcom/android/server/wifi/WifiDataStall;
Lcom/android/server/wifi/WifiDiagnostics$1;
Lcom/android/server/wifi/WifiDiagnostics$2;
Lcom/android/server/wifi/WifiDiagnostics$BugReport;
Lcom/android/server/wifi/WifiDiagnostics$LimitedCircularArray;
Lcom/android/server/wifi/WifiDiagnostics;
Lcom/android/server/wifi/WifiInjector;
Lcom/android/server/wifi/WifiKeyStore;
Lcom/android/server/wifi/WifiLastResortWatchdog;
Lcom/android/server/wifi/WifiLinkLayerStats;
Lcom/android/server/wifi/WifiLockManager$1;
Lcom/android/server/wifi/WifiLockManager$ClientModeImplInterfaceHandler;
Lcom/android/server/wifi/WifiLockManager$UidRec;
Lcom/android/server/wifi/WifiLockManager;
Lcom/android/server/wifi/WifiLog$LogMessage;
Lcom/android/server/wifi/WifiLog;
Lcom/android/server/wifi/WifiMetrics$1;
Lcom/android/server/wifi/WifiMetrics;
Lcom/android/server/wifi/WifiMonitor;
Lcom/android/server/wifi/WifiMulticastLockManager$FilterController;
Lcom/android/server/wifi/WifiMulticastLockManager;
Lcom/android/server/wifi/WifiNative$BucketSettings;
Lcom/android/server/wifi/WifiNative$DppEventCallback;
Lcom/android/server/wifi/WifiNative$FateReport;
Lcom/android/server/wifi/WifiNative$HostapdDeathEventHandler;
Lcom/android/server/wifi/WifiNative$Iface;
Lcom/android/server/wifi/WifiNative$IfaceManager;
Lcom/android/server/wifi/WifiNative$InterfaceCallback;
Lcom/android/server/wifi/WifiNative$InterfaceDestoyedListenerInternal;
Lcom/android/server/wifi/WifiNative$NetworkObserverInternal;
Lcom/android/server/wifi/WifiNative$PnoEventHandler;
Lcom/android/server/wifi/WifiNative$RingBufferStatus;
Lcom/android/server/wifi/WifiNative$RxFateReport;
Lcom/android/server/wifi/WifiNative$ScanCapabilities;
Lcom/android/server/wifi/WifiNative$ScanEventHandler;
Lcom/android/server/wifi/WifiNative$ScanSettings;
Lcom/android/server/wifi/WifiNative$SignalPollResult;
Lcom/android/server/wifi/WifiNative$SoftApListener;
Lcom/android/server/wifi/WifiNative$StatusListener;
Lcom/android/server/wifi/WifiNative$SupplicantDeathEventHandler;
Lcom/android/server/wifi/WifiNative$SupplicantDeathHandlerInternal;
Lcom/android/server/wifi/WifiNative$TxFateReport;
Lcom/android/server/wifi/WifiNative$TxPacketCounters;
Lcom/android/server/wifi/WifiNative$VendorHalDeathEventHandler;
Lcom/android/server/wifi/WifiNative$VendorHalDeathHandlerInternal;
Lcom/android/server/wifi/WifiNative$VendorHalRadioModeChangeEventHandler;
Lcom/android/server/wifi/WifiNative$VendorHalRadioModeChangeHandlerInternal;
Lcom/android/server/wifi/WifiNative$WifiLoggerEventHandler;
Lcom/android/server/wifi/WifiNative$WifiRssiEventHandler;
Lcom/android/server/wifi/WifiNative$WificondDeathEventHandler;
Lcom/android/server/wifi/WifiNative$WificondDeathHandlerInternal;
Lcom/android/server/wifi/WifiNative;
Lcom/android/server/wifi/WifiNetworkFactory$ConnectionTimeoutAlarmListener;
Lcom/android/server/wifi/WifiNetworkFactory$NetworkFactoryScanListener;
Lcom/android/server/wifi/WifiNetworkFactory$NetworkRequestDataSource;
Lcom/android/server/wifi/WifiNetworkFactory$PeriodicScanAlarmListener;
Lcom/android/server/wifi/WifiNetworkFactory;
Lcom/android/server/wifi/WifiNetworkHistory$1;
Lcom/android/server/wifi/WifiNetworkHistory;
Lcom/android/server/wifi/WifiNetworkSelector$NetworkEvaluator;
Lcom/android/server/wifi/WifiNetworkSelector;
Lcom/android/server/wifi/WifiNetworkSuggestionsManager$1;
Lcom/android/server/wifi/WifiNetworkSuggestionsManager$NetworkSuggestionDataSource;
Lcom/android/server/wifi/WifiNetworkSuggestionsManager;
Lcom/android/server/wifi/WifiPowerMetrics;
Lcom/android/server/wifi/WifiScoreCard$PerBssid;
Lcom/android/server/wifi/WifiScoreCard;
Lcom/android/server/wifi/WifiScoreReport;
Lcom/android/server/wifi/WifiService;
Lcom/android/server/wifi/WifiServiceImpl$1;
Lcom/android/server/wifi/WifiServiceImpl$2;
Lcom/android/server/wifi/WifiServiceImpl$3;
Lcom/android/server/wifi/WifiServiceImpl$4;
Lcom/android/server/wifi/WifiServiceImpl$5;
Lcom/android/server/wifi/WifiServiceImpl$6;
Lcom/android/server/wifi/WifiServiceImpl$AsyncChannelExternalClientHandler;
Lcom/android/server/wifi/WifiServiceImpl$ClientModeImplHandler;
Lcom/android/server/wifi/WifiServiceImpl$SoftApCallbackImpl;
Lcom/android/server/wifi/WifiServiceImpl;
Lcom/android/server/wifi/WifiSettingsStore;
Lcom/android/server/wifi/WifiStateTracker;
Lcom/android/server/wifi/WifiTrafficPoller;
Lcom/android/server/wifi/WifiVendorHal$6AnswerBox;
Lcom/android/server/wifi/WifiVendorHal$ChipEventCallback;
Lcom/android/server/wifi/WifiVendorHal$ChipEventCallbackV12;
Lcom/android/server/wifi/WifiVendorHal$HalDeviceManagerStatusListener;
Lcom/android/server/wifi/WifiVendorHal$StaIfaceEventCallback;
Lcom/android/server/wifi/WifiVendorHal$StaInterfaceDestroyedListenerInternal;
Lcom/android/server/wifi/WifiVendorHal;
Lcom/android/server/wifi/WifiWakeMetrics;
Lcom/android/server/wifi/WificondControl$PnoScanEventHandler;
Lcom/android/server/wifi/WificondControl$ScanEventHandler;
Lcom/android/server/wifi/WificondControl;
Lcom/android/server/wifi/WlanWakeReasonAndCounts;
Lcom/android/server/wifi/WrongPasswordNotifier;
Lcom/android/server/wifi/aware/Capabilities;
Lcom/android/server/wifi/aware/WifiAwareDataPathStateManager$NetworkInterfaceWrapper;
Lcom/android/server/wifi/aware/WifiAwareDataPathStateManager$WifiAwareNetworkFactory;
Lcom/android/server/wifi/aware/WifiAwareDataPathStateManager;
Lcom/android/server/wifi/aware/WifiAwareMetrics;
Lcom/android/server/wifi/aware/WifiAwareNativeApi;
Lcom/android/server/wifi/aware/WifiAwareNativeCallback;
Lcom/android/server/wifi/aware/WifiAwareNativeManager$InterfaceAvailableForRequestListener;
Lcom/android/server/wifi/aware/WifiAwareNativeManager$InterfaceDestroyedListener;
Lcom/android/server/wifi/aware/WifiAwareNativeManager;
Lcom/android/server/wifi/aware/WifiAwareService;
Lcom/android/server/wifi/aware/WifiAwareServiceImpl$1;
Lcom/android/server/wifi/aware/WifiAwareServiceImpl;
Lcom/android/server/wifi/aware/WifiAwareShellCommand$DelegatedShellCommand;
Lcom/android/server/wifi/aware/WifiAwareShellCommand;
Lcom/android/server/wifi/aware/WifiAwareStateManager$1;
Lcom/android/server/wifi/aware/WifiAwareStateManager$2;
Lcom/android/server/wifi/aware/WifiAwareStateManager$3;
Lcom/android/server/wifi/aware/WifiAwareStateManager$WifiAwareStateMachine$DefaultState;
Lcom/android/server/wifi/aware/WifiAwareStateManager$WifiAwareStateMachine$WaitForResponseState;
Lcom/android/server/wifi/aware/WifiAwareStateManager$WifiAwareStateMachine$WaitState;
Lcom/android/server/wifi/aware/WifiAwareStateManager$WifiAwareStateMachine;
Lcom/android/server/wifi/aware/WifiAwareStateManager;
Lcom/android/server/wifi/hotspot2/-$$Lambda$PasspointProvisioner$8fmJnU9XPoTzX8nPAlmJHjKftJw;
Lcom/android/server/wifi/hotspot2/ANQPRequestManager;
Lcom/android/server/wifi/hotspot2/AnqpCache;
Lcom/android/server/wifi/hotspot2/AnqpEvent;
Lcom/android/server/wifi/hotspot2/CertificateVerifier;
Lcom/android/server/wifi/hotspot2/IconEvent;
Lcom/android/server/wifi/hotspot2/LegacyPasspointConfigParser;
Lcom/android/server/wifi/hotspot2/NetworkDetail$Ant;
Lcom/android/server/wifi/hotspot2/NetworkDetail;
Lcom/android/server/wifi/hotspot2/OsuNetworkConnection$1;
Lcom/android/server/wifi/hotspot2/OsuNetworkConnection$Callbacks;
Lcom/android/server/wifi/hotspot2/OsuNetworkConnection$ConnectivityCallbacks;
Lcom/android/server/wifi/hotspot2/OsuNetworkConnection;
Lcom/android/server/wifi/hotspot2/OsuServerConnection$WFATrustManager;
Lcom/android/server/wifi/hotspot2/OsuServerConnection;
Lcom/android/server/wifi/hotspot2/PasspointConfigSharedStoreData$DataSource;
Lcom/android/server/wifi/hotspot2/PasspointConfigSharedStoreData;
Lcom/android/server/wifi/hotspot2/PasspointConfigUserStoreData$DataSource;
Lcom/android/server/wifi/hotspot2/PasspointConfigUserStoreData;
Lcom/android/server/wifi/hotspot2/PasspointEventHandler$Callbacks;
Lcom/android/server/wifi/hotspot2/PasspointEventHandler;
Lcom/android/server/wifi/hotspot2/PasspointManager$CallbackHandler;
Lcom/android/server/wifi/hotspot2/PasspointManager$SharedDataSourceHandler;
Lcom/android/server/wifi/hotspot2/PasspointManager$UserDataSourceHandler;
Lcom/android/server/wifi/hotspot2/PasspointManager;
Lcom/android/server/wifi/hotspot2/PasspointNetworkEvaluator;
Lcom/android/server/wifi/hotspot2/PasspointObjectFactory;
Lcom/android/server/wifi/hotspot2/PasspointProvider;
Lcom/android/server/wifi/hotspot2/PasspointProvisioner$OsuNetworkCallbacks;
Lcom/android/server/wifi/hotspot2/PasspointProvisioner$OsuServerCallbacks;
Lcom/android/server/wifi/hotspot2/PasspointProvisioner$ProvisioningStateMachine;
Lcom/android/server/wifi/hotspot2/PasspointProvisioner;
Lcom/android/server/wifi/hotspot2/SystemInfo;
Lcom/android/server/wifi/hotspot2/WfaCertBuilder;
Lcom/android/server/wifi/hotspot2/WfaKeyStore;
Lcom/android/server/wifi/hotspot2/WnmData;
Lcom/android/server/wifi/hotspot2/anqp/Constants$ANQPElementType;
Lcom/android/server/wifi/hotspot2/soap/-$$Lambda$RedirectListener$bYoYNT_lbW4WMGJVpKLEbMvo1nY;
Lcom/android/server/wifi/hotspot2/soap/RedirectListener;
Lcom/android/server/wifi/p2p/-$$Lambda$22Qhg7RQJlX-ihi83tqGgsfF-Ms;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$AwvLtkH4UyCOhUYx__3ExZj_7jQ;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$DZ5hjM0K-k-jbWASpzD6nJ3e6xU;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$E4Spq_q7PRsXiNIycR53oa-9H68;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$EtDVjv9sBbwd_VKqTeizuRtV3z4;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$FjqymoOlHfh38YnKZwagVaL8Jog;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$JzKiJ4oLypdiaI_2kjk3anuHsPQ;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$NNtqsQiP2_K4VCIPid6vvSLYwJg;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$PuXtgEcUoHfMGA1SHt2CZh5_b1Q;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$WkGSeTaZoJDTkSe2fqKEjLQpWuk;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$Wvwk6xCSAknWmsVUgpUqV_3NQiE;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$bXMI596Kq7T2WYp5S1uvxkboxxk;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$cZS-3bDskhEdL9pvSQ9NTW85EOo;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$dFKn5oY7OFr4d91vo-vY6YUffTI;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$ek6pjXj3dGTF-HTMzJ4YwbyD3Dc;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$fAd_Ie2bVgQhtfKKOMlJdzPJyMU;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$izMglHV1zYg-bjEUsC4ooS9V9rc;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$kpewDgmpbiuLCclRVxVxZiaoom8;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$l7P05UXArQDgqCiDU1muZnDZyB4;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$qdAVPJtKWPe5tcjcdhPA5D2APmU;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$uOALwzLWCrgwsgrkWxQlW6drzT8;
Lcom/android/server/wifi/p2p/-$$Lambda$SupplicantP2pIfaceHal$xxcrLmh4P3s14clwwWnJ79St0UM;
Lcom/android/server/wifi/p2p/-$$Lambda$WifiP2pNative$OugPqsliuKv73AxYwflB8JKX3Gg;
Lcom/android/server/wifi/p2p/-$$Lambda$WifiP2pServiceImpl$LwceCrSRIRY_Lp9TjCEZZ62j-ls;
Lcom/android/server/wifi/p2p/-$$Lambda$WifiP2pServiceImpl$P2pStateMachine$zMDJmVHxNOQccRUsy4cDbijFDbc;
Lcom/android/server/wifi/p2p/SupplicantP2pIfaceCallback;
Lcom/android/server/wifi/p2p/SupplicantP2pIfaceHal$1;
Lcom/android/server/wifi/p2p/SupplicantP2pIfaceHal$SupplicantResult;
Lcom/android/server/wifi/p2p/SupplicantP2pIfaceHal;
Lcom/android/server/wifi/p2p/WifiP2pMetrics;
Lcom/android/server/wifi/p2p/WifiP2pMonitor;
Lcom/android/server/wifi/p2p/WifiP2pNative$InterfaceAvailableListenerInternal;
Lcom/android/server/wifi/p2p/WifiP2pNative;
Lcom/android/server/wifi/p2p/WifiP2pService;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$1;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$ClientHandler;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$DeathHandlerData;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$IpClientCallbacksImpl;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$1;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$2;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$3;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$4;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$DefaultState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$FrequencyConflictState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$GroupCreatedState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$GroupCreatingState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$GroupNegotiationState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$InactiveState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$OngoingGroupRemovalState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$P2pDisabledState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$P2pDisablingState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$P2pEnabledState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$P2pNotSupportedState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$ProvisionDiscoveryState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$UserAuthorizingInviteRequestState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$UserAuthorizingJoinState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$UserAuthorizingNegotiationRequestState;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStatus;
Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;
Lcom/android/server/wifi/rtt/-$$Lambda$RttNative$nRSOFcP2WhqxmfStf2OeZAekTCY;
Lcom/android/server/wifi/rtt/-$$Lambda$RttNative$rJS9dcQwV7YDCbGMGmH46AVDmws;
Lcom/android/server/wifi/rtt/-$$Lambda$RttServiceImpl$RttServiceSynchronized$nvl34lO7P1KT2zH6q5nTdziEODs;
Lcom/android/server/wifi/rtt/-$$Lambda$RttServiceImpl$ehyq-_xe9BYccoyltP3Gc2lh51g;
Lcom/android/server/wifi/rtt/-$$Lambda$RttServiceImpl$q9ANpyRqIip_-lKXLzaUsSwgxFs;
Lcom/android/server/wifi/rtt/-$$Lambda$RttServiceImpl$wP--CWXsaxeveXsy_7abZeA-Q-w;
Lcom/android/server/wifi/rtt/RttMetrics$PerPeerTypeInfo;
Lcom/android/server/wifi/rtt/RttMetrics;
Lcom/android/server/wifi/rtt/RttNative$1;
Lcom/android/server/wifi/rtt/RttNative;
Lcom/android/server/wifi/rtt/RttService;
Lcom/android/server/wifi/rtt/RttServiceImpl$1;
Lcom/android/server/wifi/rtt/RttServiceImpl$2;
Lcom/android/server/wifi/rtt/RttServiceImpl$3;
Lcom/android/server/wifi/rtt/RttServiceImpl$4;
Lcom/android/server/wifi/rtt/RttServiceImpl$RttServiceSynchronized;
Lcom/android/server/wifi/rtt/RttServiceImpl$RttShellCommand;
Lcom/android/server/wifi/rtt/RttServiceImpl;
Lcom/android/server/wifi/scanner/BackgroundScanScheduler$Bucket;
Lcom/android/server/wifi/scanner/BackgroundScanScheduler$BucketList$1;
Lcom/android/server/wifi/scanner/BackgroundScanScheduler$BucketList;
Lcom/android/server/wifi/scanner/BackgroundScanScheduler;
Lcom/android/server/wifi/scanner/ChannelHelper;
Lcom/android/server/wifi/scanner/HalWifiScannerImpl;
Lcom/android/server/wifi/scanner/KnownBandsChannelHelper;
Lcom/android/server/wifi/scanner/WifiScannerImpl$1;
Lcom/android/server/wifi/scanner/WifiScannerImpl$2;
Lcom/android/server/wifi/scanner/WifiScannerImpl$WifiScannerImplFactory;
Lcom/android/server/wifi/scanner/WifiScannerImpl;
Lcom/android/server/wifi/scanner/WifiScanningService;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientHandler;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$ExternalClientInfo;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$RequestInfo;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$RequestList;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiBackgroundScanStateMachine$DefaultState;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiBackgroundScanStateMachine$PausedState;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiBackgroundScanStateMachine$StartedState;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiBackgroundScanStateMachine;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine$DefaultState;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine$HwPnoScanState;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine$SingleScanState;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine$StartedState;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine$DefaultState;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine$DriverStartedState;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine$IdleState;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine$ScanningState;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;
Lcom/android/server/wifi/scanner/WifiScanningServiceImpl;
Lcom/android/server/wifi/scanner/WificondChannelHelper;
Lcom/android/server/wifi/scanner/WificondScannerImpl;
Lcom/android/server/wifi/util/-$$Lambda$ExternalCallbackTracker$8QoY6PIJITD7KnJG1izwMVWuxyA;
Lcom/android/server/wifi/util/ByteArrayRingBuffer;
Lcom/android/server/wifi/util/DataIntegrityChecker;
Lcom/android/server/wifi/util/ExternalCallbackTracker$ExternalCallbackHolder$DeathCallback;
Lcom/android/server/wifi/util/ExternalCallbackTracker$ExternalCallbackHolder;
Lcom/android/server/wifi/util/ExternalCallbackTracker;
Lcom/android/server/wifi/util/IntCounter;
Lcom/android/server/wifi/util/IntHistogram;
Lcom/android/server/wifi/util/KalmanFilter;
Lcom/android/server/wifi/util/Matrix;
Lcom/android/server/wifi/util/MetricsUtils$LogHistParms;
Lcom/android/server/wifi/util/MetricsUtils;
Lcom/android/server/wifi/util/NativeUtil;
Lcom/android/server/wifi/util/TelephonyUtil$SimAuthRequestData;
Lcom/android/server/wifi/util/TelephonyUtil$SimAuthResponseData;
Lcom/android/server/wifi/util/TelephonyUtil;
Lcom/android/server/wifi/util/WifiAsyncChannel;
Lcom/android/server/wifi/util/WifiHandler;
Lcom/android/server/wifi/util/WifiPermissionsUtil;
Lcom/android/server/wifi/util/WifiPermissionsWrapper;
Lcom/android/server/wifi/util/XmlUtil$IpConfigurationXmlUtil;
Lcom/android/server/wifi/util/XmlUtil$WifiConfigurationXmlUtil;
Lcom/android/server/wifi/util/XmlUtil;
Lcom/android/server/wm/-$$Lambda$01bPtngJg5AqEoOWfW3rWfV7MH4;
Lcom/android/server/wm/-$$Lambda$1636dquQO0UvkFayOGf_gceB4iw;
Lcom/android/server/wm/-$$Lambda$2KrtdmjrY7Nagc4IRqzCk9gDuQU;
Lcom/android/server/wm/-$$Lambda$3W4Y_XVQUddVKzLjibuHW7h0R1g;
Lcom/android/server/wm/-$$Lambda$6DEhn1zqxqV5_Ytb_NyzMW23Ano;
Lcom/android/server/wm/-$$Lambda$ADNhW0r9Skcs9ezrOGURijI-lyQ;
Lcom/android/server/wm/-$$Lambda$ActivityStackSupervisor$28Zuzbi6usdgbDcOi8hrJg6nZO0;
Lcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$-xFyZDUKMraVkermSJGXQdN3oJ4;
Lcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$7Ia1bmRpPHHSNlbH8cuLw8dKG04;
Lcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$BXul1K8BX6JEv_ff3NT76qpeZGQ;
Lcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$iduseKQrjIWQYD0hJ8Q5DMmuSfE;
Lcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$oP6xxIfnD4kb4JN7aSJU073ULR4;
Lcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$p4I6RZJqLXjaEjdISFyNzjAe4HE;
Lcom/android/server/wm/-$$Lambda$AppTransition$xrq-Gwel_FcpfDvO2DrCfGN_3bk;
Lcom/android/server/wm/-$$Lambda$AppTransitionController$ESsBJ2royCDDfelW3z7cgYH5q2I;
Lcom/android/server/wm/-$$Lambda$AppTransitionController$YfQg1m68hbvcHoXbvzomyslzuaU;
Lcom/android/server/wm/-$$Lambda$AppTransitionController$j4jrKo6PKtYRjRfPVQMMiQB02jg;
Lcom/android/server/wm/-$$Lambda$AppWindowToken$cwsF3cyeJjO4UiuaM07w8TBc698;
Lcom/android/server/wm/-$$Lambda$AppWindowToken$dqGwEWgT9i_0MfthapjlHK23UrM;
Lcom/android/server/wm/-$$Lambda$AppWindowToken$jUUD3GIacKfmiVanGs_Dyy3FFqI;
Lcom/android/server/wm/-$$Lambda$BoundsAnimationController$3-yWz6AXIW5r1KElGtHEgHZdi5Q;
Lcom/android/server/wm/-$$Lambda$DZzr1xJVO2dSdamoKdlelCfv9o4;
Lcom/android/server/wm/-$$Lambda$DisplayContent$0yxrqH9eGY2qTjH1u_BvaVrXCSA;
Lcom/android/server/wm/-$$Lambda$DisplayContent$7uZtakUXzuXqF_Qht5Uq7LUvubI;
Lcom/android/server/wm/-$$Lambda$DisplayContent$7voe_dEKk2BYMriCvPuvaznb9WQ;
Lcom/android/server/wm/-$$Lambda$DisplayContent$GuCKVzKP141d6J0gfRAjKtuBJUU;
Lcom/android/server/wm/-$$Lambda$DisplayContent$JibsaX4YnJd0ta_wiDDdSp-PjQk;
Lcom/android/server/wm/-$$Lambda$DisplayContent$NonAppWindowContainers$FI_O7m2qEDfIRZef3D32AxG-rcs;
Lcom/android/server/wm/-$$Lambda$DisplayContent$NonAppWindowContainers$nqCymC3xR9b3qaeohnnJJpSiajc;
Lcom/android/server/wm/-$$Lambda$DisplayContent$TPj3OjTsuIg5GTLb5nMmFqIghA4;
Lcom/android/server/wm/-$$Lambda$DisplayContent$fiC19lMy-d_-rvza7hhOSw6bOM8;
Lcom/android/server/wm/-$$Lambda$DisplayContent$hRKjZwmneu0T85LNNY6_Zcs4gKM;
Lcom/android/server/wm/-$$Lambda$DisplayContent$qT01Aq6xt_ZOs86A1yDQe-qmPFQ;
Lcom/android/server/wm/-$$Lambda$DisplayContent$qxt4izS31fb0LF2uo_OF9DMa7gc;
Lcom/android/server/wm/-$$Lambda$DisplayPolicy$ZodRZMHxBPaPezVW2fanpbNIqqQ;
Lcom/android/server/wm/-$$Lambda$DisplayPolicy$_FsvHpVUi-gbWmSpT009cJNNmgM;
Lcom/android/server/wm/-$$Lambda$DisplayPolicy$n40v5T_KP7EALj7NP3i_hv76V5o;
Lcom/android/server/wm/-$$Lambda$DisplayPolicy$xlVRxCROc8UPmV4pH747oZzvS58;
Lcom/android/server/wm/-$$Lambda$HLz_SQuxQoIiuaK5SB5xJ6FnoxY;
Lcom/android/server/wm/-$$Lambda$InsetsStateController$pXoYGy4X5aPw1QFi0iIWKiTMlDg;
Lcom/android/server/wm/-$$Lambda$InsetsStateController$sIYEJIR4ztgffCLMi5Z1RvdxyYs;
Lcom/android/server/wm/-$$Lambda$LYW1ECaEajjYgarzgKdTZ4O1fi0;
Lcom/android/server/wm/-$$Lambda$OPdXuZQLetMnocdH6XV32JbNQ3I;
Lcom/android/server/wm/-$$Lambda$OuObUsm0bB9g5X0kIXYkBYHvodY;
Lcom/android/server/wm/-$$Lambda$PersisterQueue$HOTPBvinkMOqT3zxV3gRm6Y9Wi4;
Lcom/android/server/wm/-$$Lambda$RecentTasks$KPkDUQ9KJ-vmXlmV8HHAucQJJdQ;
Lcom/android/server/wm/-$$Lambda$RootWindowContainer$Vvv8jzH2oSE9-eakZwTuKd5NpsU;
Lcom/android/server/wm/-$$Lambda$RootWindowContainer$qT2ficAmvrvFcBdiJIGNKxJ8Z9Q;
Lcom/android/server/wm/-$$Lambda$RootWindowContainer$vMW2dyMvZQ0PDhptvNKN5WXpK_w;
Lcom/android/server/wm/-$$Lambda$RootWindowContainer$zN9AhOirpieCrP6YNeTmpaApULQ;
Lcom/android/server/wm/-$$Lambda$RunningTasks$B8bQN-i7MO0XIePhmkVnejRGNp0;
Lcom/android/server/wm/-$$Lambda$StatusBarController$1$3FiQ0kybPCSlgcNJkCsNm5M12iA;
Lcom/android/server/wm/-$$Lambda$StatusBarController$1$CizMeoiz6ZVrkt6kAKpSV5htmyc;
Lcom/android/server/wm/-$$Lambda$StatusBarController$1$t71qcQIBSxRShk0Xohf1lk53bOw;
Lcom/android/server/wm/-$$Lambda$StatusBarController$1$x4q7e0Eysf0ynMSdT1A-JN_ucuI;
Lcom/android/server/wm/-$$Lambda$SurfaceAnimationRunner$lSzwjoKEGADoEFOzdEnwriAk0T4;
Lcom/android/server/wm/-$$Lambda$SurfaceAnimationRunner$we7K92eAl3biB_bzyqbv5xCmasE;
Lcom/android/server/wm/-$$Lambda$SurfaceAnimationRunner$xDyZdsMrcbp64p4BQmOGPvVnSWA;
Lcom/android/server/wm/-$$Lambda$SurfaceAnimator$vdRZk66hQVbQCvVXEaQCT1kVmFc;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$0m_-qN9QkcgkoWun2Biw8le4l1Y;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$1ziXgnyLi0gQjqMGJAbSzs0-dmE;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$9ngbiJ2r3x2ASHwN59tUFO2-2BQ;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$Ge3jFevRwpndz6qRSLDXODq2VjE;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$M2NSB3SSVJR2Tu4vihNfsIL31s4;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$MS67FdGix7tWO0Od9imcaKVXL7I;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$NLoKy9SbVr1EJpEjznsKi7yAlpg;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$SAbrujQOZNUflKs1FAg2mBnjx3A;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$SByuGj5tpcCpjTH9lf5zHHv2gNM;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$ZLPZtiEvD_F4WUgH7BD4KPpdAWM;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$byMDuIFUN4cQ1lT9jVjMwLhaLDw;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$k0FXXC-HcWJhmtm6-Kruo6nGeXI;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$kss8MGli3T9b_Y-QDzR2cB843y8;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$ncM_yje7-m7HuiJvorBIH_C8Ou4;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$qONfw3ssOxjb_iMuO2oMzCbXfrg;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$wuBjs4dj7gB_MI4dIdt2gV2Osus;
Lcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$yaW9HlZsz3L55CTQ4b7y33IGo94;
Lcom/android/server/wm/-$$Lambda$TaskTapPointerEventListener$Qq8YAj6yai3RMz5wJNKGVJNqsPM;
Lcom/android/server/wm/-$$Lambda$UB90fpYUkajpKCLGR93ZDlgDhyw;
Lcom/android/server/wm/-$$Lambda$WallpaperController$6pruPGLeSJAwNl9vGfC87eso21w;
Lcom/android/server/wm/-$$Lambda$WindowAnimator$U3Fu5_RzEyNo8Jt6zTb2ozdXiqM;
Lcom/android/server/wm/-$$Lambda$WindowAnimator$ddXU8gK8rmDqri0OZVMNa3Y4GHk;
Lcom/android/server/wm/-$$Lambda$WindowManagerService$Ui3P_hFzUBaAtWwv4aQ-Lnn2NnQ;
Lcom/android/server/wm/-$$Lambda$WindowManagerService$wGh8jzmWqrd_7ruovSXZoiIk1s0;
Lcom/android/server/wm/-$$Lambda$WindowSurfacePlacer$4Hbamt-LFcbu8AoZBoOZN_LveKQ;
Lcom/android/server/wm/-$$Lambda$WindowToken$tFLHn4S6WuSXW1gp1kvT_sp7WC0;
Lcom/android/server/wm/-$$Lambda$WindowTracing$lz89IHzR4nKO_ZtXtwyNGkRleMY;
Lcom/android/server/wm/-$$Lambda$XZ-U3HlCFtHp_gydNmNMeRmQMCI;
Lcom/android/server/wm/-$$Lambda$_jL5KNK44AQYPj1d8Hd3FYO0W-M;
Lcom/android/server/wm/-$$Lambda$cJE-iQ28Rv-ThCcuht9wXeFzPgo;
Lcom/android/server/wm/-$$Lambda$hBnABSAsqXWvQ0zKwHWE4BZ3Mc0;
Lcom/android/server/wm/-$$Lambda$hOONSPF2N4ZIr-bSc1utsg8aP-c;
Lcom/android/server/wm/-$$Lambda$hT1kyMEAhvB1-Uxr0DFAlnuU3cQ;
Lcom/android/server/wm/-$$Lambda$iQxeP_PsHHArcPSFabJ3FXyPKNc;
Lcom/android/server/wm/-$$Lambda$ibmQVLjaQW2x74Wk8TcE0Og2MJM;
Lcom/android/server/wm/-$$Lambda$p4YgPONtKWpvUwa_nwQPB8_Za6I;
Lcom/android/server/wm/-$$Lambda$pOh7At8PXGw9JWVkfdjoNb7hsIg;
Lcom/android/server/wm/-$$Lambda$swA_sUfSJdP8eC8AA9Iby3-SuOY;
Lcom/android/server/wm/-$$Lambda$yACUZqn1Ak-GL14-Nu3kHUSaLX0;
Lcom/android/server/wm/-$$Lambda$yIIsPVyXvnU3Rv8mcliit-gIpSs;
Lcom/android/server/wm/-$$Lambda$yVRF8YoeNdTa8GR1wDStVsHu8xM;
Lcom/android/server/wm/-$$Lambda$zwLNi4Hz7werGBGptK8eYRpBWpw;
Lcom/android/server/wm/ActivityDisplay;
Lcom/android/server/wm/ActivityMetricsLaunchObserver;
Lcom/android/server/wm/ActivityMetricsLaunchObserverRegistry;
Lcom/android/server/wm/ActivityMetricsLogger$H;
Lcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfo;
Lcom/android/server/wm/ActivityMetricsLogger;
Lcom/android/server/wm/ActivityRecord$Token;
Lcom/android/server/wm/ActivityRecord;
Lcom/android/server/wm/ActivityStack$1;
Lcom/android/server/wm/ActivityStack$ActivityStackHandler;
Lcom/android/server/wm/ActivityStack$ActivityState;
Lcom/android/server/wm/ActivityStack;
Lcom/android/server/wm/ActivityStackSupervisor$ActivityStackSupervisorHandler;
Lcom/android/server/wm/ActivityStackSupervisor;
Lcom/android/server/wm/ActivityStartController$StartHandler;
Lcom/android/server/wm/ActivityStartController;
Lcom/android/server/wm/ActivityStartInterceptor;
Lcom/android/server/wm/ActivityStarter$DefaultFactory;
Lcom/android/server/wm/ActivityStarter$Factory;
Lcom/android/server/wm/ActivityStarter$Request;
Lcom/android/server/wm/ActivityStarter;
Lcom/android/server/wm/ActivityTaskManagerInternal$ScreenObserver;
Lcom/android/server/wm/ActivityTaskManagerInternal$SleepToken;
Lcom/android/server/wm/ActivityTaskManagerInternal;
Lcom/android/server/wm/ActivityTaskManagerService$FontScaleSettingObserver;
Lcom/android/server/wm/ActivityTaskManagerService$H;
Lcom/android/server/wm/ActivityTaskManagerService$Lifecycle;
Lcom/android/server/wm/ActivityTaskManagerService$LocalService;
Lcom/android/server/wm/ActivityTaskManagerService$UiHandler;
Lcom/android/server/wm/ActivityTaskManagerService$UpdateConfigurationResult;
Lcom/android/server/wm/ActivityTaskManagerService;
Lcom/android/server/wm/AnimatingAppWindowTokenRegistry;
Lcom/android/server/wm/AppTokenList;
Lcom/android/server/wm/AppTransition$1;
Lcom/android/server/wm/AppTransition$2;
Lcom/android/server/wm/AppTransition;
Lcom/android/server/wm/AppTransitionController;
Lcom/android/server/wm/AppWarnings$ConfigHandler;
Lcom/android/server/wm/AppWarnings$UiHandler;
Lcom/android/server/wm/AppWarnings;
Lcom/android/server/wm/AppWindowToken$1;
Lcom/android/server/wm/AppWindowToken;
Lcom/android/server/wm/BarController$BarHandler;
Lcom/android/server/wm/BarController$OnBarVisibilityChangedListener;
Lcom/android/server/wm/BarController;
Lcom/android/server/wm/BoundsAnimationController$AppTransitionNotifier;
Lcom/android/server/wm/BoundsAnimationController;
Lcom/android/server/wm/BoundsAnimationTarget;
Lcom/android/server/wm/ClientLifecycleManager;
Lcom/android/server/wm/CompatModePackages$CompatHandler;
Lcom/android/server/wm/CompatModePackages;
Lcom/android/server/wm/ConfigurationContainer;
Lcom/android/server/wm/ConfigurationContainerListener;
Lcom/android/server/wm/Dimmer$SurfaceAnimatorStarter;
Lcom/android/server/wm/Dimmer;
Lcom/android/server/wm/DisplayContent$AboveAppWindowContainers;
Lcom/android/server/wm/DisplayContent$ApplySurfaceChangesTransactionState;
Lcom/android/server/wm/DisplayContent$DisplayChildWindowContainer;
Lcom/android/server/wm/DisplayContent$NonAppWindowContainers;
Lcom/android/server/wm/DisplayContent$NonMagnifiableWindowContainers;
Lcom/android/server/wm/DisplayContent$TaskForResizePointSearchResult;
Lcom/android/server/wm/DisplayContent$TaskStackContainers;
Lcom/android/server/wm/DisplayContent;
Lcom/android/server/wm/DisplayFrames;
Lcom/android/server/wm/DisplayPolicy$1;
Lcom/android/server/wm/DisplayPolicy$2;
Lcom/android/server/wm/DisplayPolicy$3;
Lcom/android/server/wm/DisplayPolicy$4;
Lcom/android/server/wm/DisplayPolicy$PolicyHandler;
Lcom/android/server/wm/DisplayPolicy;
Lcom/android/server/wm/DisplayRotation$OrientationListener;
Lcom/android/server/wm/DisplayRotation$SettingsObserver;
Lcom/android/server/wm/DisplayRotation;
Lcom/android/server/wm/DisplayWindowSettings$Entry;
Lcom/android/server/wm/DisplayWindowSettings;
Lcom/android/server/wm/DockedStackDividerController;
Lcom/android/server/wm/DragDropController$1;
Lcom/android/server/wm/DragDropController$DragHandler;
Lcom/android/server/wm/DragDropController;
Lcom/android/server/wm/ImmersiveModeConfirmation$1;
Lcom/android/server/wm/ImmersiveModeConfirmation$H;
Lcom/android/server/wm/ImmersiveModeConfirmation;
Lcom/android/server/wm/InputConsumerImpl;
Lcom/android/server/wm/InputManagerCallback;
Lcom/android/server/wm/InputMonitor$1;
Lcom/android/server/wm/InputMonitor$UpdateInputForAllWindowsConsumer;
Lcom/android/server/wm/InputMonitor;
Lcom/android/server/wm/InsetsSourceProvider;
Lcom/android/server/wm/InsetsStateController;
Lcom/android/server/wm/KeyguardController$KeyguardDisplayState;
Lcom/android/server/wm/KeyguardController;
Lcom/android/server/wm/KeyguardDisableHandler$1;
Lcom/android/server/wm/KeyguardDisableHandler$2;
Lcom/android/server/wm/KeyguardDisableHandler$Injector;
Lcom/android/server/wm/KeyguardDisableHandler;
Lcom/android/server/wm/LaunchObserverRegistryImpl;
Lcom/android/server/wm/LaunchParamsController$LaunchParams;
Lcom/android/server/wm/LaunchParamsController$LaunchParamsModifier;
Lcom/android/server/wm/LaunchParamsController;
Lcom/android/server/wm/LaunchParamsPersister$PackageListObserver;
Lcom/android/server/wm/LaunchParamsPersister;
Lcom/android/server/wm/LockTaskController$LockTaskToken;
Lcom/android/server/wm/LockTaskController;
Lcom/android/server/wm/MirrorActiveUids;
Lcom/android/server/wm/NavigationBarExperiments;
Lcom/android/server/wm/PendingRemoteAnimationRegistry$Entry;
Lcom/android/server/wm/PendingRemoteAnimationRegistry;
Lcom/android/server/wm/PersisterQueue$LazyTaskWriterThread;
Lcom/android/server/wm/PersisterQueue$Listener;
Lcom/android/server/wm/PersisterQueue$WriteQueueItem;
Lcom/android/server/wm/PersisterQueue;
Lcom/android/server/wm/PinnedStackController$PinnedStackControllerCallback;
Lcom/android/server/wm/PinnedStackController$PinnedStackListenerDeathHandler;
Lcom/android/server/wm/PinnedStackController;
Lcom/android/server/wm/PointerEventDispatcher;
Lcom/android/server/wm/PolicyControl;
Lcom/android/server/wm/RecentTasks$Callbacks;
Lcom/android/server/wm/RecentTasks;
Lcom/android/server/wm/RecentsAnimationController$RecentsAnimationCallbacks;
Lcom/android/server/wm/RootActivityContainer$FindTaskResult;
Lcom/android/server/wm/RootActivityContainer$SleepTokenImpl;
Lcom/android/server/wm/RootActivityContainer;
Lcom/android/server/wm/RootWindowContainer$MyHandler;
Lcom/android/server/wm/RootWindowContainer;
Lcom/android/server/wm/RunningTasks;
Lcom/android/server/wm/SafeActivityOptions;
Lcom/android/server/wm/Session;
Lcom/android/server/wm/StatusBarController$1;
Lcom/android/server/wm/StatusBarController;
Lcom/android/server/wm/SurfaceAnimationRunner$AnimatorFactory;
Lcom/android/server/wm/SurfaceAnimationRunner;
Lcom/android/server/wm/SurfaceAnimationThread;
Lcom/android/server/wm/SurfaceAnimator$Animatable;
Lcom/android/server/wm/SurfaceAnimator$OnAnimationFinishedCallback;
Lcom/android/server/wm/SurfaceAnimator;
Lcom/android/server/wm/SurfaceBuilderFactory;
Lcom/android/server/wm/SurfaceFactory;
Lcom/android/server/wm/SystemGesturesPointerEventListener$Callbacks;
Lcom/android/server/wm/SystemGesturesPointerEventListener$FlingGestureDetector;
Lcom/android/server/wm/SystemGesturesPointerEventListener;
Lcom/android/server/wm/Task;
Lcom/android/server/wm/TaskChangeNotificationController$MainHandler;
Lcom/android/server/wm/TaskChangeNotificationController$TaskStackConsumer;
Lcom/android/server/wm/TaskChangeNotificationController;
Lcom/android/server/wm/TaskLaunchParamsModifier;
Lcom/android/server/wm/TaskPersister;
Lcom/android/server/wm/TaskPositioningController;
Lcom/android/server/wm/TaskRecord$TaskActivitiesReport;
Lcom/android/server/wm/TaskRecord$TaskRecordFactory;
Lcom/android/server/wm/TaskRecord;
Lcom/android/server/wm/TaskSnapshotCache;
Lcom/android/server/wm/TaskSnapshotController;
Lcom/android/server/wm/TaskSnapshotLoader;
Lcom/android/server/wm/TaskSnapshotPersister$1;
Lcom/android/server/wm/TaskSnapshotPersister$DirectoryResolver;
Lcom/android/server/wm/TaskSnapshotPersister$RemoveObsoleteFilesQueueItem;
Lcom/android/server/wm/TaskSnapshotPersister$WriteQueueItem;
Lcom/android/server/wm/TaskSnapshotPersister;
Lcom/android/server/wm/TaskStack;
Lcom/android/server/wm/TaskTapPointerEventListener;
Lcom/android/server/wm/TransactionFactory;
Lcom/android/server/wm/UnknownAppVisibilityController;
Lcom/android/server/wm/VrController$1;
Lcom/android/server/wm/VrController;
Lcom/android/server/wm/WallpaperController$FindWallpaperTargetResult;
Lcom/android/server/wm/WallpaperController;
Lcom/android/server/wm/WallpaperVisibilityListeners;
Lcom/android/server/wm/WallpaperWindowToken;
Lcom/android/server/wm/WindowAnimator$DisplayContentsAnimator;
Lcom/android/server/wm/WindowAnimator;
Lcom/android/server/wm/WindowContainer$ForAllWindowsConsumerWrapper;
Lcom/android/server/wm/WindowContainer;
Lcom/android/server/wm/WindowContainerController;
Lcom/android/server/wm/WindowContainerListener;
Lcom/android/server/wm/WindowFrames;
Lcom/android/server/wm/WindowHashMap;
Lcom/android/server/wm/WindowList;
Lcom/android/server/wm/WindowManagerGlobalLock;
Lcom/android/server/wm/WindowManagerInternal$AppTransitionListener;
Lcom/android/server/wm/WindowManagerInternal$IDragDropCallback;
Lcom/android/server/wm/WindowManagerInternal$OnHardKeyboardStatusChangeListener;
Lcom/android/server/wm/WindowManagerInternal;
Lcom/android/server/wm/WindowManagerService$10;
Lcom/android/server/wm/WindowManagerService$1;
Lcom/android/server/wm/WindowManagerService$2;
Lcom/android/server/wm/WindowManagerService$3;
Lcom/android/server/wm/WindowManagerService$4;
Lcom/android/server/wm/WindowManagerService$5;
Lcom/android/server/wm/WindowManagerService$6;
Lcom/android/server/wm/WindowManagerService$7;
Lcom/android/server/wm/WindowManagerService$8;
Lcom/android/server/wm/WindowManagerService$AppFreezeListener;
Lcom/android/server/wm/WindowManagerService$H;
Lcom/android/server/wm/WindowManagerService$LocalService;
Lcom/android/server/wm/WindowManagerService$MousePositionTracker;
Lcom/android/server/wm/WindowManagerService$RotationWatcher;
Lcom/android/server/wm/WindowManagerService$SettingsObserver;
Lcom/android/server/wm/WindowManagerService;
Lcom/android/server/wm/WindowManagerThreadPriorityBooster;
Lcom/android/server/wm/WindowProcessController$ComputeOomAdjCallback;
Lcom/android/server/wm/WindowProcessController;
Lcom/android/server/wm/WindowProcessListener;
Lcom/android/server/wm/WindowState$1;
Lcom/android/server/wm/WindowState$2;
Lcom/android/server/wm/WindowState$DeathRecipient;
Lcom/android/server/wm/WindowState$PowerManagerWrapper;
Lcom/android/server/wm/WindowState$UpdateReportedVisibilityResults;
Lcom/android/server/wm/WindowState$WindowId;
Lcom/android/server/wm/WindowState;
Lcom/android/server/wm/WindowStateAnimator;
Lcom/android/server/wm/WindowSurfaceController;
Lcom/android/server/wm/WindowSurfacePlacer;
Lcom/android/server/wm/WindowToken;
Lcom/android/server/wm/WindowTraceBuffer$Builder;
Lcom/android/server/wm/WindowTraceBuffer;
Lcom/android/server/wm/WindowTracing;
Lcom/android/server/wm/utils/CoordinateTransforms;
Lcom/android/server/wm/utils/DisplayRotationUtil;
Lcom/android/server/wm/utils/InsetUtils;
Lcom/android/server/wm/utils/RotationCache$RotationDependentComputation;
Lcom/android/server/wm/utils/RotationCache;
Lcom/android/server/wm/utils/WmDisplayCutout;
Lcom/android/timezone/distro/DistroException;
Lcom/google/android/startop/iorap/IorapForwardingService$AppLaunchObserver;
Lcom/google/android/startop/iorap/IorapForwardingService$BinderConnectionHandler;
Lcom/google/android/startop/iorap/IorapForwardingService;
Lcom/google/protobuf/InvalidProtocolBufferException;
Lfi/iki/elonen/NanoHTTPD$AsyncRunner;
Lfi/iki/elonen/NanoHTTPD$DefaultAsyncRunner;
Lfi/iki/elonen/NanoHTTPD$DefaultServerSocketFactory;
Lfi/iki/elonen/NanoHTTPD$DefaultTempFileManagerFactory;
Lfi/iki/elonen/NanoHTTPD$ResponseException;
Lfi/iki/elonen/NanoHTTPD$ServerSocketFactory;
Lfi/iki/elonen/NanoHTTPD$TempFileManagerFactory;
Lfi/iki/elonen/NanoHTTPD;
PLandroid/hardware/authsecret/V1_0/IAuthSecret$Proxy;->primaryUserCredential(Ljava/util/ArrayList;)V
PLandroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprint$Proxy;->authenticate(JI)I
PLandroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprint$Proxy;->cancel()I
PLandroid/hardware/health/V2_0/IHealth$Proxy;->getCapacity(Landroid/hardware/health/V2_0/IHealth$getCapacityCallback;)V
PLandroid/hardware/health/V2_0/IHealth$Proxy;->getChargeCounter(Landroid/hardware/health/V2_0/IHealth$getChargeCounterCallback;)V
PLandroid/hardware/health/V2_0/IHealth$Proxy;->getCurrentAverage(Landroid/hardware/health/V2_0/IHealth$getCurrentAverageCallback;)V
PLandroid/hardware/health/V2_0/IHealth$Proxy;->getEnergyCounter(Landroid/hardware/health/V2_0/IHealth$getEnergyCounterCallback;)V
PLandroid/hardware/oemlock/V1_0/IOemLock$Proxy;->isOemUnlockAllowedByCarrier(Landroid/hardware/oemlock/V1_0/IOemLock$isOemUnlockAllowedByCarrierCallback;)V
PLandroid/hardware/oemlock/V1_0/IOemLock$Proxy;->setOemUnlockAllowedByCarrier(ZLjava/util/ArrayList;)I
PLandroid/hardware/weaver/V1_0/IWeaver$Proxy;->read(ILjava/util/ArrayList;Landroid/hardware/weaver/V1_0/IWeaver$readCallback;)V
PLandroid/hardware/weaver/V1_0/WeaverReadResponse;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_0/IWifiChip$ChipDebugInfo;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->enableDebugErrorAlerts(Z)Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->forceDumpToDebugRingBuffer(Ljava/lang/String;)Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->getDebugRingBuffersStatus(Landroid/hardware/wifi/V1_0/IWifiChip$getDebugRingBuffersStatusCallback;)V
PLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->requestChipDebugInfo(Landroid/hardware/wifi/V1_0/IWifiChip$requestChipDebugInfoCallback;)V
PLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->startLoggingToDebugRingBuffer(Ljava/lang/String;III)Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_0/IWifiRttController$Proxy;->rangeRequest(ILjava/util/ArrayList;)Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_0/IWifiRttControllerEventCallback$Stub;->onTransact(ILandroid/os/HwParcel;Landroid/os/HwParcel;I)V
PLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->asBinder()Landroid/os/IHwBinder;
PLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->configureRoaming(Landroid/hardware/wifi/V1_0/StaRoamingConfig;)Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->enableNdOffload(Z)Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->getApfPacketFilterCapabilities(Landroid/hardware/wifi/V1_0/IWifiStaIface$getApfPacketFilterCapabilitiesCallback;)V
PLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->getCapabilities(Landroid/hardware/wifi/V1_0/IWifiStaIface$getCapabilitiesCallback;)V
PLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->getDebugRxPacketFates(Landroid/hardware/wifi/V1_0/IWifiStaIface$getDebugRxPacketFatesCallback;)V
PLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->getDebugTxPacketFates(Landroid/hardware/wifi/V1_0/IWifiStaIface$getDebugTxPacketFatesCallback;)V
PLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->getRoamingCapabilities(Landroid/hardware/wifi/V1_0/IWifiStaIface$getRoamingCapabilitiesCallback;)V
PLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->installApfPacketFilter(ILjava/util/ArrayList;)Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->setScanningMacOui([B)Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->startDebugPacketFateMonitoring()Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->startSendingKeepAlivePackets(ILjava/util/ArrayList;S[B[BI)Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->stopRssiMonitoring(I)Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->stopSendingKeepAlivePackets(I)Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_0/RttConfig;->writeEmbeddedToBlob(Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_0/RttConfig;->writeVectorToParcel(Landroid/os/HwParcel;Ljava/util/ArrayList;)V
PLandroid/hardware/wifi/V1_0/RttResult;-><init>()V
PLandroid/hardware/wifi/V1_0/RttResult;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_0/RttResult;->readVectorFromParcel(Landroid/os/HwParcel;)Ljava/util/ArrayList;
PLandroid/hardware/wifi/V1_0/StaLinkLayerIfacePacketStats;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_0/StaLinkLayerIfaceStats;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_0/StaLinkLayerRadioStats;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_0/StaRoamingConfig;->writeEmbeddedToBlob(Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_0/WifiBand;->toString(I)Ljava/lang/String;
PLandroid/hardware/wifi/V1_0/WifiChannelInfo;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_0/WifiChannelInfo;->writeEmbeddedToBlob(Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_0/WifiDebugPacketFateFrameInfo;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_0/WifiDebugRingBufferStatus;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_0/WifiDebugRingBufferStatus;->readVectorFromParcel(Landroid/os/HwParcel;)Ljava/util/ArrayList;
PLandroid/hardware/wifi/V1_0/WifiDebugRxPacketFateReport;->readVectorFromParcel(Landroid/os/HwParcel;)Ljava/util/ArrayList;
PLandroid/hardware/wifi/V1_0/WifiDebugTxPacketFateReport;->readVectorFromParcel(Landroid/os/HwParcel;)Ljava/util/ArrayList;
PLandroid/hardware/wifi/V1_0/WifiInformationElement;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_0/WifiRateInfo;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_0/WifiStatus;->toString()Ljava/lang/String;
PLandroid/hardware/wifi/V1_0/WifiStatusCode;->toString(I)Ljava/lang/String;
PLandroid/hardware/wifi/V1_2/IWifiChip$Proxy;->selectTxPowerScenario_1_2(I)Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_2/IWifiChipEventCallback$IfaceInfo;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_2/IWifiChipEventCallback$IfaceInfo;->toString()Ljava/lang/String;
PLandroid/hardware/wifi/V1_2/IWifiChipEventCallback$RadioModeInfo;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_2/IWifiChipEventCallback$RadioModeInfo;->readVectorFromParcel(Landroid/os/HwParcel;)Ljava/util/ArrayList;
PLandroid/hardware/wifi/V1_2/IWifiChipEventCallback$RadioModeInfo;->toString()Ljava/lang/String;
PLandroid/hardware/wifi/V1_2/IWifiStaIface$Proxy;->interfaceChain()Ljava/util/ArrayList;
PLandroid/hardware/wifi/V1_2/IWifiStaIface$Proxy;->setMacAddress([B)Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_2/IWifiStaIface;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/V1_2/IWifiStaIface;
PLandroid/hardware/wifi/V1_3/IWifiChip$Proxy;->flushRingBufferToFile()Landroid/hardware/wifi/V1_0/WifiStatus;
PLandroid/hardware/wifi/V1_3/IWifiStaIface$Proxy;->getFactoryMacAddress(Landroid/hardware/wifi/V1_3/IWifiStaIface$getFactoryMacAddressCallback;)V
PLandroid/hardware/wifi/V1_3/IWifiStaIface$Proxy;->getLinkLayerStats_1_3(Landroid/hardware/wifi/V1_3/IWifiStaIface$getLinkLayerStats_1_3Callback;)V
PLandroid/hardware/wifi/V1_3/IWifiStaIface$Proxy;->interfaceChain()Ljava/util/ArrayList;
PLandroid/hardware/wifi/V1_3/IWifiStaIface;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/V1_3/IWifiStaIface;
PLandroid/hardware/wifi/V1_3/StaLinkLayerRadioStats;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/V1_3/StaLinkLayerStats;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicant$Proxy;->setConcurrencyPriority(I)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicant$Proxy;->setDebugParams(IZZ)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantNetwork$Proxy;->asBinder()Landroid/os/IHwBinder;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantNetwork$Proxy;->interfaceChain()Ljava/util/ArrayList;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantNetwork;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/supplicant/V1_0/ISupplicantNetwork;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIfaceCallback$AnqpData;-><init>()V
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIfaceCallback$AnqpData;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIfaceCallback$Hs20AnqpData;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->asBinder()Landroid/os/IHwBinder;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->interfaceChain()Ljava/util/ArrayList;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->registerCallback(Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetworkCallback;)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->select()Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->setAuthAlg(I)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->setBssid([B)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->setEapEngine(Z)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->setEapIdentity(Ljava/util/ArrayList;)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->setEapMethod(I)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->setEapPassword(Ljava/util/ArrayList;)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->setEapPhase2Method(I)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->setIdStr(Ljava/lang/String;)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->setProactiveKeyCaching(Z)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->setProto(I)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->setPskPassphrase(Ljava/lang/String;)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->setRequirePmf(Z)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->setScanSsid(Z)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork$Proxy;->setSsid(Ljava/util/ArrayList;)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork;
PLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetworkCallback$Stub;->asBinder()Landroid/os/IHwBinder;
PLandroid/hardware/wifi/supplicant/V1_1/ISupplicant$Proxy;->removeInterface(Landroid/hardware/wifi/supplicant/V1_0/ISupplicant$IfaceInfo;)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_1/ISupplicant$Proxy;->terminate()V
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->addNetwork(Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface$addNetworkCallback;)V
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->addRxFilter(B)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->asBinder()Landroid/os/IHwBinder;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->disconnect()Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->enableAutoReconnect(Z)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->getKeyMgmtCapabilities(Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$getKeyMgmtCapabilitiesCallback;)V
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->getMacAddress(Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIface$getMacAddressCallback;)V
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->initiateAnqpQuery([BLjava/util/ArrayList;Ljava/util/ArrayList;)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->listNetworks(Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface$listNetworksCallback;)V
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->removeNetwork(I)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->setBtCoexistenceMode(B)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->setBtCoexistenceScanModeEnabled(Z)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->setCountryCode([B)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->setExternalSim(Z)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->setPowerSave(Z)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->setSuspendModeEnabled(Z)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->startRxFilter()Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->stopRxFilter()Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIfaceCallback$Stub;->onTransact(ILandroid/os/HwParcel;Landroid/os/HwParcel;I)V
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaNetwork$Proxy;->interfaceChain()Ljava/util/ArrayList;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaNetwork$Proxy;->setGroupCipher_1_2(I)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaNetwork$Proxy;->setKeyMgmt_1_2(I)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaNetwork$Proxy;->setPairwiseCipher_1_2(I)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
PLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaNetwork;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaNetwork;
PLandroid/net/-$$Lambda$NetworkStackClient$EsrnifYD8E-HxTwVQsf45HJKvtM;->onNetworkStackConnected(Landroid/net/INetworkStackConnector;)V
PLandroid/net/-$$Lambda$NetworkStackClient$PNrRE8Z8ZxjPluNA7VaApBPsJ4A;->onNetworkStackConnected(Landroid/net/INetworkStackConnector;)V
PLandroid/net/ApfCapabilitiesParcelable$1;-><init>()V
PLandroid/net/ApfCapabilitiesParcelable;->writeToParcel(Landroid/os/Parcel;I)V
PLandroid/net/DhcpResultsParcelable$1;-><init>()V
PLandroid/net/DhcpResultsParcelable$1;->createFromParcel(Landroid/os/Parcel;)Landroid/net/DhcpResultsParcelable;
PLandroid/net/DhcpResultsParcelable$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;
PLandroid/net/DhcpResultsParcelable;->readFromParcel(Landroid/os/Parcel;)V
PLandroid/net/INetd$Stub$Proxy;->bandwidthAddNiceApp(I)V
PLandroid/net/INetd$Stub$Proxy;->bandwidthRemoveInterfaceQuota(Ljava/lang/String;)V
PLandroid/net/INetd$Stub$Proxy;->bandwidthSetInterfaceQuota(Ljava/lang/String;J)V
PLandroid/net/INetd$Stub$Proxy;->clatdStart(Ljava/lang/String;)V
PLandroid/net/INetd$Stub$Proxy;->clatdStop(Ljava/lang/String;)V
PLandroid/net/INetd$Stub$Proxy;->idletimerAddInterface(Ljava/lang/String;ILjava/lang/String;)V
PLandroid/net/INetd$Stub$Proxy;->idletimerRemoveInterface(Ljava/lang/String;ILjava/lang/String;)V
PLandroid/net/INetd$Stub$Proxy;->interfaceSetMtu(Ljava/lang/String;I)V
PLandroid/net/INetd$Stub$Proxy;->networkAddInterface(ILjava/lang/String;)V
PLandroid/net/INetd$Stub$Proxy;->networkAddRoute(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
PLandroid/net/INetd$Stub$Proxy;->networkCreatePhysical(II)V
PLandroid/net/INetd$Stub$Proxy;->networkDestroy(I)V
PLandroid/net/INetd$Stub$Proxy;->networkRemoveRoute(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
PLandroid/net/INetd$Stub$Proxy;->networkSetDefault(I)V
PLandroid/net/INetd$Stub$Proxy;->networkSetPermissionForNetwork(II)V
PLandroid/net/INetd$Stub$Proxy;->resolverStartPrefix64Discovery(I)V
PLandroid/net/INetd$Stub$Proxy;->resolverStopPrefix64Discovery(I)V
PLandroid/net/INetd$Stub$Proxy;->setResolverConfiguration(I[Ljava/lang/String;[Ljava/lang/String;[ILjava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)V
PLandroid/net/INetd$Stub$Proxy;->setTcpRWmemorySize(Ljava/lang/String;Ljava/lang/String;)V
PLandroid/net/INetd$Stub$Proxy;->wakeupAddInterface(Ljava/lang/String;Ljava/lang/String;II)V
PLandroid/net/INetd$Stub$Proxy;->wakeupDelInterface(Ljava/lang/String;Ljava/lang/String;II)V
PLandroid/net/INetworkMonitor$Stub$Proxy;->forceReevaluation(I)V
PLandroid/net/INetworkMonitor$Stub$Proxy;->notifyDnsResponse(I)V
PLandroid/net/INetworkMonitor$Stub$Proxy;->notifyLinkPropertiesChanged()V
PLandroid/net/INetworkMonitor$Stub$Proxy;->notifyNetworkCapabilitiesChanged()V
PLandroid/net/INetworkMonitor$Stub$Proxy;->notifyNetworkConnected()V
PLandroid/net/INetworkMonitor$Stub$Proxy;->notifyNetworkDisconnected()V
PLandroid/net/INetworkMonitor$Stub$Proxy;->notifyPrivateDnsChanged(Landroid/net/PrivateDnsConfigParcel;)V
PLandroid/net/INetworkMonitor$Stub$Proxy;->notifySystemReady()V
PLandroid/net/INetworkMonitor$Stub$Proxy;->start()V
PLandroid/net/INetworkMonitorCallbacks$Stub;->asBinder()Landroid/os/IBinder;
PLandroid/net/INetworkMonitorCallbacks$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
PLandroid/net/INetworkStackConnector$Stub$Proxy;->makeIpClient(Ljava/lang/String;Landroid/net/ip/IIpClientCallbacks;)V
PLandroid/net/INetworkStackConnector$Stub$Proxy;->makeNetworkMonitor(Landroid/net/NetworkParcelable;Ljava/lang/String;Landroid/net/INetworkMonitorCallbacks;)V
PLandroid/net/IpPrefixParcelable$1;-><init>()V
PLandroid/net/IpPrefixParcelable$1;->createFromParcel(Landroid/os/Parcel;)Landroid/net/IpPrefixParcelable;
PLandroid/net/IpPrefixParcelable$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;
PLandroid/net/IpPrefixParcelable;->readFromParcel(Landroid/os/Parcel;)V
PLandroid/net/LinkAddressParcelable$1;-><init>()V
PLandroid/net/LinkAddressParcelable$1;->createFromParcel(Landroid/os/Parcel;)Landroid/net/LinkAddressParcelable;
PLandroid/net/LinkAddressParcelable$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;
PLandroid/net/LinkAddressParcelable$1;->newArray(I)[Landroid/net/LinkAddressParcelable;
PLandroid/net/LinkAddressParcelable$1;->newArray(I)[Ljava/lang/Object;
PLandroid/net/LinkAddressParcelable;->readFromParcel(Landroid/os/Parcel;)V
PLandroid/net/LinkPropertiesParcelable$1;-><init>()V
PLandroid/net/LinkPropertiesParcelable$1;->createFromParcel(Landroid/os/Parcel;)Landroid/net/LinkPropertiesParcelable;
PLandroid/net/LinkPropertiesParcelable$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;
PLandroid/net/LinkPropertiesParcelable;->readFromParcel(Landroid/os/Parcel;)V
PLandroid/net/NetworkParcelable$1;-><init>()V
PLandroid/net/NetworkParcelable;-><init>()V
PLandroid/net/NetworkStackClient$NetworkStackConnection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLandroid/net/NetworkStackClient;->lambda$makeIpClient$1(Ljava/lang/String;Landroid/net/ip/IIpClientCallbacks;Landroid/net/INetworkStackConnector;)V
PLandroid/net/NetworkStackClient;->lambda$makeNetworkMonitor$2(Landroid/net/NetworkParcelable;Ljava/lang/String;Landroid/net/INetworkMonitorCallbacks;Landroid/net/INetworkStackConnector;)V
PLandroid/net/NetworkStackClient;->makeNetworkMonitor(Landroid/net/NetworkParcelable;Ljava/lang/String;Landroid/net/INetworkMonitorCallbacks;)V
PLandroid/net/NetworkStackClient;->registerNetworkStackService(Landroid/os/IBinder;)V
PLandroid/net/PrivateDnsConfigParcel$1;-><init>()V
PLandroid/net/PrivateDnsConfigParcel;->writeToParcel(Landroid/os/Parcel;I)V
PLandroid/net/ProvisioningConfigurationParcelable$1;-><init>()V
PLandroid/net/ProvisioningConfigurationParcelable;->writeToParcel(Landroid/os/Parcel;I)V
PLandroid/net/RouteInfoParcelable$1;-><init>()V
PLandroid/net/RouteInfoParcelable$1;->createFromParcel(Landroid/os/Parcel;)Landroid/net/RouteInfoParcelable;
PLandroid/net/RouteInfoParcelable$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;
PLandroid/net/RouteInfoParcelable$1;->newArray(I)[Landroid/net/RouteInfoParcelable;
PLandroid/net/RouteInfoParcelable$1;->newArray(I)[Ljava/lang/Object;
PLandroid/net/RouteInfoParcelable;->readFromParcel(Landroid/os/Parcel;)V
PLandroid/net/StaticIpConfigurationParcelable$1;-><init>()V
PLandroid/net/StaticIpConfigurationParcelable$1;->createFromParcel(Landroid/os/Parcel;)Landroid/net/StaticIpConfigurationParcelable;
PLandroid/net/StaticIpConfigurationParcelable$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;
PLandroid/net/StaticIpConfigurationParcelable;->readFromParcel(Landroid/os/Parcel;)V
PLandroid/net/ip/IIpClient$Stub$Proxy;->completedPreDhcpAction()V
PLandroid/net/ip/IIpClient$Stub$Proxy;->confirmConfiguration()V
PLandroid/net/ip/IIpClient$Stub$Proxy;->setHttpProxy(Landroid/net/ProxyInfoParcelable;)V
PLandroid/net/ip/IIpClient$Stub$Proxy;->setMulticastFilter(Z)V
PLandroid/net/ip/IIpClient$Stub$Proxy;->setTcpBufferSizes(Ljava/lang/String;)V
PLandroid/net/ip/IIpClient$Stub$Proxy;->startProvisioning(Landroid/net/ProvisioningConfigurationParcelable;)V
PLandroid/net/ip/IIpClient$Stub$Proxy;->stop()V
PLandroid/net/ip/IIpClientCallbacks$Stub;->asBinder()Landroid/os/IBinder;
PLandroid/net/ip/IIpClientCallbacks$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
PLandroid/net/ip/IpClientUtil$IpClientCallbacksProxy;->installPacketFilter([B)V
PLandroid/net/ip/IpClientUtil$IpClientCallbacksProxy;->onIpClientCreated(Landroid/net/ip/IIpClient;)V
PLandroid/net/ip/IpClientUtil$IpClientCallbacksProxy;->onLinkPropertiesChange(Landroid/net/LinkPropertiesParcelable;)V
PLandroid/net/ip/IpClientUtil$IpClientCallbacksProxy;->onNewDhcpResults(Landroid/net/DhcpResultsParcelable;)V
PLandroid/net/ip/IpClientUtil$IpClientCallbacksProxy;->onPostDhcpAction()V
PLandroid/net/ip/IpClientUtil$IpClientCallbacksProxy;->onPreDhcpAction()V
PLandroid/net/ip/IpClientUtil$IpClientCallbacksProxy;->onProvisioningFailure(Landroid/net/LinkPropertiesParcelable;)V
PLandroid/net/ip/IpClientUtil$IpClientCallbacksProxy;->onProvisioningSuccess(Landroid/net/LinkPropertiesParcelable;)V
PLandroid/net/ip/IpClientUtil$IpClientCallbacksProxy;->onQuit()V
PLandroid/net/ip/IpClientUtil$IpClientCallbacksProxy;->onReachabilityLost(Ljava/lang/String;)V
PLandroid/net/ip/IpClientUtil$IpClientCallbacksProxy;->setNeighborDiscoveryOffload(Z)V
PLandroid/net/shared/-$$Lambda$OsobWheG5dMvEj_cOJtueqUBqBI;-><init>()V
PLandroid/net/shared/-$$Lambda$SYWvjOUPlAZ_O2Z6yfFU9np1858;-><init>()V
PLandroid/net/shared/-$$Lambda$pBUdv03KJnEfgt6nWSHELvAxJyA;-><init>()V
PLandroid/net/shared/IpConfigurationParcelableUtil;->fromStableParcelable(Landroid/net/DhcpResultsParcelable;)Landroid/net/DhcpResults;
PLandroid/net/shared/IpConfigurationParcelableUtil;->fromStableParcelable(Landroid/net/StaticIpConfigurationParcelable;)Landroid/net/StaticIpConfiguration;
PLandroid/net/shared/IpConfigurationParcelableUtil;->toStableParcelable(Landroid/net/StaticIpConfiguration;)Landroid/net/StaticIpConfigurationParcelable;
PLandroid/net/shared/LinkPropertiesParcelableUtil;->fromStableParcelable(Landroid/net/LinkPropertiesParcelable;)Landroid/net/LinkProperties;
PLandroid/net/shared/LinkPropertiesParcelableUtil;->fromStableParcelable(Landroid/net/ProxyInfoParcelable;)Landroid/net/ProxyInfo;
PLandroid/net/shared/LinkPropertiesParcelableUtil;->toStableParcelable(Landroid/net/ProxyInfo;)Landroid/net/ProxyInfoParcelable;
PLandroid/net/shared/NetworkMonitorUtils;->isValidationRequired(Landroid/net/NetworkCapabilities;)Z
PLandroid/net/shared/ParcelableUtil;->toParcelableArray(Ljava/util/Collection;Ljava/util/function/Function;Ljava/lang/Class;)[Ljava/lang/Object;
PLandroid/net/shared/PrivateDnsConfig;->inStrictMode()Z
PLandroid/net/shared/PrivateDnsConfig;->toParcel()Landroid/net/PrivateDnsConfigParcel;
PLandroid/net/shared/PrivateDnsConfig;->toString()Ljava/lang/String;
PLandroid/net/shared/ProvisioningConfiguration$Builder;-><init>()V
PLandroid/net/shared/ProvisioningConfiguration$Builder;->build()Landroid/net/shared/ProvisioningConfiguration;
PLandroid/net/shared/ProvisioningConfiguration$Builder;->withApfCapabilities(Landroid/net/apf/ApfCapabilities;)Landroid/net/shared/ProvisioningConfiguration$Builder;
PLandroid/net/shared/ProvisioningConfiguration$Builder;->withDisplayName(Ljava/lang/String;)Landroid/net/shared/ProvisioningConfiguration$Builder;
PLandroid/net/shared/ProvisioningConfiguration$Builder;->withNetwork(Landroid/net/Network;)Landroid/net/shared/ProvisioningConfiguration$Builder;
PLandroid/net/shared/ProvisioningConfiguration$Builder;->withPreDhcpAction()Landroid/net/shared/ProvisioningConfiguration$Builder;
PLandroid/net/shared/ProvisioningConfiguration$Builder;->withRandomMacAddress()Landroid/net/shared/ProvisioningConfiguration$Builder;
PLandroid/net/shared/ProvisioningConfiguration;-><init>(Landroid/net/shared/ProvisioningConfiguration;)V
PLandroid/net/shared/ProvisioningConfiguration;->toStableParcelable()Landroid/net/ProvisioningConfigurationParcelable;
PLandroid/net/util/VersionedBroadcastListener$Receiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLandroid/net/wifi/IClientInterface$Stub$Proxy;->signalPoll()[I
PLandroid/net/wifi/IPnoScanEvent$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
PLandroid/net/wifi/IScanEvent$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
PLandroid/net/wifi/IWifiScannerImpl$Stub$Proxy;->abortScan()V
PLandroid/net/wifi/IWifiScannerImpl$Stub$Proxy;->getPnoScanResults()[Lcom/android/server/wifi/wificond/NativeScanResult;
PLandroid/net/wifi/IWifiScannerImpl$Stub$Proxy;->getScanResults()[Lcom/android/server/wifi/wificond/NativeScanResult;
PLandroid/net/wifi/IWifiScannerImpl$Stub$Proxy;->scan(Lcom/android/server/wifi/wificond/SingleScanSettings;)Z
PLandroid/net/wifi/IWifiScannerImpl$Stub$Proxy;->startPnoScan(Lcom/android/server/wifi/wificond/PnoSettings;)Z
PLandroid/os/IIdmap2$Stub$Proxy;->createIdmap(Ljava/lang/String;Ljava/lang/String;IZI)Ljava/lang/String;
PLandroid/os/IIdmap2$Stub$Proxy;->removeIdmap(Ljava/lang/String;I)Z
PLcom/android/server/-$$Lambda$1kw1pGRY14l4iRI8vioJeswbbZ0;->accept(Ljava/lang/Object;)V
PLcom/android/server/-$$Lambda$AlarmManagerService$2$Eo-D98J-N9R2METkD-12gPs320c;->run()V
PLcom/android/server/-$$Lambda$AlarmManagerService$Batch$Xltkj5RTKUMuFVeuavpuY7-Ogzc;->test(Ljava/lang/Object;)Z
PLcom/android/server/-$$Lambda$AlarmManagerService$gKXZ864LsHRTGbnNeLAgHKL2YPk;->run()V
PLcom/android/server/-$$Lambda$AlarmManagerService$nhEd_CDoc7mzdNLRwGUhwl9TaGk;->test(Ljava/lang/Object;)Z
PLcom/android/server/-$$Lambda$AlarmManagerService$qehVSjTLWvtJYPGgKh2mkJ6ePnk;->test(Ljava/lang/Object;)Z
PLcom/android/server/-$$Lambda$AppStateTracker$zzioY8jvEm-1GnJ13CUiQGauPEE;->accept(Ljava/lang/Object;)V
PLcom/android/server/-$$Lambda$BatteryService$BatteryPropertiesRegistrar$7Y-B9O7NDYgUY9hQvFzC2FQ2V5w;->onValues(II)V
PLcom/android/server/-$$Lambda$BatteryService$BatteryPropertiesRegistrar$9z3zqgxtPzBN8Qoni5nHVb0m8EY;->onValues(IJ)V
PLcom/android/server/-$$Lambda$BatteryService$BatteryPropertiesRegistrar$DM4ow6LC--JYWBfhHp2f1JW8nww;->onValues(II)V
PLcom/android/server/-$$Lambda$BatteryService$BatteryPropertiesRegistrar$KZAu97wwr_7_MI0awCjQTzdIuAI;->onValues(II)V
PLcom/android/server/-$$Lambda$BatteryService$D1kwd7L7yyqN5niz3KWkTepVmUk;->run()V
PLcom/android/server/-$$Lambda$DeviceIdleController$Lhneg3gOUCFQWz6Y-5S75AWemY8;->accept(Ljava/lang/Object;)V
PLcom/android/server/-$$Lambda$GraphicsStatsService$2EDVu98hsJvSwNgKvijVLSR3IrQ;->onAlarm()V
PLcom/android/server/-$$Lambda$LocationManagerService$LocationProvider$R123rmQLJrCf8yBSKrQD6XPhpZs;->run()V
PLcom/android/server/-$$Lambda$LocationManagerService$bojY6dMaI07zh6_sF7ERxgmk6U0;->getPackages(I)[Ljava/lang/String;
PLcom/android/server/-$$Lambda$LocationManagerService$pUnNobtfzLC9eAlVqCMKySwbo3U;->getPackages(I)[Ljava/lang/String;
PLcom/android/server/-$$Lambda$LocationManagerService$ta09t47XwQMZdhPftO1K9zdy5Mk;->onPermissionsChanged(I)V
PLcom/android/server/-$$Lambda$NetworkManagementService$15DusjG2gzn5UASV-lMS3BUUn9c;->run()V
PLcom/android/server/-$$Lambda$NetworkManagementService$D43p3Tqq7B3qaMs9AGb_3j0KZd0;->sendCallback(Landroid/net/INetworkManagementEventObserver;)V
PLcom/android/server/-$$Lambda$NetworkManagementService$FsR_UD5xfj4hgrwGdX74wq881Bk;->sendCallback(Landroid/net/INetworkManagementEventObserver;)V
PLcom/android/server/-$$Lambda$NetworkManagementService$NetdUnsolicitedEventListener$0xWa9DGxTnoGVHppsM-nng2PygE;->run()V
PLcom/android/server/-$$Lambda$NetworkManagementService$NetdUnsolicitedEventListener$L7i_Z-ii6zMptHCt2_Igy3iBvKk;->run()V
PLcom/android/server/-$$Lambda$NetworkManagementService$NetdUnsolicitedEventListener$h2iz-IbnHpQ97mlJ7G62W2mmanw;->run()V
PLcom/android/server/-$$Lambda$NetworkManagementService$NetdUnsolicitedEventListener$hh3pIkVnnzeRGeDRAOOmVvc6VxE;->run()V
PLcom/android/server/-$$Lambda$NetworkManagementService$RVCc8O9RWjyrynN9cyM7inAv-fk;->sendCallback(Landroid/net/INetworkManagementEventObserver;)V
PLcom/android/server/-$$Lambda$NetworkManagementService$YKgmK-4MuJjN-VLuMBhmJy1eWj4;->run()V
PLcom/android/server/-$$Lambda$NetworkManagementService$xer7k2RLU4mODjrkZqaX89S9gD8;->sendCallback(Landroid/net/INetworkManagementEventObserver;)V
PLcom/android/server/-$$Lambda$PackageWatchdog$YWaPZrg-b7PWDORq6WFyD-xtIC8;->run()V
PLcom/android/server/-$$Lambda$PinnerService$6bekYOn4YXi0x7vYNWO40QyA-s8;-><init>()V
PLcom/android/server/-$$Lambda$PinnerService$6bekYOn4YXi0x7vYNWO40QyA-s8;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/-$$Lambda$PruneInstantAppsJobService$i4sLSJdxcTXdgPAQZFbP66ZRprE;->run()V
PLcom/android/server/-$$Lambda$QTLvklqCTz22VSzZPEWJs-o0bv4;->apply(Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/-$$Lambda$ServiceWatcher$b1z9OeL-1VpQ_8p47qz7nMNUpsE;->call()Ljava/lang/Object;
PLcom/android/server/-$$Lambda$ServiceWatcher$uCZpuTwrOz-CS9PQS2NY1ZXaU8U;->run()V
PLcom/android/server/-$$Lambda$TelephonyRegistry$DwCXmd4oWQx5WUUkyBqzIQVAiYs;->getOrThrow()Ljava/lang/Object;
PLcom/android/server/-$$Lambda$TelephonyRegistry$eRzX29fBu-inXqRR2l1fF6fzbSo;->getOrThrow()Ljava/lang/Object;
PLcom/android/server/-$$Lambda$UiModeManagerService$vYS4_RzjAavNRF50rrGN0tXI5JM;->accept(Ljava/lang/Object;)V
PLcom/android/server/-$$Lambda$hu439-4T6QBT8QyZnspMtXqICWs;->apply(Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/AlarmManagerService$2;->doAlarm(Landroid/app/IAlarmCompleteListener;)V
PLcom/android/server/AlarmManagerService$2;->lambda$doAlarm$0$AlarmManagerService$2(Landroid/app/IAlarmCompleteListener;)V
PLcom/android/server/AlarmManagerService$2;->lambda$doAlarm$0(Lcom/android/server/AlarmManagerService$2;Landroid/app/IAlarmCompleteListener;)V
PLcom/android/server/AlarmManagerService$3;->getNextWakeFromIdleTime()J
PLcom/android/server/AlarmManagerService$3;->setTimeZone(Ljava/lang/String;)V
PLcom/android/server/AlarmManagerService$AppWakeupHistory;->getLastWakeupForPackage(Ljava/lang/String;II)J
PLcom/android/server/AlarmManagerService$AppWakeupHistory;->getTotalWakeupsInWindow(Ljava/lang/String;I)I
PLcom/android/server/AlarmManagerService$AppWakeupHistory;->recordAlarmForPackage(Ljava/lang/String;IJ)V
PLcom/android/server/AlarmManagerService$AppWakeupHistory;->removeForPackage(Ljava/lang/String;I)V
PLcom/android/server/AlarmManagerService$AppWakeupHistory;->removeForUser(I)V
PLcom/android/server/AlarmManagerService$ClockReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/AlarmManagerService$DeliveryTracker;->alarmTimedOut(Landroid/os/IBinder;)V
PLcom/android/server/AlarmManagerService$Injector;->getNextAlarm(I)J
PLcom/android/server/AlarmManagerService$InteractiveStateReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/AlarmManagerService$UninstallReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/AlarmManagerService;->access$1000(Lcom/android/server/AlarmManagerService;)Lcom/android/server/AppStateTracker;
PLcom/android/server/AlarmManagerService;->access$1100(Lcom/android/server/AlarmManagerService;)Lcom/android/server/AppStateTracker;
PLcom/android/server/AlarmManagerService;->currentNonWakeupFuzzLocked(J)J
PLcom/android/server/AlarmManagerService;->formatNextAlarm(Landroid/content/Context;Landroid/app/AlarmManager$AlarmClockInfo;I)Ljava/lang/String;
PLcom/android/server/AlarmManagerService;->getNextWakeFromIdleTimeImpl()J
PLcom/android/server/AlarmManagerService;->getQuotaForBucketLocked(I)I
PLcom/android/server/AlarmManagerService;->getWhileIdleMinIntervalLocked(I)J
PLcom/android/server/AlarmManagerService;->interactiveStateChangedLocked(Z)V
PLcom/android/server/AlarmManagerService;->lambda$interactiveStateChangedLocked$5$AlarmManagerService()V
PLcom/android/server/AlarmManagerService;->removeLocked(I)V
PLcom/android/server/AlarmManagerService;->removeUserLocked(I)V
PLcom/android/server/AlarmManagerService;->restorePendingWhileIdleAlarmsLocked()V
PLcom/android/server/AlarmManagerService;->sendNextAlarmClockChanged()V
PLcom/android/server/AnyMotionDetector$1;->onAccuracyChanged(Landroid/hardware/Sensor;I)V
PLcom/android/server/AnyMotionDetector$1;->onSensorChanged(Landroid/hardware/SensorEvent;)V
PLcom/android/server/AnyMotionDetector$2;->run()V
PLcom/android/server/AnyMotionDetector$RunningSignalStats;->accumulate(Lcom/android/server/AnyMotionDetector$Vector3;)V
PLcom/android/server/AnyMotionDetector$RunningSignalStats;->getEnergy()F
PLcom/android/server/AnyMotionDetector$RunningSignalStats;->getRunningAverage()Lcom/android/server/AnyMotionDetector$Vector3;
PLcom/android/server/AnyMotionDetector$RunningSignalStats;->getSampleCount()I
PLcom/android/server/AnyMotionDetector$RunningSignalStats;->reset()V
PLcom/android/server/AnyMotionDetector$Vector3;->angleBetween(Lcom/android/server/AnyMotionDetector$Vector3;)F
PLcom/android/server/AnyMotionDetector$Vector3;->cross(Lcom/android/server/AnyMotionDetector$Vector3;)Lcom/android/server/AnyMotionDetector$Vector3;
PLcom/android/server/AnyMotionDetector$Vector3;->toString()Ljava/lang/String;
PLcom/android/server/AnyMotionDetector;->checkForAnyMotion()V
PLcom/android/server/AnyMotionDetector;->getStationaryStatus()I
PLcom/android/server/AnyMotionDetector;->hasSensor()Z
PLcom/android/server/AnyMotionDetector;->startOrientationMeasurementLocked()V
PLcom/android/server/AnyMotionDetector;->stop()V
PLcom/android/server/AnyMotionDetector;->stopOrientationMeasurementLocked()I
PLcom/android/server/AppStateTracker$Listener;->updateAllJobs()V
PLcom/android/server/AppStateTracker$MyHandler;->notifyForceAllAppsStandbyChanged()V
PLcom/android/server/AppStateTracker$MyHandler;->notifyTempWhitelistChanged()V
PLcom/android/server/AppStateTracker;->isForceAllAppsStandbyEnabled()Z
PLcom/android/server/AppStateTracker;->isUidActiveSynced(I)Z
PLcom/android/server/AppStateTracker;->isUidPowerSaveUserWhitelisted(I)Z
PLcom/android/server/AppStateTracker;->lambda$onSystemServicesReady$0$AppStateTracker(Landroid/os/PowerSaveState;)V
PLcom/android/server/BatteryService$10;->run()V
PLcom/android/server/BatteryService$7;->run()V
PLcom/android/server/BatteryService$BatteryPropertiesRegistrar;->getProperty(ILandroid/os/BatteryProperty;)I
PLcom/android/server/BatteryService$BinderService;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/BatteryService;->dumpProto(Ljava/io/FileDescriptor;)V
PLcom/android/server/BatteryService;->logBatteryStatsLocked()V
PLcom/android/server/BatteryService;->logOutlierLocked(J)V
PLcom/android/server/BatteryService;->sendEnqueuedBatteryLevelChangedEvents()V
PLcom/android/server/BinderCallsStatsService$Internal;->getExportedCallStats()Ljava/util/ArrayList;
PLcom/android/server/BinderCallsStatsService$Internal;->reset()V
PLcom/android/server/BinderCallsStatsService$SettingsObserver;->onChange(ZLandroid/net/Uri;I)V
PLcom/android/server/BluetoothManagerService$ClientDeathRecipient;->binderDied()V
PLcom/android/server/BluetoothManagerService$ProfileServiceConnections;->access$3300(Lcom/android/server/BluetoothManagerService$ProfileServiceConnections;Landroid/bluetooth/IBluetoothProfileServiceConnection;)V
PLcom/android/server/BluetoothManagerService$ProfileServiceConnections;->addProxy(Landroid/bluetooth/IBluetoothProfileServiceConnection;)V
PLcom/android/server/BluetoothManagerService$ProfileServiceConnections;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/BluetoothManagerService$ProfileServiceConnections;->removeProxy(Landroid/bluetooth/IBluetoothProfileServiceConnection;)V
PLcom/android/server/BluetoothManagerService;->access$2400(Lcom/android/server/BluetoothManagerService;)Z
PLcom/android/server/BluetoothManagerService;->access$3200(Lcom/android/server/BluetoothManagerService;)Ljava/util/Map;
PLcom/android/server/BluetoothManagerService;->access$3402(Lcom/android/server/BluetoothManagerService;Landroid/bluetooth/IBluetoothGatt;)Landroid/bluetooth/IBluetoothGatt;
PLcom/android/server/BluetoothManagerService;->access$3500(Lcom/android/server/BluetoothManagerService;)V
PLcom/android/server/BluetoothManagerService;->access$4300(Lcom/android/server/BluetoothManagerService;)I
PLcom/android/server/BluetoothManagerService;->checkIfCallerIsForegroundUser()Z
PLcom/android/server/BluetoothManagerService;->continueFromBleOnState()V
PLcom/android/server/BluetoothManagerService;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/BluetoothManagerService;->getAddress()Ljava/lang/String;
PLcom/android/server/BluetoothManagerService;->getBluetoothGatt()Landroid/bluetooth/IBluetoothGatt;
PLcom/android/server/BluetoothManagerService;->getName()Ljava/lang/String;
PLcom/android/server/BluetoothManagerService;->handleOnUnlockUser(I)V
PLcom/android/server/BluetoothManagerService;->isBleScanAlwaysAvailable()Z
PLcom/android/server/BluetoothManagerService;->persistBluetoothSetting(I)V
PLcom/android/server/BluetoothManagerService;->sendBluetoothStateCallback(Z)V
PLcom/android/server/BluetoothManagerService;->unbindBluetoothProfileService(ILandroid/bluetooth/IBluetoothProfileServiceConnection;)V
PLcom/android/server/BluetoothManagerService;->unregisterStateChangeCallback(Landroid/bluetooth/IBluetoothStateChangeCallback;)V
PLcom/android/server/BluetoothManagerService;->updateBleAppCount(Landroid/os/IBinder;ZLjava/lang/String;)I
PLcom/android/server/BluetoothService;->onUnlockUser(I)V
PLcom/android/server/ConnectivityService$3;->interfaceClassDataActivityChanged(Ljava/lang/String;ZJ)V
PLcom/android/server/ConnectivityService$4;->onDnsEvent(IIILjava/lang/String;[Ljava/lang/String;IJI)V
PLcom/android/server/ConnectivityService$4;->onPrivateDnsValidationEvent(ILjava/lang/String;Ljava/lang/String;Z)V
PLcom/android/server/ConnectivityService$7;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/ConnectivityService$LegacyTypeTracker;->add(ILcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/ConnectivityService$LegacyTypeTracker;->getNetworkForType(I)Lcom/android/server/connectivity/NetworkAgentInfo;
PLcom/android/server/ConnectivityService$LegacyTypeTracker;->maybeLogBroadcast(Lcom/android/server/connectivity/NetworkAgentInfo;Landroid/net/NetworkInfo$DetailedState;IZ)V
PLcom/android/server/ConnectivityService$LegacyTypeTracker;->remove(ILcom/android/server/connectivity/NetworkAgentInfo;Z)V
PLcom/android/server/ConnectivityService$LegacyTypeTracker;->remove(Lcom/android/server/connectivity/NetworkAgentInfo;Z)V
PLcom/android/server/ConnectivityService$LegacyTypeTracker;->update(Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/ConnectivityService$NetworkMonitorCallbacks;-><init>(Lcom/android/server/ConnectivityService;Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/ConnectivityService$NetworkMonitorCallbacks;->hideProvisioningNotification()V
PLcom/android/server/ConnectivityService$NetworkMonitorCallbacks;->notifyNetworkTested(ILjava/lang/String;)V
PLcom/android/server/ConnectivityService$NetworkMonitorCallbacks;->onNetworkMonitorCreated(Landroid/net/INetworkMonitor;)V
PLcom/android/server/ConnectivityService$NetworkMonitorCallbacks;->showProvisioningNotification(Ljava/lang/String;)V
PLcom/android/server/ConnectivityService$NetworkMonitorCallbacks;->showProvisioningNotification(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/ConnectivityService$NetworkRequestInfo;->binderDied()V
PLcom/android/server/ConnectivityService$NetworkRequestInfo;->unlinkDeathRecipient()V
PLcom/android/server/ConnectivityService$ReapUnvalidatedNetworks;-><init>(Ljava/lang/String;I)V
PLcom/android/server/ConnectivityService$UnneededFor;-><init>(Ljava/lang/String;I)V
PLcom/android/server/ConnectivityService$UnneededFor;->values()[Lcom/android/server/ConnectivityService$UnneededFor;
PLcom/android/server/ConnectivityService;->avoidBadWifi()Z
PLcom/android/server/ConnectivityService;->callCallbackForRequest(Lcom/android/server/ConnectivityService$NetworkRequestInfo;Lcom/android/server/connectivity/NetworkAgentInfo;II)V
PLcom/android/server/ConnectivityService;->clearNetworkForRequest(I)V
PLcom/android/server/ConnectivityService;->disconnectAndDestroyNetwork(Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/ConnectivityService;->enforceConnectivityRestrictedNetworksPermission()V
PLcom/android/server/ConnectivityService;->ensureNetworkTransitionWakelock(Ljava/lang/String;)V
PLcom/android/server/ConnectivityService;->getActiveLinkProperties()Landroid/net/LinkProperties;
PLcom/android/server/ConnectivityService;->getActiveNetwork()Landroid/net/Network;
PLcom/android/server/ConnectivityService;->getAllNetworkInfo()[Landroid/net/NetworkInfo;
PLcom/android/server/ConnectivityService;->getAllNetworkState()[Landroid/net/NetworkState;
PLcom/android/server/ConnectivityService;->getAllNetworks()[Landroid/net/Network;
PLcom/android/server/ConnectivityService;->getAvoidBadWifi()Z
PLcom/android/server/ConnectivityService;->getDefaultNetworkCapabilitiesForUser(I)[Landroid/net/NetworkCapabilities;
PLcom/android/server/ConnectivityService;->getDefaultNetworks()[Landroid/net/Network;
PLcom/android/server/ConnectivityService;->getFilteredNetworkState(II)Landroid/net/NetworkState;
PLcom/android/server/ConnectivityService;->getLinkProperties(Landroid/net/Network;)Landroid/net/LinkProperties;
PLcom/android/server/ConnectivityService;->getLinkProperties(Lcom/android/server/connectivity/NetworkAgentInfo;)Landroid/net/LinkProperties;
PLcom/android/server/ConnectivityService;->getLinkPropertiesProxyInfo(Landroid/net/Network;)Landroid/net/ProxyInfo;
PLcom/android/server/ConnectivityService;->getNetworkInfo(I)Landroid/net/NetworkInfo;
PLcom/android/server/ConnectivityService;->getNetworkStack()Landroid/net/NetworkStackClient;
PLcom/android/server/ConnectivityService;->getNriForAppRequest(Landroid/net/NetworkRequest;ILjava/lang/String;)Lcom/android/server/ConnectivityService$NetworkRequestInfo;
PLcom/android/server/ConnectivityService;->getSignalStrengthThresholds(Lcom/android/server/connectivity/NetworkAgentInfo;)Ljava/util/ArrayList;
PLcom/android/server/ConnectivityService;->getTetherableBluetoothRegexs()[Ljava/lang/String;
PLcom/android/server/ConnectivityService;->getTetherableUsbRegexs()[Ljava/lang/String;
PLcom/android/server/ConnectivityService;->getTetheredIfaces()[Ljava/lang/String;
PLcom/android/server/ConnectivityService;->getVpnConfig(I)Lcom/android/internal/net/VpnConfig;
PLcom/android/server/ConnectivityService;->handleAsyncChannelDisconnected(Landroid/os/Message;)V
PLcom/android/server/ConnectivityService;->handleLingerComplete(Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/ConnectivityService;->handleNetworkUnvalidated(Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/ConnectivityService;->handlePerNetworkPrivateDnsConfig(Lcom/android/server/connectivity/NetworkAgentInfo;Landroid/net/shared/PrivateDnsConfig;)V
PLcom/android/server/ConnectivityService;->handlePromptUnvalidated(Landroid/net/Network;)V
PLcom/android/server/ConnectivityService;->handleRegisterNetworkAgent(Lcom/android/server/connectivity/NetworkAgentInfo;Landroid/net/INetworkMonitor;)V
PLcom/android/server/ConnectivityService;->handleReleaseNetworkRequest(Landroid/net/NetworkRequest;I)V
PLcom/android/server/ConnectivityService;->handleReleaseNetworkRequest(Landroid/net/NetworkRequest;IZ)V
PLcom/android/server/ConnectivityService;->handleReleaseNetworkTransitionWakelock(I)V
PLcom/android/server/ConnectivityService;->handleRemoveNetworkRequest(Lcom/android/server/ConnectivityService$NetworkRequestInfo;)V
PLcom/android/server/ConnectivityService;->handleReportNetworkConnectivity(Landroid/net/Network;IZ)V
PLcom/android/server/ConnectivityService;->handleTimedOutNetworkRequest(Lcom/android/server/ConnectivityService$NetworkRequestInfo;)V
PLcom/android/server/ConnectivityService;->handleUpdateLinkProperties(Lcom/android/server/connectivity/NetworkAgentInfo;Landroid/net/LinkProperties;)V
PLcom/android/server/ConnectivityService;->isActiveNetworkMetered()Z
PLcom/android/server/ConnectivityService;->isLiveNetworkAgent(Lcom/android/server/connectivity/NetworkAgentInfo;I)Z
PLcom/android/server/ConnectivityService;->isNetworkWithLinkPropertiesBlocked(Landroid/net/LinkProperties;IZ)Z
PLcom/android/server/ConnectivityService;->isUidNetworkingWithVpnBlocked(IIZZ)Z
PLcom/android/server/ConnectivityService;->makeDefault(Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/ConnectivityService;->makeGeneralIntent(Landroid/net/NetworkInfo;Ljava/lang/String;)Landroid/content/Intent;
PLcom/android/server/ConnectivityService;->makeWakeupMessage(Landroid/content/Context;Landroid/os/Handler;Ljava/lang/String;ILjava/lang/Object;)Lcom/android/internal/util/WakeupMessage;
PLcom/android/server/ConnectivityService;->maybeLogBlockedStatusChanged(Lcom/android/server/ConnectivityService$NetworkRequestInfo;Landroid/net/Network;Z)V
PLcom/android/server/ConnectivityService;->metricsLogger()Lcom/android/server/connectivity/IpConnectivityMetrics$Logger;
PLcom/android/server/ConnectivityService;->mixInCapabilities(Lcom/android/server/connectivity/NetworkAgentInfo;Landroid/net/NetworkCapabilities;)Landroid/net/NetworkCapabilities;
PLcom/android/server/ConnectivityService;->networkCapabilitiesRestrictedForCallerPermissions(Landroid/net/NetworkCapabilities;II)Landroid/net/NetworkCapabilities;
PLcom/android/server/ConnectivityService;->notifyIfacesChangedForNetworkStats()V
PLcom/android/server/ConnectivityService;->notifyLockdownVpn(Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/ConnectivityService;->notifyNetworkAvailable(Lcom/android/server/connectivity/NetworkAgentInfo;Lcom/android/server/ConnectivityService$NetworkRequestInfo;)V
PLcom/android/server/ConnectivityService;->notifyNetworkCallbacks(Lcom/android/server/connectivity/NetworkAgentInfo;I)V
PLcom/android/server/ConnectivityService;->notifyNetworkCallbacks(Lcom/android/server/connectivity/NetworkAgentInfo;II)V
PLcom/android/server/ConnectivityService;->onPackageAdded(Ljava/lang/String;I)V
PLcom/android/server/ConnectivityService;->onPackageReplaced(Ljava/lang/String;I)V
PLcom/android/server/ConnectivityService;->onUserStop(I)V
PLcom/android/server/ConnectivityService;->onUserUnlocked(I)V
PLcom/android/server/ConnectivityService;->processListenRequests(Lcom/android/server/connectivity/NetworkAgentInfo;Z)V
PLcom/android/server/ConnectivityService;->queryUserAccess(II)Z
PLcom/android/server/ConnectivityService;->registerNetworkAgent(Landroid/os/Messenger;Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;ILandroid/net/NetworkMisc;I)I
PLcom/android/server/ConnectivityService;->releaseNetworkRequest(Landroid/net/NetworkRequest;)V
PLcom/android/server/ConnectivityService;->rematchNetworkAndRequests(Lcom/android/server/connectivity/NetworkAgentInfo;Lcom/android/server/ConnectivityService$ReapUnvalidatedNetworks;J)V
PLcom/android/server/ConnectivityService;->removeDataActivityTracking(Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/ConnectivityService;->reportNetworkConnectivity(Landroid/net/Network;Z)V
PLcom/android/server/ConnectivityService;->requestRouteToHostAddress(I[B)Z
PLcom/android/server/ConnectivityService;->reserveNetId()I
PLcom/android/server/ConnectivityService;->scheduleReleaseNetworkTransitionWakelock()V
PLcom/android/server/ConnectivityService;->scheduleUnvalidatedPrompt(Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/ConnectivityService;->sendConnectedBroadcast(Landroid/net/NetworkInfo;)V
PLcom/android/server/ConnectivityService;->sendDataActivityBroadcast(IZJ)V
PLcom/android/server/ConnectivityService;->sendLegacyNetworkBroadcast(Lcom/android/server/connectivity/NetworkAgentInfo;Landroid/net/NetworkInfo$DetailedState;I)V
PLcom/android/server/ConnectivityService;->sendStickyBroadcast(Landroid/content/Intent;)V
PLcom/android/server/ConnectivityService;->setNetworkForRequest(ILcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/ConnectivityService;->setProvisioningNotificationVisible(ZILjava/lang/String;)V
PLcom/android/server/ConnectivityService;->setupDataActivityTracking(Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/ConnectivityService;->startAlwaysOnVpn(I)Z
PLcom/android/server/ConnectivityService;->startNattKeepalive(Landroid/net/Network;ILandroid/os/Messenger;Landroid/os/IBinder;Ljava/lang/String;ILjava/lang/String;)V
PLcom/android/server/ConnectivityService;->stopKeepalive(Landroid/net/Network;I)V
PLcom/android/server/ConnectivityService;->teardownUnneededNetwork(Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/ConnectivityService;->unneeded(Lcom/android/server/connectivity/NetworkAgentInfo;Lcom/android/server/ConnectivityService$UnneededFor;)Z
PLcom/android/server/ConnectivityService;->updateAllVpnsCapabilities()V
PLcom/android/server/ConnectivityService;->updateCapabilities(ILcom/android/server/connectivity/NetworkAgentInfo;Landroid/net/NetworkCapabilities;)V
PLcom/android/server/ConnectivityService;->updateDnses(Landroid/net/LinkProperties;Landroid/net/LinkProperties;I)V
PLcom/android/server/ConnectivityService;->updateInetCondition(Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/ConnectivityService;->updateInterfaces(Landroid/net/LinkProperties;Landroid/net/LinkProperties;ILandroid/net/NetworkCapabilities;)V
PLcom/android/server/ConnectivityService;->updateLingerState(Lcom/android/server/connectivity/NetworkAgentInfo;J)V
PLcom/android/server/ConnectivityService;->updateLinkProperties(Lcom/android/server/connectivity/NetworkAgentInfo;Landroid/net/LinkProperties;Landroid/net/LinkProperties;)V
PLcom/android/server/ConnectivityService;->updateMtu(Landroid/net/LinkProperties;Landroid/net/LinkProperties;)V
PLcom/android/server/ConnectivityService;->updateNetworkInfo(Lcom/android/server/connectivity/NetworkAgentInfo;Landroid/net/NetworkInfo;)V
PLcom/android/server/ConnectivityService;->updateNetworkScore(Lcom/android/server/connectivity/NetworkAgentInfo;I)V
PLcom/android/server/ConnectivityService;->updateRoutes(Landroid/net/LinkProperties;Landroid/net/LinkProperties;I)Z
PLcom/android/server/ConnectivityService;->updateSignalStrengthThresholds(Lcom/android/server/connectivity/NetworkAgentInfo;Ljava/lang/String;Landroid/net/NetworkRequest;)V
PLcom/android/server/ConnectivityService;->updateTcpBufferSizes(Ljava/lang/String;)V
PLcom/android/server/ConnectivityService;->updateUids(Lcom/android/server/connectivity/NetworkAgentInfo;Landroid/net/NetworkCapabilities;Landroid/net/NetworkCapabilities;)V
PLcom/android/server/ConnectivityService;->wakeupModifyInterface(Ljava/lang/String;Landroid/net/NetworkCapabilities;Z)V
PLcom/android/server/CountryDetectorService$1$1;->run()V
PLcom/android/server/CountryDetectorService$1;->onCountryDetected(Landroid/location/Country;)V
PLcom/android/server/CountryDetectorService$Receiver;->binderDied()V
PLcom/android/server/CountryDetectorService;->notifyReceivers(Landroid/location/Country;)V
PLcom/android/server/CountryDetectorService;->removeListener(Landroid/os/IBinder;)V
PLcom/android/server/DeviceIdleController$2;->onAlarm()V
PLcom/android/server/DeviceIdleController$4;->onAlarm()V
PLcom/android/server/DeviceIdleController$5;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/DeviceIdleController$6;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/DeviceIdleController$7;->onLocationChanged(Landroid/location/Location;)V
PLcom/android/server/DeviceIdleController$8;->onLocationChanged(Landroid/location/Location;)V
PLcom/android/server/DeviceIdleController$9;->onAwakeStateChanged(Z)V
PLcom/android/server/DeviceIdleController$BinderService;->addPowerSaveTempWhitelistApp(Ljava/lang/String;JILjava/lang/String;)V
PLcom/android/server/DeviceIdleController$BinderService;->addPowerSaveTempWhitelistAppForMms(Ljava/lang/String;ILjava/lang/String;)J
PLcom/android/server/DeviceIdleController$BinderService;->addPowerSaveTempWhitelistAppForSms(Ljava/lang/String;ILjava/lang/String;)J
PLcom/android/server/DeviceIdleController$BinderService;->exitIdle(Ljava/lang/String;)V
PLcom/android/server/DeviceIdleController$BinderService;->isPowerSaveWhitelistApp(Ljava/lang/String;)Z
PLcom/android/server/DeviceIdleController$Injector;->getLocationManager()Landroid/location/LocationManager;
PLcom/android/server/DeviceIdleController$LocalService;->addPowerSaveTempWhitelistApp(ILjava/lang/String;JIZLjava/lang/String;)V
PLcom/android/server/DeviceIdleController$LocalService;->addPowerSaveTempWhitelistAppDirect(IJZLjava/lang/String;)V
PLcom/android/server/DeviceIdleController$LocalService;->getNotificationWhitelistDuration()J
PLcom/android/server/DeviceIdleController$LocalService;->setJobsActive(Z)V
PLcom/android/server/DeviceIdleController$MotionListener;->onTrigger(Landroid/hardware/TriggerEvent;)V
PLcom/android/server/DeviceIdleController$MotionListener;->registerLocked()Z
PLcom/android/server/DeviceIdleController$MotionListener;->unregisterLocked()V
PLcom/android/server/DeviceIdleController$MyHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/DeviceIdleController;->addEvent(ILjava/lang/String;)V
PLcom/android/server/DeviceIdleController;->addPowerSaveTempWhitelistAppChecked(Ljava/lang/String;JILjava/lang/String;)V
PLcom/android/server/DeviceIdleController;->addPowerSaveTempWhitelistAppDirectInternal(IIJZLjava/lang/String;)V
PLcom/android/server/DeviceIdleController;->addPowerSaveTempWhitelistAppInternal(ILjava/lang/String;JIZLjava/lang/String;)V
PLcom/android/server/DeviceIdleController;->cancelAlarmLocked()V
PLcom/android/server/DeviceIdleController;->cancelLightAlarmLocked()V
PLcom/android/server/DeviceIdleController;->cancelLocatingLocked()V
PLcom/android/server/DeviceIdleController;->cancelSensingTimeoutAlarmLocked()V
PLcom/android/server/DeviceIdleController;->checkTempAppWhitelistTimeout(I)V
PLcom/android/server/DeviceIdleController;->decActiveIdleOps()V
PLcom/android/server/DeviceIdleController;->exitIdleInternal(Ljava/lang/String;)V
PLcom/android/server/DeviceIdleController;->handleMotionDetectedLocked(JLjava/lang/String;)V
PLcom/android/server/DeviceIdleController;->incActiveIdleOps()V
PLcom/android/server/DeviceIdleController;->isOpsInactiveLocked()Z
PLcom/android/server/DeviceIdleController;->isPowerSaveWhitelistAppInternal(Ljava/lang/String;)Z
PLcom/android/server/DeviceIdleController;->lambda$onBootPhase$0$DeviceIdleController(Landroid/os/PowerSaveState;)V
PLcom/android/server/DeviceIdleController;->motionLocked()V
PLcom/android/server/DeviceIdleController;->onAnyMotionResult(I)V
PLcom/android/server/DeviceIdleController;->onAppRemovedFromTempWhitelistLocked(ILjava/lang/String;)V
PLcom/android/server/DeviceIdleController;->receivedGenericLocationLocked(Landroid/location/Location;)V
PLcom/android/server/DeviceIdleController;->receivedGpsLocationLocked(Landroid/location/Location;)V
PLcom/android/server/DeviceIdleController;->removePowerSaveWhitelistAppInternal(Ljava/lang/String;)Z
PLcom/android/server/DeviceIdleController;->reportMaintenanceActivityIfNeededLocked()V
PLcom/android/server/DeviceIdleController;->scheduleAlarmLocked(JZ)V
PLcom/android/server/DeviceIdleController;->scheduleLightAlarmLocked(J)V
PLcom/android/server/DeviceIdleController;->scheduleReportActiveLocked(Ljava/lang/String;I)V
PLcom/android/server/DeviceIdleController;->scheduleSensingTimeoutAlarmLocked(J)V
PLcom/android/server/DeviceIdleController;->setJobsActive(Z)V
PLcom/android/server/DeviceIdleController;->startMonitoringMotionLocked()V
PLcom/android/server/DeviceIdleController;->stepIdleStateLocked(Ljava/lang/String;)V
PLcom/android/server/DeviceIdleController;->stepLightIdleStateLocked(Ljava/lang/String;)V
PLcom/android/server/DeviceIdleController;->stopMonitoringMotionLocked()V
PLcom/android/server/DeviceIdleController;->updateActiveConstraintsLocked()V
PLcom/android/server/DeviceIdleController;->updateTempWhitelistAppIdsLocked(IZ)V
PLcom/android/server/DiskStatsService;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/DiskStatsService;->getRecentPerf()I
PLcom/android/server/DiskStatsService;->reportCachedValues(Ljava/io/PrintWriter;)V
PLcom/android/server/DiskStatsService;->reportDiskWriteSpeed(Ljava/io/PrintWriter;)V
PLcom/android/server/DiskStatsService;->reportFreeSpace(Ljava/io/File;Ljava/lang/String;Ljava/io/PrintWriter;Landroid/util/proto/ProtoOutputStream;I)V
PLcom/android/server/DropBoxManagerService$2;->getNextEntry(Ljava/lang/String;JLjava/lang/String;)Landroid/os/DropBoxManager$Entry;
PLcom/android/server/DropBoxManagerService$EntryFile;->getFile(Ljava/io/File;)Ljava/io/File;
PLcom/android/server/DropBoxManagerService;->checkPermission(ILjava/lang/String;)Z
PLcom/android/server/DropBoxManagerService;->getNextEntry(Ljava/lang/String;JLjava/lang/String;)Landroid/os/DropBoxManager$Entry;
PLcom/android/server/DynamicSystemService;->connect(Landroid/os/IBinder$DeathRecipient;)Landroid/gsi/IGsiService;
PLcom/android/server/DynamicSystemService;->getGsiService()Landroid/gsi/IGsiService;
PLcom/android/server/DynamicSystemService;->isInUse()Z
PLcom/android/server/EntropyMixer$1;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/EntropyMixer$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/EventLogTags;->writeBatterySaverMode(IIIIILjava/lang/String;I)V
PLcom/android/server/EventLogTags;->writeBatterySavingStats(IIIJIIJII)V
PLcom/android/server/EventLogTags;->writeDeviceIdleWakeFromIdle(ILjava/lang/String;)V
PLcom/android/server/EventLogTags;->writeNotificationActionClicked(Ljava/lang/String;IIIIII)V
PLcom/android/server/EventLogTags;->writeNotificationAlert(Ljava/lang/String;III)V
PLcom/android/server/EventLogTags;->writeNotificationCancel(IILjava/lang/String;ILjava/lang/String;IIIILjava/lang/String;)V
PLcom/android/server/EventLogTags;->writeNotificationCanceled(Ljava/lang/String;IIIIIILjava/lang/String;)V
PLcom/android/server/EventLogTags;->writeNotificationClicked(Ljava/lang/String;IIIII)V
PLcom/android/server/EventLogTags;->writeNotificationEnqueue(IILjava/lang/String;ILjava/lang/String;ILjava/lang/String;I)V
PLcom/android/server/EventLogTags;->writeNotificationVisibility(Ljava/lang/String;IIIII)V
PLcom/android/server/EventLogTags;->writePowerScreenState(IIJII)V
PLcom/android/server/EventLogTags;->writeVolumeChanged(IIIILjava/lang/String;)V
PLcom/android/server/GestureLauncherService;->handleCameraGesture(ZI)Z
PLcom/android/server/GestureLauncherService;->interceptPowerKeyDown(Landroid/view/KeyEvent;ZLandroid/util/MutableBoolean;)Z
PLcom/android/server/GraphicsStatsService$1;->handleMessage(Landroid/os/Message;)Z
PLcom/android/server/GraphicsStatsService$ActiveBuffer;->binderDied()V
PLcom/android/server/GraphicsStatsService$HistoricalBuffer;-><init>(Lcom/android/server/GraphicsStatsService;Lcom/android/server/GraphicsStatsService$ActiveBuffer;)V
PLcom/android/server/GraphicsStatsService;->addToSaveQueue(Lcom/android/server/GraphicsStatsService$ActiveBuffer;)V
PLcom/android/server/GraphicsStatsService;->deleteOldBuffers()V
PLcom/android/server/GraphicsStatsService;->deleteRecursiveLocked(Ljava/io/File;)V
PLcom/android/server/GraphicsStatsService;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/GraphicsStatsService;->dumpActiveLocked(JLjava/util/ArrayList;)Ljava/util/HashSet;
PLcom/android/server/GraphicsStatsService;->dumpHistoricalLocked(JLjava/util/HashSet;)V
PLcom/android/server/GraphicsStatsService;->onAlarm()V
PLcom/android/server/GraphicsStatsService;->pathForApp(Lcom/android/server/GraphicsStatsService$BufferInfo;)Ljava/io/File;
PLcom/android/server/GraphicsStatsService;->processDied(Lcom/android/server/GraphicsStatsService$ActiveBuffer;)V
PLcom/android/server/GraphicsStatsService;->saveBuffer(Lcom/android/server/GraphicsStatsService$HistoricalBuffer;)V
PLcom/android/server/HardwarePropertiesManagerService;->enforceHardwarePropertiesRetrievalAllowed(Ljava/lang/String;)V
PLcom/android/server/HardwarePropertiesManagerService;->getDeviceTemperatures(Ljava/lang/String;II)[F
PLcom/android/server/IntentResolver;->removeFilter(Landroid/content/IntentFilter;)V
PLcom/android/server/IntentResolver;->removeFilterInternal(Landroid/content/IntentFilter;)V
PLcom/android/server/IntentResolver;->remove_all_objects(Landroid/util/ArrayMap;Ljava/lang/String;Ljava/lang/Object;)V
PLcom/android/server/IntentResolver;->unregister_mime_types(Landroid/content/IntentFilter;Ljava/lang/String;)I
PLcom/android/server/LocationManagerService$1;->onOpChanged(ILjava/lang/String;)V
PLcom/android/server/LocationManagerService$7;->onPackageDisappeared(Ljava/lang/String;I)V
PLcom/android/server/LocationManagerService$LinkedListener;->binderDied()V
PLcom/android/server/LocationManagerService$LinkedListenerBase;-><init>(Lcom/android/server/location/CallerIdentity;Ljava/lang/String;Lcom/android/server/LocationManagerService$1;)V
PLcom/android/server/LocationManagerService$LocationProvider;->getPackagesLocked()Ljava/util/List;
PLcom/android/server/LocationManagerService$LocationProvider;->isPassiveLocked()Z
PLcom/android/server/LocationManagerService$LocationProvider;->lambda$onReportLocation$0$LocationManagerService$LocationProvider(Landroid/location/Location;)V
PLcom/android/server/LocationManagerService$LocationProvider;->lambda$onReportLocation$0(Lcom/android/server/LocationManagerService$LocationProvider;Landroid/location/Location;)V
PLcom/android/server/LocationManagerService$LocationProvider;->onReportLocation(Landroid/location/Location;)V
PLcom/android/server/LocationManagerService$Receiver;->binderDied()V
PLcom/android/server/LocationManagerService$Receiver;->callLocationChangedLocked(Landroid/location/Location;)Z
PLcom/android/server/LocationManagerService$Receiver;->callProviderEnabledLocked(Ljava/lang/String;Z)Z
PLcom/android/server/LocationManagerService$Receiver;->clearPendingBroadcastsLocked()V
PLcom/android/server/LocationManagerService$Receiver;->decrementPendingBroadcastsLocked()V
PLcom/android/server/LocationManagerService$Receiver;->incrementPendingBroadcastsLocked()V
PLcom/android/server/LocationManagerService$Receiver;->onSendFinished(Landroid/app/PendingIntent;Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;)V
PLcom/android/server/LocationManagerService$UpdateRecord;->disposeLocked(Z)V
PLcom/android/server/LocationManagerService;->addGnssDataListener(Landroid/os/IInterface;Ljava/lang/String;Ljava/lang/String;Lcom/android/server/location/RemoteListenerHelper;Landroid/util/ArrayMap;Ljava/util/function/Consumer;)Z
PLcom/android/server/LocationManagerService;->addGnssMeasurementsListener(Landroid/location/IGnssMeasurementsListener;Ljava/lang/String;)Z
PLcom/android/server/LocationManagerService;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/LocationManagerService;->getAllProviders()Ljava/util/List;
PLcom/android/server/LocationManagerService;->getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;
PLcom/android/server/LocationManagerService;->getFromLocation(DDILandroid/location/GeocoderParams;Ljava/util/List;)Ljava/lang/String;
PLcom/android/server/LocationManagerService;->getLastLocation(Landroid/location/LocationRequest;Ljava/lang/String;)Landroid/location/Location;
PLcom/android/server/LocationManagerService;->getLocationControllerExtraPackage()Ljava/lang/String;
PLcom/android/server/LocationManagerService;->getProviderProperties(Ljava/lang/String;)Lcom/android/internal/location/ProviderProperties;
PLcom/android/server/LocationManagerService;->getReceiverLocked(Landroid/app/PendingIntent;IILjava/lang/String;Landroid/os/WorkSource;Z)Lcom/android/server/LocationManagerService$Receiver;
PLcom/android/server/LocationManagerService;->handleLocationChangedLocked(Landroid/location/Location;Lcom/android/server/LocationManagerService$LocationProvider;)V
PLcom/android/server/LocationManagerService;->hasGnssPermissions(Ljava/lang/String;)Z
PLcom/android/server/LocationManagerService;->isProviderPackage(Ljava/lang/String;)Z
PLcom/android/server/LocationManagerService;->isSettingsExemptLocked(Lcom/android/server/LocationManagerService$UpdateRecord;)Z
PLcom/android/server/LocationManagerService;->isValidWorkSource(Landroid/os/WorkSource;)Z
PLcom/android/server/LocationManagerService;->lambda$initializeLocked$2$LocationManagerService(I)V
PLcom/android/server/LocationManagerService;->lambda$initializeLocked$2(Lcom/android/server/LocationManagerService;I)V
PLcom/android/server/LocationManagerService;->lambda$new$0$LocationManagerService(I)[Ljava/lang/String;
PLcom/android/server/LocationManagerService;->lambda$new$1$LocationManagerService(I)[Ljava/lang/String;
PLcom/android/server/LocationManagerService;->locationCallbackFinished(Landroid/location/ILocationListener;)V
PLcom/android/server/LocationManagerService;->onAppOpChangedLocked()V
PLcom/android/server/LocationManagerService;->onPackageDisappearedLocked(Ljava/lang/String;)V
PLcom/android/server/LocationManagerService;->registerGnssStatusCallback(Landroid/location/IGnssStatusListener;Ljava/lang/String;)Z
PLcom/android/server/LocationManagerService;->removeGnssDataListener(Landroid/os/IInterface;Lcom/android/server/location/RemoteListenerHelper;Landroid/util/ArrayMap;)V
PLcom/android/server/LocationManagerService;->removeGnssMeasurementsListener(Landroid/location/IGnssMeasurementsListener;)V
PLcom/android/server/LocationManagerService;->removeUpdates(Landroid/location/ILocationListener;Landroid/app/PendingIntent;Ljava/lang/String;)V
PLcom/android/server/LocationManagerService;->removeUpdatesLocked(Lcom/android/server/LocationManagerService$Receiver;)V
PLcom/android/server/LocationManagerService;->setLocationControllerExtraPackage(Ljava/lang/String;)V
PLcom/android/server/LocationManagerService;->setLocationControllerExtraPackageEnabled(Z)V
PLcom/android/server/LocationManagerService;->shouldBroadcastSafeLocked(Landroid/location/Location;Landroid/location/Location;Lcom/android/server/LocationManagerService$UpdateRecord;J)Z
PLcom/android/server/LocationManagerService;->unlinkFromListenerDeathNotificationLocked(Landroid/os/IBinder;Lcom/android/server/LocationManagerService$LinkedListenerBase;)Z
PLcom/android/server/LocationManagerService;->unregisterGnssStatusCallback(Landroid/location/IGnssStatusListener;)V
PLcom/android/server/LocationManagerService;->updateLastLocationLocked(Landroid/location/Location;Ljava/lang/String;)V
PLcom/android/server/LooperStatsService$SettingsObserver;->onChange(ZLandroid/net/Uri;I)V
PLcom/android/server/MmsServiceBroker$1;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/MmsServiceBroker$2;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/MmsServiceBroker$BinderService;->adjustUriForUserAndGrantPermission(Landroid/net/Uri;Ljava/lang/String;I)Landroid/net/Uri;
PLcom/android/server/MmsServiceBroker$BinderService;->downloadMessage(ILjava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/app/PendingIntent;)V
PLcom/android/server/MmsServiceBroker$BinderService;->getAutoPersisting()Z
PLcom/android/server/MmsServiceBroker$BinderService;->getCarrierConfigValues(I)Landroid/os/Bundle;
PLcom/android/server/MmsServiceBroker$BinderService;->sendMessage(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/PendingIntent;)V
PLcom/android/server/MmsServiceBroker;->getOrConnectService()Lcom/android/internal/telephony/IMms;
PLcom/android/server/MmsServiceBroker;->tryConnecting()V
PLcom/android/server/MountServiceIdler$1;->run()V
PLcom/android/server/MountServiceIdler;-><init>()V
PLcom/android/server/MountServiceIdler;->onStartJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/MountServiceIdler;->onStopJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/NativeDaemonConnector$ResponseQueue;->add(ILcom/android/server/NativeDaemonEvent;)V
PLcom/android/server/NativeDaemonConnector$ResponseQueue;->remove(IJLjava/lang/String;)Lcom/android/server/NativeDaemonEvent;
PLcom/android/server/NativeDaemonConnector;->appendEscaped(Ljava/lang/StringBuilder;Ljava/lang/String;)V
PLcom/android/server/NativeDaemonConnector;->execute(JLjava/lang/String;[Ljava/lang/Object;)Lcom/android/server/NativeDaemonEvent;
PLcom/android/server/NativeDaemonConnector;->executeForList(JLjava/lang/String;[Ljava/lang/Object;)[Lcom/android/server/NativeDaemonEvent;
PLcom/android/server/NativeDaemonConnector;->makeCommand(Ljava/lang/StringBuilder;Ljava/lang/StringBuilder;ILjava/lang/String;[Ljava/lang/Object;)V
PLcom/android/server/NativeDaemonEvent;->getCmdNumber()I
PLcom/android/server/NativeDaemonEvent;->isClassClientError()Z
PLcom/android/server/NativeDaemonEvent;->isClassContinue()Z
PLcom/android/server/NativeDaemonEvent;->isClassServerError()Z
PLcom/android/server/NativeDaemonEvent;->isClassUnsolicited()Z
PLcom/android/server/NativeDaemonEvent;->parseRawEvent(Ljava/lang/String;[Ljava/io/FileDescriptor;)Lcom/android/server/NativeDaemonEvent;
PLcom/android/server/NativeDaemonEvent;->toString()Ljava/lang/String;
PLcom/android/server/NetworkManagementService$NetdTetheringStatsProvider;->setInterfaceQuota(Ljava/lang/String;J)V
PLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->lambda$onInterfaceClassActivityChanged$0$NetworkManagementService$NetdUnsolicitedEventListener(IZJI)V
PLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->lambda$onInterfaceDnsServerInfo$2$NetworkManagementService$NetdUnsolicitedEventListener(Ljava/lang/String;J[Ljava/lang/String;)V
PLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->lambda$onInterfaceRemoved$6$NetworkManagementService$NetdUnsolicitedEventListener(Ljava/lang/String;)V
PLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->lambda$onQuotaLimitReached$1$NetworkManagementService$NetdUnsolicitedEventListener(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->onInterfaceClassActivityChanged(ZIJI)V
PLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->onInterfaceDnsServerInfo(Ljava/lang/String;J[Ljava/lang/String;)V
PLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->onInterfaceRemoved(Ljava/lang/String;)V
PLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->onQuotaLimitReached(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/NetworkManagementService;->addIdleTimer(Ljava/lang/String;II)V
PLcom/android/server/NetworkManagementService;->addInterfaceToNetwork(Ljava/lang/String;I)V
PLcom/android/server/NetworkManagementService;->addRoute(ILandroid/net/RouteInfo;)V
PLcom/android/server/NetworkManagementService;->createPhysicalNetwork(II)V
PLcom/android/server/NetworkManagementService;->isNetworkActive()Z
PLcom/android/server/NetworkManagementService;->lambda$addIdleTimer$12$NetworkManagementService(I)V
PLcom/android/server/NetworkManagementService;->lambda$removeIdleTimer$13$NetworkManagementService(Lcom/android/server/NetworkManagementService$IdleTimerParams;)V
PLcom/android/server/NetworkManagementService;->modifyInterfaceInNetwork(ZILjava/lang/String;)V
PLcom/android/server/NetworkManagementService;->modifyRoute(ZILandroid/net/RouteInfo;)V
PLcom/android/server/NetworkManagementService;->notifyInterfaceClassActivity(IZJIZ)V
PLcom/android/server/NetworkManagementService;->registerNetworkActivityListener(Landroid/os/INetworkActivityListener;)V
PLcom/android/server/NetworkManagementService;->removeIdleTimer(Ljava/lang/String;)V
PLcom/android/server/NetworkManagementService;->removeInterfaceQuota(Ljava/lang/String;)V
PLcom/android/server/NetworkManagementService;->removeNetwork(I)V
PLcom/android/server/NetworkManagementService;->removeRoute(ILandroid/net/RouteInfo;)V
PLcom/android/server/NetworkManagementService;->reportNetworkActive()V
PLcom/android/server/NetworkManagementService;->setDefaultNetId(I)V
PLcom/android/server/NetworkManagementService;->setDnsConfigurationForNetwork(I[Ljava/lang/String;[Ljava/lang/String;[ILjava/lang/String;[Ljava/lang/String;)V
PLcom/android/server/NetworkManagementService;->setInterfaceQuota(Ljava/lang/String;J)V
PLcom/android/server/NetworkManagementService;->setMtu(Ljava/lang/String;I)V
PLcom/android/server/NetworkManagementService;->setNetworkPermission(II)V
PLcom/android/server/NetworkManagementService;->setUidMeteredNetworkWhitelist(IZ)V
PLcom/android/server/NetworkManagementService;->setUidOnMeteredNetworkList(IZZ)V
PLcom/android/server/NetworkScoreService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/NetworkScoreService$4;->getPackages(I)[Ljava/lang/String;
PLcom/android/server/NetworkScoreService$CurrentNetworkScoreCacheFilter;->apply(Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/NetworkScoreService$CurrentNetworkScoreCacheFilter;->apply(Ljava/util/List;)Ljava/util/List;
PLcom/android/server/NetworkScoreService$FilteringCacheUpdatingConsumer;->accept(Landroid/net/INetworkScoreCache;Ljava/lang/Object;)V
PLcom/android/server/NetworkScoreService$FilteringCacheUpdatingConsumer;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/NetworkScoreService$FilteringCacheUpdatingConsumer;->filterScores(Ljava/util/List;I)Ljava/util/List;
PLcom/android/server/NetworkScoreService$NetworkScorerPackageMonitor;->evaluateBinding(Ljava/lang/String;Z)V
PLcom/android/server/NetworkScoreService$NetworkScorerPackageMonitor;->onPackageAdded(Ljava/lang/String;I)V
PLcom/android/server/NetworkScoreService$NetworkScorerPackageMonitor;->onPackageModified(Ljava/lang/String;)V
PLcom/android/server/NetworkScoreService$NetworkScorerPackageMonitor;->onPackageUpdateFinished(Ljava/lang/String;I)V
PLcom/android/server/NetworkScoreService$ScanResultsScoreCacheFilter;-><init>(Ljava/util/function/Supplier;)V
PLcom/android/server/NetworkScoreService$ScanResultsScoreCacheFilter;->apply(Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/NetworkScoreService$ScanResultsScoreCacheFilter;->apply(Ljava/util/List;)Ljava/util/List;
PLcom/android/server/NetworkScoreService$ScanResultsSupplier;->get()Ljava/lang/Object;
PLcom/android/server/NetworkScoreService$ScanResultsSupplier;->get()Ljava/util/List;
PLcom/android/server/NetworkScoreService$ScoringServiceConnection;->bind(Landroid/content/Context;)V
PLcom/android/server/NetworkScoreService$ScoringServiceConnection;->getAppData()Landroid/net/NetworkScorerAppData;
PLcom/android/server/NetworkScoreService$ScoringServiceConnection;->getPackageName()Ljava/lang/String;
PLcom/android/server/NetworkScoreService$ScoringServiceConnection;->getRecommendationProvider()Landroid/net/INetworkRecommendationProvider;
PLcom/android/server/NetworkScoreService$ScoringServiceConnection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/NetworkScoreService$ScoringServiceConnection;->onServiceDisconnected(Landroid/content/ComponentName;)V
PLcom/android/server/NetworkScoreService$ScoringServiceConnection;->unbind(Landroid/content/Context;)V
PLcom/android/server/NetworkScoreService;->clearScores()Z
PLcom/android/server/NetworkScoreService;->getActiveScorer()Landroid/net/NetworkScorerAppData;
PLcom/android/server/NetworkScoreService;->getRecommendationProvider()Landroid/net/INetworkRecommendationProvider;
PLcom/android/server/NetworkScoreService;->isCallerActiveScorer(I)Z
PLcom/android/server/NetworkScoreService;->onUserUnlocked(I)V
PLcom/android/server/NetworkScoreService;->requestScores([Landroid/net/NetworkKey;)Z
PLcom/android/server/NetworkScoreService;->systemRunning()V
PLcom/android/server/NetworkScoreService;->unregisterNetworkScoreCache(ILandroid/net/INetworkScoreCache;)V
PLcom/android/server/NetworkScoreService;->updateScores([Landroid/net/ScoredNetwork;)Z
PLcom/android/server/NetworkScorerAppManager$SettingsFacade;->getSecureInt(Landroid/content/Context;Ljava/lang/String;I)I
PLcom/android/server/NetworkScorerAppManager;->canAccessLocation(ILjava/lang/String;)Z
PLcom/android/server/NetworkScorerAppManager;->findUseOpenWifiNetworksActivity(Landroid/content/pm/ServiceInfo;)Landroid/content/ComponentName;
PLcom/android/server/NetworkScorerAppManager;->getNetworkAvailableNotificationChannelId(Landroid/content/pm/ServiceInfo;)Ljava/lang/String;
PLcom/android/server/NewNetworkTimeUpdateService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/NewNetworkTimeUpdateService$MyHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/NewNetworkTimeUpdateService$NetworkTimeUpdateCallback;->onAvailable(Landroid/net/Network;)V
PLcom/android/server/NewNetworkTimeUpdateService$NetworkTimeUpdateCallback;->onLost(Landroid/net/Network;)V
PLcom/android/server/NewNetworkTimeUpdateService;->onPollNetworkTime(I)V
PLcom/android/server/NewNetworkTimeUpdateService;->onPollNetworkTimeUnderWakeLock(I)V
PLcom/android/server/NewNetworkTimeUpdateService;->updateSystemClock(I)V
PLcom/android/server/NsdService$ClientInfo;-><init>(Lcom/android/server/NsdService;Lcom/android/internal/util/AsyncChannel;Landroid/os/Messenger;)V
PLcom/android/server/NsdService$ClientInfo;->expungeAllRequests()V
PLcom/android/server/NsdService$DaemonConnection;->execute([Ljava/lang/Object;)Z
PLcom/android/server/NsdService$DaemonConnection;->start()V
PLcom/android/server/NsdService$DaemonConnection;->stop()V
PLcom/android/server/NsdService$NsdStateMachine$DefaultState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/NsdService$NsdStateMachine$EnabledState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/NsdService$NsdStateMachine$EnabledState;->requestLimitReached(Lcom/android/server/NsdService$ClientInfo;)Z
PLcom/android/server/NsdService;->getMessenger()Landroid/os/Messenger;
PLcom/android/server/PackageWatchdog;->lambda$onPackageFailure$0$PackageWatchdog(Ljava/util/List;)V
PLcom/android/server/PackageWatchdog;->lambda$onPackageFailure$0(Lcom/android/server/PackageWatchdog;Ljava/util/List;)V
PLcom/android/server/PackageWatchdog;->onPackageFailure(Ljava/util/List;)V
PLcom/android/server/PersistentDataBlockService$1;->getFlashLockState()I
PLcom/android/server/PersistentDataBlockService$1;->getMaximumDataBlockSize()J
PLcom/android/server/PersistentDataBlockService$1;->read()[B
PLcom/android/server/PersistentDataBlockService$1;->write([B)I
PLcom/android/server/PersistentDataBlockService;->enforceUid(I)V
PLcom/android/server/PinnerService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/PinnerService$PinnedFile;->finalize()V
PLcom/android/server/PinnerService;->onUnlockUser(I)V
PLcom/android/server/PinnerService;->safeMunmap(JJ)V
PLcom/android/server/PinnerService;->update(Landroid/util/ArraySet;Z)V
PLcom/android/server/PruneInstantAppsJobService;-><init>()V
PLcom/android/server/PruneInstantAppsJobService;->lambda$onStartJob$0$PruneInstantAppsJobService(Landroid/app/job/JobParameters;)V
PLcom/android/server/PruneInstantAppsJobService;->onStartJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/SensorNotificationService;->onLocationChanged(Landroid/location/Location;)V
PLcom/android/server/SensorNotificationService;->onProviderDisabled(Ljava/lang/String;)V
PLcom/android/server/ServiceWatcher$1;->onPackageAdded(Ljava/lang/String;I)V
PLcom/android/server/ServiceWatcher$1;->onPackageChanged(Ljava/lang/String;I[Ljava/lang/String;)Z
PLcom/android/server/ServiceWatcher$1;->onPackageUpdateFinished(Ljava/lang/String;I)V
PLcom/android/server/ServiceWatcher;->lambda$runOnBinderBlocking$2$ServiceWatcher(Ljava/lang/Object;Lcom/android/server/ServiceWatcher$BlockingBinderRunner;)Ljava/lang/Object;
PLcom/android/server/ServiceWatcher;->lambda$runOnBinderBlocking$2(Lcom/android/server/ServiceWatcher;Ljava/lang/Object;Lcom/android/server/ServiceWatcher$BlockingBinderRunner;)Ljava/lang/Object;
PLcom/android/server/ServiceWatcher;->onBind()V
PLcom/android/server/ServiceWatcher;->onServiceDisconnected(Landroid/content/ComponentName;)V
PLcom/android/server/ServiceWatcher;->onUnbind()V
PLcom/android/server/ServiceWatcher;->runOnBinderBlocking(Lcom/android/server/ServiceWatcher$BlockingBinderRunner;Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/ServiceWatcher;->runOnHandlerBlocking(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
PLcom/android/server/StorageManagerService$10;->onFinished(ILandroid/os/PersistableBundle;)V
PLcom/android/server/StorageManagerService$12;->opChanged(IILjava/lang/String;)V
PLcom/android/server/StorageManagerService$9;->onFinished(ILandroid/os/PersistableBundle;)V
PLcom/android/server/StorageManagerService$AppFuseMountScope;->close()V
PLcom/android/server/StorageManagerService$AppFuseMountScope;->open()Landroid/os/ParcelFileDescriptor;
PLcom/android/server/StorageManagerService$AppFuseMountScope;->openFile(III)Landroid/os/ParcelFileDescriptor;
PLcom/android/server/StorageManagerService$Lifecycle;->onCleanupUser(I)V
PLcom/android/server/StorageManagerService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/StorageManagerService$StorageManagerInternalImpl;->onExternalStoragePolicyChanged(ILjava/lang/String;)V
PLcom/android/server/StorageManagerService;->abortIdleMaint(Ljava/lang/Runnable;)V
PLcom/android/server/StorageManagerService;->adjustAllocateFlags(IILjava/lang/String;)I
PLcom/android/server/StorageManagerService;->allocateBytes(Ljava/lang/String;JILjava/lang/String;)V
PLcom/android/server/StorageManagerService;->clearPassword()V
PLcom/android/server/StorageManagerService;->commitChanges()V
PLcom/android/server/StorageManagerService;->getAllocatableBytes(Ljava/lang/String;ILjava/lang/String;)J
PLcom/android/server/StorageManagerService;->getCacheQuotaBytes(Ljava/lang/String;I)J
PLcom/android/server/StorageManagerService;->getCacheSizeBytes(Ljava/lang/String;I)J
PLcom/android/server/StorageManagerService;->getPassword()Ljava/lang/String;
PLcom/android/server/StorageManagerService;->getPrimaryStorageUuid()Ljava/lang/String;
PLcom/android/server/StorageManagerService;->isConvertibleToFBE()Z
PLcom/android/server/StorageManagerService;->lockUserKey(I)V
PLcom/android/server/StorageManagerService;->mountProxyFileDescriptorBridge()Lcom/android/internal/os/AppFuseMount;
PLcom/android/server/StorageManagerService;->onAwakeStateChanged(Z)V
PLcom/android/server/StorageManagerService;->onCleanupUser(I)V
PLcom/android/server/StorageManagerService;->onUnlockUser(I)V
PLcom/android/server/StorageManagerService;->openProxyFileDescriptor(III)Landroid/os/ParcelFileDescriptor;
PLcom/android/server/StorageManagerService;->prepareUserStorage(Ljava/lang/String;III)V
PLcom/android/server/StorageManagerService;->remountUidExternalStorage(II)V
PLcom/android/server/StorageManagerService;->runIdleMaint(Ljava/lang/Runnable;)V
PLcom/android/server/StorageManagerService;->sendUserStartedCallback(I)V
PLcom/android/server/StorageManagerService;->translateAppToSystem(Ljava/lang/String;II)Ljava/lang/String;
PLcom/android/server/StorageManagerService;->translateInternal(Ljava/lang/String;IIZ)Ljava/lang/String;
PLcom/android/server/StorageManagerService;->translateSystemToApp(Ljava/lang/String;II)Ljava/lang/String;
PLcom/android/server/StorageManagerService;->unlockUserKey(II[B[B)V
PLcom/android/server/SystemService;->onCleanupUser(I)V
PLcom/android/server/SystemService;->onStopUser(I)V
PLcom/android/server/SystemService;->onUnlockUser(I)V
PLcom/android/server/SystemServiceManager;->cleanupUser(I)V
PLcom/android/server/SystemServiceManager;->stopUser(I)V
PLcom/android/server/SystemServiceManager;->unlockUser(I)V
PLcom/android/server/SystemUpdateManagerService;->retrieveSystemUpdateInfo()Landroid/os/Bundle;
PLcom/android/server/SystemUpdateManagerService;->saveSystemUpdateInfoLocked(Landroid/os/PersistableBundle;I)V
PLcom/android/server/SystemUpdateManagerService;->updateSystemUpdateInfo(Landroid/os/PersistableBundle;)V
PLcom/android/server/SystemUpdateManagerService;->writeInfoFileLocked(Landroid/os/PersistableBundle;)Z
PLcom/android/server/TelephonyRegistry$Record;->canReadCallLog()Z
PLcom/android/server/TelephonyRegistry$Record;->matchOnSubscriptionsChangedListener()Z
PLcom/android/server/TelephonyRegistry$TelephonyRegistryDeathRecipient;->binderDied()V
PLcom/android/server/TelephonyRegistry;->addOnOpportunisticSubscriptionsChangedListener(Ljava/lang/String;Lcom/android/internal/telephony/IOnSubscriptionsChangedListener;)V
PLcom/android/server/TelephonyRegistry;->broadcastCallStateChanged(ILjava/lang/String;II)V
PLcom/android/server/TelephonyRegistry;->broadcastPreciseCallStateChanged(III)V
PLcom/android/server/TelephonyRegistry;->checkCoarseLocationAccess(Lcom/android/server/TelephonyRegistry$Record;I)Z
PLcom/android/server/TelephonyRegistry;->checkFineLocationAccess(Lcom/android/server/TelephonyRegistry$Record;I)Z
PLcom/android/server/TelephonyRegistry;->checkLocationAccess(Lcom/android/server/TelephonyRegistry$Record;)Z
PLcom/android/server/TelephonyRegistry;->checkPossibleMissNotify(Lcom/android/server/TelephonyRegistry$Record;I)V
PLcom/android/server/TelephonyRegistry;->lambda$checkCoarseLocationAccess$1$TelephonyRegistry(Landroid/telephony/LocationAccessPolicy$LocationPermissionQuery;)Ljava/lang/Boolean;
PLcom/android/server/TelephonyRegistry;->lambda$checkFineLocationAccess$0$TelephonyRegistry(Landroid/telephony/LocationAccessPolicy$LocationPermissionQuery;)Ljava/lang/Boolean;
PLcom/android/server/TelephonyRegistry;->notifyCallForwardingChangedForSubscriber(IZ)V
PLcom/android/server/TelephonyRegistry;->notifyCallQualityChanged(Landroid/telephony/CallQuality;I)V
PLcom/android/server/TelephonyRegistry;->notifyCallQualityChanged(Landroid/telephony/CallQuality;II)V
PLcom/android/server/TelephonyRegistry;->notifyCallState(ILjava/lang/String;)V
PLcom/android/server/TelephonyRegistry;->notifyCallStateForPhoneId(IIILjava/lang/String;)V
PLcom/android/server/TelephonyRegistry;->notifyCellInfoForSubscriber(ILjava/util/List;)V
PLcom/android/server/TelephonyRegistry;->notifyDataConnectionFailedForSubscriber(ILjava/lang/String;)V
PLcom/android/server/TelephonyRegistry;->notifyEmergencyNumberList()V
PLcom/android/server/TelephonyRegistry;->notifyImsDisconnectCause(ILandroid/telephony/ims/ImsReasonInfo;)V
PLcom/android/server/TelephonyRegistry;->notifyMessageWaitingChangedForPhoneId(IIZ)V
PLcom/android/server/TelephonyRegistry;->notifyPreciseCallState(IIII)V
PLcom/android/server/TelephonyRegistry;->notifyPreciseDataConnectionFailed(Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/TelephonyRegistry;->notifySimActivationStateChangedForPhoneId(IIII)V
PLcom/android/server/TelephonyRegistry;->notifySubscriptionInfoChanged()V
PLcom/android/server/TelephonyRegistry;->remove(Landroid/os/IBinder;)V
PLcom/android/server/TelephonyRegistry;->removeOnSubscriptionsChangedListener(Ljava/lang/String;Lcom/android/internal/telephony/IOnSubscriptionsChangedListener;)V
PLcom/android/server/TelephonyRegistry;->validateEventsAndUserLocked(Lcom/android/server/TelephonyRegistry$Record;I)Z
PLcom/android/server/UiModeManagerService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/UiModeManagerService$6;->disableCarMode(I)V
PLcom/android/server/UiModeManagerService$6;->enableCarMode(I)V
PLcom/android/server/UiModeManagerService$6;->getNightMode()I
PLcom/android/server/UiModeManagerService$6;->isNightModeLocked()Z
PLcom/android/server/UiModeManagerService$6;->isUiModeLocked()Z
PLcom/android/server/UiModeManagerService$6;->setNightMode(I)V
PLcom/android/server/UiModeManagerService$LocalService;->isNightMode()Z
PLcom/android/server/UiModeManagerService;->adjustStatusBarCarModeLocked()V
PLcom/android/server/UiModeManagerService;->lambda$onStart$0$UiModeManagerService(Landroid/os/PowerSaveState;)V
PLcom/android/server/UiModeManagerService;->setCarModeLocked(ZI)V
PLcom/android/server/UiModeManagerService;->shouldTransientNightWhenInCarMode()Z
PLcom/android/server/UiModeManagerService;->updateAfterBroadcastLocked(Ljava/lang/String;II)V
PLcom/android/server/VibratorService$2;->getServiceType()I
PLcom/android/server/VibratorService$2;->onLowPowerModeChanged(Landroid/os/PowerSaveState;)V
PLcom/android/server/VibratorService$4;->run()V
PLcom/android/server/VibratorService$5;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/VibratorService$VibrateThread;->cancel()V
PLcom/android/server/VibratorService$VibrateThread;->delayLocked(J)J
PLcom/android/server/VibratorService$VibrateThread;->playWaveform()Z
PLcom/android/server/VibratorService$VibrateThread;->run()V
PLcom/android/server/VibratorService$Vibration;-><init>(Lcom/android/server/VibratorService;Landroid/os/IBinder;Landroid/os/VibrationEffect;IILjava/lang/String;Ljava/lang/String;)V
PLcom/android/server/VibratorService$Vibration;->isFromSystem()Z
PLcom/android/server/VibratorService$Vibration;->isHapticFeedback()Z
PLcom/android/server/VibratorService$Vibration;->isNotification()Z
PLcom/android/server/VibratorService$Vibration;->isRingtone()Z
PLcom/android/server/VibratorService$VibrationInfo;-><init>(JLandroid/os/VibrationEffect;Landroid/os/VibrationEffect;IILjava/lang/String;Ljava/lang/String;)V
PLcom/android/server/VibratorService;->applyVibrationIntensityScalingLocked(Lcom/android/server/VibratorService$Vibration;I)V
PLcom/android/server/VibratorService;->cancelVibrate(Landroid/os/IBinder;)V
PLcom/android/server/VibratorService;->doCancelVibrateLocked()V
PLcom/android/server/VibratorService;->doVibratorOff()V
PLcom/android/server/VibratorService;->doVibratorOn(JIII)V
PLcom/android/server/VibratorService;->doVibratorPrebakedEffectLocked(Lcom/android/server/VibratorService$Vibration;)J
PLcom/android/server/VibratorService;->intensityToEffectStrength(I)I
PLcom/android/server/VibratorService;->linkVibration(Lcom/android/server/VibratorService$Vibration;)V
PLcom/android/server/VibratorService;->noteVibratorOffLocked()V
PLcom/android/server/VibratorService;->noteVibratorOnLocked(IJ)V
PLcom/android/server/VibratorService;->onVibrationFinished()V
PLcom/android/server/VibratorService;->reportFinishVibrationLocked()V
PLcom/android/server/VibratorService;->shouldVibrateForRingtone()Z
PLcom/android/server/VibratorService;->startVibrationInnerLocked(Lcom/android/server/VibratorService$Vibration;)V
PLcom/android/server/VibratorService;->startVibrationLocked(Lcom/android/server/VibratorService$Vibration;)V
PLcom/android/server/VibratorService;->verifyIncomingUid(I)V
PLcom/android/server/VibratorService;->verifyVibrationEffect(Landroid/os/VibrationEffect;)Z
PLcom/android/server/VibratorService;->vibrate(ILjava/lang/String;Landroid/os/VibrationEffect;ILjava/lang/String;Landroid/os/IBinder;)V
PLcom/android/server/Watchdog$HandlerChecker;->getCompletionStateLocked()I
PLcom/android/server/WiredAccessoryManager$WiredAccessoryExtconObserver;->init()V
PLcom/android/server/ZramWriteback$1;->run()V
PLcom/android/server/ZramWriteback;-><init>()V
PLcom/android/server/ZramWriteback;->flushIdlePages()V
PLcom/android/server/ZramWriteback;->getWrittenPageCount()I
PLcom/android/server/ZramWriteback;->isWritebackEnabled()Z
PLcom/android/server/ZramWriteback;->markAndFlushPages()V
PLcom/android/server/ZramWriteback;->markPagesAsIdle()V
PLcom/android/server/ZramWriteback;->onStartJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/ZramWriteback;->onStopJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/ZramWriteback;->schedNextWriteback(Landroid/content/Context;)V
PLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$Gu-W_dQ2mWyy8l4tm19TzFxGbeM;->accept(Ljava/lang/Object;)V
PLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$zXJtauhUptSkQJSF-M55-grAVbo;-><init>()V
PLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$zXJtauhUptSkQJSF-M55-grAVbo;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/accessibility/-$$Lambda$AccessibilityServiceConnection$ASP9bmSvpeD7ZE_uJ8sm-9hCwiU;-><init>()V
PLcom/android/server/accessibility/-$$Lambda$AccessibilityServiceConnection$ASP9bmSvpeD7ZE_uJ8sm-9hCwiU;->accept(Ljava/lang/Object;)V
PLcom/android/server/accessibility/-$$Lambda$X-d4PICw0vnPU2BuBjOCbMMfcgU;-><init>()V
PLcom/android/server/accessibility/-$$Lambda$X-d4PICw0vnPU2BuBjOCbMMfcgU;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/accessibility/-$$Lambda$X8i00nfnUx_qUoIgZixkfu6ddSY;-><init>()V
PLcom/android/server/accessibility/-$$Lambda$X8i00nfnUx_qUoIgZixkfu6ddSY;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection$1;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;-><init>(Landroid/content/Context;Landroid/content/ComponentName;Landroid/accessibilityservice/AccessibilityServiceInfo;ILandroid/os/Handler;Ljava/lang/Object;Lcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;Lcom/android/server/accessibility/AbstractAccessibilityServiceConnection$SystemSupport;Lcom/android/server/wm/WindowManagerInternal;Lcom/android/server/accessibility/GlobalActionPerformer;)V
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;->canReceiveEventsLocked()Z
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;->findAccessibilityNodeInfoByAccessibilityId(IJILandroid/view/accessibility/IAccessibilityInteractionConnectionCallback;IJLandroid/os/Bundle;)[Ljava/lang/String;
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;->findAccessibilityNodeInfosByViewId(IJLjava/lang/String;ILandroid/view/accessibility/IAccessibilityInteractionConnectionCallback;J)[Ljava/lang/String;
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;->getCapabilities()I
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;->getComponentName()Landroid/content/ComponentName;
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;->getRelevantEventTypes()I
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;->notifyAccessibilityEvent(Landroid/view/accessibility/AccessibilityEvent;)V
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;->notifyAccessibilityEventInternal(ILandroid/view/accessibility/AccessibilityEvent;Z)V
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;->onAdded()V
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;->resolveAccessibilityWindowIdLocked(I)I
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;->setDynamicallyConfigurableProperties(Landroid/accessibilityservice/AccessibilityServiceInfo;)V
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;->setServiceInfo(Landroid/accessibilityservice/AccessibilityServiceInfo;)V
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;->supportsFlagForNotImportantViews(Landroid/accessibilityservice/AccessibilityServiceInfo;)Z
PLcom/android/server/accessibility/AbstractAccessibilityServiceConnection;->wantsEventLocked(Landroid/view/accessibility/AccessibilityEvent;)Z
PLcom/android/server/accessibility/AccessibilityManagerService$1;->onPackageUpdateFinished(Ljava/lang/String;I)V
PLcom/android/server/accessibility/AccessibilityManagerService$AccessibilityDisplayListener;->onDisplayAdded(I)V
PLcom/android/server/accessibility/AccessibilityManagerService$AccessibilityDisplayListener;->onDisplayRemoved(I)V
PLcom/android/server/accessibility/AccessibilityManagerService$InteractionBridge$1;-><init>(Lcom/android/server/accessibility/AccessibilityManagerService$InteractionBridge;Lcom/android/server/accessibility/AccessibilityManagerService$UserState;Landroid/content/Context;Landroid/content/ComponentName;Landroid/accessibilityservice/AccessibilityServiceInfo;ILandroid/os/Handler;Ljava/lang/Object;Lcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;Lcom/android/server/accessibility/AbstractAccessibilityServiceConnection$SystemSupport;Lcom/android/server/wm/WindowManagerInternal;Lcom/android/server/accessibility/GlobalActionPerformer;Lcom/android/server/accessibility/AccessibilityManagerService;)V
PLcom/android/server/accessibility/AccessibilityManagerService$InteractionBridge$1;->supportsFlagForNotImportantViews(Landroid/accessibilityservice/AccessibilityServiceInfo;)Z
PLcom/android/server/accessibility/AccessibilityManagerService$InteractionBridge;-><init>(Lcom/android/server/accessibility/AccessibilityManagerService;)V
PLcom/android/server/accessibility/AccessibilityManagerService$InteractionBridge;->clearAccessibilityFocusNotLocked(I)V
PLcom/android/server/accessibility/AccessibilityManagerService$RemoteAccessibilityConnection;->binderDied()V
PLcom/android/server/accessibility/AccessibilityManagerService$RemoteAccessibilityConnection;->getPackageName()Ljava/lang/String;
PLcom/android/server/accessibility/AccessibilityManagerService$RemoteAccessibilityConnection;->getRemote()Landroid/view/accessibility/IAccessibilityInteractionConnection;
PLcom/android/server/accessibility/AccessibilityManagerService$RemoteAccessibilityConnection;->getUid()I
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->canCaptureFingerprintGestures(Lcom/android/server/accessibility/AccessibilityServiceConnection;)Z
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->canControlMagnification(Lcom/android/server/accessibility/AbstractAccessibilityServiceConnection;)Z
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->canDispatchAccessibilityEventLocked(Landroid/view/accessibility/AccessibilityEvent;)Z
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->canGetAccessibilityNodeInfoLocked(Lcom/android/server/accessibility/AbstractAccessibilityServiceConnection;I)Z
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->canRetrieveWindowContentLocked(Lcom/android/server/accessibility/AbstractAccessibilityServiceConnection;)Z
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->checkAccessibilityAccess(Lcom/android/server/accessibility/AbstractAccessibilityServiceConnection;)Z
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->computePartialInteractiveRegionForWindowLocked(ILandroid/graphics/Region;)Z
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->computeValidReportedPackages(Ljava/lang/String;I)[Ljava/lang/String;
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->findA11yWindowInfoById(I)Landroid/view/accessibility/AccessibilityWindowInfo;
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->getActiveWindowId()I
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->getFocusedWindowId()I
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->isRetrievalAllowingWindowLocked(I)Z
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->isValidPackageForUid(Ljava/lang/String;I)Z
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->resolveValidReportedPackageLocked(Ljava/lang/CharSequence;II)Ljava/lang/String;
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->sendEventsForChangedWindowsLocked(Ljava/util/List;Landroid/util/SparseArray;)V
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->setAccessibilityFocusedWindowLocked(I)V
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->updateActiveAndAccessibilityFocusedWindowLocked(IJII)V
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->updateEventSourceLocked(Landroid/view/accessibility/AccessibilityEvent;)V
PLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->updateWindowsLocked(Ljava/util/List;)V
PLcom/android/server/accessibility/AccessibilityManagerService$UserState;->addServiceLocked(Lcom/android/server/accessibility/AccessibilityServiceConnection;)V
PLcom/android/server/accessibility/AccessibilityManagerService$UserState;->getBindingServicesLocked()Ljava/util/Set;
PLcom/android/server/accessibility/AccessibilityManagerService$WindowsForAccessibilityCallback;->getTypeForWindowManagerWindowType(I)I
PLcom/android/server/accessibility/AccessibilityManagerService$WindowsForAccessibilityCallback;->onWindowsForAccessibilityChanged(Ljava/util/List;)V
PLcom/android/server/accessibility/AccessibilityManagerService$WindowsForAccessibilityCallback;->populateReportedWindowLocked(Landroid/view/WindowInfo;)Landroid/view/accessibility/AccessibilityWindowInfo;
PLcom/android/server/accessibility/AccessibilityManagerService;->addAccessibilityInteractionConnection(Landroid/view/IWindow;Landroid/view/accessibility/IAccessibilityInteractionConnection;Ljava/lang/String;I)I
PLcom/android/server/accessibility/AccessibilityManagerService;->announceNewUserIfNeeded()V
PLcom/android/server/accessibility/AccessibilityManagerService;->canRequestAndRequestsTouchExplorationLocked(Lcom/android/server/accessibility/AccessibilityServiceConnection;Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)Z
PLcom/android/server/accessibility/AccessibilityManagerService;->clearAccessibilityFocus(I)V
PLcom/android/server/accessibility/AccessibilityManagerService;->clearAccessibilityFocus(Ljava/util/function/IntSupplier;)V
PLcom/android/server/accessibility/AccessibilityManagerService;->findWindowIdLocked(Landroid/os/IBinder;)I
PLcom/android/server/accessibility/AccessibilityManagerService;->getCompatibleMagnificationSpecLocked(I)Landroid/view/MagnificationSpec;
PLcom/android/server/accessibility/AccessibilityManagerService;->getConnectionLocked(I)Lcom/android/server/accessibility/AccessibilityManagerService$RemoteAccessibilityConnection;
PLcom/android/server/accessibility/AccessibilityManagerService;->getCurrentUserIdLocked()I
PLcom/android/server/accessibility/AccessibilityManagerService;->getInstalledAccessibilityServiceList(I)Ljava/util/List;
PLcom/android/server/accessibility/AccessibilityManagerService;->getInteractionBridge()Lcom/android/server/accessibility/AccessibilityManagerService$InteractionBridge;
PLcom/android/server/accessibility/AccessibilityManagerService;->getPendingIntentActivity(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;
PLcom/android/server/accessibility/AccessibilityManagerService;->notifyAccessibilityServicesDelayedLocked(Landroid/view/accessibility/AccessibilityEvent;Z)V
PLcom/android/server/accessibility/AccessibilityManagerService;->onClientChangeLocked(Z)V
PLcom/android/server/accessibility/AccessibilityManagerService;->removeAccessibilityInteractionConnection(Landroid/view/IWindow;)V
PLcom/android/server/accessibility/AccessibilityManagerService;->removeAccessibilityInteractionConnectionInternalLocked(Landroid/os/IBinder;Landroid/util/SparseArray;Landroid/util/SparseArray;)I
PLcom/android/server/accessibility/AccessibilityManagerService;->replaceCallbackIfNeeded(Landroid/view/accessibility/IAccessibilityInteractionConnectionCallback;IIIJ)Landroid/view/accessibility/IAccessibilityInteractionConnectionCallback;
PLcom/android/server/accessibility/AccessibilityManagerService;->sendAccessibilityEvent(Landroid/view/accessibility/AccessibilityEvent;I)V
PLcom/android/server/accessibility/AccessibilityManagerService;->sendFingerprintGesture(I)Z
PLcom/android/server/accessibility/AccessibilityManagerService;->unlockUser(I)V
PLcom/android/server/accessibility/AccessibilityServiceConnection;-><init>(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;Landroid/content/Context;Landroid/content/ComponentName;Landroid/accessibilityservice/AccessibilityServiceInfo;ILandroid/os/Handler;Ljava/lang/Object;Lcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;Lcom/android/server/accessibility/AbstractAccessibilityServiceConnection$SystemSupport;Lcom/android/server/wm/WindowManagerInternal;Lcom/android/server/accessibility/GlobalActionPerformer;)V
PLcom/android/server/accessibility/AccessibilityServiceConnection;->bindLocked()V
PLcom/android/server/accessibility/AccessibilityServiceConnection;->canRetrieveInteractiveWindowsLocked()Z
PLcom/android/server/accessibility/AccessibilityServiceConnection;->getServiceInfo()Landroid/accessibilityservice/AccessibilityServiceInfo;
PLcom/android/server/accessibility/AccessibilityServiceConnection;->initializeService()V
PLcom/android/server/accessibility/AccessibilityServiceConnection;->isCalledForCurrentUserLocked()Z
PLcom/android/server/accessibility/AccessibilityServiceConnection;->isCapturingFingerprintGestures()Z
PLcom/android/server/accessibility/AccessibilityServiceConnection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/accessibility/UiAutomationManager;->sendAccessibilityEventLocked(Landroid/view/accessibility/AccessibilityEvent;)V
PLcom/android/server/accounts/-$$Lambda$AccountManagerService$c6GExIY3Vh2fORdBziuAPJbExac;->onPermissionsChanged(I)V
PLcom/android/server/accounts/-$$Lambda$AccountManagerService$lqbNdAUKUSipmpqby9oIO8JlNTQ;->run()V
PLcom/android/server/accounts/-$$Lambda$AccountManagerService$nCdu9dc3c8qBwJIwS0ZQk2waXfY;->run()V
PLcom/android/server/accounts/-$$Lambda$AccountManagerService$ncg6hlXg7I0Ee1EZqbXw8fQH9bY;->run()V
PLcom/android/server/accounts/AccountAuthenticatorCache$MySerializer;->writeAsXml(Landroid/accounts/AuthenticatorDescription;Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/accounts/AccountAuthenticatorCache$MySerializer;->writeAsXml(Ljava/lang/Object;Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/accounts/AccountAuthenticatorCache;->getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo;
PLcom/android/server/accounts/AccountManagerBackupHelper;->backupAccountAccessPermissions(I)[B
PLcom/android/server/accounts/AccountManagerService$1$1;->run()V
PLcom/android/server/accounts/AccountManagerService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/accounts/AccountManagerService$1LogRecordTask;->run()V
PLcom/android/server/accounts/AccountManagerService$3;->onPackageAdded(Ljava/lang/String;I)V
PLcom/android/server/accounts/AccountManagerService$3;->onPackageUpdateFinished(Ljava/lang/String;I)V
PLcom/android/server/accounts/AccountManagerService$4;->onOpChanged(ILjava/lang/String;)V
PLcom/android/server/accounts/AccountManagerService$8;-><init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLandroid/os/Bundle;Landroid/accounts/Account;Ljava/lang/String;ZZIZLjava/lang/String;[BLcom/android/server/accounts/AccountManagerService$UserAccounts;)V
PLcom/android/server/accounts/AccountManagerService$8;->onResult(Landroid/os/Bundle;)V
PLcom/android/server/accounts/AccountManagerService$8;->run()V
PLcom/android/server/accounts/AccountManagerService$AccountManagerInternalImpl;->backupAccountAccessPermissions(I)[B
PLcom/android/server/accounts/AccountManagerService$AccountManagerInternalImpl;->hasAccountAccess(Landroid/accounts/Account;I)Z
PLcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession;-><init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;ILjava/lang/String;Z)V
PLcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession;->checkAccount()V
PLcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession;->onResult(Landroid/os/Bundle;)V
PLcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession;->run()V
PLcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession;->sendResult()V
PLcom/android/server/accounts/AccountManagerService$Injector;->getCeDatabaseName(I)Ljava/lang/String;
PLcom/android/server/accounts/AccountManagerService$Injector;->getNotificationManager()Landroid/app/INotificationManager;
PLcom/android/server/accounts/AccountManagerService$Lifecycle;->onStopUser(I)V
PLcom/android/server/accounts/AccountManagerService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/accounts/AccountManagerService$RemoveAccountSession;->onResult(Landroid/os/Bundle;)V
PLcom/android/server/accounts/AccountManagerService$RemoveAccountSession;->run()V
PLcom/android/server/accounts/AccountManagerService$Session;-><init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;Z)V
PLcom/android/server/accounts/AccountManagerService$Session;-><init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZ)V
PLcom/android/server/accounts/AccountManagerService$Session;->bind()V
PLcom/android/server/accounts/AccountManagerService$Session;->bindToAuthenticator(Ljava/lang/String;)Z
PLcom/android/server/accounts/AccountManagerService$Session;->cancelTimeout()V
PLcom/android/server/accounts/AccountManagerService$Session;->checkKeyIntent(ILandroid/content/Intent;)Z
PLcom/android/server/accounts/AccountManagerService$Session;->close()V
PLcom/android/server/accounts/AccountManagerService$Session;->getResponseAndClose()Landroid/accounts/IAccountManagerResponse;
PLcom/android/server/accounts/AccountManagerService$Session;->isExportedSystemActivity(Landroid/content/pm/ActivityInfo;)Z
PLcom/android/server/accounts/AccountManagerService$Session;->onResult(Landroid/os/Bundle;)V
PLcom/android/server/accounts/AccountManagerService$Session;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/accounts/AccountManagerService$TestFeaturesSession;->onResult(Landroid/os/Bundle;)V
PLcom/android/server/accounts/AccountManagerService$TestFeaturesSession;->run()V
PLcom/android/server/accounts/AccountManagerService$UserAccounts;->access$800(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I
PLcom/android/server/accounts/AccountManagerService;->accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z
PLcom/android/server/accounts/AccountManagerService;->accountTypeManagesContacts(Ljava/lang/String;I)Z
PLcom/android/server/accounts/AccountManagerService;->addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)Z
PLcom/android/server/accounts/AccountManagerService;->addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;)Z
PLcom/android/server/accounts/AccountManagerService;->addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;)Z
PLcom/android/server/accounts/AccountManagerService;->addAccountToLinkedRestrictedUsers(Landroid/accounts/Account;I)V
PLcom/android/server/accounts/AccountManagerService;->calculatePackageSignatureDigest(Ljava/lang/String;)[B
PLcom/android/server/accounts/AccountManagerService;->canUserModifyAccounts(II)Z
PLcom/android/server/accounts/AccountManagerService;->canUserModifyAccountsForType(ILjava/lang/String;I)Z
PLcom/android/server/accounts/AccountManagerService;->cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Ljava/lang/String;Landroid/os/UserHandle;)V
PLcom/android/server/accounts/AccountManagerService;->checkPackageSignature(Ljava/lang/String;II)I
PLcom/android/server/accounts/AccountManagerService;->checkReadAccountsPermitted(ILjava/lang/String;ILjava/lang/String;)V
PLcom/android/server/accounts/AccountManagerService;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/accounts/AccountManagerService;->dumpUser(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;Z)V
PLcom/android/server/accounts/AccountManagerService;->getAccountRemovedReceivers(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/List;
PLcom/android/server/accounts/AccountManagerService;->getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I
PLcom/android/server/accounts/AccountManagerService;->getAccountVisibilityFromCache(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I
PLcom/android/server/accounts/AccountManagerService;->getAccounts(ILjava/lang/String;)[Landroid/accounts/Account;
PLcom/android/server/accounts/AccountManagerService;->getAccounts(Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;
PLcom/android/server/accounts/AccountManagerService;->getAccounts([I)[Landroid/accounts/AccountAndUser;
PLcom/android/server/accounts/AccountManagerService;->getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/accounts/AccountManagerService;->getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;
PLcom/android/server/accounts/AccountManagerService;->getAllAccounts()[Landroid/accounts/AccountAndUser;
PLcom/android/server/accounts/AccountManagerService;->getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V
PLcom/android/server/accounts/AccountManagerService;->getAuthenticatorTypes(I)[Landroid/accounts/AuthenticatorDescription;
PLcom/android/server/accounts/AccountManagerService;->getAuthenticatorTypesInternal(I)[Landroid/accounts/AuthenticatorDescription;
PLcom/android/server/accounts/AccountManagerService;->getCredentialPermissionNotificationId(Landroid/accounts/Account;Ljava/lang/String;I)Lcom/android/server/accounts/AccountManagerService$NotificationId;
PLcom/android/server/accounts/AccountManagerService;->getPackageNameForUid(I)Ljava/lang/String;
PLcom/android/server/accounts/AccountManagerService;->getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map;
PLcom/android/server/accounts/AccountManagerService;->getPassword(Landroid/accounts/Account;)Ljava/lang/String;
PLcom/android/server/accounts/AccountManagerService;->getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;
PLcom/android/server/accounts/AccountManagerService;->getRequestingPackages(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map;
PLcom/android/server/accounts/AccountManagerService;->getRunningAccounts()[Landroid/accounts/AccountAndUser;
PLcom/android/server/accounts/AccountManagerService;->getSharedAccountsAsUser(I)[Landroid/accounts/Account;
PLcom/android/server/accounts/AccountManagerService;->getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId;
PLcom/android/server/accounts/AccountManagerService;->getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/accounts/AccountManagerService;->grantAppPermission(Landroid/accounts/Account;Ljava/lang/String;I)V
PLcom/android/server/accounts/AccountManagerService;->handleIncomingUser(I)I
PLcom/android/server/accounts/AccountManagerService;->hasAccountAccess(Landroid/accounts/Account;Ljava/lang/String;I)Z
PLcom/android/server/accounts/AccountManagerService;->hasAccountAccess(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/UserHandle;)Z
PLcom/android/server/accounts/AccountManagerService;->hasExplicitlyGrantedPermission(Landroid/accounts/Account;Ljava/lang/String;I)Z
PLcom/android/server/accounts/AccountManagerService;->hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/accounts/AccountManagerService;->insertAccountIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Landroid/accounts/Account;
PLcom/android/server/accounts/AccountManagerService;->invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/accounts/AccountManagerService;->invalidateAuthTokenLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
PLcom/android/server/accounts/AccountManagerService;->isPermittedForPackage(Ljava/lang/String;II[Ljava/lang/String;)Z
PLcom/android/server/accounts/AccountManagerService;->isPreOApplication(Ljava/lang/String;)Z
PLcom/android/server/accounts/AccountManagerService;->isPrivileged(I)Z
PLcom/android/server/accounts/AccountManagerService;->lambda$new$0$AccountManagerService(I)V
PLcom/android/server/accounts/AccountManagerService;->lambda$new$0(Lcom/android/server/accounts/AccountManagerService;I)V
PLcom/android/server/accounts/AccountManagerService;->lambda$onUnlockUser$1$AccountManagerService(I)V
PLcom/android/server/accounts/AccountManagerService;->logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V
PLcom/android/server/accounts/AccountManagerService;->onAccountAccessed(Ljava/lang/String;)V
PLcom/android/server/accounts/AccountManagerService;->onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V
PLcom/android/server/accounts/AccountManagerService;->onServiceChanged(Landroid/accounts/AuthenticatorDescription;IZ)V
PLcom/android/server/accounts/AccountManagerService;->onServiceChanged(Ljava/lang/Object;IZ)V
PLcom/android/server/accounts/AccountManagerService;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
PLcom/android/server/accounts/AccountManagerService;->onUnlockUser(I)V
PLcom/android/server/accounts/AccountManagerService;->peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/accounts/AccountManagerService;->permissionIsGranted(Landroid/accounts/Account;Ljava/lang/String;II)Z
PLcom/android/server/accounts/AccountManagerService;->purgeOldGrantsAll()V
PLcom/android/server/accounts/AccountManagerService;->purgeUserData(I)V
PLcom/android/server/accounts/AccountManagerService;->readAuthTokenInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/accounts/AccountManagerService;->readCachedTokenInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;[B)Ljava/lang/String;
PLcom/android/server/accounts/AccountManagerService;->readPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String;
PLcom/android/server/accounts/AccountManagerService;->readPreviousNameInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String;
PLcom/android/server/accounts/AccountManagerService;->readUserDataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/accounts/AccountManagerService;->registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/accounts/AccountManagerService;->registerAccountListener([Ljava/lang/String;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V
PLcom/android/server/accounts/AccountManagerService;->removeAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Z)V
PLcom/android/server/accounts/AccountManagerService;->removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V
PLcom/android/server/accounts/AccountManagerService;->removeAccountFromCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)V
PLcom/android/server/accounts/AccountManagerService;->removeAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;I)Z
PLcom/android/server/accounts/AccountManagerService;->removeVisibilityValuesForPackage(Ljava/lang/String;)V
PLcom/android/server/accounts/AccountManagerService;->saveAuthTokenToDatabase(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/accounts/AccountManagerService;->saveCachedToken(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;[BLjava/lang/String;Ljava/lang/String;J)V
PLcom/android/server/accounts/AccountManagerService;->sendAccountRemovedBroadcast(Landroid/accounts/Account;Ljava/lang/String;I)V
PLcom/android/server/accounts/AccountManagerService;->sendAccountsChangedBroadcast(I)V
PLcom/android/server/accounts/AccountManagerService;->sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V
PLcom/android/server/accounts/AccountManagerService;->setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/accounts/AccountManagerService;->setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/accounts/AccountManagerService;->setUserdataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/accounts/AccountManagerService;->syncDeCeAccountsLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V
PLcom/android/server/accounts/AccountManagerService;->syncSharedAccounts(I)V
PLcom/android/server/accounts/AccountManagerService;->unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/accounts/AccountManagerService;->unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V
PLcom/android/server/accounts/AccountManagerService;->updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V
PLcom/android/server/accounts/AccountManagerService;->validateAccounts(I)V
PLcom/android/server/accounts/AccountManagerService;->writeAuthTokenIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/accounts/AccountManagerService;->writeUserDataIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/accounts/AccountsDb$CeDatabaseHelper;->create(Landroid/content/Context;Ljava/io/File;Ljava/io/File;)Lcom/android/server/accounts/AccountsDb$CeDatabaseHelper;
PLcom/android/server/accounts/AccountsDb$CeDatabaseHelper;->onOpen(Landroid/database/sqlite/SQLiteDatabase;)V
PLcom/android/server/accounts/AccountsDb$DeDatabaseHelper;->getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase;
PLcom/android/server/accounts/AccountsDb$DeDatabaseHelper;->getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase;
PLcom/android/server/accounts/AccountsDb;->attachCeDatabase(Ljava/io/File;)V
PLcom/android/server/accounts/AccountsDb;->beginTransaction()V
PLcom/android/server/accounts/AccountsDb;->calculateDebugTableInsertionPoint()J
PLcom/android/server/accounts/AccountsDb;->close()V
PLcom/android/server/accounts/AccountsDb;->closeDebugStatement()V
PLcom/android/server/accounts/AccountsDb;->compileSqlStatementForLogging()Landroid/database/sqlite/SQLiteStatement;
PLcom/android/server/accounts/AccountsDb;->deleteAuthToken(Ljava/lang/String;)Z
PLcom/android/server/accounts/AccountsDb;->deleteAuthtokensByAccountIdAndType(JLjava/lang/String;)Z
PLcom/android/server/accounts/AccountsDb;->deleteCeAccount(J)Z
PLcom/android/server/accounts/AccountsDb;->deleteDeAccount(J)Z
PLcom/android/server/accounts/AccountsDb;->dumpDeAccountsTable(Ljava/io/PrintWriter;)V
PLcom/android/server/accounts/AccountsDb;->endTransaction()V
PLcom/android/server/accounts/AccountsDb;->findAccountPasswordByNameAndType(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/accounts/AccountsDb;->findAllAccountGrants()Ljava/util/List;
PLcom/android/server/accounts/AccountsDb;->findAuthTokensByAccount(Landroid/accounts/Account;)Ljava/util/Map;
PLcom/android/server/accounts/AccountsDb;->findAuthtokenForAllAccounts(Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
PLcom/android/server/accounts/AccountsDb;->findCeAccountId(Landroid/accounts/Account;)J
PLcom/android/server/accounts/AccountsDb;->findCeAccountsNotInDe()Ljava/util/List;
PLcom/android/server/accounts/AccountsDb;->findDeAccountId(Landroid/accounts/Account;)J
PLcom/android/server/accounts/AccountsDb;->findDeAccountPreviousName(Landroid/accounts/Account;)Ljava/lang/String;
PLcom/android/server/accounts/AccountsDb;->findExtrasIdByAccountId(JLjava/lang/String;)J
PLcom/android/server/accounts/AccountsDb;->findMatchingGrantsCountAnyToken(ILandroid/accounts/Account;)J
PLcom/android/server/accounts/AccountsDb;->findUserExtrasForAccount(Landroid/accounts/Account;)Ljava/util/Map;
PLcom/android/server/accounts/AccountsDb;->getSharedAccounts()Ljava/util/List;
PLcom/android/server/accounts/AccountsDb;->getStatementForLogging()Landroid/database/sqlite/SQLiteStatement;
PLcom/android/server/accounts/AccountsDb;->insertAuthToken(JLjava/lang/String;Ljava/lang/String;)J
PLcom/android/server/accounts/AccountsDb;->insertCeAccount(Landroid/accounts/Account;Ljava/lang/String;)J
PLcom/android/server/accounts/AccountsDb;->insertDeAccount(Landroid/accounts/Account;J)J
PLcom/android/server/accounts/AccountsDb;->insertExtra(JLjava/lang/String;Ljava/lang/String;)J
PLcom/android/server/accounts/AccountsDb;->insertGrant(JLjava/lang/String;I)J
PLcom/android/server/accounts/AccountsDb;->insertOrReplaceMetaAuthTypeAndUid(Ljava/lang/String;I)J
PLcom/android/server/accounts/AccountsDb;->reserveDebugDbInsertionPoint()J
PLcom/android/server/accounts/AccountsDb;->setTransactionSuccessful()V
PLcom/android/server/accounts/AccountsDb;->updateExtra(JLjava/lang/String;)Z
PLcom/android/server/accounts/TokenCache$Key;->equals(Ljava/lang/Object;)Z
PLcom/android/server/accounts/TokenCache$Key;->hashCode()I
PLcom/android/server/accounts/TokenCache$TokenLruCache$Evictor;->add(Lcom/android/server/accounts/TokenCache$Key;)V
PLcom/android/server/accounts/TokenCache$TokenLruCache$Evictor;->evict()V
PLcom/android/server/accounts/TokenCache$TokenLruCache;->entryRemoved(ZLcom/android/server/accounts/TokenCache$Key;Lcom/android/server/accounts/TokenCache$Value;Lcom/android/server/accounts/TokenCache$Value;)V
PLcom/android/server/accounts/TokenCache$TokenLruCache;->entryRemoved(ZLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/accounts/TokenCache$TokenLruCache;->evict(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/accounts/TokenCache$TokenLruCache;->putToken(Lcom/android/server/accounts/TokenCache$Key;Lcom/android/server/accounts/TokenCache$Value;)V
PLcom/android/server/accounts/TokenCache$TokenLruCache;->sizeOf(Lcom/android/server/accounts/TokenCache$Key;Lcom/android/server/accounts/TokenCache$Value;)I
PLcom/android/server/accounts/TokenCache$TokenLruCache;->sizeOf(Ljava/lang/Object;Ljava/lang/Object;)I
PLcom/android/server/accounts/TokenCache;->get(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;[B)Ljava/lang/String;
PLcom/android/server/accounts/TokenCache;->put(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[BJ)V
PLcom/android/server/accounts/TokenCache;->remove(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/adb/AdbDebuggingManager$AdbDebuggingHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/adb/AdbDebuggingManager$AdbDebuggingThread;->closeSocketLocked()V
PLcom/android/server/adb/AdbDebuggingManager$AdbDebuggingThread;->listenToSocket()V
PLcom/android/server/adb/AdbDebuggingManager$AdbDebuggingThread;->openSocketLocked()V
PLcom/android/server/adb/AdbDebuggingManager$AdbDebuggingThread;->run()V
PLcom/android/server/adb/AdbDebuggingManager;->getAdbTempKeysFile()Ljava/io/File;
PLcom/android/server/adb/AdbDebuggingManager;->setAdbEnabled(Z)V
PLcom/android/server/adb/AdbService$AdbHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/adb/AdbService;->bootCompleted()V
PLcom/android/server/am/-$$Lambda$ActiveServices$97uxZ3dWwvVNFn6w-f_UMeMUNcs;-><init>(Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ServiceRecord;)V
PLcom/android/server/am/-$$Lambda$ActiveServices$97uxZ3dWwvVNFn6w-f_UMeMUNcs;->run()V
PLcom/android/server/am/-$$Lambda$ActivityManagerService$3$poTyYzHinA8s8lAJ-y6Bb3JsBNo;-><init>()V
PLcom/android/server/am/-$$Lambda$ActivityManagerService$3$poTyYzHinA8s8lAJ-y6Bb3JsBNo;->needed(Lcom/android/internal/os/ProcessCpuTracker$Stats;)Z
PLcom/android/server/am/-$$Lambda$ActivityManagerService$LocalService$2LeEPdXnhP_I5Tz5a2OSkhUL0oc;->accept(Ljava/lang/Object;)V
PLcom/android/server/am/-$$Lambda$ActivityManagerService$Z3G4KWA2tlTOhqhFtAvVby1SjyQ;->accept(Ljava/lang/Object;)V
PLcom/android/server/am/-$$Lambda$BroadcastQueue$UYhESkevIwvEc0Mcevy6z7vfzgY;->run()V
PLcom/android/server/am/-$$Lambda$BroadcastQueue$thwmo_4kN7le1xsy6iCxQvtXbB8;->run()V
PLcom/android/server/am/-$$Lambda$HKoBBTwYfMTyX1rzuzxIXu0s2cc;-><init>()V
PLcom/android/server/am/-$$Lambda$PendingIntentController$pDmmJDvS20vSAAXh9qdzbN0P8N0;-><init>()V
PLcom/android/server/am/-$$Lambda$PendingIntentController$pDmmJDvS20vSAAXh9qdzbN0P8N0;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/am/-$$Lambda$PendingIntentController$sPmaborOkBSSEP2wiimxXw-eYDQ;-><init>()V
PLcom/android/server/am/-$$Lambda$PendingIntentController$sPmaborOkBSSEP2wiimxXw-eYDQ;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/am/-$$Lambda$PersistentConnection$rkvbuN0FQdQUv1hqSwDvmwwh6Uk;->run()V
PLcom/android/server/am/-$$Lambda$ProcessRecord$1qn6-pj5yWgiSnKANZpVz3gwd30;-><init>(Lcom/android/server/am/ProcessRecord;)V
PLcom/android/server/am/-$$Lambda$ProcessRecord$2DImTokd0AWNTECl3WgBxJkOOqs;-><init>(Lcom/android/server/am/ProcessRecord;)V
PLcom/android/server/am/-$$Lambda$ProcessRecord$Cb3MKja7_iTlaFQrvQTzPvLyoT8;-><init>(Lcom/android/server/am/ProcessRecord;)V
PLcom/android/server/am/-$$Lambda$SettingsToPropertiesMapper$Rzo06OjarvWLxZlB1l32KTp3emA;->onPropertyChanged(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/am/-$$Lambda$UserController$4$P3Sj7pxBXLC7k_puCIIki2uVgGE;->run()V
PLcom/android/server/am/-$$Lambda$UserController$H8axiHUqxiRcO9vLZzFeTEGfxxg;->run()V
PLcom/android/server/am/-$$Lambda$UserController$Injector$MYTLl7MOQKjyMJknWdxPeBLoPCc;->run()V
PLcom/android/server/am/-$$Lambda$UserController$K71HFCIuD0iCwrDTKYnIUDyAeWg;-><init>(Lcom/android/server/am/UserController;Lcom/android/server/am/UserState;)V
PLcom/android/server/am/-$$Lambda$UserController$K71HFCIuD0iCwrDTKYnIUDyAeWg;->run()V
PLcom/android/server/am/-$$Lambda$UserController$O8GIT-HtdCM0CCjYajdW2AFcrWQ;->run()V
PLcom/android/server/am/-$$Lambda$UserController$po8Tw8x_WDTtEiHYm0TQVgSw3pg;->run()V
PLcom/android/server/am/-$$Lambda$UserController$qRaFvFpU0fG-BFv-EOAM55wngno;->run()V
PLcom/android/server/am/-$$Lambda$UserController$stQk1028ON105v_u-VMykVjcxLk;->run()V
PLcom/android/server/am/-$$Lambda$Y_KRxxoOXfy-YceuDG7WHd46Y_I;-><init>()V
PLcom/android/server/am/-$$Lambda$yk1Ms9fVlF6PvprMwF2rru-dw4Q;-><init>()V
PLcom/android/server/am/-$$Lambda$yk1Ms9fVlF6PvprMwF2rru-dw4Q;->applyAsLong(Ljava/lang/Object;)J
PLcom/android/server/am/ActiveServices$ServiceMap;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/am/ActiveServices$ServiceMap;->rescheduleDelayedStartsLocked()V
PLcom/android/server/am/ActiveServices$ServiceRestarter;->run()V
PLcom/android/server/am/ActiveServices$ServiceRestarter;->setService(Lcom/android/server/am/ServiceRecord;)V
PLcom/android/server/am/ActiveServices;->appRestrictedAnyInBackground(ILjava/lang/String;)Z
PLcom/android/server/am/ActiveServices;->bringDownServiceLocked(Lcom/android/server/am/ServiceRecord;)V
PLcom/android/server/am/ActiveServices;->cancelForegroundNotificationLocked(Lcom/android/server/am/ServiceRecord;)V
PLcom/android/server/am/ActiveServices;->cleanUpServices(ILandroid/content/ComponentName;Landroid/content/Intent;)V
PLcom/android/server/am/ActiveServices;->clearRestartingIfNeededLocked(Lcom/android/server/am/ServiceRecord;)V
PLcom/android/server/am/ActiveServices;->decActiveForegroundAppLocked(Lcom/android/server/am/ActiveServices$ServiceMap;Lcom/android/server/am/ServiceRecord;)V
PLcom/android/server/am/ActiveServices;->dumpService(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;Ljava/lang/String;[Ljava/lang/String;IZ)Z
PLcom/android/server/am/ActiveServices;->dumpService(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;Lcom/android/server/am/ServiceRecord;[Ljava/lang/String;Z)V
PLcom/android/server/am/ActiveServices;->foregroundAppShownEnoughLocked(Lcom/android/server/am/ActiveServices$ActiveForegroundApp;J)Z
PLcom/android/server/am/ActiveServices;->foregroundServiceProcStateChangedLocked(Lcom/android/server/am/UidRecord;)V
PLcom/android/server/am/ActiveServices;->getRunningServiceInfoLocked(IIIZZ)Ljava/util/List;
PLcom/android/server/am/ActiveServices;->makeRunningServiceInfoLocked(Lcom/android/server/am/ServiceRecord;)Landroid/app/ActivityManager$RunningServiceInfo;
PLcom/android/server/am/ActiveServices;->performServiceRestartLocked(Lcom/android/server/am/ServiceRecord;)V
PLcom/android/server/am/ActiveServices;->processStartTimedOutLocked(Lcom/android/server/am/ProcessRecord;)V
PLcom/android/server/am/ActiveServices;->removeAllowBackgroundActivityStartsServiceToken(Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ServiceRecord;I)V
PLcom/android/server/am/ActiveServices;->removeConnectionLocked(Lcom/android/server/am/ConnectionRecord;Lcom/android/server/am/ProcessRecord;Lcom/android/server/wm/ActivityServiceConnectionsHolder;)V
PLcom/android/server/am/ActiveServices;->requestUpdateActiveForegroundAppsLocked(Lcom/android/server/am/ActiveServices$ServiceMap;J)V
PLcom/android/server/am/ActiveServices;->scheduleServiceForegroundTransitionTimeoutLocked(Lcom/android/server/am/ServiceRecord;)V
PLcom/android/server/am/ActiveServices;->scheduleServiceRestartLocked(Lcom/android/server/am/ServiceRecord;Z)Z
PLcom/android/server/am/ActiveServices;->serviceProcessGoneLocked(Lcom/android/server/am/ServiceRecord;)V
PLcom/android/server/am/ActiveServices;->serviceTimeout(Lcom/android/server/am/ProcessRecord;)V
PLcom/android/server/am/ActiveServices;->setServiceForegroundInnerLocked(Lcom/android/server/am/ServiceRecord;ILandroid/app/Notification;II)V
PLcom/android/server/am/ActiveServices;->setServiceForegroundLocked(Landroid/content/ComponentName;Landroid/os/IBinder;ILandroid/app/Notification;II)V
PLcom/android/server/am/ActiveServices;->stopServiceLocked(Landroid/app/IApplicationThread;Landroid/content/Intent;Ljava/lang/String;I)I
PLcom/android/server/am/ActiveServices;->stopServiceLocked(Lcom/android/server/am/ServiceRecord;)V
PLcom/android/server/am/ActiveServices;->stopServiceTokenLocked(Landroid/content/ComponentName;Landroid/os/IBinder;I)Z
PLcom/android/server/am/ActiveServices;->unbindFinishedLocked(Lcom/android/server/am/ServiceRecord;Landroid/content/Intent;Z)V
PLcom/android/server/am/ActiveServices;->unbindServiceLocked(Landroid/app/IServiceConnection;)Z
PLcom/android/server/am/ActiveServices;->updateForegroundApps(Lcom/android/server/am/ActiveServices$ServiceMap;)V
PLcom/android/server/am/ActiveServices;->updateScreenStateLocked(Z)V
PLcom/android/server/am/ActiveServices;->updateServiceApplicationInfoLocked(Landroid/content/pm/ApplicationInfo;)V
PLcom/android/server/am/ActivityManagerConstants$1;->onPropertyChanged(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/am/ActivityManagerConstants;->onChange(ZLandroid/net/Uri;)V
PLcom/android/server/am/ActivityManagerService$10;->performReceive(Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;ZZI)V
PLcom/android/server/am/ActivityManagerService$1;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;Z)V
PLcom/android/server/am/ActivityManagerService$3;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/am/ActivityManagerService$ImportanceToken;->toString()Ljava/lang/String;
PLcom/android/server/am/ActivityManagerService$Lifecycle;->onCleanupUser(I)V
PLcom/android/server/am/ActivityManagerService$LocalService;->broadcastCloseSystemDialogs(Ljava/lang/String;)V
PLcom/android/server/am/ActivityManagerService$LocalService;->broadcastIntentInPackage(Ljava/lang/String;IIILandroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;Ljava/lang/String;Landroid/os/Bundle;ZZIZ)I
PLcom/android/server/am/ActivityManagerService$LocalService;->cleanUpServices(ILandroid/content/ComponentName;Landroid/content/Intent;)V
PLcom/android/server/am/ActivityManagerService$LocalService;->disconnectActivityFromServices(Ljava/lang/Object;)V
PLcom/android/server/am/ActivityManagerService$LocalService;->ensureNotSpecialUser(I)V
PLcom/android/server/am/ActivityManagerService$LocalService;->getActivityInfoForUser(Landroid/content/pm/ActivityInfo;I)Landroid/content/pm/ActivityInfo;
PLcom/android/server/am/ActivityManagerService$LocalService;->getActivityPresentationInfo(Landroid/os/IBinder;)Landroid/content/pm/ActivityPresentationInfo;
PLcom/android/server/am/ActivityManagerService$LocalService;->getMemoryHighWaterMarkForProcesses()Ljava/util/List;
PLcom/android/server/am/ActivityManagerService$LocalService;->getMemoryStateForProcesses()Ljava/util/List;
PLcom/android/server/am/ActivityManagerService$LocalService;->getStorageMountMode(II)I
PLcom/android/server/am/ActivityManagerService$LocalService;->getTaskIdForActivity(Landroid/os/IBinder;Z)I
PLcom/android/server/am/ActivityManagerService$LocalService;->handleIncomingUser(IIIZILjava/lang/String;Ljava/lang/String;)I
PLcom/android/server/am/ActivityManagerService$LocalService;->isActivityStartsLoggingEnabled()Z
PLcom/android/server/am/ActivityManagerService$LocalService;->isAppForeground(I)Z
PLcom/android/server/am/ActivityManagerService$LocalService;->isBackgroundActivityStartsEnabled()Z
PLcom/android/server/am/ActivityManagerService$LocalService;->isCurrentProfile(I)Z
PLcom/android/server/am/ActivityManagerService$LocalService;->killForegroundAppsForUser(I)V
PLcom/android/server/am/ActivityManagerService$LocalService;->killProcessesForRemovedTask(Ljava/util/ArrayList;)V
PLcom/android/server/am/ActivityManagerService$LocalService;->onWakefulnessChanged(I)V
PLcom/android/server/am/ActivityManagerService$LocalService;->sendForegroundProfileChanged(I)V
PLcom/android/server/am/ActivityManagerService$LocalService;->setHasOverlayUi(IZ)V
PLcom/android/server/am/ActivityManagerService$LocalService;->setPendingIntentAllowBgActivityStarts(Landroid/content/IIntentSender;Landroid/os/IBinder;I)V
PLcom/android/server/am/ActivityManagerService$LocalService;->setPendingIntentWhitelistDuration(Landroid/content/IIntentSender;Landroid/os/IBinder;J)V
PLcom/android/server/am/ActivityManagerService$LocalService;->setRunningRemoteAnimation(IZ)V
PLcom/android/server/am/ActivityManagerService$LocalService;->startServiceInPackage(ILandroid/content/Intent;Ljava/lang/String;ZLjava/lang/String;IZ)Landroid/content/ComponentName;
PLcom/android/server/am/ActivityManagerService$LocalService;->tempWhitelistForPendingIntent(IIIJLjava/lang/String;)V
PLcom/android/server/am/ActivityManagerService$LocalService;->updateDeviceIdleTempWhitelist([IIZ)V
PLcom/android/server/am/ActivityManagerService$PidMap;->indexOfKey(I)I
PLcom/android/server/am/ActivityManagerService$PidMap;->removeIfNoThread(I)Z
PLcom/android/server/am/ActivityManagerService$ProcStatsRunnable;-><init>(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessStatsService;)V
PLcom/android/server/am/ActivityManagerService$ProcStatsRunnable;->run()V
PLcom/android/server/am/ActivityManagerService$ProcessInfoService;->getProcessStatesAndOomScoresFromPids([I[I[I)V
PLcom/android/server/am/ActivityManagerService;->access$400(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessRecord;)V
PLcom/android/server/am/ActivityManagerService;->appDiedLocked(Lcom/android/server/am/ProcessRecord;)V
PLcom/android/server/am/ActivityManagerService;->backgroundServicesFinishedLocked(I)V
PLcom/android/server/am/ActivityManagerService;->backupAgentCreated(Ljava/lang/String;Landroid/os/IBinder;I)V
PLcom/android/server/am/ActivityManagerService;->bindBackupAgent(Ljava/lang/String;II)Z
PLcom/android/server/am/ActivityManagerService;->bootAnimationComplete()V
PLcom/android/server/am/ActivityManagerService;->broadcastIntentInPackage(Ljava/lang/String;IIILandroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;Ljava/lang/String;Landroid/os/Bundle;ZZIZ)I
PLcom/android/server/am/ActivityManagerService;->canGcNowLocked()Z
PLcom/android/server/am/ActivityManagerService;->cancelIntentSender(Landroid/content/IIntentSender;)V
PLcom/android/server/am/ActivityManagerService;->checkExcessivePowerUsageLocked()V
PLcom/android/server/am/ActivityManagerService;->checkPermissionWithToken(Ljava/lang/String;IILandroid/os/IBinder;)I
PLcom/android/server/am/ActivityManagerService;->cleanupDisabledPackageComponentsLocked(Ljava/lang/String;I[Ljava/lang/String;)V
PLcom/android/server/am/ActivityManagerService;->closeSystemDialogs(Ljava/lang/String;)V
PLcom/android/server/am/ActivityManagerService;->createAnrDumpFile(Ljava/io/File;)Ljava/io/File;
PLcom/android/server/am/ActivityManagerService;->doDump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;Z)V
PLcom/android/server/am/ActivityManagerService;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/am/ActivityManagerService;->dumpBroadcastStatsCheckinLocked(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;IZLjava/lang/String;)V
PLcom/android/server/am/ActivityManagerService;->dumpProviderProto(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;Ljava/lang/String;[Ljava/lang/String;)Z
PLcom/android/server/am/ActivityManagerService;->dumpStackTraces(Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V
PLcom/android/server/am/ActivityManagerService;->dumpStackTraces(Ljava/util/ArrayList;Lcom/android/internal/os/ProcessCpuTracker;Landroid/util/SparseArray;Ljava/util/ArrayList;)Ljava/io/File;
PLcom/android/server/am/ActivityManagerService;->enforcePermission(Ljava/lang/String;IILjava/lang/String;)V
PLcom/android/server/am/ActivityManagerService;->ensureBootCompleted()V
PLcom/android/server/am/ActivityManagerService;->getActivityInfoForUser(Landroid/content/pm/ActivityInfo;I)Landroid/content/pm/ActivityInfo;
PLcom/android/server/am/ActivityManagerService;->getAppId(Ljava/lang/String;)I
PLcom/android/server/am/ActivityManagerService;->getAppInfoForUser(Landroid/content/pm/ApplicationInfo;I)Landroid/content/pm/ApplicationInfo;
PLcom/android/server/am/ActivityManagerService;->getConfiguration()Landroid/content/res/Configuration;
PLcom/android/server/am/ActivityManagerService;->getIntentForIntentSender(Landroid/content/IIntentSender;)Landroid/content/Intent;
PLcom/android/server/am/ActivityManagerService;->getLaunchedFromUid(Landroid/os/IBinder;)I
PLcom/android/server/am/ActivityManagerService;->getMyMemoryState(Landroid/app/ActivityManager$RunningAppProcessInfo;)V
PLcom/android/server/am/ActivityManagerService;->getProcessStatesAndOomScoresForPIDs([I[I[I)V
PLcom/android/server/am/ActivityManagerService;->getProcessesInErrorState()Ljava/util/List;
PLcom/android/server/am/ActivityManagerService;->getProviderInfoLocked(Ljava/lang/String;II)Landroid/content/pm/ProviderInfo;
PLcom/android/server/am/ActivityManagerService;->getProviderMimeType(Landroid/net/Uri;I)Ljava/lang/String;
PLcom/android/server/am/ActivityManagerService;->getServices(II)Ljava/util/List;
PLcom/android/server/am/ActivityManagerService;->getTaskForActivity(Landroid/os/IBinder;Z)I
PLcom/android/server/am/ActivityManagerService;->getUidProcessState(ILjava/lang/String;)I
PLcom/android/server/am/ActivityManagerService;->grantUriPermission(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/net/Uri;II)V
PLcom/android/server/am/ActivityManagerService;->handleApplicationCrash(Landroid/os/IBinder;Landroid/app/ApplicationErrorReport$ParcelableCrashInfo;)V
PLcom/android/server/am/ActivityManagerService;->handleApplicationCrashInner(Ljava/lang/String;Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/app/ApplicationErrorReport$CrashInfo;)V
PLcom/android/server/am/ActivityManagerService;->idleUids()V
PLcom/android/server/am/ActivityManagerService;->installEncryptionUnawareProviders(I)V
PLcom/android/server/am/ActivityManagerService;->isAppForeground(I)Z
PLcom/android/server/am/ActivityManagerService;->isBackgroundRestricted(Ljava/lang/String;)Z
PLcom/android/server/am/ActivityManagerService;->isBackgroundRestrictedNoCheck(ILjava/lang/String;)Z
PLcom/android/server/am/ActivityManagerService;->isIntentSenderTargetedToPackage(Landroid/content/IIntentSender;)Z
PLcom/android/server/am/ActivityManagerService;->isOnDeviceIdleWhitelistLocked(IZ)Z
PLcom/android/server/am/ActivityManagerService;->isUserAMonkey()Z
PLcom/android/server/am/ActivityManagerService;->isValidSingletonCall(II)Z
PLcom/android/server/am/ActivityManagerService;->killApplicationProcess(Ljava/lang/String;I)V
PLcom/android/server/am/ActivityManagerService;->killBackgroundProcesses(Ljava/lang/String;I)V
PLcom/android/server/am/ActivityManagerService;->killUid(IILjava/lang/String;)V
PLcom/android/server/am/ActivityManagerService;->lambda$systemReady$1$ActivityManagerService(Landroid/os/PowerSaveState;)V
PLcom/android/server/am/ActivityManagerService;->maybePruneOldTraces(Ljava/io/File;)V
PLcom/android/server/am/ActivityManagerService;->onShellCommand(Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;[Ljava/lang/String;Landroid/os/ShellCallback;Landroid/os/ResultReceiver;)V
PLcom/android/server/am/ActivityManagerService;->onWakefulnessChanged(I)V
PLcom/android/server/am/ActivityManagerService;->openContentUri(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;
PLcom/android/server/am/ActivityManagerService;->performAppGcLocked(Lcom/android/server/am/ProcessRecord;)V
PLcom/android/server/am/ActivityManagerService;->performAppGcsLocked()V
PLcom/android/server/am/ActivityManagerService;->performIdleMaintenance()V
PLcom/android/server/am/ActivityManagerService;->processStartTimedOutLocked(Lcom/android/server/am/ProcessRecord;)V
PLcom/android/server/am/ActivityManagerService;->pushTempWhitelist()V
PLcom/android/server/am/ActivityManagerService;->recordPssSampleLocked(Lcom/android/server/am/ProcessRecord;IJJJJIJJ)V
PLcom/android/server/am/ActivityManagerService;->refContentProvider(Landroid/os/IBinder;II)Z
PLcom/android/server/am/ActivityManagerService;->registerIntentSenderCancelListener(Landroid/content/IIntentSender;Lcom/android/internal/os/IResultReceiver;)V
PLcom/android/server/am/ActivityManagerService;->registerProcessObserver(Landroid/app/IProcessObserver;)V
PLcom/android/server/am/ActivityManagerService;->removeContentProviderExternalUnchecked(Ljava/lang/String;Landroid/os/IBinder;I)V
PLcom/android/server/am/ActivityManagerService;->removeDyingProviderLocked(Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ContentProviderRecord;Z)Z
PLcom/android/server/am/ActivityManagerService;->removeReceiverLocked(Lcom/android/server/am/ReceiverList;)V
PLcom/android/server/am/ActivityManagerService;->requestPssLocked(Lcom/android/server/am/ProcessRecord;I)Z
PLcom/android/server/am/ActivityManagerService;->requestTargetProviderPermissionsReviewIfNeededLocked(Landroid/content/pm/ProviderInfo;Lcom/android/server/am/ProcessRecord;I)Z
PLcom/android/server/am/ActivityManagerService;->requireAllowedAssociationsLocked(Ljava/lang/String;)V
PLcom/android/server/am/ActivityManagerService;->resumeAppSwitches()V
PLcom/android/server/am/ActivityManagerService;->revokeUriPermission(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/net/Uri;II)V
PLcom/android/server/am/ActivityManagerService;->setHasTopUi(Z)V
PLcom/android/server/am/ActivityManagerService;->setProcessImportant(Landroid/os/IBinder;IZLjava/lang/String;)V
PLcom/android/server/am/ActivityManagerService;->setRunningRemoteAnimation(IZ)V
PLcom/android/server/am/ActivityManagerService;->setServiceForeground(Landroid/content/ComponentName;Landroid/os/IBinder;ILandroid/app/Notification;II)V
PLcom/android/server/am/ActivityManagerService;->skipPendingBroadcastLocked(I)V
PLcom/android/server/am/ActivityManagerService;->stopAppSwitches()V
PLcom/android/server/am/ActivityManagerService;->stopService(Landroid/app/IApplicationThread;Landroid/content/Intent;Ljava/lang/String;I)I
PLcom/android/server/am/ActivityManagerService;->stopServiceToken(Landroid/content/ComponentName;Landroid/os/IBinder;I)Z
PLcom/android/server/am/ActivityManagerService;->stopUser(IZLandroid/app/IStopUserCallback;)I
PLcom/android/server/am/ActivityManagerService;->tempWhitelistForPendingIntentLocked(IIIJLjava/lang/String;)V
PLcom/android/server/am/ActivityManagerService;->tempWhitelistUidLocked(IJLjava/lang/String;)V
PLcom/android/server/am/ActivityManagerService;->unbindBackupAgent(Landroid/content/pm/ApplicationInfo;)V
PLcom/android/server/am/ActivityManagerService;->unbindFinished(Landroid/os/IBinder;Landroid/content/Intent;Z)V
PLcom/android/server/am/ActivityManagerService;->unbindService(Landroid/app/IServiceConnection;)Z
PLcom/android/server/am/ActivityManagerService;->unlockUser(I[B[BLandroid/os/IProgressListener;)Z
PLcom/android/server/am/ActivityManagerService;->unregisterIntentSenderCancelListener(Landroid/content/IIntentSender;Lcom/android/internal/os/IResultReceiver;)V
PLcom/android/server/am/ActivityManagerService;->unregisterReceiver(Landroid/content/IIntentReceiver;)V
PLcom/android/server/am/ActivityManagerService;->unregisterTaskStackListener(Landroid/app/ITaskStackListener;)V
PLcom/android/server/am/ActivityManagerService;->unregisterUserSwitchObserver(Landroid/app/IUserSwitchObserver;)V
PLcom/android/server/am/ActivityManagerService;->unstableProviderDied(Landroid/os/IBinder;)V
PLcom/android/server/am/ActivityManagerService;->updateAssociationForApp(Landroid/content/pm/ApplicationInfo;)V
PLcom/android/server/am/ActivityManagerService;->updateConfiguration(Landroid/content/res/Configuration;)Z
PLcom/android/server/am/ActivityManagerService;->updateForegroundServiceUsageStats(Landroid/content/ComponentName;IZ)V
PLcom/android/server/am/ActivityManagerService;->waitForNetworkStateUpdate(J)V
PLcom/android/server/am/ActivityManagerShellCommand;->makeIntent(I)Landroid/content/Intent;
PLcom/android/server/am/ActivityManagerShellCommand;->onCommand(Ljava/lang/String;)I
PLcom/android/server/am/ActivityManagerShellCommand;->runStartService(Ljava/io/PrintWriter;Z)I
PLcom/android/server/am/AppCompactor$1;->onPropertyChanged(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/am/AppErrorResult;->get()I
PLcom/android/server/am/AppErrorResult;->set(I)V
PLcom/android/server/am/AppErrors;->crashApplication(Lcom/android/server/am/ProcessRecord;Landroid/app/ApplicationErrorReport$CrashInfo;)V
PLcom/android/server/am/AppErrors;->crashApplicationInner(Lcom/android/server/am/ProcessRecord;Landroid/app/ApplicationErrorReport$CrashInfo;II)V
PLcom/android/server/am/AppErrors;->generateProcessError(Lcom/android/server/am/ProcessRecord;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/app/ActivityManager$ProcessErrorStateInfo;
PLcom/android/server/am/AppErrors;->handleAppCrashInActivityController(Lcom/android/server/am/ProcessRecord;Landroid/app/ApplicationErrorReport$CrashInfo;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JII)Z
PLcom/android/server/am/AppErrors;->handleAppCrashLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/android/server/am/AppErrorDialog$Data;)Z
PLcom/android/server/am/AppErrors;->handleShowAppErrorUi(Landroid/os/Message;)V
PLcom/android/server/am/AppErrors;->makeAppCrashingLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/android/server/am/AppErrorDialog$Data;)Z
PLcom/android/server/am/AssistDataRequester$AssistDataRequesterCallbacks;->onAssistRequestCompleted()V
PLcom/android/server/am/AssistDataRequester;->cancel()V
PLcom/android/server/am/AssistDataRequester;->dispatchAssistDataReceived(Landroid/os/Bundle;)V
PLcom/android/server/am/AssistDataRequester;->flushPendingAssistData()V
PLcom/android/server/am/AssistDataRequester;->getPendingDataCount()I
PLcom/android/server/am/AssistDataRequester;->getPendingScreenshotCount()I
PLcom/android/server/am/AssistDataRequester;->onHandleAssistData(Landroid/os/Bundle;)V
PLcom/android/server/am/AssistDataRequester;->onHandleAssistScreenshot(Landroid/graphics/Bitmap;)V
PLcom/android/server/am/AssistDataRequester;->processPendingAssistData()V
PLcom/android/server/am/AssistDataRequester;->requestAssistData(Ljava/util/List;ZZZZILjava/lang/String;)V
PLcom/android/server/am/AssistDataRequester;->requestAutofillData(Ljava/util/List;ILjava/lang/String;)V
PLcom/android/server/am/AssistDataRequester;->requestData(Ljava/util/List;ZZZZZILjava/lang/String;)V
PLcom/android/server/am/BatteryExternalStatsWorker;->extractDeltaLocked(Landroid/net/wifi/WifiActivityEnergyInfo;)Landroid/net/wifi/WifiActivityEnergyInfo;
PLcom/android/server/am/BatteryExternalStatsWorker;->getLastCollectionTimeStamp()J
PLcom/android/server/am/BatteryExternalStatsWorker;->scheduleSyncDueToBatteryLevelChange(J)Ljava/util/concurrent/Future;
PLcom/android/server/am/BatteryStatsService$LocalService;->getMobileIfaces()[Ljava/lang/String;
PLcom/android/server/am/BatteryStatsService$LocalService;->noteJobsDeferred(IIJ)V
PLcom/android/server/am/BatteryStatsService;->awaitUninterruptibly(Ljava/util/concurrent/Future;)V
PLcom/android/server/am/BatteryStatsService;->computeChargeTimeRemaining()J
PLcom/android/server/am/BatteryStatsService;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/am/BatteryStatsService;->dumpHelp(Ljava/io/PrintWriter;)V
PLcom/android/server/am/BatteryStatsService;->getCellularBatteryStats()Landroid/os/connectivity/CellularBatteryStats;
PLcom/android/server/am/BatteryStatsService;->getGpsBatteryStats()Landroid/os/connectivity/GpsBatteryStats;
PLcom/android/server/am/BatteryStatsService;->getHealthStatsForUidLocked(I)Landroid/os/health/HealthStatsParceler;
PLcom/android/server/am/BatteryStatsService;->getServiceType()I
PLcom/android/server/am/BatteryStatsService;->getStatistics()[B
PLcom/android/server/am/BatteryStatsService;->getStatisticsStream()Landroid/os/ParcelFileDescriptor;
PLcom/android/server/am/BatteryStatsService;->getWifiBatteryStats()Landroid/os/connectivity/WifiBatteryStats;
PLcom/android/server/am/BatteryStatsService;->noteBleScanResults(Landroid/os/WorkSource;I)V
PLcom/android/server/am/BatteryStatsService;->noteBleScanStarted(Landroid/os/WorkSource;Z)V
PLcom/android/server/am/BatteryStatsService;->noteBleScanStopped(Landroid/os/WorkSource;Z)V
PLcom/android/server/am/BatteryStatsService;->noteChangeWakelockFromSource(Landroid/os/WorkSource;ILjava/lang/String;Ljava/lang/String;ILandroid/os/WorkSource;ILjava/lang/String;Ljava/lang/String;IZ)V
PLcom/android/server/am/BatteryStatsService;->noteConnectivityChanged(ILjava/lang/String;)V
PLcom/android/server/am/BatteryStatsService;->noteDeviceIdleMode(ILjava/lang/String;I)V
PLcom/android/server/am/BatteryStatsService;->noteFullWifiLockAcquiredFromSource(Landroid/os/WorkSource;)V
PLcom/android/server/am/BatteryStatsService;->noteFullWifiLockReleasedFromSource(Landroid/os/WorkSource;)V
PLcom/android/server/am/BatteryStatsService;->noteGpsChanged(Landroid/os/WorkSource;Landroid/os/WorkSource;)V
PLcom/android/server/am/BatteryStatsService;->noteGpsSignalQuality(I)V
PLcom/android/server/am/BatteryStatsService;->noteJobFinish(Ljava/lang/String;II)V
PLcom/android/server/am/BatteryStatsService;->noteJobStart(Ljava/lang/String;I)V
PLcom/android/server/am/BatteryStatsService;->noteJobsDeferred(IIJ)V
PLcom/android/server/am/BatteryStatsService;->noteLongPartialWakelockFinish(Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/am/BatteryStatsService;->noteLongPartialWakelockFinishFromSource(Ljava/lang/String;Ljava/lang/String;Landroid/os/WorkSource;)V
PLcom/android/server/am/BatteryStatsService;->noteLongPartialWakelockStart(Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/am/BatteryStatsService;->noteLongPartialWakelockStartFromSource(Ljava/lang/String;Ljava/lang/String;Landroid/os/WorkSource;)V
PLcom/android/server/am/BatteryStatsService;->noteMobileRadioPowerState(IJI)V
PLcom/android/server/am/BatteryStatsService;->noteNetworkInterfaceType(Ljava/lang/String;I)V
PLcom/android/server/am/BatteryStatsService;->notePackageInstalled(Ljava/lang/String;J)V
PLcom/android/server/am/BatteryStatsService;->notePhoneDataConnectionState(IZ)V
PLcom/android/server/am/BatteryStatsService;->notePhoneOff()V
PLcom/android/server/am/BatteryStatsService;->notePhoneOn()V
PLcom/android/server/am/BatteryStatsService;->noteProcessAnr(Ljava/lang/String;I)V
PLcom/android/server/am/BatteryStatsService;->noteProcessCrash(Ljava/lang/String;I)V
PLcom/android/server/am/BatteryStatsService;->noteStartAudio(I)V
PLcom/android/server/am/BatteryStatsService;->noteStartCamera(I)V
PLcom/android/server/am/BatteryStatsService;->noteStartVideo(I)V
PLcom/android/server/am/BatteryStatsService;->noteStopAudio(I)V
PLcom/android/server/am/BatteryStatsService;->noteStopCamera(I)V
PLcom/android/server/am/BatteryStatsService;->noteStopSensor(II)V
PLcom/android/server/am/BatteryStatsService;->noteStopVideo(I)V
PLcom/android/server/am/BatteryStatsService;->noteSyncFinish(Ljava/lang/String;I)V
PLcom/android/server/am/BatteryStatsService;->noteSyncStart(Ljava/lang/String;I)V
PLcom/android/server/am/BatteryStatsService;->noteUserActivity(II)V
PLcom/android/server/am/BatteryStatsService;->noteVibratorOff(I)V
PLcom/android/server/am/BatteryStatsService;->noteVibratorOn(IJ)V
PLcom/android/server/am/BatteryStatsService;->noteWakeUp(Ljava/lang/String;I)V
PLcom/android/server/am/BatteryStatsService;->noteWifiMulticastDisabled(I)V
PLcom/android/server/am/BatteryStatsService;->noteWifiMulticastEnabled(I)V
PLcom/android/server/am/BatteryStatsService;->noteWifiRadioPowerState(IJI)V
PLcom/android/server/am/BatteryStatsService;->noteWifiRssiChanged(I)V
PLcom/android/server/am/BatteryStatsService;->noteWifiRunning(Landroid/os/WorkSource;)V
PLcom/android/server/am/BatteryStatsService;->noteWifiScanStartedFromSource(Landroid/os/WorkSource;)V
PLcom/android/server/am/BatteryStatsService;->noteWifiScanStoppedFromSource(Landroid/os/WorkSource;)V
PLcom/android/server/am/BatteryStatsService;->noteWifiStopped(Landroid/os/WorkSource;)V
PLcom/android/server/am/BatteryStatsService;->noteWifiSupplicantStateChanged(IZ)V
PLcom/android/server/am/BatteryStatsService;->onCleanupUser(I)V
PLcom/android/server/am/BatteryStatsService;->onLowPowerModeChanged(Landroid/os/PowerSaveState;)V
PLcom/android/server/am/BatteryStatsService;->syncStats(Ljava/lang/String;I)V
PLcom/android/server/am/BatteryStatsService;->takeUidSnapshot(I)Landroid/os/health/HealthStatsParceler;
PLcom/android/server/am/BroadcastDispatcher$2;->run()V
PLcom/android/server/am/BroadcastDispatcher$Deferrals;->add(Lcom/android/server/am/BroadcastRecord;)V
PLcom/android/server/am/BroadcastDispatcher$Deferrals;->size()I
PLcom/android/server/am/BroadcastDispatcher;->addDeferredBroadcast(ILcom/android/server/am/BroadcastRecord;)V
PLcom/android/server/am/BroadcastDispatcher;->isEmpty()Z
PLcom/android/server/am/BroadcastDispatcher;->startDeferring(I)V
PLcom/android/server/am/BroadcastFilter;->toString()Ljava/lang/String;
PLcom/android/server/am/BroadcastQueue$AppNotResponding;->run()V
PLcom/android/server/am/BroadcastQueue;->backgroundServicesFinishedLocked(I)V
PLcom/android/server/am/BroadcastQueue;->broadcastTimeoutLocked(Z)V
PLcom/android/server/am/BroadcastQueue;->logBroadcastReceiverDiscardLocked(Lcom/android/server/am/BroadcastRecord;)V
PLcom/android/server/am/BroadcastQueue;->nextSplitTokenLocked()I
PLcom/android/server/am/BroadcastQueue;->scheduleTempWhitelistLocked(IJLcom/android/server/am/BroadcastRecord;)V
PLcom/android/server/am/BroadcastRecord;->cleanupDisabledPackageReceiversLocked(Ljava/lang/String;Ljava/util/Set;IZ)Z
PLcom/android/server/am/BroadcastRecord;->splitRecipientsLocked(II)Lcom/android/server/am/BroadcastRecord;
PLcom/android/server/am/BroadcastStats;->dumpCheckinStats(Ljava/io/PrintWriter;Ljava/lang/String;)V
PLcom/android/server/am/ContentProviderConnection;->trackProcState(IIJ)V
PLcom/android/server/am/ContentProviderRecord;->addExternalProcessHandleLocked(Landroid/os/IBinder;ILjava/lang/String;)V
PLcom/android/server/am/ContentProviderRecord;->getComponentName()Landroid/content/ComponentName;
PLcom/android/server/am/ContentProviderRecord;->removeExternalProcessHandleLocked(Landroid/os/IBinder;)Z
PLcom/android/server/am/CoreSettingsObserver;->onChange(Z)V
PLcom/android/server/am/EventLogTags;->writeAmFocusedStack(IIIILjava/lang/String;)V
PLcom/android/server/am/EventLogTags;->writeAmMeminfo(JJJJJ)V
PLcom/android/server/am/EventLogTags;->writeAmPss(IILjava/lang/String;JJJJIIJ)V
PLcom/android/server/am/HealthStatsBatteryStatsWriter;->writePid(Landroid/os/health/HealthStatsWriter;Landroid/os/BatteryStats$Uid$Pid;)V
PLcom/android/server/am/HealthStatsBatteryStatsWriter;->writePkg(Landroid/os/health/HealthStatsWriter;Landroid/os/BatteryStats$Uid$Pkg;)V
PLcom/android/server/am/HealthStatsBatteryStatsWriter;->writeProc(Landroid/os/health/HealthStatsWriter;Landroid/os/BatteryStats$Uid$Proc;)V
PLcom/android/server/am/HealthStatsBatteryStatsWriter;->writeServ(Landroid/os/health/HealthStatsWriter;Landroid/os/BatteryStats$Uid$Pkg$Serv;)V
PLcom/android/server/am/HealthStatsBatteryStatsWriter;->writeUid(Landroid/os/health/HealthStatsWriter;Landroid/os/BatteryStats;Landroid/os/BatteryStats$Uid;)V
PLcom/android/server/am/MemoryStatUtil;->parseMemoryStatFromProcfs(Ljava/lang/String;)Lcom/android/server/am/MemoryStatUtil$MemoryStat;
PLcom/android/server/am/MemoryStatUtil;->parseVmHWMFromProcfs(Ljava/lang/String;)J
PLcom/android/server/am/MemoryStatUtil;->readFileContents(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/am/MemoryStatUtil;->readMemoryStatFromFilesystem(II)Lcom/android/server/am/MemoryStatUtil$MemoryStat;
PLcom/android/server/am/NativeCrashListener$NativeCrashReporter;->run()V
PLcom/android/server/am/NativeCrashListener;->consumeNativeCrashData(Ljava/io/FileDescriptor;)V
PLcom/android/server/am/OomAdjProfiler;->onWakefulnessChanged(I)V
PLcom/android/server/am/OomAdjuster$ComputeOomAdjWindowCallback;->initialize(Lcom/android/server/am/ProcessRecord;IZIIIII)V
PLcom/android/server/am/OomAdjuster$ComputeOomAdjWindowCallback;->onOtherActivity()V
PLcom/android/server/am/OomAdjuster$ComputeOomAdjWindowCallback;->onPausedActivity()V
PLcom/android/server/am/OomAdjuster$ComputeOomAdjWindowCallback;->onStoppingActivity(Z)V
PLcom/android/server/am/OomAdjuster$ComputeOomAdjWindowCallback;->onVisibleActivity()V
PLcom/android/server/am/OomAdjuster;->idleUidsLocked()V
PLcom/android/server/am/OomAdjuster;->setAppIdTempWhitelistStateLocked(IZ)V
PLcom/android/server/am/PendingIntentController;->cancelIntentSender(Landroid/content/IIntentSender;)V
PLcom/android/server/am/PendingIntentController;->cancelIntentSender(Lcom/android/server/am/PendingIntentRecord;Z)V
PLcom/android/server/am/PendingIntentController;->handlePendingIntentCancelled(Landroid/os/RemoteCallbackList;)V
PLcom/android/server/am/PendingIntentController;->makeIntentSenderCanceled(Lcom/android/server/am/PendingIntentRecord;)V
PLcom/android/server/am/PendingIntentRecord$Key;->typeName()Ljava/lang/String;
PLcom/android/server/am/PendingIntentRecord;->setWhitelistDurationLocked(Landroid/os/IBinder;J)V
PLcom/android/server/am/PendingIntentRecord;->toString()Ljava/lang/String;
PLcom/android/server/am/PersistentConnection$1;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/am/PersistentConnection;-><init>(Ljava/lang/String;Landroid/content/Context;Landroid/os/Handler;ILandroid/content/ComponentName;JDJJ)V
PLcom/android/server/am/PersistentConnection;->bind()V
PLcom/android/server/am/PersistentConnection;->bindInnerLocked(Z)V
PLcom/android/server/am/PersistentConnection;->injectPostAtTime(Ljava/lang/Runnable;J)V
PLcom/android/server/am/PersistentConnection;->injectRemoveCallbacks(Ljava/lang/Runnable;)V
PLcom/android/server/am/PersistentConnection;->injectUptimeMillis()J
PLcom/android/server/am/PersistentConnection;->resetBackoffLocked()V
PLcom/android/server/am/PersistentConnection;->stableConnectionCheck()V
PLcom/android/server/am/PersistentConnection;->unbind()V
PLcom/android/server/am/PersistentConnection;->unbindLocked()V
PLcom/android/server/am/PersistentConnection;->unscheduleRebindLocked()V
PLcom/android/server/am/PreBootBroadcaster$1;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/am/PreBootBroadcaster;-><init>(Lcom/android/server/am/ActivityManagerService;ILcom/android/internal/util/ProgressReporter;Z)V
PLcom/android/server/am/PreBootBroadcaster;->performReceive(Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;ZZI)V
PLcom/android/server/am/PreBootBroadcaster;->sendNext()V
PLcom/android/server/am/ProcessList$IsolatedUidRange;->allocateIsolatedUidLocked(I)I
PLcom/android/server/am/ProcessList;->abortNextPssTime(Lcom/android/server/am/ProcessList$ProcStateMemTracker;)V
PLcom/android/server/am/ProcessList;->clearAllDnsCacheLocked()V
PLcom/android/server/am/ProcessList;->commitNextPssTime(Lcom/android/server/am/ProcessList$ProcStateMemTracker;)V
PLcom/android/server/am/ProcessList;->doStopUidForIdleUidsLocked()V
PLcom/android/server/am/ProcessList;->fillInProcMemInfoLocked(Lcom/android/server/am/ProcessRecord;Landroid/app/ActivityManager$RunningAppProcessInfo;I)V
PLcom/android/server/am/ProcessList;->findAppProcessLocked(Landroid/os/IBinder;Ljava/lang/String;)Lcom/android/server/am/ProcessRecord;
PLcom/android/server/am/ProcessList;->getCachedRestoreThresholdKb()J
PLcom/android/server/am/ProcessList;->getRunningAppProcessesLocked(ZIZII)Ljava/util/List;
PLcom/android/server/am/ProcessList;->killProcessGroup(II)V
PLcom/android/server/am/ProcessList;->removeProcessLocked(Lcom/android/server/am/ProcessRecord;ZZLjava/lang/String;)Z
PLcom/android/server/am/ProcessList;->updateLruProcessInternalLocked(Lcom/android/server/am/ProcessRecord;JIILjava/lang/String;Ljava/lang/Object;Lcom/android/server/am/ProcessRecord;)I
PLcom/android/server/am/ProcessRecord;->addAllowBackgroundActivityStartsToken(Landroid/os/Binder;)V
PLcom/android/server/am/ProcessRecord;->addPackage(Ljava/lang/String;J)V
PLcom/android/server/am/ProcessRecord;->appNotResponding(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;Ljava/lang/String;Lcom/android/server/wm/WindowProcessController;ZLjava/lang/String;)V
PLcom/android/server/am/ProcessRecord;->getPackageListWithVersionCode()Ljava/util/List;
PLcom/android/server/am/ProcessRecord;->getProcessClassEnum()I
PLcom/android/server/am/ProcessRecord;->hasActivities()Z
PLcom/android/server/am/ProcessRecord;->hasLocationForegroundServices()Z
PLcom/android/server/am/ProcessRecord;->isInterestingForBackgroundTraces()Z
PLcom/android/server/am/ProcessRecord;->isInterestingToUserLocked()Z
PLcom/android/server/am/ProcessRecord;->isUsingWrapper()Z
PLcom/android/server/am/ProcessRecord;->kill(Ljava/lang/String;Z)V
PLcom/android/server/am/ProcessRecord;->scheduleCrash(Ljava/lang/String;)V
PLcom/android/server/am/ProcessRecord;->setNotResponding(Z)V
PLcom/android/server/am/ProcessRecord;->setPendingUiCleanAndForceProcessStateUpTo(I)V
PLcom/android/server/am/ProcessRecord;->setPid(I)V
PLcom/android/server/am/ProcessRecord;->startAppProblemLocked()V
PLcom/android/server/am/ProcessRecord;->updateHasAboveClientLocked()V
PLcom/android/server/am/ProcessStatsService$2;->run()V
PLcom/android/server/am/ProcessStatsService$4;->run()V
PLcom/android/server/am/ProcessStatsService;->addSysMemUsageLocked(JJJJJ)V
PLcom/android/server/am/ProcessStatsService;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/am/ProcessStatsService;->dumpAggregatedStats(Ljava/io/PrintWriter;JJLjava/lang/String;ZZZZZI)V
PLcom/android/server/am/ProcessStatsService;->dumpInner(Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/am/ProcessStatsService;->getCommittedFiles(IZZ)Ljava/util/ArrayList;
PLcom/android/server/am/ProcessStatsService;->getStatsOverTime(J)Landroid/os/ParcelFileDescriptor;
PLcom/android/server/am/ProcessStatsService;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
PLcom/android/server/am/ProcessStatsService;->performWriteState(J)V
PLcom/android/server/am/ProcessStatsService;->readLocked(Lcom/android/internal/app/procstats/ProcessStats;Landroid/util/AtomicFile;)Z
PLcom/android/server/am/ProcessStatsService;->trimHistoricStatesWriteLocked()V
PLcom/android/server/am/ProcessStatsService;->writeStateLocked(ZZ)V
PLcom/android/server/am/ProviderMap;->dumpProviderProto(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;Ljava/lang/String;[Ljava/lang/String;)Z
PLcom/android/server/am/ProviderMap;->dumpToTransferPipe(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;Lcom/android/server/am/ContentProviderRecord;[Ljava/lang/String;)V
PLcom/android/server/am/ProviderMap;->getProviderByClass(Landroid/content/ComponentName;I)Lcom/android/server/am/ContentProviderRecord;
PLcom/android/server/am/ProviderMap;->getProvidersForName(Ljava/lang/String;)Ljava/util/ArrayList;
PLcom/android/server/am/ProviderMap;->putProviderByClass(Landroid/content/ComponentName;Lcom/android/server/am/ContentProviderRecord;)V
PLcom/android/server/am/ProviderMap;->putProviderByName(Ljava/lang/String;Lcom/android/server/am/ContentProviderRecord;)V
PLcom/android/server/am/ProviderMap;->removeProviderByClass(Landroid/content/ComponentName;I)V
PLcom/android/server/am/ProviderMap;->removeProviderByName(Ljava/lang/String;I)V
PLcom/android/server/am/ReceiverList;->equals(Ljava/lang/Object;)Z
PLcom/android/server/am/ReceiverList;->toString()Ljava/lang/String;
PLcom/android/server/am/ServiceRecord$1;->run()V
PLcom/android/server/am/ServiceRecord$2;->run()V
PLcom/android/server/am/ServiceRecord$3;-><init>(Lcom/android/server/am/ServiceRecord;Ljava/lang/String;II)V
PLcom/android/server/am/ServiceRecord$3;->run()V
PLcom/android/server/am/ServiceRecord$StartItem;->removeUriPermissionsLocked()V
PLcom/android/server/am/ServiceRecord;->dumpStartList(Ljava/io/PrintWriter;Ljava/lang/String;Ljava/util/List;J)V
PLcom/android/server/am/ServiceRecord;->getComponentName()Landroid/content/ComponentName;
PLcom/android/server/am/ServiceRecord;->makeRestarting(IJ)V
PLcom/android/server/am/ServiceRecord;->updateWhitelistManager()V
PLcom/android/server/am/SettingsToPropertiesMapper;->lambda$updatePropertiesFromSettings$0(Lcom/android/server/am/SettingsToPropertiesMapper;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/am/SettingsToPropertiesMapper;->systemPropertiesSet(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/am/UidRecord;->updateHasInternetPermission()V
PLcom/android/server/am/UserController$2;->performReceive(Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;ZZI)V
PLcom/android/server/am/UserController$4;->lambda$performReceive$0$UserController$4(ILcom/android/server/am/UserState;)V
PLcom/android/server/am/UserController$4;->performReceive(Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;ZZI)V
PLcom/android/server/am/UserController$5$1;->run()V
PLcom/android/server/am/UserController$5;->performReceive(Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;ZZI)V
PLcom/android/server/am/UserController$6;-><init>(Lcom/android/server/am/UserController;)V
PLcom/android/server/am/UserController$6;->performReceive(Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;ZZI)V
PLcom/android/server/am/UserController$Injector$1;->onFinished()V
PLcom/android/server/am/UserController$Injector;->activityManagerForceStopPackage(ILjava/lang/String;)V
PLcom/android/server/am/UserController$Injector;->activityManagerOnUserStopped(I)V
PLcom/android/server/am/UserController$Injector;->batteryStatsServiceNoteEvent(ILjava/lang/String;I)V
PLcom/android/server/am/UserController$Injector;->clearBroadcastQueueForUser(I)V
PLcom/android/server/am/UserController$Injector;->getSystemServiceManager()Lcom/android/server/SystemServiceManager;
PLcom/android/server/am/UserController$Injector;->getUserManagerInternal()Landroid/os/UserManagerInternal;
PLcom/android/server/am/UserController$Injector;->getWindowManager()Lcom/android/server/wm/WindowManagerService;
PLcom/android/server/am/UserController$Injector;->installEncryptionUnawareProviders(I)V
PLcom/android/server/am/UserController$Injector;->isFirstBootOrUpgrade()Z
PLcom/android/server/am/UserController$Injector;->isRuntimeRestarted()Z
PLcom/android/server/am/UserController$Injector;->loadUserRecents(I)V
PLcom/android/server/am/UserController$Injector;->sendPreBootBroadcast(IZLjava/lang/Runnable;)V
PLcom/android/server/am/UserController$Injector;->stackSupervisorRemoveUser(I)V
PLcom/android/server/am/UserController$Injector;->startPersistentApps(I)V
PLcom/android/server/am/UserController$Injector;->startUserWidgets(I)V
PLcom/android/server/am/UserController$Injector;->systemServiceManagerCleanupUser(I)V
PLcom/android/server/am/UserController$UserProgressListener;-><init>(Lcom/android/server/am/UserController$1;)V
PLcom/android/server/am/UserController$UserProgressListener;->onFinished(ILandroid/os/Bundle;)V
PLcom/android/server/am/UserController$UserProgressListener;->onProgress(IILandroid/os/Bundle;)V
PLcom/android/server/am/UserController$UserProgressListener;->onStarted(ILandroid/os/Bundle;)V
PLcom/android/server/am/UserController;->dispatchForegroundProfileChanged(I)V
PLcom/android/server/am/UserController;->dispatchLockedBootComplete(I)V
PLcom/android/server/am/UserController;->enforceShellRestriction(Ljava/lang/String;I)V
PLcom/android/server/am/UserController;->expandUserId(I)[I
PLcom/android/server/am/UserController;->finishUserBoot(Lcom/android/server/am/UserState;)V
PLcom/android/server/am/UserController;->finishUserBoot(Lcom/android/server/am/UserState;Landroid/content/IIntentReceiver;)V
PLcom/android/server/am/UserController;->finishUserStopped(Lcom/android/server/am/UserState;)V
PLcom/android/server/am/UserController;->finishUserStopping(ILcom/android/server/am/UserState;)V
PLcom/android/server/am/UserController;->finishUserUnlocked(Lcom/android/server/am/UserState;)V
PLcom/android/server/am/UserController;->finishUserUnlockedCompleted(Lcom/android/server/am/UserState;)V
PLcom/android/server/am/UserController;->finishUserUnlocking(Lcom/android/server/am/UserState;)V
PLcom/android/server/am/UserController;->forceStopUser(ILjava/lang/String;)V
PLcom/android/server/am/UserController;->getCurrentOrTargetUserId()I
PLcom/android/server/am/UserController;->getCurrentOrTargetUserIdLU()I
PLcom/android/server/am/UserController;->getUserInfo(I)Landroid/content/pm/UserInfo;
PLcom/android/server/am/UserController;->getUsersToStopLU(I)[I
PLcom/android/server/am/UserController;->handleMessage(Landroid/os/Message;)Z
PLcom/android/server/am/UserController;->isCurrentProfile(I)Z
PLcom/android/server/am/UserController;->lambda$finishUserStopped$5$UserController(I)V
PLcom/android/server/am/UserController;->lambda$finishUserUnlocked$2$UserController(Lcom/android/server/am/UserState;)V
PLcom/android/server/am/UserController;->lambda$finishUserUnlocking$1$UserController(ILcom/android/server/am/UserState;)V
PLcom/android/server/am/UserController;->lambda$finishUserUnlocking$1(Lcom/android/server/am/UserController;ILcom/android/server/am/UserState;)V
PLcom/android/server/am/UserController;->lambda$handleMessage$8$UserController(I)V
PLcom/android/server/am/UserController;->lambda$scheduleStartProfiles$6$UserController()V
PLcom/android/server/am/UserController;->lambda$stopSingleUserLU$4$UserController(ILcom/android/server/am/UserState;)V
PLcom/android/server/am/UserController;->scheduleStartProfiles()V
PLcom/android/server/am/UserController;->sendBootCompleted(Landroid/content/IIntentReceiver;)V
PLcom/android/server/am/UserController;->sendForegroundProfileChanged(I)V
PLcom/android/server/am/UserController;->startProfiles()V
PLcom/android/server/am/UserController;->startUser(IZ)Z
PLcom/android/server/am/UserController;->startUser(IZLandroid/os/IProgressListener;)Z
PLcom/android/server/am/UserController;->stopSingleUserLU(ILandroid/app/IStopUserCallback;)V
PLcom/android/server/am/UserController;->stopUser(IZLandroid/app/IStopUserCallback;)I
PLcom/android/server/am/UserController;->stopUsersLU(IZLandroid/app/IStopUserCallback;)I
PLcom/android/server/am/UserController;->unlockUser(I[B[BLandroid/os/IProgressListener;)Z
PLcom/android/server/am/UserController;->unlockUserCleared(I[B[BLandroid/os/IProgressListener;)Z
PLcom/android/server/am/UserController;->unregisterUserSwitchObserver(Landroid/app/IUserSwitchObserver;)V
PLcom/android/server/am/UserState;->setState(I)V
PLcom/android/server/am/UserState;->setState(II)Z
PLcom/android/server/appbinding/AppBindingService$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/appbinding/AppBindingService$Lifecycle;->onStopUser(I)V
PLcom/android/server/appbinding/AppBindingService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/appbinding/AppBindingService;->findFinderLocked(ILjava/lang/String;)Lcom/android/server/appbinding/finders/AppServiceFinder;
PLcom/android/server/appbinding/AppBindingService;->handlePackageAddedReplacing(Ljava/lang/String;I)V
PLcom/android/server/appbinding/AppBindingService;->handlePackageChanged(Ljava/lang/String;I)V
PLcom/android/server/appbinding/AppBindingService;->onStopUser(I)V
PLcom/android/server/appbinding/AppBindingService;->onUnlockUser(I)V
PLcom/android/server/appbinding/AppBindingService;->unbindServicesLocked(ILcom/android/server/appbinding/finders/AppServiceFinder;Ljava/lang/String;)V
PLcom/android/server/appbinding/finders/-$$Lambda$CarrierMessagingClientServiceFinder$HEVyQ3IEZ8Eseze74Vyp3NHEREg;->onRoleHoldersChanged(Ljava/lang/String;Landroid/os/UserHandle;)V
PLcom/android/server/appbinding/finders/CarrierMessagingClientServiceFinder;->getAppDescription()Ljava/lang/String;
PLcom/android/server/appbinding/finders/CarrierMessagingClientServiceFinder;->lambda$new$0$CarrierMessagingClientServiceFinder(Ljava/lang/String;Landroid/os/UserHandle;)V
PLcom/android/server/appop/-$$Lambda$AppOpsService$AfBLuTvVESlqN91IyRX84hMV5nE;-><init>()V
PLcom/android/server/appop/-$$Lambda$AppOpsService$AfBLuTvVESlqN91IyRX84hMV5nE;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/appop/-$$Lambda$AppOpsService$FYLTtxqrHmv8Y5UdZ9ybXKsSJhs;-><init>()V
PLcom/android/server/appop/-$$Lambda$AppOpsService$FYLTtxqrHmv8Y5UdZ9ybXKsSJhs;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/appop/-$$Lambda$AppOpsService$NDUi03ZZuuR42-RDEIQ0UELKycc;-><init>()V
PLcom/android/server/appop/-$$Lambda$AppOpsService$NDUi03ZZuuR42-RDEIQ0UELKycc;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/appop/-$$Lambda$AppOpsService$ac4Ra3Yhj0OQzvkaL2dLbsuLAmQ;-><init>()V
PLcom/android/server/appop/-$$Lambda$AppOpsService$ac4Ra3Yhj0OQzvkaL2dLbsuLAmQ;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/appop/-$$Lambda$HistoricalRegistry$dJrtb4M71TzV6sx9vPEImQG_akU;-><init>()V
PLcom/android/server/appop/-$$Lambda$HistoricalRegistry$dJrtb4M71TzV6sx9vPEImQG_akU;->accept(Ljava/lang/Object;)V
PLcom/android/server/appop/AppOpsService$1$1;->doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/appop/AppOpsService$1$1;->doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
PLcom/android/server/appop/AppOpsService$1;->run()V
PLcom/android/server/appop/AppOpsService$ClientState;->binderDied()V
PLcom/android/server/appop/AppOpsService$ModeCallback;->binderDied()V
PLcom/android/server/appop/AppOpsService;->getOpsForPackage(ILjava/lang/String;[I)Ljava/util/List;
PLcom/android/server/appop/AppOpsService;->isOperationActive(IILjava/lang/String;)Z
PLcom/android/server/appop/AppOpsService;->noteProxyOperation(IILjava/lang/String;ILjava/lang/String;)I
PLcom/android/server/appop/AppOpsService;->notifyOpActiveChanged(Landroid/util/ArraySet;IILjava/lang/String;Z)V
PLcom/android/server/appop/AppOpsService;->notifyOpChecked(Landroid/util/ArraySet;IILjava/lang/String;I)V
PLcom/android/server/appop/AppOpsService;->setUserRestriction(IZLandroid/os/IBinder;I[Ljava/lang/String;)V
PLcom/android/server/appop/AppOpsService;->stopWatchingMode(Lcom/android/internal/app/IAppOpsCallback;)V
PLcom/android/server/appop/AppOpsService;->writeState()V
PLcom/android/server/appop/HistoricalRegistry$Persistence;->collectHistoricalOpsBaseDLocked(ILjava/lang/String;[Ljava/lang/String;JJ)Ljava/util/LinkedList;
PLcom/android/server/appop/HistoricalRegistry$Persistence;->collectHistoricalOpsRecursiveDLocked(Ljava/io/File;ILjava/lang/String;[Ljava/lang/String;JJ[JLjava/util/LinkedList;ILjava/util/Set;)Ljava/util/LinkedList;
PLcom/android/server/appop/HistoricalRegistry$Persistence;->computeGlobalIntervalBeginMillis(I)J
PLcom/android/server/appop/HistoricalRegistry$Persistence;->generateFile(Ljava/io/File;I)Ljava/io/File;
PLcom/android/server/appop/HistoricalRegistry$Persistence;->getHistoricalFileNames(Ljava/io/File;)Ljava/util/Set;
PLcom/android/server/appop/HistoricalRegistry$Persistence;->handlePersistHistoricalOpsRecursiveDLocked(Ljava/io/File;Ljava/io/File;Ljava/util/List;Ljava/util/Set;I)V
PLcom/android/server/appop/HistoricalRegistry$Persistence;->normalizeSnapshotForSlotDuration(Ljava/util/List;J)V
PLcom/android/server/appop/HistoricalRegistry$Persistence;->persistHistoricalOpsDLocked(Ljava/util/List;)V
PLcom/android/server/appop/HistoricalRegistry$Persistence;->readHistoricalOpDLocked(Landroid/app/AppOpsManager$HistoricalOps;ILjava/lang/String;Lorg/xmlpull/v1/XmlPullParser;[Ljava/lang/String;D)Landroid/app/AppOpsManager$HistoricalOps;
PLcom/android/server/appop/HistoricalRegistry$Persistence;->readHistoricalOpsLocked(Ljava/io/File;ILjava/lang/String;[Ljava/lang/String;JJ[J)Ljava/util/List;
PLcom/android/server/appop/HistoricalRegistry$Persistence;->readHistoricalOpsLocked(Ljava/io/File;JJILjava/lang/String;[Ljava/lang/String;JJ[JILjava/util/Set;)Ljava/util/List;
PLcom/android/server/appop/HistoricalRegistry$Persistence;->readHistoricalPackageOpsDLocked(Landroid/app/AppOpsManager$HistoricalOps;ILorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;[Ljava/lang/String;D)Landroid/app/AppOpsManager$HistoricalOps;
PLcom/android/server/appop/HistoricalRegistry$Persistence;->readHistoricalUidOpsDLocked(Landroid/app/AppOpsManager$HistoricalOps;Lorg/xmlpull/v1/XmlPullParser;ILjava/lang/String;[Ljava/lang/String;D)Landroid/app/AppOpsManager$HistoricalOps;
PLcom/android/server/appop/HistoricalRegistry$Persistence;->readUidStateDLocked(Landroid/app/AppOpsManager$HistoricalOps;ILjava/lang/String;ILorg/xmlpull/v1/XmlPullParser;D)Landroid/app/AppOpsManager$HistoricalOps;
PLcom/android/server/appop/HistoricalRegistry$Persistence;->readeHistoricalOpsDLocked(Lorg/xmlpull/v1/XmlPullParser;ILjava/lang/String;[Ljava/lang/String;JJ[J)Landroid/app/AppOpsManager$HistoricalOps;
PLcom/android/server/appop/HistoricalRegistry$Persistence;->writeHistoricalOpDLocked(Landroid/app/AppOpsManager$HistoricalOp;Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/appop/HistoricalRegistry$Persistence;->writeHistoricalOpDLocked(Landroid/app/AppOpsManager$HistoricalOps;Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/appop/HistoricalRegistry$Persistence;->writeHistoricalOpsDLocked(Ljava/util/List;JLjava/io/File;)V
PLcom/android/server/appop/HistoricalRegistry$Persistence;->writeHistoricalPackageOpsDLocked(Landroid/app/AppOpsManager$HistoricalPackageOps;Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/appop/HistoricalRegistry$Persistence;->writeHistoricalUidOpsDLocked(Landroid/app/AppOpsManager$HistoricalUidOps;Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/appop/HistoricalRegistry$Persistence;->writeUidStateOnLocked(Landroid/app/AppOpsManager$HistoricalOp;ILorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/appop/HistoricalRegistry;->clearHistory()V
PLcom/android/server/appop/HistoricalRegistry;->clearHistoryOnDiskLocked()V
PLcom/android/server/appop/HistoricalRegistry;->offsetHistory(J)V
PLcom/android/server/appop/HistoricalRegistry;->persistPendingHistory()V
PLcom/android/server/appop/HistoricalRegistry;->persistPendingHistory(Ljava/util/List;)V
PLcom/android/server/appprediction/AppPredictionPerUserService;->newServiceInfoLocked(Landroid/content/ComponentName;)Landroid/content/pm/ServiceInfo;
PLcom/android/server/appwidget/-$$Lambda$AppWidgetServiceImpl$7z3EwuT55saMxTVomcNfb1VOVL0;->run()V
PLcom/android/server/appwidget/-$$Lambda$AppWidgetServiceImpl$TEG8Dmf_tnBoLQ8rTg9_1sFaVu8;->run()V
PLcom/android/server/appwidget/AppWidgetService;->onStopUser(I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl$AppWidgetManagerLocal;->getHostedWidgetPackages(I)Landroid/util/ArraySet;
PLcom/android/server/appwidget/AppWidgetServiceImpl$AppWidgetManagerLocal;->unlockUser(I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl$BackupRestoreController;->getWidgetState(Ljava/lang/String;I)[B
PLcom/android/server/appwidget/AppWidgetServiceImpl$BackupRestoreController;->packageNeedsWidgetBackupLocked(Ljava/lang/String;I)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl$CallbackHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl$Host;->getPendingUpdatesForId(ILandroid/util/LongSparseArray;)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl$Host;->hostsPackageForUser(Ljava/lang/String;I)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl$HostId;->equals(Ljava/lang/Object;)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl$Provider;->hostedByPackageForUser(Ljava/lang/String;I)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl$ProviderId;-><init>(ILandroid/content/ComponentName;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl$ProviderId;->equals(Ljava/lang/Object;)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl$ProviderId;->hashCode()I
PLcom/android/server/appwidget/AppWidgetServiceImpl$SaveStateRunnable;->run()V
PLcom/android/server/appwidget/AppWidgetServiceImpl$SecurityPolicy;->canAccessAppWidget(Lcom/android/server/appwidget/AppWidgetServiceImpl$Widget;ILjava/lang/String;)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl$SecurityPolicy;->getEnabledGroupProfileIds(I)[I
PLcom/android/server/appwidget/AppWidgetServiceImpl$SecurityPolicy;->getProfileParent(I)I
PLcom/android/server/appwidget/AppWidgetServiceImpl$SecurityPolicy;->hasCallerBindPermissionOrBindWhiteListedLocked(Ljava/lang/String;)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl$SecurityPolicy;->isCallerInstantAppLocked()Z
PLcom/android/server/appwidget/AppWidgetServiceImpl$SecurityPolicy;->isInstantAppLocked(Ljava/lang/String;I)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl$SecurityPolicy;->isProfileEnabled(I)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->addProviderLocked(Landroid/content/pm/ResolveInfo;)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl;->addWidgetLocked(Lcom/android/server/appwidget/AppWidgetServiceImpl$Widget;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->allocateAppWidgetId(Ljava/lang/String;I)I
PLcom/android/server/appwidget/AppWidgetServiceImpl;->bindAppWidgetId(Ljava/lang/String;IILandroid/content/ComponentName;Landroid/os/Bundle;)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl;->bindLoadedWidgetsLocked(Ljava/util/List;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->cancelBroadcastsLocked(Lcom/android/server/appwidget/AppWidgetServiceImpl$Provider;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->clearProvidersAndHostsTagsLocked()V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->ensureGroupStateLoadedLocked(IZ)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->getAppWidgetIds(Landroid/content/ComponentName;)[I
PLcom/android/server/appwidget/AppWidgetServiceImpl;->getAppWidgetInfo(Ljava/lang/String;I)Landroid/appwidget/AppWidgetProviderInfo;
PLcom/android/server/appwidget/AppWidgetServiceImpl;->getAppWidgetOptions(Ljava/lang/String;I)Landroid/os/Bundle;
PLcom/android/server/appwidget/AppWidgetServiceImpl;->getAppWidgetViews(Ljava/lang/String;I)Landroid/widget/RemoteViews;
PLcom/android/server/appwidget/AppWidgetServiceImpl;->getCanonicalPackageName(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;
PLcom/android/server/appwidget/AppWidgetServiceImpl;->getInstalledProvidersForProfile(IILjava/lang/String;)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/appwidget/AppWidgetServiceImpl;->getSavedStateFile(I)Landroid/util/AtomicFile;
PLcom/android/server/appwidget/AppWidgetServiceImpl;->getUidForPackage(Ljava/lang/String;I)I
PLcom/android/server/appwidget/AppWidgetServiceImpl;->getWidgetState(Ljava/lang/String;I)[B
PLcom/android/server/appwidget/AppWidgetServiceImpl;->handleNotifyProvidersChanged(Lcom/android/server/appwidget/AppWidgetServiceImpl$Host;Lcom/android/internal/appwidget/IAppWidgetHost;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->handleNotifyUpdateAppWidget(Lcom/android/server/appwidget/AppWidgetServiceImpl$Host;Lcom/android/internal/appwidget/IAppWidgetHost;ILandroid/widget/RemoteViews;J)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->handleUserUnlocked(I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->hasBindAppWidgetPermission(Ljava/lang/String;I)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl;->isProfileWithLockedParent(I)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl;->isProfileWithUnlockedParent(I)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl;->lambda$cancelBroadcastsLocked$0$AppWidgetServiceImpl(Landroid/app/PendingIntent;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->lambda$registerForBroadcastsLocked$1$AppWidgetServiceImpl(JLandroid/app/PendingIntent;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->loadGroupStateLocked([I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->loadGroupWidgetProvidersLocked([I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->lookupWidgetLocked(IILjava/lang/String;)Lcom/android/server/appwidget/AppWidgetServiceImpl$Widget;
PLcom/android/server/appwidget/AppWidgetServiceImpl;->maskWidgetsViewsLocked(Lcom/android/server/appwidget/AppWidgetServiceImpl$Provider;Lcom/android/server/appwidget/AppWidgetServiceImpl$Widget;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->onPackageBroadcastReceived(Landroid/content/Intent;I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->onUserStopped(I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->onWidgetProviderAddedOrChangedLocked(Lcom/android/server/appwidget/AppWidgetServiceImpl$Widget;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->parseAppWidgetProviderInfo(Lcom/android/server/appwidget/AppWidgetServiceImpl$ProviderId;Landroid/content/pm/ActivityInfo;Ljava/lang/String;)Landroid/appwidget/AppWidgetProviderInfo;
PLcom/android/server/appwidget/AppWidgetServiceImpl;->parseProviderInfoXml(Lcom/android/server/appwidget/AppWidgetServiceImpl$ProviderId;Landroid/content/pm/ResolveInfo;Lcom/android/server/appwidget/AppWidgetServiceImpl$Provider;)Lcom/android/server/appwidget/AppWidgetServiceImpl$Provider;
PLcom/android/server/appwidget/AppWidgetServiceImpl;->partiallyUpdateAppWidgetIds(Ljava/lang/String;[ILandroid/widget/RemoteViews;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->peekNextAppWidgetIdLocked(I)I
PLcom/android/server/appwidget/AppWidgetServiceImpl;->performUpgradeLocked(I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->pruneHostLocked(Lcom/android/server/appwidget/AppWidgetServiceImpl$Host;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->queryIntentReceivers(Landroid/content/Intent;I)Ljava/util/List;
PLcom/android/server/appwidget/AppWidgetServiceImpl;->readProfileStateFromFileLocked(Ljava/io/FileInputStream;ILjava/util/List;)I
PLcom/android/server/appwidget/AppWidgetServiceImpl;->registerForBroadcastsLocked(Lcom/android/server/appwidget/AppWidgetServiceImpl$Provider;[I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->reloadWidgetsMaskedState(I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->reloadWidgetsMaskedStateForGroup(I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->resolveHostUidLocked(Ljava/lang/String;I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->saveStateLocked(I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->scheduleNotifyGroupHostsForProvidersChangedLocked(I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->scheduleNotifyProviderChangedLocked(Lcom/android/server/appwidget/AppWidgetServiceImpl$Widget;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->scheduleNotifyUpdateAppWidgetLocked(Lcom/android/server/appwidget/AppWidgetServiceImpl$Widget;Landroid/widget/RemoteViews;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->serializeAppWidget(Lorg/xmlpull/v1/XmlSerializer;Lcom/android/server/appwidget/AppWidgetServiceImpl$Widget;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->serializeHost(Lorg/xmlpull/v1/XmlSerializer;Lcom/android/server/appwidget/AppWidgetServiceImpl$Host;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->serializeProvider(Lorg/xmlpull/v1/XmlSerializer;Lcom/android/server/appwidget/AppWidgetServiceImpl$Provider;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->startListening(Lcom/android/internal/appwidget/IAppWidgetHost;Ljava/lang/String;I[I)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/appwidget/AppWidgetServiceImpl;->stopListening(Ljava/lang/String;I)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->tagProvidersAndHosts()V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->updateAppWidgetIds(Ljava/lang/String;[ILandroid/widget/RemoteViews;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->updateAppWidgetIds(Ljava/lang/String;[ILandroid/widget/RemoteViews;Z)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->updateAppWidgetInstanceLocked(Lcom/android/server/appwidget/AppWidgetServiceImpl$Widget;Landroid/widget/RemoteViews;Z)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->updateAppWidgetProvider(Landroid/content/ComponentName;Landroid/widget/RemoteViews;)V
PLcom/android/server/appwidget/AppWidgetServiceImpl;->updateProvidersForPackageLocked(Ljava/lang/String;ILjava/util/Set;)Z
PLcom/android/server/appwidget/AppWidgetServiceImpl;->writeProfileStateToFileLocked(Ljava/io/FileOutputStream;I)Z
PLcom/android/server/audio/-$$Lambda$AudioDeviceInventory$MfLl81BWvF9OIWh52LJfesOjVdw;->test(Ljava/lang/Object;)Z
PLcom/android/server/audio/-$$Lambda$AudioService$YLQrBBB6SFLzNISvF6dG1Zz8wEY;-><init>()V
PLcom/android/server/audio/-$$Lambda$AudioService$YLQrBBB6SFLzNISvF6dG1Zz8wEY;->test(Ljava/lang/Object;)Z
PLcom/android/server/audio/AudioDeviceBroker;->getA2dpCodec(Landroid/bluetooth/BluetoothDevice;)I
PLcom/android/server/audio/AudioDeviceBroker;->handleDeviceConnection(ZILjava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/audio/AudioDeviceBroker;->isBluetoothA2dpOn()Z
PLcom/android/server/audio/AudioDeviceBroker;->isSpeakerphoneOn()Z
PLcom/android/server/audio/AudioDeviceBroker;->postSetAvrcpAbsoluteVolumeIndex(I)V
PLcom/android/server/audio/AudioDeviceBroker;->receiveBtEvent(Landroid/content/Intent;)V
PLcom/android/server/audio/AudioDeviceBroker;->sendBroadcastToAll(Landroid/content/Intent;)V
PLcom/android/server/audio/AudioDeviceBroker;->setAvrcpAbsoluteVolumeSupported(Z)V
PLcom/android/server/audio/AudioDeviceBroker;->setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(Landroid/bluetooth/BluetoothDevice;IIZI)I
PLcom/android/server/audio/AudioDeviceBroker;->setBluetoothA2dpOnInt(ZLjava/lang/String;)V
PLcom/android/server/audio/AudioDeviceBroker;->setBluetoothA2dpOn_Async(ZLjava/lang/String;)V
PLcom/android/server/audio/AudioDeviceBroker;->setSpeakerphoneOn(ZLjava/lang/String;)V
PLcom/android/server/audio/AudioDeviceBroker;->setWiredDeviceConnectionState(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/audio/AudioDeviceInventory;->checkSendBecomingNoisyIntentInt(III)I
PLcom/android/server/audio/AudioDeviceInventory;->handleDeviceConnection(ZILjava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/audio/AudioDeviceInventory;->makeA2dpDeviceAvailable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/audio/AudioDeviceInventory;->makeA2dpDeviceUnavailableNow(Ljava/lang/String;I)V
PLcom/android/server/audio/AudioDeviceInventory;->onBluetoothA2dpDeviceConfigChange(Lcom/android/server/audio/BtHelper$BluetoothA2dpDeviceInfo;)V
PLcom/android/server/audio/AudioDeviceInventory;->onReportNewRoutes()V
PLcom/android/server/audio/AudioDeviceInventory;->onSetA2dpSinkConnectionState(Lcom/android/server/audio/BtHelper$BluetoothA2dpDeviceInfo;I)V
PLcom/android/server/audio/AudioDeviceInventory;->onSetWiredDeviceConnectionState(Lcom/android/server/audio/AudioDeviceInventory$WiredDeviceConnectionState;)V
PLcom/android/server/audio/AudioDeviceInventory;->sendDeviceConnectionIntent(IILjava/lang/String;Ljava/lang/String;)V
PLcom/android/server/audio/AudioDeviceInventory;->setBluetoothA2dpDeviceConnectionState(Landroid/bluetooth/BluetoothDevice;IIZII)I
PLcom/android/server/audio/AudioDeviceInventory;->setCurrentAudioRouteNameIfPossible(Ljava/lang/String;)V
PLcom/android/server/audio/AudioDeviceInventory;->setWiredDeviceConnectionState(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
PLcom/android/server/audio/AudioDeviceInventory;->updateAudioRoutes(II)V
PLcom/android/server/audio/AudioEventLogger$Event;->printLog(Ljava/lang/String;)Lcom/android/server/audio/AudioEventLogger$Event;
PLcom/android/server/audio/AudioEventLogger$StringEvent;-><init>(Ljava/lang/String;)V
PLcom/android/server/audio/AudioEventLogger$StringEvent;->eventToString()Ljava/lang/String;
PLcom/android/server/audio/AudioService$AudioHandler;->onPlaySoundEffect(II)V
PLcom/android/server/audio/AudioService$AudioHandler;->persistVolume(Lcom/android/server/audio/AudioService$VolumeStreamState;I)V
PLcom/android/server/audio/AudioService$AudioPolicyProxy;-><init>(Lcom/android/server/audio/AudioService;Landroid/media/audiopolicy/AudioPolicyConfig;Landroid/media/audiopolicy/IAudioPolicyCallback;ZZZ)V
PLcom/android/server/audio/AudioService$AudioPolicyProxy;->connectMixes()V
PLcom/android/server/audio/AudioService$AudioPolicyProxy;->hasMixAffectingUsage(I)Z
PLcom/android/server/audio/AudioService$AudioPolicyProxy;->release()V
PLcom/android/server/audio/AudioService$AudioServiceInternal;->adjustStreamVolumeForUid(IIILjava/lang/String;I)V
PLcom/android/server/audio/AudioService$AudioServiceInternal;->adjustSuggestedStreamVolumeForUid(IIILjava/lang/String;I)V
PLcom/android/server/audio/AudioService$AudioServiceInternal;->getRingerModeInternal()I
PLcom/android/server/audio/AudioService$AudioServiceInternal;->setRingerModeInternal(ILjava/lang/String;)V
PLcom/android/server/audio/AudioService$AudioServiceInternal;->silenceRingerModeInternal(Ljava/lang/String;)V
PLcom/android/server/audio/AudioService$ForceControlStreamClient;-><init>(Lcom/android/server/audio/AudioService;Landroid/os/IBinder;)V
PLcom/android/server/audio/AudioService$ForceControlStreamClient;->release()V
PLcom/android/server/audio/AudioService$RmtSbmxFullVolDeathHandler;-><init>(Lcom/android/server/audio/AudioService;Landroid/os/IBinder;)V
PLcom/android/server/audio/AudioService$RmtSbmxFullVolDeathHandler;->forget()V
PLcom/android/server/audio/AudioService$RmtSbmxFullVolDeathHandler;->isHandlerFor(Landroid/os/IBinder;)Z
PLcom/android/server/audio/AudioService$SetModeDeathHandler;->getBinder()Landroid/os/IBinder;
PLcom/android/server/audio/AudioService$SetModeDeathHandler;->getMode()I
PLcom/android/server/audio/AudioService$SetModeDeathHandler;->getPid()I
PLcom/android/server/audio/AudioService$SetModeDeathHandler;->setMode(I)V
PLcom/android/server/audio/AudioService$VolumeController;->postVolumeChanged(II)V
PLcom/android/server/audio/AudioService$VolumeController;->setVisible(Z)V
PLcom/android/server/audio/AudioService$VolumeController;->suppressAdjustment(IIZ)Z
PLcom/android/server/audio/AudioService$VolumeStreamState;->access$800(Lcom/android/server/audio/AudioService$VolumeStreamState;)Z
PLcom/android/server/audio/AudioService$VolumeStreamState;->adjustIndex(IILjava/lang/String;)Z
PLcom/android/server/audio/AudioService$VolumeStreamState;->getAbsoluteVolumeIndex(I)I
PLcom/android/server/audio/AudioService$VolumeStreamState;->hasIndexForDevice(I)Z
PLcom/android/server/audio/AudioService$VolumeStreamState;->refreshRange(I)V
PLcom/android/server/audio/AudioService;->abandonAudioFocus(Landroid/media/IAudioFocusDispatcher;Ljava/lang/String;Landroid/media/AudioAttributes;Ljava/lang/String;)I
PLcom/android/server/audio/AudioService;->adjustStreamVolume(IIILjava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/audio/AudioService;->adjustSuggestedStreamVolume(IIILjava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/audio/AudioService;->avrcpSupportsAbsoluteVolume(Ljava/lang/String;Z)V
PLcom/android/server/audio/AudioService;->checkAudioSettingsPermission(Ljava/lang/String;)Z
PLcom/android/server/audio/AudioService;->checkMusicActive(ILjava/lang/String;)V
PLcom/android/server/audio/AudioService;->checkSafeMediaVolume(III)Z
PLcom/android/server/audio/AudioService;->checkVolumeCecOnHdmiConnection(ILjava/lang/String;)V
PLcom/android/server/audio/AudioService;->discardRmtSbmxFullVolDeathHandlerFor(Landroid/os/IBinder;)Z
PLcom/android/server/audio/AudioService;->ensureValidDirection(I)V
PLcom/android/server/audio/AudioService;->forceFocusDuckingForAccessibility(Landroid/media/AudioAttributes;II)Z
PLcom/android/server/audio/AudioService;->forceRemoteSubmixFullVolume(ZLandroid/os/IBinder;)V
PLcom/android/server/audio/AudioService;->forceVolumeControlStream(ILandroid/os/IBinder;)V
PLcom/android/server/audio/AudioService;->getActiveStreamType(I)I
PLcom/android/server/audio/AudioService;->getCurrentAudioFocus()I
PLcom/android/server/audio/AudioService;->getFocusRampTimeMs(ILandroid/media/AudioAttributes;)I
PLcom/android/server/audio/AudioService;->getNewRingerMode(III)I
PLcom/android/server/audio/AudioService;->getRingtonePlayer()Landroid/media/IRingtonePlayer;
PLcom/android/server/audio/AudioService;->getStreamState(I)Lcom/android/server/audio/AudioService$VolumeStreamState;
PLcom/android/server/audio/AudioService;->getStreamVolume(I)I
PLcom/android/server/audio/AudioService;->getUiSoundsStreamType()I
PLcom/android/server/audio/AudioService;->handleAudioEffectBroadcast(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/audio/AudioService;->handleBluetoothA2dpDeviceConfigChange(Landroid/bluetooth/BluetoothDevice;)V
PLcom/android/server/audio/AudioService;->hasMediaDynamicPolicy()Z
PLcom/android/server/audio/AudioService;->isAndroidNPlus(Ljava/lang/String;)Z
PLcom/android/server/audio/AudioService;->isBluetoothA2dpOn()Z
PLcom/android/server/audio/AudioService;->isCameraSoundForced()Z
PLcom/android/server/audio/AudioService;->isPolicyRegisterAllowed(Landroid/media/audiopolicy/AudioPolicyConfig;Landroid/media/projection/IMediaProjection;)Z
PLcom/android/server/audio/AudioService;->isSpeakerphoneOn()Z
PLcom/android/server/audio/AudioService;->maybeVibrate(Landroid/os/VibrationEffect;Ljava/lang/String;)Z
PLcom/android/server/audio/AudioService;->notifyVolumeControllerVisible(Landroid/media/IVolumeController;Z)V
PLcom/android/server/audio/AudioService;->observeDevicesForAllStreams()V
PLcom/android/server/audio/AudioService;->onAccessoryPlugMediaUnmute(I)V
PLcom/android/server/audio/AudioService;->onCheckMusicActive(Ljava/lang/String;)V
PLcom/android/server/audio/AudioService;->onConfigureSafeVolume(ZLjava/lang/String;)V
PLcom/android/server/audio/AudioService;->onSetStreamVolume(IIIILjava/lang/String;)V
PLcom/android/server/audio/AudioService;->playSoundEffect(I)V
PLcom/android/server/audio/AudioService;->playSoundEffectVolume(IF)V
PLcom/android/server/audio/AudioService;->playerAttributes(ILandroid/media/AudioAttributes;)V
PLcom/android/server/audio/AudioService;->playerEvent(II)V
PLcom/android/server/audio/AudioService;->playerHasOpPlayAudio(IZ)V
PLcom/android/server/audio/AudioService;->postAccessoryPlugMediaUnmute(I)V
PLcom/android/server/audio/AudioService;->registerAudioPolicy(Landroid/media/audiopolicy/AudioPolicyConfig;Landroid/media/audiopolicy/IAudioPolicyCallback;ZZZLandroid/media/projection/IMediaProjection;)Ljava/lang/String;
PLcom/android/server/audio/AudioService;->registerAudioServerStateDispatcher(Landroid/media/IAudioServerStateDispatcher;)V
PLcom/android/server/audio/AudioService;->releasePlayer(I)V
PLcom/android/server/audio/AudioService;->requestAudioFocus(Landroid/media/AudioAttributes;ILandroid/os/IBinder;Landroid/media/IAudioFocusDispatcher;Ljava/lang/String;Ljava/lang/String;ILandroid/media/audiopolicy/IAudioPolicyCallback;I)I
PLcom/android/server/audio/AudioService;->sendMsg(Landroid/os/Handler;IIIILjava/lang/Object;I)V
PLcom/android/server/audio/AudioService;->sendVolumeUpdate(IIII)V
PLcom/android/server/audio/AudioService;->setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(Landroid/bluetooth/BluetoothDevice;IIZI)I
PLcom/android/server/audio/AudioService;->setBluetoothA2dpOn(Z)V
PLcom/android/server/audio/AudioService;->setDeviceVolume(Lcom/android/server/audio/AudioService$VolumeStreamState;I)V
PLcom/android/server/audio/AudioService;->setMicrophoneMute(ZLjava/lang/String;I)V
PLcom/android/server/audio/AudioService;->setMicrophoneMuteNoCallerCheck(ZI)V
PLcom/android/server/audio/AudioService;->setMode(ILandroid/os/IBinder;Ljava/lang/String;)V
PLcom/android/server/audio/AudioService;->setModeInt(ILandroid/os/IBinder;ILjava/lang/String;)I
PLcom/android/server/audio/AudioService;->setSpeakerphoneOn(Z)V
PLcom/android/server/audio/AudioService;->setStreamVolume(IIILjava/lang/String;)V
PLcom/android/server/audio/AudioService;->setStreamVolume(IIILjava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/audio/AudioService;->setSystemAudioVolume(IIII)V
PLcom/android/server/audio/AudioService;->setWiredDeviceConnectionState(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/audio/AudioService;->silenceRingerModeInternal(Ljava/lang/String;)V
PLcom/android/server/audio/AudioService;->stopBluetoothSco(Landroid/os/IBinder;)V
PLcom/android/server/audio/AudioService;->unregisterAudioPolicyAsync(Landroid/media/audiopolicy/IAudioPolicyCallback;)V
PLcom/android/server/audio/AudioService;->updateFlagsForSystemAudio(I)I
PLcom/android/server/audio/AudioService;->volumeAdjustmentAllowedByDnd(II)Z
PLcom/android/server/audio/BtHelper$1;->onServiceConnected(ILandroid/bluetooth/BluetoothProfile;)V
PLcom/android/server/audio/BtHelper$BluetoothA2dpDeviceInfo;->getBtDevice()Landroid/bluetooth/BluetoothDevice;
PLcom/android/server/audio/BtHelper$BluetoothA2dpDeviceInfo;->getCodec()I
PLcom/android/server/audio/BtHelper$BluetoothA2dpDeviceInfo;->getVolume()I
PLcom/android/server/audio/BtHelper;->disconnectBluetoothSco(I)V
PLcom/android/server/audio/BtHelper;->getA2dpCodec(Landroid/bluetooth/BluetoothDevice;)I
PLcom/android/server/audio/BtHelper;->getScoClient(Landroid/os/IBinder;Z)Lcom/android/server/audio/BtHelper$ScoClient;
PLcom/android/server/audio/BtHelper;->handleBtScoActiveDeviceChange(Landroid/bluetooth/BluetoothDevice;Z)Z
PLcom/android/server/audio/BtHelper;->isBluetoothScoOn()Z
PLcom/android/server/audio/BtHelper;->onA2dpProfileConnected(Landroid/bluetooth/BluetoothA2dp;)V
PLcom/android/server/audio/BtHelper;->onHeadsetProfileConnected(Landroid/bluetooth/BluetoothHeadset;)V
PLcom/android/server/audio/BtHelper;->onHearingAidProfileConnected(Landroid/bluetooth/BluetoothHearingAid;)V
PLcom/android/server/audio/BtHelper;->receiveBtEvent(Landroid/content/Intent;)V
PLcom/android/server/audio/BtHelper;->setAvrcpAbsoluteVolumeIndex(I)V
PLcom/android/server/audio/BtHelper;->setAvrcpAbsoluteVolumeSupported(Z)V
PLcom/android/server/audio/BtHelper;->setBtScoActiveDevice(Landroid/bluetooth/BluetoothDevice;)V
PLcom/android/server/audio/BtHelper;->stopBluetoothScoForClient(Landroid/os/IBinder;Ljava/lang/String;)V
PLcom/android/server/audio/FocusRequester;-><init>(Landroid/media/AudioAttributes;IILandroid/media/IAudioFocusDispatcher;Landroid/os/IBinder;Ljava/lang/String;Lcom/android/server/audio/MediaFocusControl$AudioFocusDeathHandler;Ljava/lang/String;ILcom/android/server/audio/MediaFocusControl;I)V
PLcom/android/server/audio/FocusRequester;->finalize()V
PLcom/android/server/audio/FocusRequester;->focusLossForGainRequest(I)I
PLcom/android/server/audio/FocusRequester;->getClientId()Ljava/lang/String;
PLcom/android/server/audio/FocusRequester;->getClientUid()I
PLcom/android/server/audio/FocusRequester;->getGainRequest()I
PLcom/android/server/audio/FocusRequester;->getGrantFlags()I
PLcom/android/server/audio/FocusRequester;->getSdkTarget()I
PLcom/android/server/audio/FocusRequester;->handleFocusGain(I)V
PLcom/android/server/audio/FocusRequester;->handleFocusGainFromRequest(I)V
PLcom/android/server/audio/FocusRequester;->handleFocusLoss(ILcom/android/server/audio/FocusRequester;Z)V
PLcom/android/server/audio/FocusRequester;->handleFocusLossFromGain(ILcom/android/server/audio/FocusRequester;Z)Z
PLcom/android/server/audio/FocusRequester;->hasSameBinder(Landroid/os/IBinder;)Z
PLcom/android/server/audio/FocusRequester;->hasSameClient(Ljava/lang/String;)Z
PLcom/android/server/audio/FocusRequester;->hasSameUid(I)Z
PLcom/android/server/audio/FocusRequester;->isLockedFocusOwner()Z
PLcom/android/server/audio/FocusRequester;->release()V
PLcom/android/server/audio/FocusRequester;->toAudioFocusInfo()Landroid/media/AudioFocusInfo;
PLcom/android/server/audio/MediaFocusControl$1;->run()V
PLcom/android/server/audio/MediaFocusControl$2;->run()V
PLcom/android/server/audio/MediaFocusControl$AudioFocusDeathHandler;-><init>(Lcom/android/server/audio/MediaFocusControl;Landroid/os/IBinder;)V
PLcom/android/server/audio/MediaFocusControl$AudioFocusDeathHandler;->binderDied()V
PLcom/android/server/audio/MediaFocusControl;->abandonAudioFocus(Landroid/media/IAudioFocusDispatcher;Ljava/lang/String;Landroid/media/AudioAttributes;Ljava/lang/String;)I
PLcom/android/server/audio/MediaFocusControl;->addFocusFollower(Landroid/media/audiopolicy/IAudioPolicyCallback;)V
PLcom/android/server/audio/MediaFocusControl;->canReassignAudioFocus()Z
PLcom/android/server/audio/MediaFocusControl;->duckPlayers(Lcom/android/server/audio/FocusRequester;Lcom/android/server/audio/FocusRequester;Z)Z
PLcom/android/server/audio/MediaFocusControl;->getCurrentAudioFocus()I
PLcom/android/server/audio/MediaFocusControl;->mustNotifyFocusOwnerOnDuck()Z
PLcom/android/server/audio/MediaFocusControl;->notifyExtFocusPolicyFocusRequest_syncAf(Landroid/media/AudioFocusInfo;Landroid/media/IAudioFocusDispatcher;Landroid/os/IBinder;)Z
PLcom/android/server/audio/MediaFocusControl;->notifyExtPolicyCurrentFocusAsync(Landroid/media/audiopolicy/IAudioPolicyCallback;)V
PLcom/android/server/audio/MediaFocusControl;->notifyExtPolicyFocusGrant_syncAf(Landroid/media/AudioFocusInfo;I)V
PLcom/android/server/audio/MediaFocusControl;->notifyExtPolicyFocusLoss_syncAf(Landroid/media/AudioFocusInfo;Z)V
PLcom/android/server/audio/MediaFocusControl;->propagateFocusLossFromGain_syncAf(ILcom/android/server/audio/FocusRequester;Z)V
PLcom/android/server/audio/MediaFocusControl;->pushBelowLockedFocusOwners(Lcom/android/server/audio/FocusRequester;)I
PLcom/android/server/audio/MediaFocusControl;->removeFocusFollower(Landroid/media/audiopolicy/IAudioPolicyCallback;)V
PLcom/android/server/audio/MediaFocusControl;->removeFocusStackEntry(Ljava/lang/String;ZZ)V
PLcom/android/server/audio/MediaFocusControl;->removeFocusStackEntryOnDeath(Landroid/os/IBinder;)V
PLcom/android/server/audio/MediaFocusControl;->requestAudioFocus(Landroid/media/AudioAttributes;ILandroid/os/IBinder;Landroid/media/IAudioFocusDispatcher;Ljava/lang/String;Ljava/lang/String;IIZ)I
PLcom/android/server/audio/MediaFocusControl;->runAudioCheckerForRingOrCallAsync(Z)V
PLcom/android/server/audio/MediaFocusControl;->unduckPlayers(Lcom/android/server/audio/FocusRequester;)V
PLcom/android/server/audio/PlaybackActivityMonitor$DuckEvent;->eventToString()Ljava/lang/String;
PLcom/android/server/audio/PlaybackActivityMonitor$DuckingManager$DuckedApp;->addDuck(Landroid/media/AudioPlaybackConfiguration;Z)V
PLcom/android/server/audio/PlaybackActivityMonitor$DuckingManager$DuckedApp;->removeUnduckAll(Ljava/util/HashMap;)V
PLcom/android/server/audio/PlaybackActivityMonitor$DuckingManager;->checkDuck(Landroid/media/AudioPlaybackConfiguration;)V
PLcom/android/server/audio/PlaybackActivityMonitor$DuckingManager;->duckUid(ILjava/util/ArrayList;)V
PLcom/android/server/audio/PlaybackActivityMonitor$DuckingManager;->removeReleased(Landroid/media/AudioPlaybackConfiguration;)V
PLcom/android/server/audio/PlaybackActivityMonitor$DuckingManager;->unduckUid(ILjava/util/HashMap;)V
PLcom/android/server/audio/PlaybackActivityMonitor$PlayMonitorClient;->binderDied()V
PLcom/android/server/audio/PlaybackActivityMonitor;->checkConfigurationCaller(ILandroid/media/AudioPlaybackConfiguration;I)Z
PLcom/android/server/audio/PlaybackActivityMonitor;->checkVolumeForPrivilegedAlarm(Landroid/media/AudioPlaybackConfiguration;I)V
PLcom/android/server/audio/PlaybackActivityMonitor;->dispatchPlaybackChange(Z)V
PLcom/android/server/audio/PlaybackActivityMonitor;->duckPlayers(Lcom/android/server/audio/FocusRequester;Lcom/android/server/audio/FocusRequester;Z)Z
PLcom/android/server/audio/PlaybackActivityMonitor;->mutePlayersForCall([I)V
PLcom/android/server/audio/PlaybackActivityMonitor;->playerAttributes(ILandroid/media/AudioAttributes;I)V
PLcom/android/server/audio/PlaybackActivityMonitor;->playerDeath(I)V
PLcom/android/server/audio/PlaybackActivityMonitor;->playerEvent(III)V
PLcom/android/server/audio/PlaybackActivityMonitor;->releasePlayer(II)V
PLcom/android/server/audio/PlaybackActivityMonitor;->unduckPlayers(Lcom/android/server/audio/FocusRequester;)V
PLcom/android/server/audio/PlaybackActivityMonitor;->unmutePlayersForCall()V
PLcom/android/server/audio/PlaybackActivityMonitor;->unregisterPlaybackCallback(Landroid/media/IPlaybackConfigDispatcher;)V
PLcom/android/server/audio/RecordingActivityMonitor$RecordingEvent;-><init>(IIIILjava/lang/String;)V
PLcom/android/server/audio/RecordingActivityMonitor;->dispatchCallbacks(Ljava/util/List;)V
PLcom/android/server/audio/RecordingActivityMonitor;->onRecordingConfigurationChanged(IIIIIZ[I[Landroid/media/audiofx/AudioEffect$Descriptor;[Landroid/media/audiofx/AudioEffect$Descriptor;ILjava/lang/String;)V
PLcom/android/server/audio/RecordingActivityMonitor;->updateSnapshot(IIII[IIZI[Landroid/media/audiofx/AudioEffect$Descriptor;[Landroid/media/audiofx/AudioEffect$Descriptor;)Ljava/util/List;
PLcom/android/server/audio/RotationHelper$AudioDisplayListener;->onDisplayAdded(I)V
PLcom/android/server/audio/RotationHelper$AudioDisplayListener;->onDisplayChanged(I)V
PLcom/android/server/audio/RotationHelper$AudioDisplayListener;->onDisplayRemoved(I)V
PLcom/android/server/audio/RotationHelper;->publishRotation(I)V
PLcom/android/server/autofill/-$$Lambda$AutofillManagerService$1$1-WNu3tTkxodB_LsZ7dGIlvrPN0;-><init>()V
PLcom/android/server/autofill/-$$Lambda$Helper$nK3g_oXXf8NGajcUf0W5JsQzf3w;->matches(Landroid/app/assist/AssistStructure$ViewNode;)Z
PLcom/android/server/autofill/-$$Lambda$RemoteAugmentedAutofillService$e7zSmzv77rBdYV5oCl-Y8EJj9dY;-><init>()V
PLcom/android/server/autofill/-$$Lambda$RemoteAugmentedAutofillService$e7zSmzv77rBdYV5oCl-Y8EJj9dY;->run(Landroid/os/IInterface;)V
PLcom/android/server/autofill/-$$Lambda$RemoteFillService$_5v43Gwb-Yar1uuVIqDgfleCP_4;->run()V
PLcom/android/server/autofill/-$$Lambda$Session$0VAc60LP16186Azy3Ov7dL7BsAE;-><init>()V
PLcom/android/server/autofill/-$$Lambda$Session$0VAc60LP16186Azy3Ov7dL7BsAE;->accept(Ljava/lang/Object;)V
PLcom/android/server/autofill/-$$Lambda$Session$eVloK5PeyeuPZn1G52SC-fXIsjk;->run()V
PLcom/android/server/autofill/-$$Lambda$Session$xw4trZ-LA7gCvZvpKJ93vf377ak;->binderDied()V
PLcom/android/server/autofill/AutofillManagerService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/autofill/AutofillManagerService$AutoFillManagerServiceStub;->addClient(Landroid/view/autofill/IAutoFillManagerClient;ILcom/android/internal/os/IResultReceiver;)V
PLcom/android/server/autofill/AutofillManagerService$AutoFillManagerServiceStub;->cancelSession(II)V
PLcom/android/server/autofill/AutofillManagerService$AutoFillManagerServiceStub;->finishSession(II)V
PLcom/android/server/autofill/AutofillManagerService$AutoFillManagerServiceStub;->getFillEventHistory(Lcom/android/internal/os/IResultReceiver;)V
PLcom/android/server/autofill/AutofillManagerService$AutoFillManagerServiceStub;->isServiceSupported(ILcom/android/internal/os/IResultReceiver;)V
PLcom/android/server/autofill/AutofillManagerService$AutoFillManagerServiceStub;->removeClient(Landroid/view/autofill/IAutoFillManagerClient;I)V
PLcom/android/server/autofill/AutofillManagerService$AutoFillManagerServiceStub;->restoreSession(ILandroid/os/IBinder;Landroid/os/IBinder;Lcom/android/internal/os/IResultReceiver;)V
PLcom/android/server/autofill/AutofillManagerService$AutoFillManagerServiceStub;->setAugmentedAutofillWhitelist(Ljava/util/List;Ljava/util/List;Lcom/android/internal/os/IResultReceiver;)V
PLcom/android/server/autofill/AutofillManagerService$AutoFillManagerServiceStub;->setHasCallback(IIZ)V
PLcom/android/server/autofill/AutofillManagerService$AutoFillManagerServiceStub;->startSession(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/view/autofill/AutofillId;Landroid/graphics/Rect;Landroid/view/autofill/AutofillValue;IZILandroid/content/ComponentName;ZLcom/android/internal/os/IResultReceiver;)V
PLcom/android/server/autofill/AutofillManagerService$AutoFillManagerServiceStub;->updateSession(ILandroid/view/autofill/AutofillId;Landroid/graphics/Rect;Landroid/view/autofill/AutofillValue;III)V
PLcom/android/server/autofill/AutofillManagerService$AutofillCompatState;->addCompatibilityModeRequest(Ljava/lang/String;J[Ljava/lang/String;I)V
PLcom/android/server/autofill/AutofillManagerService$LocalService;->onBackKeyPressed()V
PLcom/android/server/autofill/AutofillManagerService;->access$1100(Lcom/android/server/autofill/AutofillManagerService;Lcom/android/internal/os/IResultReceiver;I)V
PLcom/android/server/autofill/AutofillManagerService;->access$1300(Lcom/android/server/autofill/AutofillManagerService;Lcom/android/internal/os/IResultReceiver;I)V
PLcom/android/server/autofill/AutofillManagerService;->access$1800(Lcom/android/server/autofill/AutofillManagerService;)Landroid/app/ActivityManagerInternal;
PLcom/android/server/autofill/AutofillManagerService;->access$1900(Lcom/android/server/autofill/AutofillManagerService;)Ljava/lang/Object;
PLcom/android/server/autofill/AutofillManagerService;->access$2000(Lcom/android/server/autofill/AutofillManagerService;)Landroid/app/ActivityManagerInternal;
PLcom/android/server/autofill/AutofillManagerService;->access$2000(Lcom/android/server/autofill/AutofillManagerService;I)Lcom/android/server/infra/AbstractPerUserSystemService;
PLcom/android/server/autofill/AutofillManagerService;->access$2100(Lcom/android/server/autofill/AutofillManagerService;)Ljava/lang/Object;
PLcom/android/server/autofill/AutofillManagerService;->access$2100(Lcom/android/server/autofill/AutofillManagerService;)Z
PLcom/android/server/autofill/AutofillManagerService;->access$2200(Lcom/android/server/autofill/AutofillManagerService;I)Lcom/android/server/infra/AbstractPerUserSystemService;
PLcom/android/server/autofill/AutofillManagerService;->access$2300(Lcom/android/server/autofill/AutofillManagerService;)Z
PLcom/android/server/autofill/AutofillManagerService;->getPartitionMaxCount()I
PLcom/android/server/autofill/AutofillManagerService;->getVisibleDatasetsMaxCount()I
PLcom/android/server/autofill/AutofillManagerService;->getWhitelistedCompatModePackages(Ljava/lang/String;)Ljava/util/Map;
PLcom/android/server/autofill/AutofillManagerService;->send(Lcom/android/internal/os/IResultReceiver;I)V
PLcom/android/server/autofill/AutofillManagerService;->send(Lcom/android/internal/os/IResultReceiver;Landroid/os/Bundle;)V
PLcom/android/server/autofill/AutofillManagerServiceImpl$PruneTask;->doInBackground([Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/autofill/AutofillManagerServiceImpl$PruneTask;->doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
PLcom/android/server/autofill/AutofillManagerServiceImpl;->assertCallerLocked(Landroid/content/ComponentName;Z)V
PLcom/android/server/autofill/AutofillManagerServiceImpl;->cancelSessionLocked(II)V
PLcom/android/server/autofill/AutofillManagerServiceImpl;->createSessionByTokenLocked(Landroid/os/IBinder;IILandroid/os/IBinder;ZLandroid/content/ComponentName;ZZI)Lcom/android/server/autofill/Session;
PLcom/android/server/autofill/AutofillManagerServiceImpl;->destroyFinishedSessionsLocked()V
PLcom/android/server/autofill/AutofillManagerServiceImpl;->finishSessionLocked(II)V
PLcom/android/server/autofill/AutofillManagerServiceImpl;->getFillEventHistory(I)Landroid/service/autofill/FillEventHistory;
PLcom/android/server/autofill/AutofillManagerServiceImpl;->getPreviousSessionsLocked(Lcom/android/server/autofill/Session;)Ljava/util/ArrayList;
PLcom/android/server/autofill/AutofillManagerServiceImpl;->getRemoteAugmentedAutofillServiceLocked()Lcom/android/server/autofill/RemoteAugmentedAutofillService;
PLcom/android/server/autofill/AutofillManagerServiceImpl;->handlePackageUpdateLocked(Ljava/lang/String;)V
PLcom/android/server/autofill/AutofillManagerServiceImpl;->isAutofillDisabledLocked(Landroid/content/ComponentName;)Z
PLcom/android/server/autofill/AutofillManagerServiceImpl;->isCalledByAugmentedAutofillServiceLocked(Ljava/lang/String;I)Z
PLcom/android/server/autofill/AutofillManagerServiceImpl;->isCalledByServiceLocked(Ljava/lang/String;I)Z
PLcom/android/server/autofill/AutofillManagerServiceImpl;->newServiceInfoLocked(Landroid/content/ComponentName;)Landroid/content/pm/ServiceInfo;
PLcom/android/server/autofill/AutofillManagerServiceImpl;->pruneAbandonedSessionsLocked()V
PLcom/android/server/autofill/AutofillManagerServiceImpl;->resetLastResponse()V
PLcom/android/server/autofill/AutofillManagerServiceImpl;->setAugmentedAutofillWhitelistLocked(Ljava/util/List;Ljava/util/List;I)Z
PLcom/android/server/autofill/AutofillManagerServiceImpl;->setHasCallback(IIZ)V
PLcom/android/server/autofill/AutofillManagerServiceImpl;->setLastResponse(ILandroid/service/autofill/FillResponse;)V
PLcom/android/server/autofill/AutofillManagerServiceImpl;->startSessionLocked(Landroid/os/IBinder;IILandroid/os/IBinder;Landroid/view/autofill/AutofillId;Landroid/graphics/Rect;Landroid/view/autofill/AutofillValue;ZLandroid/content/ComponentName;ZZI)I
PLcom/android/server/autofill/AutofillManagerServiceImpl;->updateSessionLocked(IILandroid/view/autofill/AutofillId;Landroid/graphics/Rect;Landroid/view/autofill/AutofillValue;II)Z
PLcom/android/server/autofill/AutofillManagerServiceImpl;->whitelistForAugmentedAutofillPackages(Ljava/util/List;)V
PLcom/android/server/autofill/FieldClassificationStrategy;->getServiceInfo()Landroid/content/pm/ServiceInfo;
PLcom/android/server/autofill/Helper;->findViewNode(Landroid/app/assist/AssistStructure;Lcom/android/server/autofill/Helper$ViewNodeFilter;)Landroid/app/assist/AssistStructure$ViewNode;
PLcom/android/server/autofill/Helper;->newLogMaker(ILjava/lang/String;IZ)Landroid/metrics/LogMaker;
PLcom/android/server/autofill/RemoteAugmentedAutofillService$MyPendingRequest;-><init>(Lcom/android/server/autofill/RemoteAugmentedAutofillService;ILcom/android/server/autofill/RemoteAugmentedAutofillService$1;)V
PLcom/android/server/autofill/RemoteAugmentedAutofillService$PendingAutofillRequest$1;-><init>(Lcom/android/server/autofill/RemoteAugmentedAutofillService$PendingAutofillRequest;)V
PLcom/android/server/autofill/RemoteAugmentedAutofillService$PendingAutofillRequest$1;->onSuccess()V
PLcom/android/server/autofill/RemoteAugmentedAutofillService$PendingAutofillRequest$2;->send(ILandroid/os/Bundle;)V
PLcom/android/server/autofill/RemoteAugmentedAutofillService$PendingAutofillRequest;->onTimeout(Lcom/android/internal/infra/AbstractRemoteService;)V
PLcom/android/server/autofill/RemoteAugmentedAutofillService$PendingAutofillRequest;->run()V
PLcom/android/server/autofill/RemoteAugmentedAutofillService;->getComponentName(Ljava/lang/String;IZ)Landroid/content/ComponentName;
PLcom/android/server/autofill/RemoteAugmentedAutofillService;->getComponentName(Ljava/lang/String;IZ)Landroid/util/Pair;
PLcom/android/server/autofill/RemoteAugmentedAutofillService;->getRemoteRequestMillis()J
PLcom/android/server/autofill/RemoteAugmentedAutofillService;->getServiceInterface(Landroid/os/IBinder;)Landroid/os/IInterface;
PLcom/android/server/autofill/RemoteAugmentedAutofillService;->getTimeoutIdleBindMillis()J
PLcom/android/server/autofill/RemoteAugmentedAutofillService;->handleOnConnectedStateChanged(Z)V
PLcom/android/server/autofill/RemoteAugmentedAutofillService;->toString()Ljava/lang/String;
PLcom/android/server/autofill/RemoteFillService$PendingFillRequest$1;->onCancellable(Landroid/os/ICancellationSignal;)V
PLcom/android/server/autofill/RemoteFillService$PendingFillRequest$1;->onSuccess(Landroid/service/autofill/FillResponse;)V
PLcom/android/server/autofill/RemoteFillService$PendingFillRequest;->cancel()Z
PLcom/android/server/autofill/RemoteFillService$PendingFillRequest;->run()V
PLcom/android/server/autofill/RemoteFillService;-><init>(Landroid/content/Context;Landroid/content/ComponentName;ILcom/android/server/autofill/RemoteFillService$FillServiceCallbacks;Z)V
PLcom/android/server/autofill/RemoteFillService;->cancelCurrentRequest()I
PLcom/android/server/autofill/RemoteFillService;->getRemoteRequestMillis()J
PLcom/android/server/autofill/RemoteFillService;->getServiceInterface(Landroid/os/IBinder;)Landroid/os/IInterface;
PLcom/android/server/autofill/RemoteFillService;->getTimeoutIdleBindMillis()J
PLcom/android/server/autofill/RemoteFillService;->handleOnConnectedStateChanged(Z)V
PLcom/android/server/autofill/Session$1;-><init>(Lcom/android/server/autofill/Session;)V
PLcom/android/server/autofill/Session$1;->onHandleAssistData(Landroid/os/Bundle;)V
PLcom/android/server/autofill/Session;-><init>(Lcom/android/server/autofill/AutofillManagerServiceImpl;Lcom/android/server/autofill/ui/AutoFillUI;Landroid/content/Context;Landroid/os/Handler;ILjava/lang/Object;IIILandroid/os/IBinder;Landroid/os/IBinder;ZLandroid/util/LocalLog;Landroid/util/LocalLog;Landroid/content/ComponentName;Landroid/content/ComponentName;ZZI)V
PLcom/android/server/autofill/Session;->addTaggedDataToRequestLogLocked(IILjava/lang/Object;)V
PLcom/android/server/autofill/Session;->cancelCurrentRequestLocked()V
PLcom/android/server/autofill/Session;->createOrUpdateViewStateLocked(Landroid/view/autofill/AutofillId;ILandroid/view/autofill/AutofillValue;)Lcom/android/server/autofill/ViewState;
PLcom/android/server/autofill/Session;->createSanitizers(Landroid/service/autofill/SaveInfo;)Landroid/util/ArrayMap;
PLcom/android/server/autofill/Session;->destroyLocked()Lcom/android/server/autofill/RemoteFillService;
PLcom/android/server/autofill/Session;->doLogContextCommitted()V
PLcom/android/server/autofill/Session;->fillContextWithAllowedValuesLocked(Landroid/service/autofill/FillContext;I)V
PLcom/android/server/autofill/Session;->forceRemoveSelfLocked(I)V
PLcom/android/server/autofill/Session;->getLastResponseLocked(Ljava/lang/String;)Landroid/service/autofill/FillResponse;
PLcom/android/server/autofill/Session;->getUiForShowing()Lcom/android/server/autofill/ui/AutoFillUI;
PLcom/android/server/autofill/Session;->getValueFromContextsLocked(Landroid/view/autofill/AutofillId;)Landroid/view/autofill/AutofillValue;
PLcom/android/server/autofill/Session;->lambda$setClientLocked$0$Session()V
PLcom/android/server/autofill/Session;->lambda$setClientLocked$0(Lcom/android/server/autofill/Session;)V
PLcom/android/server/autofill/Session;->logContextCommittedLocked()V
PLcom/android/server/autofill/Session;->mergePreviousSessionLocked(Z)Ljava/util/ArrayList;
PLcom/android/server/autofill/Session;->newLogMaker(I)Landroid/metrics/LogMaker;
PLcom/android/server/autofill/Session;->notifyUnavailableToClient(I)V
PLcom/android/server/autofill/Session;->onFillReady(Landroid/service/autofill/FillResponse;Landroid/view/autofill/AutofillId;Landroid/view/autofill/AutofillValue;)V
PLcom/android/server/autofill/Session;->onFillRequestSuccess(ILandroid/service/autofill/FillResponse;Ljava/lang/String;I)V
PLcom/android/server/autofill/Session;->processNullResponseLocked(I)V
PLcom/android/server/autofill/Session;->processResponseLocked(Landroid/service/autofill/FillResponse;Landroid/os/Bundle;I)V
PLcom/android/server/autofill/Session;->removeSelf()V
PLcom/android/server/autofill/Session;->removeSelfLocked()V
PLcom/android/server/autofill/Session;->requestHideFillUi(Landroid/view/autofill/AutofillId;)V
PLcom/android/server/autofill/Session;->requestNewFillResponseLocked(I)V
PLcom/android/server/autofill/Session;->requestNewFillResponseOnViewEnteredIfNecessaryLocked(Landroid/view/autofill/AutofillId;Lcom/android/server/autofill/ViewState;I)V
PLcom/android/server/autofill/Session;->requestShowFillUi(Landroid/view/autofill/AutofillId;IILandroid/view/autofill/IAutofillWindowPresenter;)V
PLcom/android/server/autofill/Session;->setClientLocked(Landroid/os/IBinder;)V
PLcom/android/server/autofill/Session;->setHasCallbackLocked(Z)V
PLcom/android/server/autofill/Session;->setViewStatesLocked(Landroid/service/autofill/FillResponse;IZ)V
PLcom/android/server/autofill/Session;->setViewStatesLocked(Landroid/service/autofill/FillResponse;Landroid/service/autofill/Dataset;IZ)V
PLcom/android/server/autofill/Session;->shouldStartNewPartitionLocked(Landroid/view/autofill/AutofillId;)Z
PLcom/android/server/autofill/Session;->showSaveLocked()Z
PLcom/android/server/autofill/Session;->switchActivity(Landroid/os/IBinder;Landroid/os/IBinder;)V
PLcom/android/server/autofill/Session;->triggerAugmentedAutofillLocked()Ljava/lang/Runnable;
PLcom/android/server/autofill/Session;->unlinkClientVultureLocked()V
PLcom/android/server/autofill/Session;->updateLocked(Landroid/view/autofill/AutofillId;Landroid/graphics/Rect;Landroid/view/autofill/AutofillValue;II)V
PLcom/android/server/autofill/Session;->updateTrackedIdsLocked()V
PLcom/android/server/autofill/ViewState;->maybeCallOnFillReady(I)V
PLcom/android/server/autofill/ui/-$$Lambda$AutoFillUI$56AC3ykfo4h_e2LSjdkJ3XQn370;->run()V
PLcom/android/server/autofill/ui/-$$Lambda$AutoFillUI$H0BWucCEHDp2_3FUpZ9-CLDtxYQ;->run()V
PLcom/android/server/autofill/ui/-$$Lambda$AutoFillUI$LjywPhTUqjU0ZUlG1crxBg8qhRA;->run()V
PLcom/android/server/autofill/ui/-$$Lambda$AutoFillUI$VF2EbGE70QNyGDbklN9Uz5xHqyQ;->run()V
PLcom/android/server/autofill/ui/-$$Lambda$AutoFillUI$Z-Di7CGd-L0nOI4i7_RO1FYbhgU;->run()V
PLcom/android/server/autofill/ui/-$$Lambda$AutoFillUI$i7qTc5vqiej5Psbl-bIkD7js-Ao;->run()V
PLcom/android/server/autofill/ui/-$$Lambda$E4J-3bUcyqJNd4ZlExSBhwy8Tx4;->run()V
PLcom/android/server/autofill/ui/-$$Lambda$FillUi$AutofillWindowPresenter$N4xQe2B0oe5MBiqZlsy3Lb7vZTg;->run()V
PLcom/android/server/autofill/ui/-$$Lambda$FillUi$FY016gv4LQ5AA6yOkKTH3EM5zaM;-><init>(Lcom/android/server/autofill/ui/FillUi;)V
PLcom/android/server/autofill/ui/-$$Lambda$FillUi$QXIyKJs3cMApGd5ifauQkxdpdqk;-><init>(Lcom/android/server/autofill/ui/FillUi;)V
PLcom/android/server/autofill/ui/-$$Lambda$FillUi$h0jT24YuSGGDnoZ6Tf22n1QRkO8;-><init>(Lcom/android/server/autofill/ui/FillUi;Landroid/service/autofill/FillResponse;)V
PLcom/android/server/autofill/ui/AutoFillUI$1;->onDestroy()V
PLcom/android/server/autofill/ui/AutoFillUI$1;->requestHideFillUi()V
PLcom/android/server/autofill/ui/AutoFillUI$1;->requestShowFillUi(IILandroid/view/autofill/IAutofillWindowPresenter;)V
PLcom/android/server/autofill/ui/AutoFillUI;->hideFillUiUiThread(Lcom/android/server/autofill/ui/AutoFillUI$AutoFillUiCallback;Z)V
PLcom/android/server/autofill/ui/AutoFillUI;->hideSaveUiUiThread(Lcom/android/server/autofill/ui/AutoFillUI$AutoFillUiCallback;)Lcom/android/server/autofill/ui/PendingUi;
PLcom/android/server/autofill/ui/AutoFillUI;->lambda$showFillUi$5(Lcom/android/server/autofill/ui/AutoFillUI;Lcom/android/server/autofill/ui/AutoFillUI$AutoFillUiCallback;Landroid/service/autofill/FillResponse;Landroid/view/autofill/AutofillId;Ljava/lang/String;Ljava/lang/CharSequence;Landroid/graphics/drawable/Drawable;Landroid/metrics/LogMaker;)V
PLcom/android/server/autofill/ui/AutoFillUI;->showFillUi(Landroid/view/autofill/AutofillId;Landroid/service/autofill/FillResponse;Ljava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;Ljava/lang/CharSequence;Landroid/graphics/drawable/Drawable;Lcom/android/server/autofill/ui/AutoFillUI$AutoFillUiCallback;IZ)V
PLcom/android/server/autofill/ui/FillUi$AnchoredWindow;-><init>(Lcom/android/server/autofill/ui/FillUi;Landroid/view/View;Lcom/android/server/autofill/ui/OverlayControl;)V
PLcom/android/server/autofill/ui/FillUi$AnchoredWindow;->hide(Z)V
PLcom/android/server/autofill/ui/FillUi$AnchoredWindow;->show(Landroid/view/WindowManager$LayoutParams;)V
PLcom/android/server/autofill/ui/FillUi$AutofillWindowPresenter;-><init>(Lcom/android/server/autofill/ui/FillUi;Lcom/android/server/autofill/ui/FillUi$1;)V
PLcom/android/server/autofill/ui/FillUi$AutofillWindowPresenter;->hide(Landroid/graphics/Rect;)V
PLcom/android/server/autofill/ui/FillUi$AutofillWindowPresenter;->show(Landroid/view/WindowManager$LayoutParams;Landroid/graphics/Rect;ZI)V
PLcom/android/server/autofill/ui/FillUi;-><init>(Landroid/content/Context;Landroid/service/autofill/FillResponse;Landroid/view/autofill/AutofillId;Ljava/lang/String;Lcom/android/server/autofill/ui/OverlayControl;Ljava/lang/CharSequence;Landroid/graphics/drawable/Drawable;ZLcom/android/server/autofill/ui/FillUi$Callback;)V
PLcom/android/server/autofill/ui/FillUi;->isFullScreen(Landroid/content/Context;)Z
PLcom/android/server/autofill/ui/FillUi;->requestShowFillUi()V
PLcom/android/server/autofill/ui/FillUi;->resolveMaxWindowSize(Landroid/content/Context;Landroid/graphics/Point;)V
PLcom/android/server/autofill/ui/FillUi;->setFilterText(Ljava/lang/String;)V
PLcom/android/server/autofill/ui/OverlayControl;->hideOverlays()V
PLcom/android/server/autofill/ui/OverlayControl;->showOverlays()V
PLcom/android/server/backup/-$$Lambda$-xfpm33S8Jqv3KpU_-llxhj8ZPI;->test(Ljava/lang/Object;)Z
PLcom/android/server/backup/-$$Lambda$Trampoline$RB5ywBeynPqhAQ6VHW4qi9U4c84;->run()V
PLcom/android/server/backup/-$$Lambda$Trampoline$_vkvTSe7bkLYa64kIjWjqjTHe7E;->run()V
PLcom/android/server/backup/-$$Lambda$Trampoline$a6uexAeN8zHcMQQ9h_KZ71UQV_A;->run()V
PLcom/android/server/backup/-$$Lambda$TransportManager$4ND1hZMerK5gHU67okq6DZjKDQw;-><init>()V
PLcom/android/server/backup/-$$Lambda$TransportManager$4ND1hZMerK5gHU67okq6DZjKDQw;->test(Ljava/lang/Object;)Z
PLcom/android/server/backup/-$$Lambda$TransportManager$Qbutmzd17ICwZdy0UzRrO-3_VK0;-><init>()V
PLcom/android/server/backup/-$$Lambda$TransportManager$Qbutmzd17ICwZdy0UzRrO-3_VK0;->test(Ljava/lang/Object;)Z
PLcom/android/server/backup/-$$Lambda$TransportManager$Z9ckpFUW2V4jkdHnyXIEiLuAoBc;-><init>()V
PLcom/android/server/backup/-$$Lambda$TransportManager$_dxJobf45tWiMkaNlKY-z26kB2Q;->test(Ljava/lang/Object;)Z
PLcom/android/server/backup/-$$Lambda$UserBackupManagerService$076XriH8-AsUaXKFvRearB4ERls;->run()V
PLcom/android/server/backup/-$$Lambda$UserBackupManagerService$2$9w65wn45YYtTkXbyQZdj_7K5LSs;->run()V
PLcom/android/server/backup/-$$Lambda$UserBackupManagerService$2$ICUfBQAK1UQkmGSsPDmR00etFBk;->run()V
PLcom/android/server/backup/-$$Lambda$UserBackupManagerService$2$VpHOYQHCWBG618oharjEXEDr57U;->run()V
PLcom/android/server/backup/-$$Lambda$UserBackupManagerService$9cuIH_XloqtNByp_6hXeGaVars8;->onTransportRegistered(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/backup/-$$Lambda$UserBackupManagerService$W51Aw9Pu9AOsFVYQgIZy31INmwI;->accept(Ljava/lang/Object;)V
PLcom/android/server/backup/-$$Lambda$UserBackupManagerService$_gNqJq9Ygtc0ZVwYhCSDKCUKrKY;->run()V
PLcom/android/server/backup/-$$Lambda$UserBackupManagerService$sAYsrY5C5zAl7EgKgwo188kx6JE;->onFinished(Ljava/lang/String;)V
PLcom/android/server/backup/-$$Lambda$pM_c5tVAGDtxjxLF_ONtACWWq6Q;->run()V
PLcom/android/server/backup/BackupAgentTimeoutParameters;->getFullBackupAgentTimeoutMillis()J
PLcom/android/server/backup/BackupAgentTimeoutParameters;->getKvBackupAgentTimeoutMillis()J
PLcom/android/server/backup/BackupAgentTimeoutParameters;->getQuotaExceededTimeoutMillis()J
PLcom/android/server/backup/BackupAgentTimeoutParameters;->getSettingValue(Landroid/content/ContentResolver;)Ljava/lang/String;
PLcom/android/server/backup/BackupAgentTimeoutParameters;->update(Landroid/util/KeyValueListParser;)V
PLcom/android/server/backup/BackupManagerConstants;->getBackupFinishedNotificationReceivers()[Ljava/lang/String;
PLcom/android/server/backup/BackupManagerConstants;->getFullBackupIntervalMilliseconds()J
PLcom/android/server/backup/BackupManagerConstants;->getFullBackupRequireCharging()Z
PLcom/android/server/backup/BackupManagerConstants;->getFullBackupRequiredNetworkType()I
PLcom/android/server/backup/BackupManagerConstants;->getKeyValueBackupFuzzMilliseconds()J
PLcom/android/server/backup/BackupManagerConstants;->getKeyValueBackupIntervalMilliseconds()J
PLcom/android/server/backup/BackupManagerConstants;->getKeyValueBackupRequireCharging()Z
PLcom/android/server/backup/BackupManagerConstants;->getKeyValueBackupRequiredNetworkType()I
PLcom/android/server/backup/BackupManagerConstants;->getSettingValue(Landroid/content/ContentResolver;)Ljava/lang/String;
PLcom/android/server/backup/BackupManagerConstants;->update(Landroid/util/KeyValueListParser;)V
PLcom/android/server/backup/BackupManagerService$Lifecycle;->onStopUser(I)V
PLcom/android/server/backup/BackupManagerService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/backup/BackupManagerService;-><init>(Landroid/content/Context;Lcom/android/server/backup/Trampoline;Landroid/os/HandlerThread;)V
PLcom/android/server/backup/BackupManagerService;->agentConnected(ILjava/lang/String;Landroid/os/IBinder;)V
PLcom/android/server/backup/BackupManagerService;->backupNow(I)V
PLcom/android/server/backup/BackupManagerService;->beginFullBackup(ILcom/android/server/backup/FullBackupJob;)Z
PLcom/android/server/backup/BackupManagerService;->cancelBackups(I)V
PLcom/android/server/backup/BackupManagerService;->dataChanged(ILjava/lang/String;)V
PLcom/android/server/backup/BackupManagerService;->endFullBackup(I)V
PLcom/android/server/backup/BackupManagerService;->getCurrentTransport(I)Ljava/lang/String;
PLcom/android/server/backup/BackupManagerService;->getDataManagementIntent(ILjava/lang/String;)Landroid/content/Intent;
PLcom/android/server/backup/BackupManagerService;->getServiceForUserIfCallerHasPermission(ILjava/lang/String;)Lcom/android/server/backup/UserBackupManagerService;
PLcom/android/server/backup/BackupManagerService;->getServiceUsers()Landroid/util/SparseArray;
PLcom/android/server/backup/BackupManagerService;->isAppEligibleForBackup(ILjava/lang/String;)Z
PLcom/android/server/backup/BackupManagerService;->isBackupEnabled(I)Z
PLcom/android/server/backup/BackupManagerService;->opComplete(IIJ)V
PLcom/android/server/backup/BackupManagerService;->requestBackup(I[Ljava/lang/String;Landroid/app/backup/IBackupObserver;Landroid/app/backup/IBackupManagerMonitor;I)I
PLcom/android/server/backup/BackupManagerService;->selectBackupTransportAsync(ILandroid/content/ComponentName;Landroid/app/backup/ISelectBackupTransportCallback;)V
PLcom/android/server/backup/BackupManagerService;->setBackupEnabled(IZ)V
PLcom/android/server/backup/BackupManagerService;->startServiceForUser(I)V
PLcom/android/server/backup/BackupManagerService;->startServiceForUser(ILcom/android/server/backup/UserBackupManagerService;)V
PLcom/android/server/backup/BackupManagerService;->stopServiceForUser(I)V
PLcom/android/server/backup/BackupManagerService;->updateTransportAttributes(ILandroid/content/ComponentName;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;)V
PLcom/android/server/backup/BackupPasswordManager;->loadStateFromFilesystem()V
PLcom/android/server/backup/BackupUtils;->hashSignature(Landroid/content/pm/Signature;)[B
PLcom/android/server/backup/BackupUtils;->hashSignature([B)[B
PLcom/android/server/backup/BackupUtils;->signaturesMatch(Ljava/util/ArrayList;Landroid/content/pm/PackageInfo;Landroid/content/pm/PackageManagerInternal;)Z
PLcom/android/server/backup/DataChangedJournal;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
PLcom/android/server/backup/DataChangedJournal;->addPackage(Ljava/lang/String;)V
PLcom/android/server/backup/DataChangedJournal;->delete()Z
PLcom/android/server/backup/DataChangedJournal;->equals(Ljava/lang/Object;)Z
PLcom/android/server/backup/DataChangedJournal;->forEach(Ljava/util/function/Consumer;)V
PLcom/android/server/backup/FullBackupJob;-><init>()V
PLcom/android/server/backup/FullBackupJob;->finishBackupPass(I)V
PLcom/android/server/backup/FullBackupJob;->onStartJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/backup/FullBackupJob;->onStopJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/backup/FullBackupJob;->schedule(ILandroid/content/Context;JLcom/android/server/backup/BackupManagerConstants;)V
PLcom/android/server/backup/KeyValueBackupJob;-><init>()V
PLcom/android/server/backup/KeyValueBackupJob;->cancel(ILandroid/content/Context;)V
PLcom/android/server/backup/KeyValueBackupJob;->getJobIdForUserId(I)I
PLcom/android/server/backup/KeyValueBackupJob;->onStartJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/backup/KeyValueBackupJob;->schedule(ILandroid/content/Context;JLcom/android/server/backup/BackupManagerConstants;)V
PLcom/android/server/backup/PackageManagerBackupAgent;->getStorableApplications(Landroid/content/pm/PackageManager;I)Ljava/util/List;
PLcom/android/server/backup/PackageManagerBackupAgent;->onBackup(Landroid/os/ParcelFileDescriptor;Landroid/app/backup/BackupDataOutput;Landroid/os/ParcelFileDescriptor;)V
PLcom/android/server/backup/PackageManagerBackupAgent;->parseStateFile(Landroid/os/ParcelFileDescriptor;)V
PLcom/android/server/backup/PackageManagerBackupAgent;->readSignatureHashArray(Ljava/io/DataInputStream;)Ljava/util/ArrayList;
PLcom/android/server/backup/PackageManagerBackupAgent;->writeStateFile(Ljava/util/List;Landroid/content/ComponentName;JLjava/util/ArrayList;Landroid/os/ParcelFileDescriptor;)V
PLcom/android/server/backup/ProcessedPackagesJournal;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
PLcom/android/server/backup/ProcessedPackagesJournal;->addPackage(Ljava/lang/String;)V
PLcom/android/server/backup/ProcessedPackagesJournal;->init()V
PLcom/android/server/backup/ProcessedPackagesJournal;->loadFromDisk()V
PLcom/android/server/backup/ProcessedPackagesJournal;->reset()V
PLcom/android/server/backup/Trampoline;->agentConnectedForUser(ILjava/lang/String;Landroid/os/IBinder;)V
PLcom/android/server/backup/Trampoline;->backupNow()V
PLcom/android/server/backup/Trampoline;->backupNowForUser(I)V
PLcom/android/server/backup/Trampoline;->beginFullBackup(ILcom/android/server/backup/FullBackupJob;)Z
PLcom/android/server/backup/Trampoline;->cancelBackups()V
PLcom/android/server/backup/Trampoline;->cancelBackupsForUser(I)V
PLcom/android/server/backup/Trampoline;->createBackupManagerService()Lcom/android/server/backup/BackupManagerService;
PLcom/android/server/backup/Trampoline;->endFullBackup(I)V
PLcom/android/server/backup/Trampoline;->getActivatedFileForNonSystemUser(I)Ljava/io/File;
PLcom/android/server/backup/Trampoline;->getCurrentTransport()Ljava/lang/String;
PLcom/android/server/backup/Trampoline;->getCurrentTransportForUser(I)Ljava/lang/String;
PLcom/android/server/backup/Trampoline;->getDataManagementIntent(Ljava/lang/String;)Landroid/content/Intent;
PLcom/android/server/backup/Trampoline;->getDataManagementIntentForUser(ILjava/lang/String;)Landroid/content/Intent;
PLcom/android/server/backup/Trampoline;->getSuppressFileForSystemUser()Ljava/io/File;
PLcom/android/server/backup/Trampoline;->initializeService()V
PLcom/android/server/backup/Trampoline;->isAppEligibleForBackupForUser(ILjava/lang/String;)Z
PLcom/android/server/backup/Trampoline;->isBackupEnabled()Z
PLcom/android/server/backup/Trampoline;->isBackupEnabledForUser(I)Z
PLcom/android/server/backup/Trampoline;->isBackupServiceActive(I)Z
PLcom/android/server/backup/Trampoline;->lambda$initializeService$0$Trampoline()V
PLcom/android/server/backup/Trampoline;->lambda$initializeService$0(Lcom/android/server/backup/Trampoline;)V
PLcom/android/server/backup/Trampoline;->lambda$stopUser$2$Trampoline(I)V
PLcom/android/server/backup/Trampoline;->lambda$unlockUser$1$Trampoline(I)V
PLcom/android/server/backup/Trampoline;->opCompleteForUser(IIJ)V
PLcom/android/server/backup/Trampoline;->postToHandler(Ljava/lang/Runnable;)V
PLcom/android/server/backup/Trampoline;->requestBackup([Ljava/lang/String;Landroid/app/backup/IBackupObserver;Landroid/app/backup/IBackupManagerMonitor;I)I
PLcom/android/server/backup/Trampoline;->requestBackupForUser(I[Ljava/lang/String;Landroid/app/backup/IBackupObserver;Landroid/app/backup/IBackupManagerMonitor;I)I
PLcom/android/server/backup/Trampoline;->selectBackupTransport(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/backup/Trampoline;->selectBackupTransportAsyncForUser(ILandroid/content/ComponentName;Landroid/app/backup/ISelectBackupTransportCallback;)V
PLcom/android/server/backup/Trampoline;->selectBackupTransportForUser(ILjava/lang/String;)Ljava/lang/String;
PLcom/android/server/backup/Trampoline;->setBackupEnabled(Z)V
PLcom/android/server/backup/Trampoline;->setBackupEnabledForUser(IZ)V
PLcom/android/server/backup/Trampoline;->startServiceForUser(I)V
PLcom/android/server/backup/Trampoline;->stopUser(I)V
PLcom/android/server/backup/Trampoline;->unlockUser(I)V
PLcom/android/server/backup/Trampoline;->updateTransportAttributesForUser(ILandroid/content/ComponentName;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;)V
PLcom/android/server/backup/TransportManager;-><init>(ILandroid/content/Context;Ljava/util/Set;Ljava/lang/String;)V
PLcom/android/server/backup/TransportManager;->disposeOfTransportClient(Lcom/android/server/backup/transport/TransportClient;Ljava/lang/String;)V
PLcom/android/server/backup/TransportManager;->getCurrentTransportClient(Ljava/lang/String;)Lcom/android/server/backup/transport/TransportClient;
PLcom/android/server/backup/TransportManager;->getCurrentTransportClientOrThrow(Ljava/lang/String;)Lcom/android/server/backup/transport/TransportClient;
PLcom/android/server/backup/TransportManager;->getCurrentTransportName()Ljava/lang/String;
PLcom/android/server/backup/TransportManager;->getRegisteredTransportDescriptionOrThrowLocked(Landroid/content/ComponentName;)Lcom/android/server/backup/TransportManager$TransportDescription;
PLcom/android/server/backup/TransportManager;->getRegisteredTransportDescriptionOrThrowLocked(Ljava/lang/String;)Lcom/android/server/backup/TransportManager$TransportDescription;
PLcom/android/server/backup/TransportManager;->getRegisteredTransportEntryLocked(Ljava/lang/String;)Ljava/util/Map$Entry;
PLcom/android/server/backup/TransportManager;->getTransportClient(Ljava/lang/String;Ljava/lang/String;)Lcom/android/server/backup/transport/TransportClient;
PLcom/android/server/backup/TransportManager;->getTransportClientOrThrow(Ljava/lang/String;Ljava/lang/String;)Lcom/android/server/backup/transport/TransportClient;
PLcom/android/server/backup/TransportManager;->getTransportDataManagementIntent(Ljava/lang/String;)Landroid/content/Intent;
PLcom/android/server/backup/TransportManager;->getTransportDirName(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/backup/TransportManager;->getTransportName(Landroid/content/ComponentName;)Ljava/lang/String;
PLcom/android/server/backup/TransportManager;->isTransportRegistered(Ljava/lang/String;)Z
PLcom/android/server/backup/TransportManager;->isTransportTrusted(Landroid/content/ComponentName;)Z
PLcom/android/server/backup/TransportManager;->onPackageAdded(Ljava/lang/String;)V
PLcom/android/server/backup/TransportManager;->onPackageChanged(Ljava/lang/String;[Ljava/lang/String;)V
PLcom/android/server/backup/TransportManager;->onPackageRemoved(Ljava/lang/String;)V
PLcom/android/server/backup/TransportManager;->registerAndSelectTransport(Landroid/content/ComponentName;)I
PLcom/android/server/backup/TransportManager;->registerTransport(Landroid/content/ComponentName;)I
PLcom/android/server/backup/TransportManager;->registerTransport(Landroid/content/ComponentName;Lcom/android/internal/backup/IBackupTransport;)V
PLcom/android/server/backup/TransportManager;->registerTransports()V
PLcom/android/server/backup/TransportManager;->registerTransportsForIntent(Landroid/content/Intent;Ljava/util/function/Predicate;)V
PLcom/android/server/backup/TransportManager;->registerTransportsFromPackage(Ljava/lang/String;Ljava/util/function/Predicate;)V
PLcom/android/server/backup/TransportManager;->selectTransport(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/backup/TransportManager;->setOnTransportRegisteredListener(Lcom/android/server/backup/transport/OnTransportRegisteredListener;)V
PLcom/android/server/backup/TransportManager;->updateTransportAttributes(Landroid/content/ComponentName;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;)V
PLcom/android/server/backup/UserBackupManagerFilePersistedSettings;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
PLcom/android/server/backup/UserBackupManagerFilePersistedSettings;->readBackupEnableState(Ljava/io/File;)Z
PLcom/android/server/backup/UserBackupManagerFilePersistedSettings;->writeBackupEnableState(Ljava/io/File;Z)V
PLcom/android/server/backup/UserBackupManagerService$1;->run()V
PLcom/android/server/backup/UserBackupManagerService$2;->lambda$onReceive$0$UserBackupManagerService$2(Ljava/lang/String;[Ljava/lang/String;)V
PLcom/android/server/backup/UserBackupManagerService$2;->lambda$onReceive$1$UserBackupManagerService$2(Ljava/lang/String;)V
PLcom/android/server/backup/UserBackupManagerService$2;->lambda$onReceive$2$UserBackupManagerService$2(Ljava/lang/String;)V
PLcom/android/server/backup/UserBackupManagerService$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/backup/UserBackupManagerService$3;->run()V
PLcom/android/server/backup/UserBackupManagerService$4;->run()V
PLcom/android/server/backup/UserBackupManagerService;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
PLcom/android/server/backup/UserBackupManagerService;-><init>(ILandroid/content/Context;Lcom/android/server/backup/Trampoline;Landroid/os/HandlerThread;Ljava/io/File;Ljava/io/File;Lcom/android/server/backup/TransportManager;)V
PLcom/android/server/backup/UserBackupManagerService;->addPackageParticipantsLockedInner(Ljava/lang/String;Ljava/util/List;)V
PLcom/android/server/backup/UserBackupManagerService;->agentConnected(Ljava/lang/String;Landroid/os/IBinder;)V
PLcom/android/server/backup/UserBackupManagerService;->allAgentPackages()Ljava/util/List;
PLcom/android/server/backup/UserBackupManagerService;->backupNow()V
PLcom/android/server/backup/UserBackupManagerService;->beginFullBackup(Lcom/android/server/backup/FullBackupJob;)Z
PLcom/android/server/backup/UserBackupManagerService;->bindToAgentSynchronous(Landroid/content/pm/ApplicationInfo;I)Landroid/app/IBackupAgent;
PLcom/android/server/backup/UserBackupManagerService;->cancelBackups()V
PLcom/android/server/backup/UserBackupManagerService;->createAndInitializeService(ILandroid/content/Context;Lcom/android/server/backup/Trampoline;Ljava/util/Set;)Lcom/android/server/backup/UserBackupManagerService;
PLcom/android/server/backup/UserBackupManagerService;->dataChanged(Ljava/lang/String;)V
PLcom/android/server/backup/UserBackupManagerService;->dataChangedImpl(Ljava/lang/String;)V
PLcom/android/server/backup/UserBackupManagerService;->dataChangedImpl(Ljava/lang/String;Ljava/util/HashSet;)V
PLcom/android/server/backup/UserBackupManagerService;->dataChangedTargets(Ljava/lang/String;)Ljava/util/HashSet;
PLcom/android/server/backup/UserBackupManagerService;->dequeueFullBackupLocked(Ljava/lang/String;)V
PLcom/android/server/backup/UserBackupManagerService;->endFullBackup()V
PLcom/android/server/backup/UserBackupManagerService;->enqueueFullBackup(Ljava/lang/String;J)V
PLcom/android/server/backup/UserBackupManagerService;->fullBackupAllowable(Ljava/lang/String;)Z
PLcom/android/server/backup/UserBackupManagerService;->generateRandomIntegerToken()I
PLcom/android/server/backup/UserBackupManagerService;->getActivityManager()Landroid/app/IActivityManager;
PLcom/android/server/backup/UserBackupManagerService;->getAgentTimeoutParameters()Lcom/android/server/backup/BackupAgentTimeoutParameters;
PLcom/android/server/backup/UserBackupManagerService;->getBackupHandler()Landroid/os/Handler;
PLcom/android/server/backup/UserBackupManagerService;->getBackupManagerBinder()Landroid/app/backup/IBackupManager;
PLcom/android/server/backup/UserBackupManagerService;->getBaseStateDir()Ljava/io/File;
PLcom/android/server/backup/UserBackupManagerService;->getConstants()Lcom/android/server/backup/BackupManagerConstants;
PLcom/android/server/backup/UserBackupManagerService;->getContext()Landroid/content/Context;
PLcom/android/server/backup/UserBackupManagerService;->getCurrentOpLock()Ljava/lang/Object;
PLcom/android/server/backup/UserBackupManagerService;->getCurrentOperations()Landroid/util/SparseArray;
PLcom/android/server/backup/UserBackupManagerService;->getCurrentToken()J
PLcom/android/server/backup/UserBackupManagerService;->getCurrentTransport()Ljava/lang/String;
PLcom/android/server/backup/UserBackupManagerService;->getDataDir()Ljava/io/File;
PLcom/android/server/backup/UserBackupManagerService;->getDataManagementIntent(Ljava/lang/String;)Landroid/content/Intent;
PLcom/android/server/backup/UserBackupManagerService;->getJournal()Lcom/android/server/backup/DataChangedJournal;
PLcom/android/server/backup/UserBackupManagerService;->getMessageIdForOperationType(I)I
PLcom/android/server/backup/UserBackupManagerService;->getPackageManager()Landroid/content/pm/PackageManager;
PLcom/android/server/backup/UserBackupManagerService;->getPendingBackups()Ljava/util/HashMap;
PLcom/android/server/backup/UserBackupManagerService;->getPendingInits()Landroid/util/ArraySet;
PLcom/android/server/backup/UserBackupManagerService;->getQueueLock()Ljava/lang/Object;
PLcom/android/server/backup/UserBackupManagerService;->getTransportManager()Lcom/android/server/backup/TransportManager;
PLcom/android/server/backup/UserBackupManagerService;->getUserId()I
PLcom/android/server/backup/UserBackupManagerService;->getWakelock()Landroid/os/PowerManager$WakeLock;
PLcom/android/server/backup/UserBackupManagerService;->handleCancel(IZ)V
PLcom/android/server/backup/UserBackupManagerService;->initPackageTracking()V
PLcom/android/server/backup/UserBackupManagerService;->initializeBackupEnableState()V
PLcom/android/server/backup/UserBackupManagerService;->isAppEligibleForBackup(Ljava/lang/String;)Z
PLcom/android/server/backup/UserBackupManagerService;->isBackupEnabled()Z
PLcom/android/server/backup/UserBackupManagerService;->isBackupOperationInProgress()Z
PLcom/android/server/backup/UserBackupManagerService;->isBackupRunning()Z
PLcom/android/server/backup/UserBackupManagerService;->isEnabled()Z
PLcom/android/server/backup/UserBackupManagerService;->isSetupComplete()Z
PLcom/android/server/backup/UserBackupManagerService;->lambda$parseLeftoverJournals$0$UserBackupManagerService(Ljava/lang/String;)V
PLcom/android/server/backup/UserBackupManagerService;->lambda$selectBackupTransportAsync$5(Lcom/android/server/backup/UserBackupManagerService;Landroid/content/ComponentName;Landroid/app/backup/ISelectBackupTransportCallback;)V
PLcom/android/server/backup/UserBackupManagerService;->logBackupComplete(Ljava/lang/String;)V
PLcom/android/server/backup/UserBackupManagerService;->makeMetadataAgent()Landroid/app/backup/BackupAgent;
PLcom/android/server/backup/UserBackupManagerService;->onTransportRegistered(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/backup/UserBackupManagerService;->opComplete(IJ)V
PLcom/android/server/backup/UserBackupManagerService;->parseLeftoverJournals()V
PLcom/android/server/backup/UserBackupManagerService;->prepareOperationTimeout(IJLcom/android/server/backup/BackupRestoreTask;I)V
PLcom/android/server/backup/UserBackupManagerService;->putOperation(ILcom/android/server/backup/internal/Operation;)V
PLcom/android/server/backup/UserBackupManagerService;->readFullBackupSchedule()Ljava/util/ArrayList;
PLcom/android/server/backup/UserBackupManagerService;->removeOperation(I)V
PLcom/android/server/backup/UserBackupManagerService;->removePackageParticipantsLocked([Ljava/lang/String;I)V
PLcom/android/server/backup/UserBackupManagerService;->requestBackup([Ljava/lang/String;Landroid/app/backup/IBackupObserver;Landroid/app/backup/IBackupManagerMonitor;I)I
PLcom/android/server/backup/UserBackupManagerService;->resetBackupState(Ljava/io/File;)V
PLcom/android/server/backup/UserBackupManagerService;->scheduleNextFullBackupJob(J)V
PLcom/android/server/backup/UserBackupManagerService;->selectBackupTransportAsync(Landroid/content/ComponentName;Landroid/app/backup/ISelectBackupTransportCallback;)V
PLcom/android/server/backup/UserBackupManagerService;->setBackupEnabled(Z)V
PLcom/android/server/backup/UserBackupManagerService;->setBackupRunning(Z)V
PLcom/android/server/backup/UserBackupManagerService;->setCurrentToken(J)V
PLcom/android/server/backup/UserBackupManagerService;->setJournal(Lcom/android/server/backup/DataChangedJournal;)V
PLcom/android/server/backup/UserBackupManagerService;->setLastBackupPass(J)V
PLcom/android/server/backup/UserBackupManagerService;->setRunningFullBackupTask(Lcom/android/server/backup/fullbackup/PerformFullTransportBackupTask;)V
PLcom/android/server/backup/UserBackupManagerService;->setWorkSource(Landroid/os/WorkSource;)V
PLcom/android/server/backup/UserBackupManagerService;->tearDownAgentAndKill(Landroid/content/pm/ApplicationInfo;)V
PLcom/android/server/backup/UserBackupManagerService;->unbindAgent(Landroid/content/pm/ApplicationInfo;)V
PLcom/android/server/backup/UserBackupManagerService;->updateStateForTransport(Ljava/lang/String;)V
PLcom/android/server/backup/UserBackupManagerService;->updateTransportAttributes(ILandroid/content/ComponentName;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;)V
PLcom/android/server/backup/UserBackupManagerService;->updateTransportAttributes(Landroid/content/ComponentName;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;)V
PLcom/android/server/backup/UserBackupManagerService;->waitUntilOperationComplete(I)Z
PLcom/android/server/backup/UserBackupManagerService;->writeRestoreTokens()V
PLcom/android/server/backup/UserBackupManagerService;->writeToJournalLocked(Ljava/lang/String;)V
PLcom/android/server/backup/fullbackup/-$$Lambda$PerformFullTransportBackupTask$SinglePackageBackupPreflight$hWbC3_rWMPrteAdbbM5aSW2SKD0;->call(Ljava/lang/Object;)V
PLcom/android/server/backup/fullbackup/-$$Lambda$PerformFullTransportBackupTask$ymLoQLrsEpmGaMrcudrdAgsU1Zk;->onFinished(Ljava/lang/String;)V
PLcom/android/server/backup/fullbackup/AppMetadataBackupWriter;->backupManifest(Landroid/content/pm/PackageInfo;Ljava/io/File;Ljava/io/File;Ljava/lang/String;Ljava/lang/String;Z)V
PLcom/android/server/backup/fullbackup/AppMetadataBackupWriter;->backupWidget(Landroid/content/pm/PackageInfo;Ljava/io/File;Ljava/io/File;[B)V
PLcom/android/server/backup/fullbackup/AppMetadataBackupWriter;->getManifestBytes(Landroid/content/pm/PackageInfo;Z)[B
PLcom/android/server/backup/fullbackup/FullBackupEngine$FullBackupRunner;-><init>(Lcom/android/server/backup/fullbackup/FullBackupEngine;Lcom/android/server/backup/UserBackupManagerService;Landroid/content/pm/PackageInfo;Landroid/app/IBackupAgent;Landroid/os/ParcelFileDescriptor;IZ)V
PLcom/android/server/backup/fullbackup/FullBackupEngine$FullBackupRunner;->run()V
PLcom/android/server/backup/fullbackup/FullBackupEngine;-><init>(Lcom/android/server/backup/UserBackupManagerService;Ljava/io/OutputStream;Lcom/android/server/backup/fullbackup/FullBackupPreflight;Landroid/content/pm/PackageInfo;ZLcom/android/server/backup/BackupRestoreTask;JII)V
PLcom/android/server/backup/fullbackup/FullBackupEngine;->backupOnePackage()I
PLcom/android/server/backup/fullbackup/FullBackupEngine;->preflightCheck()I
PLcom/android/server/backup/fullbackup/FullBackupEntry;->compareTo(Lcom/android/server/backup/fullbackup/FullBackupEntry;)I
PLcom/android/server/backup/fullbackup/FullBackupEntry;->compareTo(Ljava/lang/Object;)I
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask$SinglePackageBackupPreflight;->getExpectedSizeOrErrorCode()J
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask$SinglePackageBackupPreflight;->operationComplete(J)V
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask$SinglePackageBackupPreflight;->preflightFullBackup(Landroid/content/pm/PackageInfo;Landroid/app/IBackupAgent;)I
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask$SinglePackageBackupRunner;-><init>(Lcom/android/server/backup/fullbackup/PerformFullTransportBackupTask;Landroid/os/ParcelFileDescriptor;Landroid/content/pm/PackageInfo;Lcom/android/server/backup/transport/TransportClient;JII)V
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask$SinglePackageBackupRunner;->getBackupResultBlocking()I
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask$SinglePackageBackupRunner;->getPreflightResultBlocking()J
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask$SinglePackageBackupRunner;->handleCancel(Z)V
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask$SinglePackageBackupRunner;->operationComplete(J)V
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask$SinglePackageBackupRunner;->registerTask()V
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask$SinglePackageBackupRunner;->run()V
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask$SinglePackageBackupRunner;->unregisterTask()V
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask;-><init>(Lcom/android/server/backup/UserBackupManagerService;Lcom/android/server/backup/transport/TransportClient;Landroid/app/backup/IFullBackupRestoreObserver;[Ljava/lang/String;ZLcom/android/server/backup/FullBackupJob;Ljava/util/concurrent/CountDownLatch;Landroid/app/backup/IBackupObserver;Landroid/app/backup/IBackupManagerMonitor;Lcom/android/server/backup/internal/OnTaskFinishedListener;Z)V
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask;->cleanUpPipes([Landroid/os/ParcelFileDescriptor;)V
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask;->handleCancel(Z)V
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask;->newWithCurrentTransport(Lcom/android/server/backup/UserBackupManagerService;Landroid/app/backup/IFullBackupRestoreObserver;[Ljava/lang/String;ZLcom/android/server/backup/FullBackupJob;Ljava/util/concurrent/CountDownLatch;Landroid/app/backup/IBackupObserver;Landroid/app/backup/IBackupManagerMonitor;ZLjava/lang/String;)Lcom/android/server/backup/fullbackup/PerformFullTransportBackupTask;
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask;->registerTask()V
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask;->run()V
PLcom/android/server/backup/fullbackup/PerformFullTransportBackupTask;->unregisterTask()V
PLcom/android/server/backup/internal/-$$Lambda$BackupHandler$TJcRazGYTaUxjeiX6mPLlipfZUI;->onFinished(Ljava/lang/String;)V
PLcom/android/server/backup/internal/BackupHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/backup/internal/RunBackupReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/backup/keyvalue/-$$Lambda$KeyValueBackupTask$NN2H32cNizGxrUxqHgqPqGldNsA;->call(Ljava/lang/Object;)V
PLcom/android/server/backup/keyvalue/AgentException;->isTransitory()Z
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->getMonitor()Landroid/app/backup/IBackupManagerMonitor;
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->getObserver()Landroid/app/backup/IBackupObserver;
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onAgentFilesReady(Ljava/io/File;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onBackupFinished(I)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onEmptyData(Landroid/content/pm/PackageInfo;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onEmptyQueueAtStart()V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onExtractAgentData(Ljava/lang/String;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onInitializeTransport(Ljava/lang/String;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onPackageBackupComplete(Ljava/lang/String;J)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onPackageBackupNonIncrementalRequired(Landroid/content/pm/PackageInfo;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onPackageNotEligibleForBackup(Ljava/lang/String;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onPackageStopped(Ljava/lang/String;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onQueueReady(Ljava/util/List;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onRemoteCallReturned(Lcom/android/server/backup/remote/RemoteResult;Ljava/lang/String;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onRevertTask()V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onSkipBackup()V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onSkipPm()V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onStartFullBackup(Ljava/util/List;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onStartPackageBackup(Ljava/lang/String;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onTaskFinished()V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onTransportInitialized(I)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onTransportPerformBackup(Ljava/lang/String;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onTransportReady(Ljava/lang/String;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupReporter;->onWriteWidgetData(Z[B)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;-><init>(Lcom/android/server/backup/UserBackupManagerService;Lcom/android/server/backup/transport/TransportClient;Ljava/lang/String;Ljava/util/List;Lcom/android/server/backup/DataChangedJournal;Lcom/android/server/backup/keyvalue/KeyValueBackupReporter;Lcom/android/server/backup/internal/OnTaskFinishedListener;Ljava/util/List;ZZ)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->SHA1Checksum([B)Ljava/lang/String;
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->applyStateTransaction(I)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->backupPackage(Ljava/lang/String;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->backupPm()V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->bindAgent(Landroid/content/pm/PackageInfo;)Landroid/app/IBackupAgent;
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->checkAgentResult(Landroid/content/pm/PackageInfo;Lcom/android/server/backup/remote/RemoteResult;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->checkBackupData(Landroid/content/pm/ApplicationInfo;Ljava/io/File;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->cleanUpAgent(I)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->cleanUpAgentForTransportStatus(I)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->createFullBackupTask(Ljava/util/List;)Lcom/android/server/backup/fullbackup/PerformFullTransportBackupTask;
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->extractAgentData(Landroid/content/pm/PackageInfo;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->extractAgentData(Landroid/content/pm/PackageInfo;Landroid/app/IBackupAgent;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->extractPmAgentData(Landroid/content/pm/PackageInfo;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->finishTask(I)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->getPackageForBackup(Ljava/lang/String;)Landroid/content/pm/PackageInfo;
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->handleTransportStatus(ILjava/lang/String;J)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->lambda$extractAgentData$0$KeyValueBackupTask(Landroid/app/IBackupAgent;JILandroid/app/backup/IBackupCallback;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->revertTask()V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->run()V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->sendDataToTransport()I
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->sendDataToTransport(Landroid/content/pm/PackageInfo;)I
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->start(Lcom/android/server/backup/UserBackupManagerService;Lcom/android/server/backup/transport/TransportClient;Ljava/lang/String;Ljava/util/List;Lcom/android/server/backup/DataChangedJournal;Landroid/app/backup/IBackupObserver;Landroid/app/backup/IBackupManagerMonitor;Lcom/android/server/backup/internal/OnTaskFinishedListener;Ljava/util/List;ZZ)Lcom/android/server/backup/keyvalue/KeyValueBackupTask;
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->startTask()V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->transportPerformBackup(Landroid/content/pm/PackageInfo;Ljava/io/File;Z)I
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->tryCloseFileDescriptor(Ljava/io/Closeable;Ljava/lang/String;)V
PLcom/android/server/backup/keyvalue/KeyValueBackupTask;->writeWidgetPayloadIfAppropriate(Ljava/io/FileDescriptor;Ljava/lang/String;)V
PLcom/android/server/backup/keyvalue/TaskException;->getStatus()I
PLcom/android/server/backup/keyvalue/TaskException;->isStateCompromised()Z
PLcom/android/server/backup/remote/-$$Lambda$RemoteCall$UZaEiTGjS9e2j04YYkGl3Y2ltU4;->run()V
PLcom/android/server/backup/remote/FutureBackupCallback;->operationComplete(J)V
PLcom/android/server/backup/remote/RemoteCall;->call()Lcom/android/server/backup/remote/RemoteResult;
PLcom/android/server/backup/remote/RemoteResult;-><init>(IJ)V
PLcom/android/server/backup/remote/RemoteResult;->get()J
PLcom/android/server/backup/remote/RemoteResult;->isPresent()Z
PLcom/android/server/backup/transport/-$$Lambda$TransportClient$ciIUj0x0CRg93UETUpy2FB5aqCQ;->run()V
PLcom/android/server/backup/transport/-$$Lambda$TransportClient$uc3fygwQjQIS_JT7mlt-yMBfJcE;->onTransportConnectionResult(Lcom/android/internal/backup/IBackupTransport;Lcom/android/server/backup/transport/TransportClient;)V
PLcom/android/server/backup/transport/TransportClient$TransportConnection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/backup/transport/TransportClient;-><init>(ILandroid/content/Context;Lcom/android/server/backup/transport/TransportStats;Landroid/content/Intent;Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;Landroid/os/Handler;)V
PLcom/android/server/backup/transport/TransportClient;->checkStateIntegrityLocked()V
PLcom/android/server/backup/transport/TransportClient;->connect(Ljava/lang/String;)Lcom/android/internal/backup/IBackupTransport;
PLcom/android/server/backup/transport/TransportClient;->connectAsync(Lcom/android/server/backup/transport/TransportConnectionListener;Ljava/lang/String;)V
PLcom/android/server/backup/transport/TransportClient;->connectOrThrow(Ljava/lang/String;)Lcom/android/internal/backup/IBackupTransport;
PLcom/android/server/backup/transport/TransportClient;->finalize()V
PLcom/android/server/backup/transport/TransportClient;->getConnectedTransport(Ljava/lang/String;)Lcom/android/internal/backup/IBackupTransport;
PLcom/android/server/backup/transport/TransportClient;->lambda$notifyListener$1$TransportClient(Lcom/android/server/backup/transport/TransportConnectionListener;Lcom/android/internal/backup/IBackupTransport;)V
PLcom/android/server/backup/transport/TransportClient;->markAsDisposed()V
PLcom/android/server/backup/transport/TransportClient;->notifyListener(Lcom/android/server/backup/transport/TransportConnectionListener;Lcom/android/internal/backup/IBackupTransport;Ljava/lang/String;)V
PLcom/android/server/backup/transport/TransportClient;->notifyListenersAndClearLocked(Lcom/android/internal/backup/IBackupTransport;)V
PLcom/android/server/backup/transport/TransportClient;->onServiceConnected(Landroid/os/IBinder;)V
PLcom/android/server/backup/transport/TransportClient;->onStateTransition(II)V
PLcom/android/server/backup/transport/TransportClient;->saveLogEntry(Ljava/lang/String;)V
PLcom/android/server/backup/transport/TransportClient;->setStateLocked(ILcom/android/internal/backup/IBackupTransport;)V
PLcom/android/server/backup/transport/TransportClient;->stateToString(I)Ljava/lang/String;
PLcom/android/server/backup/transport/TransportClient;->toString()Ljava/lang/String;
PLcom/android/server/backup/transport/TransportClient;->unbind(Ljava/lang/String;)V
PLcom/android/server/backup/transport/TransportClientManager;->disposeOfTransportClient(Lcom/android/server/backup/transport/TransportClient;Ljava/lang/String;)V
PLcom/android/server/backup/transport/TransportClientManager;->getTransportClient(Landroid/content/ComponentName;Landroid/os/Bundle;Ljava/lang/String;)Lcom/android/server/backup/transport/TransportClient;
PLcom/android/server/backup/transport/TransportClientManager;->getTransportClient(Landroid/content/ComponentName;Ljava/lang/String;)Lcom/android/server/backup/transport/TransportClient;
PLcom/android/server/backup/transport/TransportClientManager;->getTransportClient(Landroid/content/ComponentName;Ljava/lang/String;Landroid/content/Intent;)Lcom/android/server/backup/transport/TransportClient;
PLcom/android/server/backup/transport/TransportStats$Stats;->register(J)V
PLcom/android/server/backup/transport/TransportStats;->registerConnectionTime(Landroid/content/ComponentName;J)V
PLcom/android/server/backup/transport/TransportUtils;->formatMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/backup/utils/AppBackupUtils;->appIsDisabled(Landroid/content/pm/ApplicationInfo;Landroid/content/pm/IPackageManager;I)Z
PLcom/android/server/backup/utils/AppBackupUtils;->appIsEligibleForBackup(Landroid/content/pm/ApplicationInfo;Landroid/content/pm/IPackageManager;I)Z
PLcom/android/server/backup/utils/AppBackupUtils;->appIsRunningAndEligibleForBackupWithTransport(Lcom/android/server/backup/transport/TransportClient;Ljava/lang/String;Landroid/content/pm/PackageManager;I)Z
PLcom/android/server/backup/utils/BackupManagerMonitorUtils;->monitorEvent(Landroid/app/backup/IBackupManagerMonitor;ILandroid/content/pm/PackageInfo;ILandroid/os/Bundle;)Landroid/app/backup/IBackupManagerMonitor;
PLcom/android/server/backup/utils/BackupManagerMonitorUtils;->putMonitoringExtra(Landroid/os/Bundle;Ljava/lang/String;J)Landroid/os/Bundle;
PLcom/android/server/backup/utils/BackupManagerMonitorUtils;->putMonitoringExtra(Landroid/os/Bundle;Ljava/lang/String;Ljava/lang/String;)Landroid/os/Bundle;
PLcom/android/server/backup/utils/BackupObserverUtils;->sendBackupFinished(Landroid/app/backup/IBackupObserver;I)V
PLcom/android/server/backup/utils/BackupObserverUtils;->sendBackupOnPackageResult(Landroid/app/backup/IBackupObserver;Ljava/lang/String;I)V
PLcom/android/server/backup/utils/BackupObserverUtils;->sendBackupOnUpdate(Landroid/app/backup/IBackupObserver;Ljava/lang/String;Landroid/app/backup/BackupProgress;)V
PLcom/android/server/backup/utils/DataStreamFileCodec;->deserialize()Ljava/lang/Object;
PLcom/android/server/backup/utils/FullBackupUtils;->routeSocketDataToOutput(Landroid/os/ParcelFileDescriptor;Ljava/io/OutputStream;)V
PLcom/android/server/biometrics/-$$Lambda$BiometricService$BiometricServiceWrapper$1$7MpVK6dfs7BQNE8DXIXrFLyl8b4;->run()V
PLcom/android/server/biometrics/-$$Lambda$BiometricService$BiometricServiceWrapper$bgbBfrWEA-53t1YOW_QO7St1x3A;->run()V
PLcom/android/server/biometrics/-$$Lambda$BiometricService$BiometricServiceWrapper$v2gsmYId8wGVd_ghB6mIixc4qWA;->run()V
PLcom/android/server/biometrics/-$$Lambda$BiometricServiceBase$3BDtQ31Of-KLPO7tQ7xlp7blHK4;->run()V
PLcom/android/server/biometrics/-$$Lambda$BiometricServiceBase$aivpKkOumO0Y5eW-DasbcdjcN4o;->run()V
PLcom/android/server/biometrics/AuthenticationClient;->getRequireConfirmation()Z
PLcom/android/server/biometrics/AuthenticationClient;->isBiometricPrompt()Z
PLcom/android/server/biometrics/AuthenticationClient;->isCryptoOperation()Z
PLcom/android/server/biometrics/AuthenticationClient;->onAuthenticated(Landroid/hardware/biometrics/BiometricAuthenticator$Identifier;ZLjava/util/ArrayList;)Z
PLcom/android/server/biometrics/AuthenticationClient;->onError(JII)Z
PLcom/android/server/biometrics/AuthenticationClient;->start()I
PLcom/android/server/biometrics/AuthenticationClient;->statsAction()I
PLcom/android/server/biometrics/AuthenticationClient;->stop(Z)I
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$1;->lambda$onError$0(Lcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$1;ILjava/lang/String;)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$1;->logDialogDismissed(I)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$1;->onAcquired(ILjava/lang/String;)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$1;->onAuthenticationFailed(IZ)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$1;->onAuthenticationSucceeded(Z[B)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$1;->onDialogDismissed(I)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$1;->onError(IILjava/lang/String;)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$1;->statsModality()I
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$AuthSession;-><init>(Lcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;Ljava/util/HashMap;Landroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiver;Ljava/lang/String;Landroid/os/Bundle;IIIIZ)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$AuthSession;->access$502(Lcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$AuthSession;I)I
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$AuthSession;->containsCookie(I)Z
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper$BiometricTaskStackListener;->onTaskStackChanged()V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;->authenticate(Landroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiver;Ljava/lang/String;Landroid/os/Bundle;)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;->authenticateInternal(Landroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiver;Ljava/lang/String;Landroid/os/Bundle;IIII)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;->cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;->cancelInternal(Landroid/os/IBinder;Ljava/lang/String;Z)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;->lambda$authenticate$1(Lcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;ILandroid/hardware/biometrics/IBiometricServiceReceiver;Landroid/os/IBinder;JLjava/lang/String;Landroid/os/Bundle;III)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;->lambda$cancelInternal$3(Lcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;Landroid/os/IBinder;Ljava/lang/String;IIIZ)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;->onConfirmDeviceCredentialError(ILjava/lang/String;)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;->onConfirmDeviceCredentialSuccess()V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;->onReadyForAuthentication(IZI)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;->resetLockout([B)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;->resetTimeout([B)V
PLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;->setActiveUser(I)V
PLcom/android/server/biometrics/BiometricService;->access$1100(Lcom/android/server/biometrics/BiometricService;)Landroid/hardware/fingerprint/IFingerprintService;
PLcom/android/server/biometrics/BiometricService;->checkAndGetBiometricModality(I)Landroid/util/Pair;
PLcom/android/server/biometrics/BiometricService;->isEnabledForApp(I)Z
PLcom/android/server/biometrics/BiometricServiceBase$AuthenticationClientImpl;->handleFailedAttempt()I
PLcom/android/server/biometrics/BiometricServiceBase$AuthenticationClientImpl;->notifyUserActivity()V
PLcom/android/server/biometrics/BiometricServiceBase$AuthenticationClientImpl;->onStart()V
PLcom/android/server/biometrics/BiometricServiceBase$AuthenticationClientImpl;->onStop()V
PLcom/android/server/biometrics/BiometricServiceBase$AuthenticationClientImpl;->resetFailedAttempts()V
PLcom/android/server/biometrics/BiometricServiceBase$AuthenticationClientImpl;->statsClient()I
PLcom/android/server/biometrics/BiometricServiceBase$BiometricServiceListener;-><init>(Lcom/android/server/biometrics/BiometricServiceBase;Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;)V
PLcom/android/server/biometrics/BiometricServiceBase$BiometricServiceListener;->getWrapperReceiver()Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;
PLcom/android/server/biometrics/BiometricServiceBase$BiometricServiceListener;->onAuthenticationFailedInternal(IZ)V
PLcom/android/server/biometrics/BiometricServiceBase$BiometricServiceListener;->onAuthenticationSucceededInternal(Z[B)V
PLcom/android/server/biometrics/BiometricServiceBase$BiometricTaskStackListener;->onTaskStackChanged()V
PLcom/android/server/biometrics/BiometricServiceBase$LockoutReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/biometrics/BiometricServiceBase$LockoutResetMonitor$1;->sendResult(Landroid/os/Bundle;)V
PLcom/android/server/biometrics/BiometricServiceBase$LockoutResetMonitor;->sendLockoutReset()V
PLcom/android/server/biometrics/BiometricServiceBase$ResetClientStateRunnable;->run()V
PLcom/android/server/biometrics/BiometricServiceBase$ResetFailedAttemptsForUserRunnable;->run()V
PLcom/android/server/biometrics/BiometricServiceBase;->cancelAuthenticationInternal(Landroid/os/IBinder;Ljava/lang/String;)V
PLcom/android/server/biometrics/BiometricServiceBase;->cancelAuthenticationInternal(Landroid/os/IBinder;Ljava/lang/String;IIIZ)V
PLcom/android/server/biometrics/BiometricServiceBase;->handleAcquired(JII)V
PLcom/android/server/biometrics/BiometricServiceBase;->handleAuthenticated(Landroid/hardware/biometrics/BiometricAuthenticator$Identifier;Ljava/util/ArrayList;)V
PLcom/android/server/biometrics/BiometricServiceBase;->handleError(JII)V
PLcom/android/server/biometrics/BiometricServiceBase;->isCurrentUserOrProfile(I)Z
PLcom/android/server/biometrics/BiometricServiceBase;->isForegroundActivity(II)Z
PLcom/android/server/biometrics/BiometricServiceBase;->lambda$cancelAuthenticationInternal$3$BiometricServiceBase(Landroid/os/IBinder;Z)V
PLcom/android/server/biometrics/BiometricServiceBase;->lambda$cancelAuthenticationInternal$3(Lcom/android/server/biometrics/BiometricServiceBase;Landroid/os/IBinder;Z)V
PLcom/android/server/biometrics/BiometricServiceBase;->notifyLockoutResetMonitors()V
PLcom/android/server/biometrics/BiometricServiceBase;->resetFailedAttemptsForUser(ZI)V
PLcom/android/server/biometrics/BiometricServiceBase;->setActiveUserInternal(I)V
PLcom/android/server/biometrics/ClientMonitor;->finalize()V
PLcom/android/server/biometrics/ClientMonitor;->getLogTag()Ljava/lang/String;
PLcom/android/server/biometrics/ClientMonitor;->onAcquired(II)Z
PLcom/android/server/biometrics/ClientMonitor;->onError(JII)Z
PLcom/android/server/biometrics/LoggableMonitor;->logOnAcquired(III)V
PLcom/android/server/biometrics/LoggableMonitor;->logOnAuthenticated(ZZIZ)V
PLcom/android/server/biometrics/LoggableMonitor;->logOnError(III)V
PLcom/android/server/biometrics/fingerprint/-$$Lambda$FingerprintService$1$7nMWCt41OE3k8ihjPNPqB0O8POU;->run()V
PLcom/android/server/biometrics/fingerprint/-$$Lambda$FingerprintService$1$N1Y2Zwqq-x5yDKQsDTj2KQ5q7g4;->run()V
PLcom/android/server/biometrics/fingerprint/-$$Lambda$FingerprintService$1$cO88ecWuvWIBecLAEccxr5yeJK4;->run()V
PLcom/android/server/biometrics/fingerprint/FingerprintMetrics;->actionBiometricAuth()I
PLcom/android/server/biometrics/fingerprint/FingerprintMetrics;->logTag()Ljava/lang/String;
PLcom/android/server/biometrics/fingerprint/FingerprintService$1;->lambda$onAcquired$1$FingerprintService$1(JII)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$1;->lambda$onAuthenticated$2$FingerprintService$1(IIJLjava/util/ArrayList;)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$1;->lambda$onError$3$FingerprintService$1(JII)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$1;->lambda$onError$3(Lcom/android/server/biometrics/fingerprint/FingerprintService$1;JII)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$1;->onAcquired(JII)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$1;->onAuthenticated(JIILjava/util/ArrayList;)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$1;->onError(JII)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$2;->authenticate(JI)I
PLcom/android/server/biometrics/fingerprint/FingerprintService$2;->cancel()I
PLcom/android/server/biometrics/fingerprint/FingerprintService$BiometricPromptServiceListenerImpl;->onAcquired(JII)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$BiometricPromptServiceListenerImpl;->onError(JIII)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintAuthClient;->handleFailedAttempt()I
PLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintAuthClient;->resetFailedAttempts()V
PLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintAuthClient;->shouldFrameworkHandleLockout()Z
PLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintAuthClient;->statsModality()I
PLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintServiceWrapper;->cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintServiceWrapper;->cancelAuthenticationFromService(Landroid/os/IBinder;Ljava/lang/String;IIIZ)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintServiceWrapper;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintServiceWrapper;->getAuthenticatorId(Ljava/lang/String;)J
PLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintServiceWrapper;->hasEnrolledFingerprints(ILjava/lang/String;)Z
PLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintServiceWrapper;->prepareForAuthentication(Landroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricServiceReceiverInternal;Ljava/lang/String;IIII)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintServiceWrapper;->resetTimeout([B)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintServiceWrapper;->setActiveUser(I)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintServiceWrapper;->startPreparedClient(I)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$ResetFailedAttemptsForUserRunnable;->run()V
PLcom/android/server/biometrics/fingerprint/FingerprintService$ServiceListenerImpl;->onAcquired(JII)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$ServiceListenerImpl;->onAuthenticationFailed(J)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$ServiceListenerImpl;->onAuthenticationSucceeded(JLandroid/hardware/biometrics/BiometricAuthenticator$Identifier;I)V
PLcom/android/server/biometrics/fingerprint/FingerprintService$ServiceListenerImpl;->onError(JIII)V
PLcom/android/server/biometrics/fingerprint/FingerprintService;->checkAppOps(ILjava/lang/String;)Z
PLcom/android/server/biometrics/fingerprint/FingerprintService;->dumpInternal(Ljava/io/PrintWriter;)V
PLcom/android/server/biometrics/fingerprint/FingerprintService;->getFailedAttemptsLockoutTimed()I
PLcom/android/server/biometrics/fingerprint/FingerprintService;->getHalDeviceId()J
PLcom/android/server/biometrics/fingerprint/FingerprintService;->resetFailedAttemptsForUser(ZI)V
PLcom/android/server/biometrics/fingerprint/FingerprintService;->statsModality()I
PLcom/android/server/camera/CameraServiceProxy$2;->notifyCameraState(Ljava/lang/String;IILjava/lang/String;I)V
PLcom/android/server/camera/CameraServiceProxy$CameraUsageEvent;->getDuration()J
PLcom/android/server/camera/CameraServiceProxy$CameraUsageEvent;->markCompleted()V
PLcom/android/server/camera/CameraServiceProxy;->dumpUsageEvents()V
PLcom/android/server/camera/CameraServiceProxy;->updateActivityCount(Ljava/lang/String;IILjava/lang/String;I)V
PLcom/android/server/camera/CameraStatsJobService;-><init>()V
PLcom/android/server/camera/CameraStatsJobService;->onStartJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/clipboard/ClipboardService$ClipboardImpl;->addPrimaryClipChangedListener(Landroid/content/IOnPrimaryClipChangedListener;Ljava/lang/String;)V
PLcom/android/server/clipboard/ClipboardService$ClipboardImpl;->getPrimaryClip(Ljava/lang/String;)Landroid/content/ClipData;
PLcom/android/server/clipboard/ClipboardService$ClipboardImpl;->hasPrimaryClip(Ljava/lang/String;)Z
PLcom/android/server/clipboard/ClipboardService$ClipboardImpl;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
PLcom/android/server/clipboard/ClipboardService$ClipboardImpl;->removePrimaryClipChangedListener(Landroid/content/IOnPrimaryClipChangedListener;)V
PLcom/android/server/clipboard/ClipboardService$ClipboardImpl;->setPrimaryClip(Landroid/content/ClipData;Ljava/lang/String;)V
PLcom/android/server/clipboard/ClipboardService;->addActiveOwnerLocked(ILjava/lang/String;)V
PLcom/android/server/clipboard/ClipboardService;->checkItemOwnerLocked(Landroid/content/ClipData$Item;I)V
PLcom/android/server/clipboard/ClipboardService;->clipboardAccessAllowed(ILjava/lang/String;I)Z
PLcom/android/server/clipboard/ClipboardService;->getClipboard(I)Lcom/android/server/clipboard/ClipboardService$PerUserClipboard;
PLcom/android/server/clipboard/ClipboardService;->getRelatedProfiles(I)Ljava/util/List;
PLcom/android/server/clipboard/ClipboardService;->grantItemLocked(Landroid/content/ClipData$Item;ILjava/lang/String;I)V
PLcom/android/server/clipboard/ClipboardService;->isDeviceLocked()Z
PLcom/android/server/clipboard/ClipboardService;->onCleanupUser(I)V
PLcom/android/server/clipboard/ClipboardService;->revokeItemLocked(Landroid/content/ClipData$Item;I)V
PLcom/android/server/clipboard/ClipboardService;->setPrimaryClipInternal(Landroid/content/ClipData;I)V
PLcom/android/server/clipboard/ClipboardService;->setPrimaryClipInternal(Lcom/android/server/clipboard/ClipboardService$PerUserClipboard;Landroid/content/ClipData;I)V
PLcom/android/server/companion/-$$Lambda$CompanionDeviceManagerService$0VKz9ecFqvfFXzRrfaz-Pf5wW2s;-><init>()V
PLcom/android/server/companion/-$$Lambda$CompanionDeviceManagerService$0VKz9ecFqvfFXzRrfaz-Pf5wW2s;->apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/companion/-$$Lambda$CompanionDeviceManagerService$CompanionDeviceManagerImpl$bdv3Vfadbb8b9nrSgkARO4oYOXU;->apply(Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/companion/CompanionDeviceManagerService$1;->onPackageModified(Ljava/lang/String;)V
PLcom/android/server/companion/CompanionDeviceManagerService$Association;->hashCode()I
PLcom/android/server/companion/CompanionDeviceManagerService$CompanionDeviceManagerImpl;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
PLcom/android/server/companion/CompanionDeviceManagerService;->lambda$getPackageInfo$1(Landroid/content/Context;Ljava/lang/String;Ljava/lang/Integer;)Landroid/content/pm/PackageInfo;
PLcom/android/server/connectivity/-$$Lambda$DnsManager$PrivateDnsValidationStatuses$_X4_M08nKysv-L4hDpqAsa4SBxI;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/connectivity/-$$Lambda$MultipathPolicyTracker$2$dvyDLfu9d6g2XoEdL3QMHx7ut6k;->run()V
PLcom/android/server/connectivity/-$$Lambda$Nat464Xlat$40jKHQd7R0zgcegyEyc9zPHKXVA;->run()V
PLcom/android/server/connectivity/-$$Lambda$Nat464Xlat$PACHOP9HoYvr_jzHtIwFDy31Ud4;->run()V
PLcom/android/server/connectivity/-$$Lambda$Tethering$5JkghhOVq1MW7iK03DMZUSuLdFM;->accept(Ljava/lang/Object;)V
PLcom/android/server/connectivity/-$$Lambda$Tethering$CZZ1cyMeU7DUmSuQSKselF5XA5o;->accept(Ljava/lang/Object;)V
PLcom/android/server/connectivity/DataConnectionStats$1;->onDataActivity(I)V
PLcom/android/server/connectivity/DataConnectionStats$1;->onDataConnectionStateChanged(II)V
PLcom/android/server/connectivity/DataConnectionStats$1;->onServiceStateChanged(Landroid/telephony/ServiceState;)V
PLcom/android/server/connectivity/DataConnectionStats$1;->onSignalStrengthsChanged(Landroid/telephony/SignalStrength;)V
PLcom/android/server/connectivity/DataConnectionStats;->notePhoneDataConnectionState()V
PLcom/android/server/connectivity/DataConnectionStats;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/connectivity/DataConnectionStats;->updateSimState(Landroid/content/Intent;)V
PLcom/android/server/connectivity/DefaultNetworkMetrics;->fillLinkInfo(Landroid/net/metrics/DefaultNetworkEvent;Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/connectivity/DefaultNetworkMetrics;->flushEvents(Ljava/util/List;)V
PLcom/android/server/connectivity/DefaultNetworkMetrics;->logCurrentDefaultNetwork(JLcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/connectivity/DefaultNetworkMetrics;->logDefaultNetworkEvent(JLcom/android/server/connectivity/NetworkAgentInfo;Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/connectivity/DefaultNetworkMetrics;->logDefaultNetworkValidity(JZ)V
PLcom/android/server/connectivity/DnsManager$PrivateDnsValidationStatuses$ValidationStatus;-><init>(Ljava/lang/String;I)V
PLcom/android/server/connectivity/DnsManager$PrivateDnsValidationStatuses;->updateStatus(Lcom/android/server/connectivity/DnsManager$PrivateDnsValidationUpdate;)V
PLcom/android/server/connectivity/DnsManager$PrivateDnsValidationStatuses;->updateTrackedDnses([Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/connectivity/DnsManager;->flushVmDnsCache()V
PLcom/android/server/connectivity/DnsManager;->getPrivateDnsConfig()Landroid/net/shared/PrivateDnsConfig;
PLcom/android/server/connectivity/DnsManager;->getPrivateDnsConfig(Landroid/content/ContentResolver;)Landroid/net/shared/PrivateDnsConfig;
PLcom/android/server/connectivity/DnsManager;->removeNetwork(Landroid/net/Network;)V
PLcom/android/server/connectivity/DnsManager;->setDefaultDnsSystemProperties(Ljava/util/Collection;)V
PLcom/android/server/connectivity/DnsManager;->setDnsConfigurationForNetwork(ILandroid/net/LinkProperties;Z)V
PLcom/android/server/connectivity/DnsManager;->setNetDnsProperty(ILjava/lang/String;)V
PLcom/android/server/connectivity/DnsManager;->updateParametersSettings()V
PLcom/android/server/connectivity/DnsManager;->updatePrivateDns(Landroid/net/Network;Landroid/net/shared/PrivateDnsConfig;)Landroid/net/shared/PrivateDnsConfig;
PLcom/android/server/connectivity/DnsManager;->updatePrivateDnsStatus(ILandroid/net/LinkProperties;)V
PLcom/android/server/connectivity/DnsManager;->updatePrivateDnsValidation(Lcom/android/server/connectivity/DnsManager$PrivateDnsValidationUpdate;)V
PLcom/android/server/connectivity/IpConnectivityEventBuilder;->inferLinkLayer(Lcom/android/server/connectivity/metrics/nano/IpConnectivityLogClass$IpConnectivityEvent;)V
PLcom/android/server/connectivity/IpConnectivityEventBuilder;->serialize(ILjava/util/List;)[B
PLcom/android/server/connectivity/IpConnectivityEventBuilder;->setApfProgramEvent(Lcom/android/server/connectivity/metrics/nano/IpConnectivityLogClass$IpConnectivityEvent;Landroid/net/metrics/ApfProgramEvent;)V
PLcom/android/server/connectivity/IpConnectivityEventBuilder;->setApfStats(Lcom/android/server/connectivity/metrics/nano/IpConnectivityLogClass$IpConnectivityEvent;Landroid/net/metrics/ApfStats;)V
PLcom/android/server/connectivity/IpConnectivityEventBuilder;->setEvent(Lcom/android/server/connectivity/metrics/nano/IpConnectivityLogClass$IpConnectivityEvent;Landroid/os/Parcelable;)Z
PLcom/android/server/connectivity/IpConnectivityEventBuilder;->setRaEvent(Lcom/android/server/connectivity/metrics/nano/IpConnectivityLogClass$IpConnectivityEvent;Landroid/net/metrics/RaEvent;)V
PLcom/android/server/connectivity/IpConnectivityEventBuilder;->toProto(Landroid/net/metrics/ConnectStats;)Lcom/android/server/connectivity/metrics/nano/IpConnectivityLogClass$IpConnectivityEvent;
PLcom/android/server/connectivity/IpConnectivityEventBuilder;->toProto(Landroid/net/metrics/DefaultNetworkEvent;)Lcom/android/server/connectivity/metrics/nano/IpConnectivityLogClass$IpConnectivityEvent;
PLcom/android/server/connectivity/IpConnectivityEventBuilder;->toProto(Landroid/net/metrics/DnsEvent;)Lcom/android/server/connectivity/metrics/nano/IpConnectivityLogClass$IpConnectivityEvent;
PLcom/android/server/connectivity/IpConnectivityEventBuilder;->toProto(Landroid/net/metrics/WakeupStats;)Lcom/android/server/connectivity/metrics/nano/IpConnectivityLogClass$IpConnectivityEvent;
PLcom/android/server/connectivity/IpConnectivityEventBuilder;->toProto(Ljava/util/List;)Ljava/util/List;
PLcom/android/server/connectivity/IpConnectivityMetrics$Impl;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/connectivity/IpConnectivityMetrics$Impl;->logEvent(Landroid/net/ConnectivityMetricsEvent;)I
PLcom/android/server/connectivity/IpConnectivityMetrics$LoggerImpl;->defaultNetworkMetrics()Lcom/android/server/connectivity/DefaultNetworkMetrics;
PLcom/android/server/connectivity/IpConnectivityMetrics;->append(Landroid/net/ConnectivityMetricsEvent;)I
PLcom/android/server/connectivity/IpConnectivityMetrics;->flushEncodedOutput()Ljava/lang/String;
PLcom/android/server/connectivity/KeepaliveTracker$KeepaliveInfo;-><init>(Lcom/android/server/connectivity/KeepaliveTracker;Landroid/os/Messenger;Landroid/os/IBinder;Lcom/android/server/connectivity/NetworkAgentInfo;Landroid/net/KeepalivePacketData;IILjava/io/FileDescriptor;)V
PLcom/android/server/connectivity/KeepaliveTracker$KeepaliveInfo;->checkSourceAddress()I
PLcom/android/server/connectivity/KeepaliveTracker$KeepaliveInfo;->getNai()Lcom/android/server/connectivity/NetworkAgentInfo;
PLcom/android/server/connectivity/KeepaliveTracker$KeepaliveInfo;->isValid()I
PLcom/android/server/connectivity/KeepaliveTracker$KeepaliveInfo;->notifyMessenger(II)V
PLcom/android/server/connectivity/KeepaliveTracker$KeepaliveInfo;->start(I)V
PLcom/android/server/connectivity/KeepaliveTracker$KeepaliveInfo;->stop(I)V
PLcom/android/server/connectivity/KeepaliveTracker$KeepaliveInfo;->unlinkDeathRecipient()V
PLcom/android/server/connectivity/KeepaliveTracker;->findFirstFreeSlot(Lcom/android/server/connectivity/NetworkAgentInfo;)I
PLcom/android/server/connectivity/KeepaliveTracker;->handleCheckKeepalivesStillValid(Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/connectivity/KeepaliveTracker;->handleEventSocketKeepalive(Lcom/android/server/connectivity/NetworkAgentInfo;Landroid/os/Message;)V
PLcom/android/server/connectivity/KeepaliveTracker;->handleStartKeepalive(Landroid/os/Message;)V
PLcom/android/server/connectivity/KeepaliveTracker;->handleStopAllKeepalives(Lcom/android/server/connectivity/NetworkAgentInfo;I)V
PLcom/android/server/connectivity/KeepaliveTracker;->handleStopKeepalive(Lcom/android/server/connectivity/NetworkAgentInfo;II)V
PLcom/android/server/connectivity/KeepaliveTracker;->notifyMessenger(Landroid/os/Messenger;II)V
PLcom/android/server/connectivity/KeepaliveTracker;->startNattKeepalive(Lcom/android/server/connectivity/NetworkAgentInfo;ILandroid/os/Messenger;Landroid/os/IBinder;Ljava/lang/String;ILjava/lang/String;I)V
PLcom/android/server/connectivity/LingerMonitor;->getNotificationSource(Lcom/android/server/connectivity/NetworkAgentInfo;)I
PLcom/android/server/connectivity/LingerMonitor;->isNotificationEnabled(Lcom/android/server/connectivity/NetworkAgentInfo;Lcom/android/server/connectivity/NetworkAgentInfo;)Z
PLcom/android/server/connectivity/LingerMonitor;->noteDisconnect(Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/connectivity/LingerMonitor;->noteLingerDefaultNetwork(Lcom/android/server/connectivity/NetworkAgentInfo;Lcom/android/server/connectivity/NetworkAgentInfo;)V
PLcom/android/server/connectivity/MockableSystemProperties;->set(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/connectivity/MultipathPolicyTracker$1;->onCapabilitiesChanged(Landroid/net/Network;Landroid/net/NetworkCapabilities;)V
PLcom/android/server/connectivity/MultipathPolicyTracker$1;->onLost(Landroid/net/Network;)V
PLcom/android/server/connectivity/MultipathPolicyTracker$2;->lambda$onMeteredIfacesChanged$0$MultipathPolicyTracker$2()V
PLcom/android/server/connectivity/MultipathPolicyTracker$2;->onMeteredIfacesChanged([Ljava/lang/String;)V
PLcom/android/server/connectivity/MultipathPolicyTracker$MultipathTracker;-><init>(Lcom/android/server/connectivity/MultipathPolicyTracker;Landroid/net/Network;Landroid/net/NetworkCapabilities;)V
PLcom/android/server/connectivity/MultipathPolicyTracker$MultipathTracker;->getDailyNonDefaultDataUsage()J
PLcom/android/server/connectivity/MultipathPolicyTracker$MultipathTracker;->getNetworkTotalBytes(JJ)J
PLcom/android/server/connectivity/MultipathPolicyTracker$MultipathTracker;->getRemainingDailyBudget(JLandroid/util/Range;)J
PLcom/android/server/connectivity/MultipathPolicyTracker$MultipathTracker;->getUserPolicyOpportunisticQuotaBytes()J
PLcom/android/server/connectivity/MultipathPolicyTracker$MultipathTracker;->setNetworkCapabilities(Landroid/net/NetworkCapabilities;)V
PLcom/android/server/connectivity/MultipathPolicyTracker$MultipathTracker;->shutdown()V
PLcom/android/server/connectivity/MultipathPolicyTracker$MultipathTracker;->updateMultipathBudget()V
PLcom/android/server/connectivity/MultipathPolicyTracker;->getDefaultDailyMultipathQuotaBytes()J
PLcom/android/server/connectivity/Nat464Xlat$State;-><init>(Ljava/lang/String;I)V
PLcom/android/server/connectivity/Nat464Xlat;->enterIdleState()V
PLcom/android/server/connectivity/Nat464Xlat;->enterStartingState(Ljava/lang/String;)V
PLcom/android/server/connectivity/Nat464Xlat;->enterStoppingState()V
PLcom/android/server/connectivity/Nat464Xlat;->fixupLinkProperties(Landroid/net/LinkProperties;Landroid/net/LinkProperties;)V
PLcom/android/server/connectivity/Nat464Xlat;->getLinkAddress(Ljava/lang/String;)Landroid/net/LinkAddress;
PLcom/android/server/connectivity/Nat464Xlat;->getNetId()I
PLcom/android/server/connectivity/Nat464Xlat;->handleInterfaceLinkStateChanged(Ljava/lang/String;Z)V
PLcom/android/server/connectivity/Nat464Xlat;->handleInterfaceRemoved(Ljava/lang/String;)V
PLcom/android/server/connectivity/Nat464Xlat;->interfaceLinkStateChanged(Ljava/lang/String;Z)V
PLcom/android/server/connectivity/Nat464Xlat;->interfaceRemoved(Ljava/lang/String;)V
PLcom/android/server/connectivity/Nat464Xlat;->isPrefixDiscoveryStarted()Z
PLcom/android/server/connectivity/Nat464Xlat;->isRunning()Z
PLcom/android/server/connectivity/Nat464Xlat;->isStarted()Z
PLcom/android/server/connectivity/Nat464Xlat;->isStarting()Z
PLcom/android/server/connectivity/Nat464Xlat;->isStopping()Z
PLcom/android/server/connectivity/Nat464Xlat;->lambda$interfaceLinkStateChanged$0$Nat464Xlat(Ljava/lang/String;Z)V
PLcom/android/server/connectivity/Nat464Xlat;->lambda$interfaceRemoved$1$Nat464Xlat(Ljava/lang/String;)V
PLcom/android/server/connectivity/Nat464Xlat;->leaveStartedState()V
PLcom/android/server/connectivity/Nat464Xlat;->makeLinkProperties(Landroid/net/LinkAddress;)Landroid/net/LinkProperties;
PLcom/android/server/connectivity/Nat464Xlat;->requiresClat(Lcom/android/server/connectivity/NetworkAgentInfo;)Z
PLcom/android/server/connectivity/Nat464Xlat;->start()V
PLcom/android/server/connectivity/Nat464Xlat;->startPrefixDiscovery()V
PLcom/android/server/connectivity/Nat464Xlat;->stop()V
PLcom/android/server/connectivity/Nat464Xlat;->stopPrefixDiscovery()V
PLcom/android/server/connectivity/Nat464Xlat;->toString()Ljava/lang/String;
PLcom/android/server/connectivity/Nat464Xlat;->update()V
PLcom/android/server/connectivity/NetdEventListenerService;->flushStatistics(Ljava/util/List;)V
PLcom/android/server/connectivity/NetdEventListenerService;->onConnectEvent(IIILjava/lang/String;II)V
PLcom/android/server/connectivity/NetdEventListenerService;->onNat64PrefixEvent(IZLjava/lang/String;I)V
PLcom/android/server/connectivity/NetdEventListenerService;->onPrivateDnsValidationEvent(ILjava/lang/String;Ljava/lang/String;Z)V
PLcom/android/server/connectivity/NetdEventListenerService;->onTcpSocketStatsEvent([I[I[I[I[I)V
PLcom/android/server/connectivity/NetdEventListenerService;->onWakeupEvent(Ljava/lang/String;III[BLjava/lang/String;Ljava/lang/String;IIJ)V
PLcom/android/server/connectivity/NetworkAgentInfo$LingerTimer;->compareTo(Lcom/android/server/connectivity/NetworkAgentInfo$LingerTimer;)I
PLcom/android/server/connectivity/NetworkAgentInfo$LingerTimer;->compareTo(Ljava/lang/Object;)I
PLcom/android/server/connectivity/NetworkAgentInfo;-><init>(Landroid/os/Messenger;Lcom/android/internal/util/AsyncChannel;Landroid/net/Network;Landroid/net/NetworkInfo;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;ILandroid/content/Context;Landroid/os/Handler;Landroid/net/NetworkMisc;Lcom/android/server/ConnectivityService;Landroid/net/INetd;Landroid/os/INetworkManagementService;I)V
PLcom/android/server/connectivity/NetworkAgentInfo;->addRequest(Landroid/net/NetworkRequest;)Z
PLcom/android/server/connectivity/NetworkAgentInfo;->clearLingerState()V
PLcom/android/server/connectivity/NetworkAgentInfo;->compareTo(Lcom/android/server/connectivity/NetworkAgentInfo;)I
PLcom/android/server/connectivity/NetworkAgentInfo;->compareTo(Ljava/lang/Object;)I
PLcom/android/server/connectivity/NetworkAgentInfo;->connService()Lcom/android/server/ConnectivityService;
PLcom/android/server/connectivity/NetworkAgentInfo;->getCurrentScore()I
PLcom/android/server/connectivity/NetworkAgentInfo;->getCurrentScore(Z)I
PLcom/android/server/connectivity/NetworkAgentInfo;->getCurrentScoreAsValidated()I
PLcom/android/server/connectivity/NetworkAgentInfo;->getLingerExpiry()J
PLcom/android/server/connectivity/NetworkAgentInfo;->getNetworkState()Landroid/net/NetworkState;
PLcom/android/server/connectivity/NetworkAgentInfo;->handler()Landroid/os/Handler;
PLcom/android/server/connectivity/NetworkAgentInfo;->ignoreWifiUnvalidationPenalty()Z
PLcom/android/server/connectivity/NetworkAgentInfo;->isBackgroundNetwork()Z
PLcom/android/server/connectivity/NetworkAgentInfo;->isLingering()Z
PLcom/android/server/connectivity/NetworkAgentInfo;->isSatisfyingRequest(I)Z
PLcom/android/server/connectivity/NetworkAgentInfo;->isSuspended()Z
PLcom/android/server/connectivity/NetworkAgentInfo;->isVPN()Z
PLcom/android/server/connectivity/NetworkAgentInfo;->linger()V
PLcom/android/server/connectivity/NetworkAgentInfo;->lingerRequest(Landroid/net/NetworkRequest;JJ)V
PLcom/android/server/connectivity/NetworkAgentInfo;->maybeStartClat()V
PLcom/android/server/connectivity/NetworkAgentInfo;->maybeStopClat()V
PLcom/android/server/connectivity/NetworkAgentInfo;->name()Ljava/lang/String;
PLcom/android/server/connectivity/NetworkAgentInfo;->netMisc()Landroid/net/NetworkMisc;
PLcom/android/server/connectivity/NetworkAgentInfo;->network()Landroid/net/Network;
PLcom/android/server/connectivity/NetworkAgentInfo;->networkMonitor()Landroid/net/INetworkMonitor;
PLcom/android/server/connectivity/NetworkAgentInfo;->numForegroundNetworkRequests()I
PLcom/android/server/connectivity/NetworkAgentInfo;->numNetworkRequests()I
PLcom/android/server/connectivity/NetworkAgentInfo;->numRequestNetworkRequests()I
PLcom/android/server/connectivity/NetworkAgentInfo;->onNetworkMonitorCreated(Landroid/net/INetworkMonitor;)V
PLcom/android/server/connectivity/NetworkAgentInfo;->removeRequest(I)V
PLcom/android/server/connectivity/NetworkAgentInfo;->requestAt(I)Landroid/net/NetworkRequest;
PLcom/android/server/connectivity/NetworkAgentInfo;->satisfies(Landroid/net/NetworkRequest;)Z
PLcom/android/server/connectivity/NetworkAgentInfo;->setCurrentScore(I)V
PLcom/android/server/connectivity/NetworkAgentInfo;->toString()Ljava/lang/String;
PLcom/android/server/connectivity/NetworkAgentInfo;->unlinger()V
PLcom/android/server/connectivity/NetworkAgentInfo;->unlingerRequest(Landroid/net/NetworkRequest;)Z
PLcom/android/server/connectivity/NetworkAgentInfo;->updateClat(Landroid/os/INetworkManagementService;)V
PLcom/android/server/connectivity/NetworkAgentInfo;->updateLingerTimer()V
PLcom/android/server/connectivity/NetworkAgentInfo;->updateRequestCounts(ZLandroid/net/NetworkRequest;)V
PLcom/android/server/connectivity/NetworkNotificationManager$NotificationType;-><init>(Ljava/lang/String;II)V
PLcom/android/server/connectivity/NetworkNotificationManager$NotificationType;->values()[Lcom/android/server/connectivity/NetworkNotificationManager$NotificationType;
PLcom/android/server/connectivity/NetworkNotificationManager;->clearNotification(I)V
PLcom/android/server/connectivity/NetworkNotificationManager;->clearNotification(ILcom/android/server/connectivity/NetworkNotificationManager$NotificationType;)V
PLcom/android/server/connectivity/NetworkNotificationManager;->getTransportName(I)Ljava/lang/String;
PLcom/android/server/connectivity/NetworkNotificationManager;->setProvNotificationVisible(ZILjava/lang/String;)V
PLcom/android/server/connectivity/NetworkNotificationManager;->showNotification(ILcom/android/server/connectivity/NetworkNotificationManager$NotificationType;Lcom/android/server/connectivity/NetworkAgentInfo;Lcom/android/server/connectivity/NetworkAgentInfo;Landroid/app/PendingIntent;Z)V
PLcom/android/server/connectivity/PermissionMonitor;->highestPermissionForUid(Ljava/lang/Boolean;Ljava/lang/String;)Ljava/lang/Boolean;
PLcom/android/server/connectivity/PermissionMonitor;->onPackageAdded(Ljava/lang/String;I)V
PLcom/android/server/connectivity/ProxyTracker;->proxyInfoEqual(Landroid/net/ProxyInfo;Landroid/net/ProxyInfo;)Z
PLcom/android/server/connectivity/ProxyTracker;->setDefaultProxy(Landroid/net/ProxyInfo;)V
PLcom/android/server/connectivity/Tethering$StateReceiver;->handleConnectivityAction(Landroid/content/Intent;)V
PLcom/android/server/connectivity/Tethering$StateReceiver;->handleUsbAction(Landroid/content/Intent;)V
PLcom/android/server/connectivity/Tethering;->getTetherableBluetoothRegexs()[Ljava/lang/String;
PLcom/android/server/connectivity/Tethering;->getTetherableUsbRegexs()[Ljava/lang/String;
PLcom/android/server/connectivity/Tethering;->getTetheredIfaces()[Ljava/lang/String;
PLcom/android/server/connectivity/Tethering;->interfaceRemoved(Ljava/lang/String;)V
PLcom/android/server/connectivity/Tethering;->lambda$new$0$Tethering(Landroid/content/Intent;)V
PLcom/android/server/connectivity/Tethering;->lambda$new$1$Tethering(Landroid/content/Intent;)V
PLcom/android/server/connectivity/Tethering;->stopTrackingInterfaceLocked(Ljava/lang/String;)V
PLcom/android/server/connectivity/Vpn$2;->interfaceRemoved(Ljava/lang/String;)V
PLcom/android/server/connectivity/Vpn;->getAlwaysOnPackage()Ljava/lang/String;
PLcom/android/server/connectivity/Vpn;->getLockdown()Z
PLcom/android/server/connectivity/Vpn;->getNetId()I
PLcom/android/server/connectivity/Vpn;->getUnderlyingNetworks()[Landroid/net/Network;
PLcom/android/server/connectivity/Vpn;->getVpnConfig()Lcom/android/internal/net/VpnConfig;
PLcom/android/server/connectivity/Vpn;->onUserStopped()V
PLcom/android/server/connectivity/Vpn;->setLockdown(Z)V
PLcom/android/server/connectivity/Vpn;->startAlwaysOnVpn()Z
PLcom/android/server/connectivity/tethering/-$$Lambda$OffloadController$OffloadTetheringStatsProvider$qF4r7cON-_Hdae6JwwsXWcAUxEQ;->run()V
PLcom/android/server/connectivity/tethering/EntitlementManager;->reevaluateSimCardProvisioning()V
PLcom/android/server/connectivity/tethering/OffloadController$OffloadTetheringStatsProvider;->lambda$setInterfaceQuota$1$OffloadController$OffloadTetheringStatsProvider(JLjava/lang/String;)V
PLcom/android/server/connectivity/tethering/OffloadController$OffloadTetheringStatsProvider;->lambda$setInterfaceQuota$1(Lcom/android/server/connectivity/tethering/OffloadController$OffloadTetheringStatsProvider;JLjava/lang/String;)V
PLcom/android/server/connectivity/tethering/OffloadController$OffloadTetheringStatsProvider;->setInterfaceQuota(Ljava/lang/String;J)V
PLcom/android/server/connectivity/tethering/OffloadController;->maybeUpdateDataLimit(Ljava/lang/String;)Z
PLcom/android/server/connectivity/tethering/TetheringConfiguration;->getResourcesForSubIdWrapper(Landroid/content/Context;I)Landroid/content/res/Resources;
PLcom/android/server/connectivity/tethering/TetheringConfiguration;->hasMobileHotspotProvisionApp()Z
PLcom/android/server/connectivity/tethering/UpstreamNetworkMonitor$UpstreamNetworkCallback;->onAvailable(Landroid/net/Network;)V
PLcom/android/server/connectivity/tethering/UpstreamNetworkMonitor$UpstreamNetworkCallback;->onCapabilitiesChanged(Landroid/net/Network;Landroid/net/NetworkCapabilities;)V
PLcom/android/server/connectivity/tethering/UpstreamNetworkMonitor$UpstreamNetworkCallback;->onLinkPropertiesChanged(Landroid/net/Network;Landroid/net/LinkProperties;)V
PLcom/android/server/connectivity/tethering/UpstreamNetworkMonitor$UpstreamNetworkCallback;->onLost(Landroid/net/Network;)V
PLcom/android/server/connectivity/tethering/UpstreamNetworkMonitor$UpstreamNetworkCallback;->onNetworkResumed(Landroid/net/Network;)V
PLcom/android/server/connectivity/tethering/UpstreamNetworkMonitor$UpstreamNetworkCallback;->onNetworkSuspended(Landroid/net/Network;)V
PLcom/android/server/connectivity/tethering/UpstreamNetworkMonitor;->mobileNetworkRequested()Z
PLcom/android/server/content/-$$Lambda$SyncManager$4nklbtZn-JuPLOkU32f34xZoiug;->run()V
PLcom/android/server/content/-$$Lambda$SyncManager$6y-gkGdDn-rSLmR9G8Pz_n9zy2A;->run()V
PLcom/android/server/content/-$$Lambda$SyncManager$HhiSFjEoPA_Hnv3xYZGfwkalc68;->onAppPermissionChanged(Landroid/accounts/Account;I)V
PLcom/android/server/content/-$$Lambda$SyncManager$XKEiBZ17uDgUCTwf_kh9_pH7usQ;-><init>(Lcom/android/server/content/SyncManager;Landroid/accounts/AccountAndUser;ILjava/lang/String;Landroid/os/Bundle;IJIIILjava/lang/String;)V
PLcom/android/server/content/-$$Lambda$SyncManager$XKEiBZ17uDgUCTwf_kh9_pH7usQ;->onReady()V
PLcom/android/server/content/-$$Lambda$SyncManager$zZUXjd-GLFQgHtMQ3vq0EWHvir8;->run()V
PLcom/android/server/content/ContentService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/content/ContentService$3;->getPackages(Ljava/lang/String;I)[Ljava/lang/String;
PLcom/android/server/content/ContentService$Lifecycle;->onCleanupUser(I)V
PLcom/android/server/content/ContentService$Lifecycle;->onStopUser(I)V
PLcom/android/server/content/ContentService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/content/ContentService$ObserverNode$ObserverEntry;->binderDied()V
PLcom/android/server/content/ContentService;->addPeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V
PLcom/android/server/content/ContentService;->addStatusChangeListener(ILandroid/content/ISyncStatusObserver;)V
PLcom/android/server/content/ContentService;->cancelSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)V
PLcom/android/server/content/ContentService;->cancelSyncAsUser(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;I)V
PLcom/android/server/content/ContentService;->clampPeriod(J)J
PLcom/android/server/content/ContentService;->findOrCreateCacheLocked(ILjava/lang/String;)Landroid/util/ArrayMap;
PLcom/android/server/content/ContentService;->getCache(Ljava/lang/String;Landroid/net/Uri;I)Landroid/os/Bundle;
PLcom/android/server/content/ContentService;->getIsSyncable(Landroid/accounts/Account;Ljava/lang/String;)I
PLcom/android/server/content/ContentService;->getIsSyncableAsUser(Landroid/accounts/Account;Ljava/lang/String;I)I
PLcom/android/server/content/ContentService;->getMasterSyncAutomatically()Z
PLcom/android/server/content/ContentService;->getMasterSyncAutomaticallyAsUser(I)Z
PLcom/android/server/content/ContentService;->getPeriodicSyncs(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)Ljava/util/List;
PLcom/android/server/content/ContentService;->getSyncAdapterTypes()[Landroid/content/SyncAdapterType;
PLcom/android/server/content/ContentService;->getSyncAdapterTypesAsUser(I)[Landroid/content/SyncAdapterType;
PLcom/android/server/content/ContentService;->getSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;)Z
PLcom/android/server/content/ContentService;->getSyncAutomaticallyAsUser(Landroid/accounts/Account;Ljava/lang/String;I)Z
PLcom/android/server/content/ContentService;->isSyncActive(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;)Z
PLcom/android/server/content/ContentService;->isSyncPendingAsUser(Landroid/accounts/Account;Ljava/lang/String;Landroid/content/ComponentName;I)Z
PLcom/android/server/content/ContentService;->onDbCorruption(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/content/ContentService;->putCache(Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;I)V
PLcom/android/server/content/ContentService;->removePeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V
PLcom/android/server/content/ContentService;->removeStatusChangeListener(Landroid/content/ISyncStatusObserver;)V
PLcom/android/server/content/ContentService;->setIsSyncable(Landroid/accounts/Account;Ljava/lang/String;I)V
PLcom/android/server/content/ContentService;->setIsSyncableAsUser(Landroid/accounts/Account;Ljava/lang/String;II)V
PLcom/android/server/content/ContentService;->setSyncAutomaticallyAsUser(Landroid/accounts/Account;Ljava/lang/String;ZI)V
PLcom/android/server/content/ContentService;->syncAsUser(Landroid/content/SyncRequest;ILjava/lang/String;)V
PLcom/android/server/content/ContentService;->validateExtras(ILandroid/os/Bundle;)V
PLcom/android/server/content/SyncJobService;-><init>()V
PLcom/android/server/content/SyncJobService;->callJobFinishedInner(IZLjava/lang/String;)V
PLcom/android/server/content/SyncJobService;->getInstance()Lcom/android/server/content/SyncJobService;
PLcom/android/server/content/SyncJobService;->isReady()Z
PLcom/android/server/content/SyncJobService;->jobParametersToString(Landroid/app/job/JobParameters;)Ljava/lang/String;
PLcom/android/server/content/SyncJobService;->markSyncStarted(I)V
PLcom/android/server/content/SyncJobService;->onStartJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/content/SyncJobService;->onStopJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/content/SyncJobService;->updateInstance()V
PLcom/android/server/content/SyncLogger$RotatingFileLogger;->jobParametersToString(Landroid/app/job/JobParameters;)Ljava/lang/String;
PLcom/android/server/content/SyncLogger$RotatingFileLogger;->purgeOldLogs()V
PLcom/android/server/content/SyncLogger;->logSafe(Lcom/android/server/content/SyncOperation;)Ljava/lang/String;
PLcom/android/server/content/SyncManager$10;->onAuthorityRemoved(Lcom/android/server/content/SyncStorageEngine$EndPoint;)V
PLcom/android/server/content/SyncManager$11;->onServiceChanged(Landroid/content/SyncAdapterType;IZ)V
PLcom/android/server/content/SyncManager$11;->onServiceChanged(Ljava/lang/Object;IZ)V
PLcom/android/server/content/SyncManager$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/content/SyncManager$3;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/content/SyncManager$6;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/content/SyncManager$7;->run()V
PLcom/android/server/content/SyncManager$8;->onSyncRequest(Lcom/android/server/content/SyncStorageEngine$EndPoint;ILandroid/os/Bundle;III)V
PLcom/android/server/content/SyncManager$9;->onPeriodicSyncAdded(Lcom/android/server/content/SyncStorageEngine$EndPoint;Landroid/os/Bundle;JJ)V
PLcom/android/server/content/SyncManager$ActiveSyncContext;-><init>(Lcom/android/server/content/SyncManager;Lcom/android/server/content/SyncOperation;JI)V
PLcom/android/server/content/SyncManager$ActiveSyncContext;->bindToSyncAdapter(Landroid/content/ComponentName;I)Z
PLcom/android/server/content/SyncManager$ActiveSyncContext;->close()V
PLcom/android/server/content/SyncManager$ActiveSyncContext;->onFinished(Landroid/content/SyncResult;)V
PLcom/android/server/content/SyncManager$ActiveSyncContext;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/content/SyncManager$ActiveSyncContext;->onServiceDisconnected(Landroid/content/ComponentName;)V
PLcom/android/server/content/SyncManager$ActiveSyncContext;->toSafeString()Ljava/lang/String;
PLcom/android/server/content/SyncManager$ActiveSyncContext;->toString()Ljava/lang/String;
PLcom/android/server/content/SyncManager$ActiveSyncContext;->toString(Ljava/lang/StringBuilder;Z)V
PLcom/android/server/content/SyncManager$OnUnsyncableAccountCheck$1;->onUnsyncableAccountDone(Z)V
PLcom/android/server/content/SyncManager$OnUnsyncableAccountCheck;->onReady()V
PLcom/android/server/content/SyncManager$OnUnsyncableAccountCheck;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/content/SyncManager$SyncHandler;->cancelActiveSyncH(Lcom/android/server/content/SyncStorageEngine$EndPoint;Landroid/os/Bundle;Ljava/lang/String;)V
PLcom/android/server/content/SyncManager$SyncHandler;->closeActiveSyncContext(Lcom/android/server/content/SyncManager$ActiveSyncContext;)V
PLcom/android/server/content/SyncManager$SyncHandler;->computeSyncOpState(Lcom/android/server/content/SyncOperation;)I
PLcom/android/server/content/SyncManager$SyncHandler;->deferSyncH(Lcom/android/server/content/SyncOperation;JLjava/lang/String;)V
PLcom/android/server/content/SyncManager$SyncHandler;->dispatchSyncOperation(Lcom/android/server/content/SyncOperation;)Z
PLcom/android/server/content/SyncManager$SyncHandler;->getSyncWakeLock(Lcom/android/server/content/SyncOperation;)Landroid/os/PowerManager$WakeLock;
PLcom/android/server/content/SyncManager$SyncHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/content/SyncManager$SyncHandler;->handleSyncMessage(Landroid/os/Message;)V
PLcom/android/server/content/SyncManager$SyncHandler;->insertStartSyncEvent(Lcom/android/server/content/SyncOperation;)J
PLcom/android/server/content/SyncManager$SyncHandler;->isSyncNotUsingNetworkH(Lcom/android/server/content/SyncManager$ActiveSyncContext;)Z
PLcom/android/server/content/SyncManager$SyncHandler;->maybeUpdateSyncPeriodH(Lcom/android/server/content/SyncOperation;JJ)V
PLcom/android/server/content/SyncManager$SyncHandler;->removePeriodicSyncH(Lcom/android/server/content/SyncStorageEngine$EndPoint;Landroid/os/Bundle;Ljava/lang/String;)V
PLcom/android/server/content/SyncManager$SyncHandler;->removePeriodicSyncInternalH(Lcom/android/server/content/SyncOperation;Ljava/lang/String;)V
PLcom/android/server/content/SyncManager$SyncHandler;->reschedulePeriodicSyncH(Lcom/android/server/content/SyncOperation;)V
PLcom/android/server/content/SyncManager$SyncHandler;->runBoundToAdapterH(Lcom/android/server/content/SyncManager$ActiveSyncContext;Landroid/os/IBinder;)V
PLcom/android/server/content/SyncManager$SyncHandler;->runSyncFinishedOrCanceledH(Landroid/content/SyncResult;Lcom/android/server/content/SyncManager$ActiveSyncContext;)V
PLcom/android/server/content/SyncManager$SyncHandler;->startSyncH(Lcom/android/server/content/SyncOperation;)V
PLcom/android/server/content/SyncManager$SyncHandler;->stopSyncEvent(JLcom/android/server/content/SyncOperation;Ljava/lang/String;IIJ)V
PLcom/android/server/content/SyncManager$SyncHandler;->syncResultToErrorNumber(Landroid/content/SyncResult;)I
PLcom/android/server/content/SyncManager$SyncHandler;->updateOrAddPeriodicSyncH(Lcom/android/server/content/SyncStorageEngine$EndPoint;JJLandroid/os/Bundle;)V
PLcom/android/server/content/SyncManager$SyncHandler;->updateRunningAccountsH(Lcom/android/server/content/SyncStorageEngine$EndPoint;)V
PLcom/android/server/content/SyncManager$SyncTimeTracker;->update()V
PLcom/android/server/content/SyncManager;->access$1200(Lcom/android/server/content/SyncManager;)Ljava/util/List;
PLcom/android/server/content/SyncManager;->access$1300(Lcom/android/server/content/SyncManager;Lcom/android/server/content/SyncOperation;Ljava/lang/String;)V
PLcom/android/server/content/SyncManager;->access$2800(Lcom/android/server/content/SyncManager;Lcom/android/server/content/SyncStorageEngine$EndPoint;)V
PLcom/android/server/content/SyncManager;->access$3700(Lcom/android/server/content/SyncManager;Lcom/android/server/content/SyncOperation;)V
PLcom/android/server/content/SyncManager;->access$3800(Lcom/android/server/content/SyncManager;)V
PLcom/android/server/content/SyncManager;->access$4200(Lcom/android/server/content/SyncManager;Lcom/android/server/content/SyncStorageEngine$EndPoint;Ljava/lang/String;)V
PLcom/android/server/content/SyncManager;->access$4300(Lcom/android/server/content/SyncManager;)Lcom/android/server/content/SyncManagerConstants;
PLcom/android/server/content/SyncManager;->access$4400(Lcom/android/server/content/SyncManager;Landroid/content/SyncResult;Lcom/android/server/content/SyncOperation;)V
PLcom/android/server/content/SyncManager;->access$4500(Lcom/android/server/content/SyncManager;Lcom/android/server/content/SyncOperation;J)V
PLcom/android/server/content/SyncManager;->access$4600(Lcom/android/server/content/SyncManager;Lcom/android/server/content/SyncStorageEngine$EndPoint;J)V
PLcom/android/server/content/SyncManager;->access$4700(Lcom/android/server/content/SyncManager;)Landroid/app/NotificationManager;
PLcom/android/server/content/SyncManager;->access$700(Lcom/android/server/content/SyncManager;)Lcom/android/server/content/SyncLogger;
PLcom/android/server/content/SyncManager;->access$800(Lcom/android/server/content/SyncManager;)Lcom/android/server/content/SyncStorageEngine;
PLcom/android/server/content/SyncManager;->canAccessAccount(Landroid/accounts/Account;Ljava/lang/String;I)Z
PLcom/android/server/content/SyncManager;->cancelActiveSync(Lcom/android/server/content/SyncStorageEngine$EndPoint;Landroid/os/Bundle;Ljava/lang/String;)V
PLcom/android/server/content/SyncManager;->cancelJob(Lcom/android/server/content/SyncOperation;Ljava/lang/String;)V
PLcom/android/server/content/SyncManager;->clearBackoffSetting(Lcom/android/server/content/SyncStorageEngine$EndPoint;Ljava/lang/String;)V
PLcom/android/server/content/SyncManager;->clearScheduledSyncOperations(Lcom/android/server/content/SyncStorageEngine$EndPoint;)V
PLcom/android/server/content/SyncManager;->computeSyncable(Landroid/accounts/Account;ILjava/lang/String;Z)I
PLcom/android/server/content/SyncManager;->formatDurationHMS(Ljava/lang/StringBuilder;J)Ljava/lang/StringBuilder;
PLcom/android/server/content/SyncManager;->getAdapterBindIntent(Landroid/content/Context;Landroid/content/ComponentName;I)Landroid/content/Intent;
PLcom/android/server/content/SyncManager;->getAllPendingSyncs()Ljava/util/List;
PLcom/android/server/content/SyncManager;->getConnectivityManager()Landroid/net/ConnectivityManager;
PLcom/android/server/content/SyncManager;->getInstance()Lcom/android/server/content/SyncManager;
PLcom/android/server/content/SyncManager;->getIsSyncable(Landroid/accounts/Account;ILjava/lang/String;)I
PLcom/android/server/content/SyncManager;->getJobStats()Ljava/lang/String;
PLcom/android/server/content/SyncManager;->getPeriodicSyncs(Lcom/android/server/content/SyncStorageEngine$EndPoint;)Ljava/util/List;
PLcom/android/server/content/SyncManager;->getSyncAdapterTypes(I)[Landroid/content/SyncAdapterType;
PLcom/android/server/content/SyncManager;->getSyncStorageEngine()Lcom/android/server/content/SyncStorageEngine;
PLcom/android/server/content/SyncManager;->increaseBackoffSetting(Lcom/android/server/content/SyncStorageEngine$EndPoint;)V
PLcom/android/server/content/SyncManager;->isAdapterDelayed(Lcom/android/server/content/SyncStorageEngine$EndPoint;)Z
PLcom/android/server/content/SyncManager;->isJobIdInUseLockedH(ILjava/util/List;)Z
PLcom/android/server/content/SyncManager;->isUserUnlocked(I)Z
PLcom/android/server/content/SyncManager;->jitterize(JJ)J
PLcom/android/server/content/SyncManager;->lambda$onStopUser$3$SyncManager(I)V
PLcom/android/server/content/SyncManager;->lambda$onUnlockUser$2$SyncManager(I)V
PLcom/android/server/content/SyncManager;->lambda$scheduleSync$5$SyncManager(Landroid/accounts/AccountAndUser;ILjava/lang/String;Landroid/os/Bundle;IJIIILjava/lang/String;)V
PLcom/android/server/content/SyncManager;->maybeRescheduleSync(Landroid/content/SyncResult;Lcom/android/server/content/SyncOperation;)V
PLcom/android/server/content/SyncManager;->onStopUser(I)V
PLcom/android/server/content/SyncManager;->onUnlockUser(I)V
PLcom/android/server/content/SyncManager;->onUserUnlocked(I)V
PLcom/android/server/content/SyncManager;->postMonitorSyncProgressMessage(Lcom/android/server/content/SyncManager$ActiveSyncContext;)V
PLcom/android/server/content/SyncManager;->postScheduleSyncMessage(Lcom/android/server/content/SyncOperation;J)V
PLcom/android/server/content/SyncManager;->removePeriodicSync(Lcom/android/server/content/SyncStorageEngine$EndPoint;Landroid/os/Bundle;Ljava/lang/String;)V
PLcom/android/server/content/SyncManager;->removeStaleAccounts()V
PLcom/android/server/content/SyncManager;->removeSyncsForAuthority(Lcom/android/server/content/SyncStorageEngine$EndPoint;Ljava/lang/String;)V
PLcom/android/server/content/SyncManager;->rescheduleSyncs(Lcom/android/server/content/SyncStorageEngine$EndPoint;Ljava/lang/String;)V
PLcom/android/server/content/SyncManager;->scheduleSync(Landroid/accounts/Account;IILjava/lang/String;Landroid/os/Bundle;IIIILjava/lang/String;)V
PLcom/android/server/content/SyncManager;->scheduleSyncOperationH(Lcom/android/server/content/SyncOperation;J)V
PLcom/android/server/content/SyncManager;->sendCancelSyncsMessage(Lcom/android/server/content/SyncStorageEngine$EndPoint;Landroid/os/Bundle;Ljava/lang/String;)V
PLcom/android/server/content/SyncManager;->sendOnUnsyncableAccount(Landroid/content/Context;Landroid/content/pm/RegisteredServicesCache$ServiceInfo;ILcom/android/server/content/SyncManager$OnReadyCallback;)V
PLcom/android/server/content/SyncManager;->sendSyncFinishedOrCanceledMessage(Lcom/android/server/content/SyncManager$ActiveSyncContext;Landroid/content/SyncResult;)V
PLcom/android/server/content/SyncManager;->setAuthorityPendingState(Lcom/android/server/content/SyncStorageEngine$EndPoint;)V
PLcom/android/server/content/SyncManager;->setDelayUntilTime(Lcom/android/server/content/SyncStorageEngine$EndPoint;J)V
PLcom/android/server/content/SyncManager;->syncExtrasEquals(Landroid/os/Bundle;Landroid/os/Bundle;Z)Z
PLcom/android/server/content/SyncManager;->updateOrAddPeriodicSync(Lcom/android/server/content/SyncStorageEngine$EndPoint;JJLandroid/os/Bundle;)V
PLcom/android/server/content/SyncManager;->verifyJobScheduler()V
PLcom/android/server/content/SyncManagerConstants;->getInitialSyncRetryTimeInSeconds()I
PLcom/android/server/content/SyncManagerConstants;->getKeyExemptionTempWhitelistDurationInSeconds()I
PLcom/android/server/content/SyncManagerConstants;->getMaxRetriesWithAppStandbyExemption()I
PLcom/android/server/content/SyncManagerConstants;->getMaxSyncRetryTimeInSeconds()I
PLcom/android/server/content/SyncManagerConstants;->getRetryTimeIncreaseFactor()F
PLcom/android/server/content/SyncOperation;-><init>(Landroid/accounts/Account;IILjava/lang/String;IILjava/lang/String;Landroid/os/Bundle;ZI)V
PLcom/android/server/content/SyncOperation;-><init>(Lcom/android/server/content/SyncStorageEngine$EndPoint;ILjava/lang/String;IILandroid/os/Bundle;ZZIJJI)V
PLcom/android/server/content/SyncOperation;->createOneTimeSyncOperation()Lcom/android/server/content/SyncOperation;
PLcom/android/server/content/SyncOperation;->dump(Landroid/content/pm/PackageManager;ZLcom/android/server/content/SyncAdapterStateFetcher;Z)Ljava/lang/String;
PLcom/android/server/content/SyncOperation;->extrasToStringBuilder(Landroid/os/Bundle;Ljava/lang/StringBuilder;)V
PLcom/android/server/content/SyncOperation;->findPriority()I
PLcom/android/server/content/SyncOperation;->ignoreBackoff()Z
PLcom/android/server/content/SyncOperation;->isAppStandbyExempted()Z
PLcom/android/server/content/SyncOperation;->isConflict(Lcom/android/server/content/SyncOperation;)Z
PLcom/android/server/content/SyncOperation;->isDerivedFromFailedPeriodicSync()Z
PLcom/android/server/content/SyncOperation;->isExpedited()Z
PLcom/android/server/content/SyncOperation;->isIgnoreSettings()Z
PLcom/android/server/content/SyncOperation;->isInitialization()Z
PLcom/android/server/content/SyncOperation;->isNotAllowedOnMetered()Z
PLcom/android/server/content/SyncOperation;->matchesPeriodicOperation(Lcom/android/server/content/SyncOperation;)Z
PLcom/android/server/content/SyncOperation;->maybeCreateFromJobExtras(Landroid/os/PersistableBundle;)Lcom/android/server/content/SyncOperation;
PLcom/android/server/content/SyncOperation;->reasonToString(Landroid/content/pm/PackageManager;I)Ljava/lang/String;
PLcom/android/server/content/SyncOperation;->toEventLog(I)[Ljava/lang/Object;
PLcom/android/server/content/SyncOperation;->toJobInfoExtras()Landroid/os/PersistableBundle;
PLcom/android/server/content/SyncOperation;->toKey()Ljava/lang/String;
PLcom/android/server/content/SyncOperation;->toSafeString()Ljava/lang/String;
PLcom/android/server/content/SyncOperation;->toString()Ljava/lang/String;
PLcom/android/server/content/SyncOperation;->wakeLockName()Ljava/lang/String;
PLcom/android/server/content/SyncStorageEngine$DayStats;-><init>(I)V
PLcom/android/server/content/SyncStorageEngine$EndPoint;->matchesSpec(Lcom/android/server/content/SyncStorageEngine$EndPoint;)Z
PLcom/android/server/content/SyncStorageEngine$EndPoint;->toSafeString()Ljava/lang/String;
PLcom/android/server/content/SyncStorageEngine$MyHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/content/SyncStorageEngine;->addActiveSync(Lcom/android/server/content/SyncManager$ActiveSyncContext;)Landroid/content/SyncInfo;
PLcom/android/server/content/SyncStorageEngine;->addStatusChangeListener(ILandroid/content/ISyncStatusObserver;)V
PLcom/android/server/content/SyncStorageEngine;->clearAllBackoffsLocked()V
PLcom/android/server/content/SyncStorageEngine;->getAuthorityLocked(Lcom/android/server/content/SyncStorageEngine$EndPoint;Ljava/lang/String;)Lcom/android/server/content/SyncStorageEngine$AuthorityInfo;
PLcom/android/server/content/SyncStorageEngine;->getBackoff(Lcom/android/server/content/SyncStorageEngine$EndPoint;)Landroid/util/Pair;
PLcom/android/server/content/SyncStorageEngine;->getCurrentDayLocked()I
PLcom/android/server/content/SyncStorageEngine;->getCurrentSyncs(I)Ljava/util/List;
PLcom/android/server/content/SyncStorageEngine;->getDelayUntilTime(Lcom/android/server/content/SyncStorageEngine$EndPoint;)J
PLcom/android/server/content/SyncStorageEngine;->getIsSyncable(Landroid/accounts/Account;ILjava/lang/String;)I
PLcom/android/server/content/SyncStorageEngine;->getMasterSyncAutomatically(I)Z
PLcom/android/server/content/SyncStorageEngine;->getOrCreateSyncStatusLocked(I)Landroid/content/SyncStatusInfo;
PLcom/android/server/content/SyncStorageEngine;->getSyncAutomatically(Landroid/accounts/Account;ILjava/lang/String;)Z
PLcom/android/server/content/SyncStorageEngine;->insertStartSyncEvent(Lcom/android/server/content/SyncOperation;J)J
PLcom/android/server/content/SyncStorageEngine;->isClockValid()Z
PLcom/android/server/content/SyncStorageEngine;->isSyncActive(Lcom/android/server/content/SyncStorageEngine$EndPoint;)Z
PLcom/android/server/content/SyncStorageEngine;->isSyncPending(Lcom/android/server/content/SyncStorageEngine$EndPoint;)Z
PLcom/android/server/content/SyncStorageEngine;->markPending(Lcom/android/server/content/SyncStorageEngine$EndPoint;Z)V
PLcom/android/server/content/SyncStorageEngine;->queueBackup()V
PLcom/android/server/content/SyncStorageEngine;->removeActiveSync(Landroid/content/SyncInfo;I)V
PLcom/android/server/content/SyncStorageEngine;->removeStaleAccounts([Landroid/accounts/Account;I)V
PLcom/android/server/content/SyncStorageEngine;->removeStatusChangeListener(Landroid/content/ISyncStatusObserver;)V
PLcom/android/server/content/SyncStorageEngine;->reportActiveChange()V
PLcom/android/server/content/SyncStorageEngine;->reportChange(I)V
PLcom/android/server/content/SyncStorageEngine;->requestSync(Landroid/accounts/Account;IILjava/lang/String;Landroid/os/Bundle;III)V
PLcom/android/server/content/SyncStorageEngine;->requestSync(Lcom/android/server/content/SyncStorageEngine$AuthorityInfo;ILandroid/os/Bundle;III)V
PLcom/android/server/content/SyncStorageEngine;->setBackoff(Lcom/android/server/content/SyncStorageEngine$EndPoint;JJ)V
PLcom/android/server/content/SyncStorageEngine;->setDelayUntilTime(Lcom/android/server/content/SyncStorageEngine$EndPoint;J)V
PLcom/android/server/content/SyncStorageEngine;->setIsSyncable(Landroid/accounts/Account;ILjava/lang/String;III)V
PLcom/android/server/content/SyncStorageEngine;->setSyncAutomatically(Landroid/accounts/Account;ILjava/lang/String;ZIII)V
PLcom/android/server/content/SyncStorageEngine;->setSyncableStateForEndPoint(Lcom/android/server/content/SyncStorageEngine$EndPoint;III)V
PLcom/android/server/content/SyncStorageEngine;->stopSyncEvent(JJLjava/lang/String;JJ)V
PLcom/android/server/content/SyncStorageEngine;->writeAccountInfoLocked()V
PLcom/android/server/content/SyncStorageEngine;->writeStatisticsLocked()V
PLcom/android/server/content/SyncStorageEngine;->writeStatusLocked()V
PLcom/android/server/contentcapture/-$$Lambda$RemoteContentCaptureService$7ssteYnH5iRJT2R7PgyV-ZHLXCY;->run(Landroid/os/IInterface;)V
PLcom/android/server/contentcapture/-$$Lambda$RemoteContentCaptureService$KVmM6r6Iw8boRKZ7kOfyPuZfUb0;->run(Landroid/os/IInterface;)V
PLcom/android/server/contentcapture/-$$Lambda$RemoteContentCaptureService$O44WLb7J8oROD70V7UUgHX2c8Qw;->run(Landroid/os/IInterface;)V
PLcom/android/server/contentcapture/ContentCaptureManagerService$ContentCaptureManagerServiceStub;->finishSession(Ljava/lang/String;)V
PLcom/android/server/contentcapture/ContentCaptureManagerService$ContentCaptureManagerServiceStub;->startSession(Landroid/os/IBinder;Landroid/content/ComponentName;Ljava/lang/String;ILcom/android/internal/os/IResultReceiver;)V
PLcom/android/server/contentcapture/ContentCaptureManagerService$LocalService;->isContentCaptureServiceForUser(II)Z
PLcom/android/server/contentcapture/ContentCaptureManagerService$LocalService;->sendActivityAssistData(ILandroid/os/IBinder;Landroid/os/Bundle;)Z
PLcom/android/server/contentcapture/ContentCaptureManagerService;->getAmInternal()Landroid/app/ActivityManagerInternal;
PLcom/android/server/contentcapture/ContentCapturePerUserService$ContentCaptureServiceRemoteCallback;->setContentCaptureWhitelist(Ljava/util/List;Ljava/util/List;)V
PLcom/android/server/contentcapture/ContentCapturePerUserService;->finishSessionLocked(Ljava/lang/String;)V
PLcom/android/server/contentcapture/ContentCapturePerUserService;->getOptionsForPackageLocked(Ljava/lang/String;)Landroid/content/ContentCaptureOptions;
PLcom/android/server/contentcapture/ContentCapturePerUserService;->getSessionId(Landroid/os/IBinder;)Ljava/lang/String;
PLcom/android/server/contentcapture/ContentCapturePerUserService;->newServiceInfoLocked(Landroid/content/ComponentName;)Landroid/content/pm/ServiceInfo;
PLcom/android/server/contentcapture/ContentCapturePerUserService;->onServiceDied(Lcom/android/server/contentcapture/RemoteContentCaptureService;)V
PLcom/android/server/contentcapture/ContentCapturePerUserService;->onServiceDied(Ljava/lang/Object;)V
PLcom/android/server/contentcapture/ContentCapturePerUserService;->sendActivityAssistDataLocked(Landroid/os/IBinder;Landroid/os/Bundle;)Z
PLcom/android/server/contentcapture/ContentCapturePerUserService;->startSessionLocked(Landroid/os/IBinder;Landroid/content/pm/ActivityPresentationInfo;Ljava/lang/String;IILcom/android/internal/os/IResultReceiver;)V
PLcom/android/server/contentcapture/ContentCapturePerUserService;->whitelistPackages(Ljava/util/List;)V
PLcom/android/server/contentcapture/ContentCaptureServerSession;-><init>(Landroid/os/IBinder;Lcom/android/server/contentcapture/ContentCapturePerUserService;Lcom/android/server/contentcapture/RemoteContentCaptureService;Landroid/content/ComponentName;IILjava/lang/String;II)V
PLcom/android/server/contentcapture/ContentCaptureServerSession;->destroyLocked(Z)V
PLcom/android/server/contentcapture/ContentCaptureServerSession;->removeSelfLocked(Z)V
PLcom/android/server/contentcapture/ContentCaptureServerSession;->sendActivitySnapshotLocked(Landroid/service/contentcapture/SnapshotData;)V
PLcom/android/server/contentcapture/RemoteContentCaptureService;->getRemoteRequestMillis()J
PLcom/android/server/contentcapture/RemoteContentCaptureService;->getServiceInterface(Landroid/os/IBinder;)Landroid/os/IInterface;
PLcom/android/server/contentcapture/RemoteContentCaptureService;->getTimeoutIdleBindMillis()J
PLcom/android/server/contentcapture/RemoteContentCaptureService;->handleOnConnectedStateChanged(Z)V
PLcom/android/server/contentcapture/RemoteContentCaptureService;->onSessionStarted(Landroid/view/contentcapture/ContentCaptureContext;Ljava/lang/String;ILcom/android/internal/os/IResultReceiver;)V
PLcom/android/server/contentsuggestions/ContentSuggestionsPerUserService;->newServiceInfoLocked(Landroid/content/ComponentName;)Landroid/content/pm/ServiceInfo;
PLcom/android/server/devicepolicy/CertificateMonitor;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
PLcom/android/server/devicepolicy/CertificateMonitor;->getInstalledCaCertificates(Landroid/os/UserHandle;)Ljava/util/List;
PLcom/android/server/devicepolicy/DeviceAdminServiceController$DevicePolicyServiceConnection;-><init>(Lcom/android/server/devicepolicy/DeviceAdminServiceController;ILandroid/content/ComponentName;)V
PLcom/android/server/devicepolicy/DeviceAdminServiceController$DevicePolicyServiceConnection;->asInterface(Landroid/os/IBinder;)Landroid/app/admin/IDeviceAdminService;
PLcom/android/server/devicepolicy/DeviceAdminServiceController$DevicePolicyServiceConnection;->asInterface(Landroid/os/IBinder;)Ljava/lang/Object;
PLcom/android/server/devicepolicy/DeviceAdminServiceController$DevicePolicyServiceConnection;->getBindFlags()I
PLcom/android/server/devicepolicy/DeviceAdminServiceController;->disconnectServiceOnUserLocked(ILjava/lang/String;)V
PLcom/android/server/devicepolicy/DeviceAdminServiceController;->startServiceForOwner(Ljava/lang/String;ILjava/lang/String;)V
PLcom/android/server/devicepolicy/DeviceAdminServiceController;->stopServiceForOwner(ILjava/lang/String;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService$4$1;->run()V
PLcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;->hasUserRestrictions()Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;->writeAttributeValuesToXml(Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/util/Collection;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;->writePackageListToXml(Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/util/List;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;->writeToXml(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getAlarmManager()Landroid/app/AlarmManager;
PLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getNotificationManager()Landroid/app/NotificationManager;
PLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->isBuildDebuggable()Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->keyChainBindAsUser(Landroid/os/UserHandle;)Landroid/security/KeyChain$KeyChainConnection;
PLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->storageManagerIsFileBasedEncryptionEnabled()Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->systemPropertiesGetLong(Ljava/lang/String;J)J
PLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->userManagerIsSplitSystemUser()Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService$Lifecycle;->onStopUser(I)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService$LocalService;->canSilentlyInstallPackage(Ljava/lang/String;I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService$LocalService;->canUserHaveUntrustedCredentialReset(I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService$LocalService;->getCrossProfileWidgetProviders(I)Ljava/util/List;
PLcom/android/server/devicepolicy/DevicePolicyManagerService$LocalService;->isActiveAdminWithPolicy(II)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->canUserBindToDeviceOwnerLocked(I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->canUserHaveUntrustedCredentialReset(I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->checkDeviceIdentifierAccess(Ljava/lang/String;III)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->checkDeviceOwnerProvisioningPreCondition(I)I
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->checkDeviceOwnerProvisioningPreConditionLocked(Landroid/content/ComponentName;IZZ)I
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->checkManagedProfileProvisioningPreCondition(Ljava/lang/String;I)I
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->checkProvisioningPreConditionSkipPermission(Ljava/lang/String;Ljava/lang/String;)I
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->enforceCanManageScopeOrCheckPermission(Landroid/content/ComponentName;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->enforceManagedProfile(ILjava/lang/String;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->enforceNotManagedProfile(ILjava/lang/String;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->enforceProfileOrDeviceOwner(Landroid/content/ComponentName;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->ensureCallerPackage(Ljava/lang/String;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->ensureDeviceOwnerUserStarted()V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getAcceptedCaCertificates(Landroid/os/UserHandle;)Ljava/util/Set;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getActiveAdminForCallerLocked(Landroid/content/ComponentName;I)Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getActiveAdminForCallerLocked(Landroid/content/ComponentName;IZ)Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getActiveAdminForUidLocked(Landroid/content/ComponentName;I)Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getActiveAdminOrCheckPermissionForCallerLocked(Landroid/content/ComponentName;ILjava/lang/String;)Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getActiveAdminOrCheckPermissionForCallerLocked(Landroid/content/ComponentName;IZLjava/lang/String;)Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getActiveAdminUncheckedLocked(Landroid/content/ComponentName;IZ)Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getActiveAdmins(I)Ljava/util/List;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getAdminWithMinimumFailedPasswordsForWipeLocked(IZ)Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getBindDeviceAdminTargetUsers(Landroid/content/ComponentName;)Ljava/util/List;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getBluetoothContactSharingDisabledForUser(I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getCredentialOwner(IZ)I
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getCrossProfileCallerIdDisabledForUser(I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getCrossProfileContactsSearchDisabledForUser(I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getCurrentFailedPasswordAttempts(IZ)I
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getDeviceOwnerOrganizationName()Ljava/lang/CharSequence;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getDeviceOwnerUserId()I
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getDisallowedSystemApps(Landroid/content/ComponentName;ILjava/lang/String;)Ljava/util/List;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getEncryptionStatus()I
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getGlobalProxyAdmin(I)Landroid/content/ComponentName;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getMaximumFailedPasswordsForWipe(Landroid/content/ComponentName;IZ)I
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getMaximumTimeToLock(Landroid/content/ComponentName;IZ)J
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getOrganizationNameForUser(I)Ljava/lang/CharSequence;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordExpirationLocked(Landroid/content/ComponentName;IZ)J
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordExpirationTimeout(Landroid/content/ComponentName;IZ)J
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getPasswordQuality(Landroid/content/ComponentName;IZ)I
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getPendingSystemUpdate(Landroid/content/ComponentName;)Landroid/app/admin/SystemUpdateInfo;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getPermissionPolicy(Landroid/content/ComponentName;)I
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getRequiredStrongAuthTimeout(Landroid/content/ComponentName;IZ)J
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getRestrictionsProvider(I)Landroid/content/ComponentName;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getStorageEncryptionStatus(Ljava/lang/String;I)I
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getSystemUpdatePolicy()Landroid/app/admin/SystemUpdatePolicy;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getTargetSdk(Ljava/lang/String;I)I
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->getUserPasswordMetricsLocked(I)Landroid/app/admin/PasswordMetrics;
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->handlePasswordExpirationNotification(I)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->handleStopUser(I)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->handleUnlockUser(I)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->hasFeatureManagedUsers()Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isActiveAdminWithPolicyForUserLocked(Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;II)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isActivePasswordSufficient(IZ)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isAdminActive(Landroid/content/ComponentName;I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isCallerApplicationRestrictionsManagingPackage(Ljava/lang/String;)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isCallerDelegate(Ljava/lang/String;ILjava/lang/String;)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isDeviceOwner(Landroid/content/ComponentName;I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isDeviceOwnerPackage(Ljava/lang/String;I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isDeviceProvisioned()Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isLockTaskPermitted(Ljava/lang/String;)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isManagedProfile(Landroid/content/ComponentName;)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isNetworkLoggingEnabled(Landroid/content/ComponentName;Ljava/lang/String;)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isNotificationListenerServicePermitted(Ljava/lang/String;I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isPasswordSufficientForUserWithoutCheckpointLocked(Landroid/app/admin/PasswordMetrics;IZ)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isProfileOwner(Landroid/content/ComponentName;I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isProfileOwnerPackage(Ljava/lang/String;I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isProvisioningAllowed(Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isRemovedPackage(Ljava/lang/String;Ljava/lang/String;I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isSeparateProfileChallengeAllowed(I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isUninstallBlocked(Landroid/content/ComponentName;Ljava/lang/String;)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isUninstallInQueue(Ljava/lang/String;)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->isUserAffiliatedWithDeviceLocked(I)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->maybeLogPasswordComplexitySet(Landroid/content/ComponentName;IZLandroid/app/admin/PasswordMetrics;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->notifyPendingSystemUpdate(Landroid/app/admin/SystemUpdateInfo;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->onInstalledCertificatesChanged(Landroid/os/UserHandle;Ljava/util/Collection;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->reportFailedBiometricAttempt(I)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->reportFailedPasswordAttempt(I)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->reportKeyguardDismissed(I)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->reportKeyguardSecured(I)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->reportSuccessfulBiometricAttempt(I)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->reportSuccessfulPasswordAttempt(I)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->saveSettingsLocked(I)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->sendAdminCommandLocked(Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;Ljava/lang/String;Landroid/os/Bundle;Landroid/content/BroadcastReceiver;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->sendAdminCommandLocked(Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;Ljava/lang/String;Landroid/os/Bundle;Landroid/content/BroadcastReceiver;Z)Z
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->sendAdminCommandLocked(Ljava/lang/String;IILandroid/os/Bundle;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->sendChangedNotification(I)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->setActivePasswordState(Landroid/app/admin/PasswordMetrics;I)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->setCameraDisabled(Landroid/content/ComponentName;Z)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->setExpirationAlarmCheckLocked(Landroid/content/Context;IZ)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->setKeyguardDisabledFeatures(Landroid/content/ComponentName;IZ)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->setLongSupportMessage(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->setMaximumFailedPasswordsForWipe(Landroid/content/ComponentName;IZ)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->setMaximumTimeToLock(Landroid/content/ComponentName;JZ)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordHistoryLength(Landroid/content/ComponentName;IZ)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordMinimumLength(Landroid/content/ComponentName;IZ)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->setPasswordQuality(Landroid/content/ComponentName;IZ)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->setRestrictionsProvider(Landroid/content/ComponentName;Landroid/content/ComponentName;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->setShortSupportMessage(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V
PLcom/android/server/devicepolicy/DevicePolicyManagerService;->validateQualityConstant(I)V
PLcom/android/server/devicepolicy/OverlayPackagesProvider$DefaultInjector;->getInputMethodListAsUser(I)Ljava/util/List;
PLcom/android/server/devicepolicy/OverlayPackagesProvider$DefaultInjector;->isPerProfileImeEnabled()Z
PLcom/android/server/devicepolicy/OverlayPackagesProvider;->getDisallowedAppsSet(Ljava/lang/String;)Ljava/util/Set;
PLcom/android/server/devicepolicy/OverlayPackagesProvider;->getLaunchableApps(I)Ljava/util/Set;
PLcom/android/server/devicepolicy/OverlayPackagesProvider;->getNonRequiredApps(Landroid/content/ComponentName;ILjava/lang/String;)Ljava/util/Set;
PLcom/android/server/devicepolicy/OverlayPackagesProvider;->getRequiredAppsSet(Ljava/lang/String;)Ljava/util/Set;
PLcom/android/server/devicepolicy/OverlayPackagesProvider;->getSystemInputMethods(I)Ljava/util/Set;
PLcom/android/server/devicepolicy/OverlayPackagesProvider;->getVendorDisallowedAppsSet(Ljava/lang/String;)Ljava/util/Set;
PLcom/android/server/devicepolicy/OverlayPackagesProvider;->getVendorRequiredAppsSet(Ljava/lang/String;)Ljava/util/Set;
PLcom/android/server/devicepolicy/Owners;->getSystemUpdateInfo()Landroid/app/admin/SystemUpdateInfo;
PLcom/android/server/devicepolicy/Owners;->saveSystemUpdateInfo(Landroid/app/admin/SystemUpdateInfo;)Z
PLcom/android/server/display/-$$Lambda$BrightnessTracker$fmx2Mcw7OCEtRi9DwxxGQgA74fg;->run()V
PLcom/android/server/display/-$$Lambda$ColorDisplayService$Id97_YQBas-gkp6qQ7p4A67QJiQ;->onAnimationUpdate(Landroid/animation/ValueAnimator;)V
PLcom/android/server/display/-$$Lambda$VirtualDisplayAdapter$PFyqe-aYIEBicSVtuy5lL_bT8B0;->createDisplay(Ljava/lang/String;Z)Landroid/os/IBinder;
PLcom/android/server/display/AmbientBrightnessStatsTracker$AmbientBrightnessStats;->getUserStats(I)Ljava/util/ArrayList;
PLcom/android/server/display/AmbientBrightnessStatsTracker$AmbientBrightnessStats;->writeToXML(Ljava/io/OutputStream;)V
PLcom/android/server/display/AmbientBrightnessStatsTracker$Injector;->getUserSerialNumber(Landroid/os/UserManager;I)I
PLcom/android/server/display/AmbientBrightnessStatsTracker;->getUserStats(I)Ljava/util/ArrayList;
PLcom/android/server/display/AmbientBrightnessStatsTracker;->stop()V
PLcom/android/server/display/AmbientBrightnessStatsTracker;->writeStats(Ljava/io/OutputStream;)V
PLcom/android/server/display/AutomaticBrightnessController$1;->run()V
PLcom/android/server/display/AutomaticBrightnessController$2;->onAccuracyChanged(Landroid/hardware/Sensor;I)V
PLcom/android/server/display/AutomaticBrightnessController$2;->onSensorChanged(Landroid/hardware/SensorEvent;)V
PLcom/android/server/display/AutomaticBrightnessController$AmbientLightRingBuffer;->prune(J)V
PLcom/android/server/display/AutomaticBrightnessController$AmbientLightRingBuffer;->push(JF)V
PLcom/android/server/display/AutomaticBrightnessController$AutomaticBrightnessHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/display/AutomaticBrightnessController$TaskStackListenerImpl;->onTaskStackChanged()V
PLcom/android/server/display/AutomaticBrightnessController;->adjustLightSensorRate(I)V
PLcom/android/server/display/AutomaticBrightnessController;->calculateAmbientLux(JJ)F
PLcom/android/server/display/AutomaticBrightnessController;->getAutomaticScreenBrightness()I
PLcom/android/server/display/AutomaticBrightnessController;->getAutomaticScreenBrightnessAdjustment()F
PLcom/android/server/display/AutomaticBrightnessController;->handleLightSensorEvent(JF)V
PLcom/android/server/display/AutomaticBrightnessController;->isDefaultConfig()Z
PLcom/android/server/display/AutomaticBrightnessController;->nextAmbientLightBrighteningTransition(J)J
PLcom/android/server/display/AutomaticBrightnessController;->nextAmbientLightDarkeningTransition(J)J
PLcom/android/server/display/AutomaticBrightnessController;->registerForegroundAppUpdater()V
PLcom/android/server/display/AutomaticBrightnessController;->setAmbientLux(F)V
PLcom/android/server/display/AutomaticBrightnessController;->unregisterForegroundAppUpdater()V
PLcom/android/server/display/AutomaticBrightnessController;->updateAmbientLux(J)V
PLcom/android/server/display/AutomaticBrightnessController;->updateForegroundAppSync()V
PLcom/android/server/display/BrightnessIdleJob;-><init>()V
PLcom/android/server/display/BrightnessIdleJob;->onStartJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/display/BrightnessMappingStrategy$PhysicalMappingStrategy;->getAutoBrightnessAdjustment()F
PLcom/android/server/display/BrightnessMappingStrategy$PhysicalMappingStrategy;->getBrightness(FLjava/lang/String;I)F
PLcom/android/server/display/BrightnessMappingStrategy$PhysicalMappingStrategy;->isDefaultConfig()Z
PLcom/android/server/display/BrightnessTracker$DisplayListener;->onDisplayAdded(I)V
PLcom/android/server/display/BrightnessTracker$DisplayListener;->onDisplayRemoved(I)V
PLcom/android/server/display/BrightnessTracker$Injector;->getProfileIds(Landroid/os/UserManager;I)[I
PLcom/android/server/display/BrightnessTracker$Injector;->getUserSerialNumber(Landroid/os/UserManager;I)I
PLcom/android/server/display/BrightnessTracker$Injector;->unRegisterDisplayListener(Landroid/content/Context;Landroid/hardware/display/DisplayManager$DisplayListener;)V
PLcom/android/server/display/BrightnessTracker$Injector;->unregisterSensorListener(Landroid/content/Context;Landroid/hardware/SensorEventListener;)V
PLcom/android/server/display/BrightnessTracker;->getAmbientBrightnessStats(I)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/display/BrightnessTracker;->getEvents(IZ)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/display/BrightnessTracker;->handleBrightnessChanged(FZFZZJ)V
PLcom/android/server/display/BrightnessTracker;->lambda$scheduleWriteBrightnessTrackerState$0$BrightnessTracker()V
PLcom/android/server/display/BrightnessTracker;->notifyBrightnessChanged(FZFZZ)V
PLcom/android/server/display/BrightnessTracker;->persistBrightnessTrackerState()V
PLcom/android/server/display/BrightnessTracker;->writeAmbientBrightnessStats()V
PLcom/android/server/display/BrightnessTracker;->writeEvents()V
PLcom/android/server/display/BrightnessTracker;->writeEventsLocked(Ljava/io/OutputStream;)V
PLcom/android/server/display/ColorDisplayService$1;->getLevel()I
PLcom/android/server/display/ColorDisplayService$1;->getMatrix()[F
PLcom/android/server/display/ColorDisplayService$1;->isAvailable(Landroid/content/Context;)Z
PLcom/android/server/display/ColorDisplayService$1;->setMatrix(I)V
PLcom/android/server/display/ColorDisplayService$2;->getLevel()I
PLcom/android/server/display/ColorDisplayService$2;->getMatrix()[F
PLcom/android/server/display/ColorDisplayService$2;->setMatrix(I)V
PLcom/android/server/display/ColorDisplayService$4;->onAnimationCancel(Landroid/animation/Animator;)V
PLcom/android/server/display/ColorDisplayService$4;->onAnimationEnd(Landroid/animation/Animator;)V
PLcom/android/server/display/ColorDisplayService$4;->onChange(ZLandroid/net/Uri;)V
PLcom/android/server/display/ColorDisplayService$5;->onAnimationCancel(Landroid/animation/Animator;)V
PLcom/android/server/display/ColorDisplayService$5;->onAnimationEnd(Landroid/animation/Animator;)V
PLcom/android/server/display/ColorDisplayService$BinderService;->getColorMode()I
PLcom/android/server/display/ColorDisplayService$BinderService;->getNightDisplayAutoMode()I
PLcom/android/server/display/ColorDisplayService$BinderService;->getNightDisplayAutoModeRaw()I
PLcom/android/server/display/ColorDisplayService$BinderService;->isNightDisplayActivated()Z
PLcom/android/server/display/ColorDisplayService$BinderService;->setNightDisplayActivated(Z)Z
PLcom/android/server/display/ColorDisplayService$BinderService;->setSaturationLevel(I)Z
PLcom/android/server/display/ColorDisplayService$ColorMatrixEvaluator;->evaluate(FLjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/display/ColorDisplayService$ColorMatrixEvaluator;->evaluate(F[F[F)[F
PLcom/android/server/display/ColorDisplayService$DisplayWhiteBalanceTintController;-><init>(Lcom/android/server/display/ColorDisplayService;)V
PLcom/android/server/display/ColorDisplayService$DisplayWhiteBalanceTintController;->getLevel()I
PLcom/android/server/display/ColorDisplayService$DisplayWhiteBalanceTintController;->getMatrix()[F
PLcom/android/server/display/ColorDisplayService$NightDisplayTintController;->clampNightDisplayColorTemperature(I)I
PLcom/android/server/display/ColorDisplayService$NightDisplayTintController;->getLevel()I
PLcom/android/server/display/ColorDisplayService$NightDisplayTintController;->getMatrix()[F
PLcom/android/server/display/ColorDisplayService$NightDisplayTintController;->onActivated(Z)V
PLcom/android/server/display/ColorDisplayService$NightDisplayTintController;->setActivated(Ljava/lang/Boolean;)V
PLcom/android/server/display/ColorDisplayService$NightDisplayTintController;->setMatrix(I)V
PLcom/android/server/display/ColorDisplayService$NightDisplayTintController;->setUp(Landroid/content/Context;Z)V
PLcom/android/server/display/ColorDisplayService$TintController;->cancelAnimator()V
PLcom/android/server/display/ColorDisplayService$TintController;->getAnimator()Landroid/animation/ValueAnimator;
PLcom/android/server/display/ColorDisplayService$TintController;->setActivated(Ljava/lang/Boolean;)V
PLcom/android/server/display/ColorDisplayService$TintController;->setAnimator(Landroid/animation/ValueAnimator;)V
PLcom/android/server/display/ColorDisplayService$TintHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/display/ColorDisplayService;->applyTint(Lcom/android/server/display/ColorDisplayService$TintController;Z)V
PLcom/android/server/display/ColorDisplayService;->clampNightDisplayColorTemperature(I)I
PLcom/android/server/display/ColorDisplayService;->getColorModeInternal()I
PLcom/android/server/display/ColorDisplayService;->getCurrentColorModeFromSystemProperties()I
PLcom/android/server/display/ColorDisplayService;->getNightDisplayAutoModeInternal()I
PLcom/android/server/display/ColorDisplayService;->onDisplayColorModeChanged(I)V
PLcom/android/server/display/ColorDisplayService;->onNightDisplayAutoModeChanged(I)V
PLcom/android/server/display/ColorDisplayService;->onStopUser(I)V
PLcom/android/server/display/ColorDisplayService;->setUp()V
PLcom/android/server/display/ColorDisplayService;->updateDisplayWhiteBalanceStatus()V
PLcom/android/server/display/ColorFade$NaturalSurfaceLayout;->dispose()V
PLcom/android/server/display/ColorFade$NaturalSurfaceLayout;->onDisplayTransaction(Landroid/view/SurfaceControl$Transaction;)V
PLcom/android/server/display/ColorFade;->captureScreenshotTextureAndSetViewport()Z
PLcom/android/server/display/ColorFade;->checkGlErrors(Ljava/lang/String;Z)Z
PLcom/android/server/display/ColorFade;->createEglContext()Z
PLcom/android/server/display/ColorFade;->createEglSurface()Z
PLcom/android/server/display/ColorFade;->createSurface()Z
PLcom/android/server/display/ColorFade;->destroySurface()V
PLcom/android/server/display/ColorFade;->dismissResources()V
PLcom/android/server/display/ColorFade;->draw(F)Z
PLcom/android/server/display/ColorFade;->drawFaded(FF)V
PLcom/android/server/display/ColorFade;->initGLBuffers()Z
PLcom/android/server/display/ColorFade;->initGLShaders(Landroid/content/Context;)Z
PLcom/android/server/display/ColorFade;->loadShader(Landroid/content/Context;II)I
PLcom/android/server/display/ColorFade;->ortho(FFFFFF)V
PLcom/android/server/display/ColorFade;->prepare(Landroid/content/Context;I)Z
PLcom/android/server/display/ColorFade;->readFile(Landroid/content/Context;I)Ljava/lang/String;
PLcom/android/server/display/ColorFade;->setQuad(Ljava/nio/FloatBuffer;FFFF)V
PLcom/android/server/display/ColorFade;->showSurface(F)Z
PLcom/android/server/display/DisplayDevice;->applyPendingDisplayDeviceInfoChangesLocked()V
PLcom/android/server/display/DisplayDevice;->requestDisplayModesLocked(II)V
PLcom/android/server/display/DisplayManagerService$BinderService;->createVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;Landroid/media/projection/IMediaProjection;Ljava/lang/String;Ljava/lang/String;IIILandroid/view/Surface;ILjava/lang/String;)I
PLcom/android/server/display/DisplayManagerService$BinderService;->getAmbientBrightnessStats()Landroid/content/pm/ParceledListSlice;
PLcom/android/server/display/DisplayManagerService$BinderService;->getBrightnessEvents(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/display/DisplayManagerService$BinderService;->getStableDisplaySize()Landroid/graphics/Point;
PLcom/android/server/display/DisplayManagerService$BinderService;->releaseVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;)V
PLcom/android/server/display/DisplayManagerService$BinderService;->setBrightnessConfigurationForUser(Landroid/hardware/display/BrightnessConfiguration;ILjava/lang/String;)V
PLcom/android/server/display/DisplayManagerService$BinderService;->setVirtualDisplayState(Landroid/hardware/display/IVirtualDisplayCallback;Z)V
PLcom/android/server/display/DisplayManagerService$BinderService;->setVirtualDisplaySurface(Landroid/hardware/display/IVirtualDisplayCallback;Landroid/view/Surface;)V
PLcom/android/server/display/DisplayManagerService$BinderService;->validatePackageName(ILjava/lang/String;)Z
PLcom/android/server/display/DisplayManagerService$CallbackRecord;->binderDied()V
PLcom/android/server/display/DisplayManagerService$LocalService;->persistBrightnessTrackerState()V
PLcom/android/server/display/DisplayManagerService$LocalService;->registerDisplayTransactionListener(Landroid/hardware/display/DisplayManagerInternal$DisplayTransactionListener;)V
PLcom/android/server/display/DisplayManagerService$LocalService;->screenshot(ILandroid/view/Surface;)Z
PLcom/android/server/display/DisplayManagerService$LocalService;->unregisterDisplayTransactionListener(Landroid/hardware/display/DisplayManagerInternal$DisplayTransactionListener;)V
PLcom/android/server/display/DisplayManagerService;->createVirtualDisplayInternal(Landroid/hardware/display/IVirtualDisplayCallback;Landroid/media/projection/IMediaProjection;ILjava/lang/String;Ljava/lang/String;IIILandroid/view/Surface;ILjava/lang/String;)I
PLcom/android/server/display/DisplayManagerService;->getStableDisplaySizeInternal()Landroid/graphics/Point;
PLcom/android/server/display/DisplayManagerService;->handleDisplayDeviceRemoved(Lcom/android/server/display/DisplayDevice;)V
PLcom/android/server/display/DisplayManagerService;->handleDisplayDeviceRemovedLocked(Lcom/android/server/display/DisplayDevice;)V
PLcom/android/server/display/DisplayManagerService;->isBrightnessConfigurationTooDark(Landroid/hardware/display/BrightnessConfiguration;)Z
PLcom/android/server/display/DisplayManagerService;->isUidPresentOnDisplayInternal(II)Z
PLcom/android/server/display/DisplayManagerService;->onCallbackDied(Lcom/android/server/display/DisplayManagerService$CallbackRecord;)V
PLcom/android/server/display/DisplayManagerService;->releaseVirtualDisplayInternal(Landroid/os/IBinder;)V
PLcom/android/server/display/DisplayManagerService;->screenshotInternal(ILandroid/view/Surface;)Z
PLcom/android/server/display/DisplayManagerService;->setBrightnessConfigurationForUserInternal(Landroid/hardware/display/BrightnessConfiguration;ILjava/lang/String;)V
PLcom/android/server/display/DisplayManagerService;->setVirtualDisplayStateInternal(Landroid/os/IBinder;Z)V
PLcom/android/server/display/DisplayManagerService;->setVirtualDisplaySurfaceInternal(Landroid/os/IBinder;Landroid/view/Surface;)V
PLcom/android/server/display/DisplayManagerService;->stopWifiDisplayScanLocked(Lcom/android/server/display/DisplayManagerService$CallbackRecord;)V
PLcom/android/server/display/DisplayPowerController$1;->onAnimationEnd(Landroid/animation/Animator;)V
PLcom/android/server/display/DisplayPowerController$1;->onAnimationStart(Landroid/animation/Animator;)V
PLcom/android/server/display/DisplayPowerController$5;->run()V
PLcom/android/server/display/DisplayPowerController$6;->run()V
PLcom/android/server/display/DisplayPowerController$8;->onAccuracyChanged(Landroid/hardware/Sensor;I)V
PLcom/android/server/display/DisplayPowerController$8;->onSensorChanged(Landroid/hardware/SensorEvent;)V
PLcom/android/server/display/DisplayPowerController$ScreenOffUnblocker;->onScreenOff()V
PLcom/android/server/display/DisplayPowerController$ScreenOnUnblocker;->onScreenOn()V
PLcom/android/server/display/DisplayPowerController$SettingsObserver;->onChange(ZLandroid/net/Uri;)V
PLcom/android/server/display/DisplayPowerController;->blockScreenOff()V
PLcom/android/server/display/DisplayPowerController;->blockScreenOn()V
PLcom/android/server/display/DisplayPowerController;->debounceProximitySensor()V
PLcom/android/server/display/DisplayPowerController;->handleProximitySensorEvent(JZ)V
PLcom/android/server/display/DisplayPowerController;->handleSettingsChange(Z)V
PLcom/android/server/display/DisplayPowerController;->unblockScreenOff()V
PLcom/android/server/display/DisplayPowerController;->updateBrightness()V
PLcom/android/server/display/DisplayPowerState$1;->setValue(Lcom/android/server/display/DisplayPowerState;F)V
PLcom/android/server/display/DisplayPowerState$1;->setValue(Ljava/lang/Object;F)V
PLcom/android/server/display/DisplayPowerState$4;->run()V
PLcom/android/server/display/DisplayPowerState;->setScreenState(I)V
PLcom/android/server/display/DisplayTransformManager;->applyColorMatrix([F)V
PLcom/android/server/display/DisplayTransformManager;->applySaturation(F)V
PLcom/android/server/display/DisplayTransformManager;->computeColorMatrixLocked()[F
PLcom/android/server/display/DisplayTransformManager;->getColorMatrix(I)[F
PLcom/android/server/display/DisplayTransformManager;->setColorMatrix(I[F)V
PLcom/android/server/display/DisplayTransformManager;->setColorMode(I[F)Z
PLcom/android/server/display/DisplayTransformManager;->setDisplayColor(I)V
PLcom/android/server/display/DisplayTransformManager;->updateConfiguration()V
PLcom/android/server/display/PersistentDataStore$BrightnessConfigurations;->setBrightnessConfigurationForUser(Landroid/hardware/display/BrightnessConfiguration;ILjava/lang/String;)Z
PLcom/android/server/display/RampAnimator$1;->run()V
PLcom/android/server/display/VirtualDisplayAdapter$Callback;-><init>(Landroid/hardware/display/IVirtualDisplayCallback;Landroid/os/Handler;)V
PLcom/android/server/display/VirtualDisplayAdapter$Callback;->dispatchDisplayStopped()V
PLcom/android/server/display/VirtualDisplayAdapter$Callback;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/display/VirtualDisplayAdapter$VirtualDisplayDevice;-><init>(Lcom/android/server/display/VirtualDisplayAdapter;Landroid/os/IBinder;Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;IIILandroid/view/Surface;ILcom/android/server/display/VirtualDisplayAdapter$Callback;Ljava/lang/String;I)V
PLcom/android/server/display/VirtualDisplayAdapter$VirtualDisplayDevice;->binderDied()V
PLcom/android/server/display/VirtualDisplayAdapter$VirtualDisplayDevice;->getDisplayDeviceInfoLocked()Lcom/android/server/display/DisplayDeviceInfo;
PLcom/android/server/display/VirtualDisplayAdapter$VirtualDisplayDevice;->hasStableUniqueId()Z
PLcom/android/server/display/VirtualDisplayAdapter$VirtualDisplayDevice;->performTraversalLocked(Landroid/view/SurfaceControl$Transaction;)V
PLcom/android/server/display/VirtualDisplayAdapter$VirtualDisplayDevice;->setSurfaceLocked(Landroid/view/Surface;)V
PLcom/android/server/display/VirtualDisplayAdapter;->createVirtualDisplayLocked(Landroid/hardware/display/IVirtualDisplayCallback;Landroid/media/projection/IMediaProjection;ILjava/lang/String;Ljava/lang/String;IIILandroid/view/Surface;ILjava/lang/String;)Lcom/android/server/display/DisplayDevice;
PLcom/android/server/display/VirtualDisplayAdapter;->getNextUniqueIndex(Ljava/lang/String;)I
PLcom/android/server/display/VirtualDisplayAdapter;->releaseVirtualDisplayLocked(Landroid/os/IBinder;)Lcom/android/server/display/DisplayDevice;
PLcom/android/server/display/VirtualDisplayAdapter;->setVirtualDisplayStateLocked(Landroid/os/IBinder;Z)V
PLcom/android/server/display/VirtualDisplayAdapter;->setVirtualDisplaySurfaceLocked(Landroid/os/IBinder;Landroid/view/Surface;)V
PLcom/android/server/display/color/-$$Lambda$ColorDisplayService$XscOX8OTjfyzvSYcYE2MMIKvvNo;->onAnimationUpdate(Landroid/animation/ValueAnimator;)V
PLcom/android/server/display/color/ColorDisplayService$1;->getLevel()I
PLcom/android/server/display/color/ColorDisplayService$1;->getMatrix()[F
PLcom/android/server/display/color/ColorDisplayService$1;->setMatrix(I)V
PLcom/android/server/display/color/ColorDisplayService$3;->onChange(ZLandroid/net/Uri;)V
PLcom/android/server/display/color/ColorDisplayService$4;->onAnimationCancel(Landroid/animation/Animator;)V
PLcom/android/server/display/color/ColorDisplayService$4;->onAnimationEnd(Landroid/animation/Animator;)V
PLcom/android/server/display/color/ColorDisplayService$BinderService;->getNightDisplayAutoMode()I
PLcom/android/server/display/color/ColorDisplayService$BinderService;->getNightDisplayAutoModeRaw()I
PLcom/android/server/display/color/ColorDisplayService$BinderService;->getNightDisplayCustomEndTime()Landroid/hardware/display/Time;
PLcom/android/server/display/color/ColorDisplayService$BinderService;->getNightDisplayCustomStartTime()Landroid/hardware/display/Time;
PLcom/android/server/display/color/ColorDisplayService$BinderService;->isDeviceColorManaged()Z
PLcom/android/server/display/color/ColorDisplayService$BinderService;->isNightDisplayActivated()Z
PLcom/android/server/display/color/ColorDisplayService$BinderService;->setSaturationLevel(I)Z
PLcom/android/server/display/color/ColorDisplayService$ColorMatrixEvaluator;->evaluate(FLjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/display/color/ColorDisplayService$ColorMatrixEvaluator;->evaluate(F[F[F)[F
PLcom/android/server/display/color/ColorDisplayService$CustomNightDisplayAutoMode$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/display/color/ColorDisplayService$CustomNightDisplayAutoMode;->onActivated(Z)V
PLcom/android/server/display/color/ColorDisplayService$CustomNightDisplayAutoMode;->onAlarm()V
PLcom/android/server/display/color/ColorDisplayService$CustomNightDisplayAutoMode;->onStart()V
PLcom/android/server/display/color/ColorDisplayService$CustomNightDisplayAutoMode;->updateActivated()V
PLcom/android/server/display/color/ColorDisplayService$CustomNightDisplayAutoMode;->updateNextAlarm(Ljava/lang/Boolean;Ljava/time/LocalDateTime;)V
PLcom/android/server/display/color/ColorDisplayService$DisplayWhiteBalanceTintController;->getLevel()I
PLcom/android/server/display/color/ColorDisplayService$DisplayWhiteBalanceTintController;->getMatrix()[F
PLcom/android/server/display/color/ColorDisplayService$NightDisplayTintController;->clampNightDisplayColorTemperature(I)I
PLcom/android/server/display/color/ColorDisplayService$NightDisplayTintController;->getLevel()I
PLcom/android/server/display/color/ColorDisplayService$NightDisplayTintController;->getMatrix()[F
PLcom/android/server/display/color/ColorDisplayService$NightDisplayTintController;->onActivated(Z)V
PLcom/android/server/display/color/ColorDisplayService$NightDisplayTintController;->setActivated(Ljava/lang/Boolean;)V
PLcom/android/server/display/color/ColorDisplayService$NightDisplayTintController;->setMatrix(I)V
PLcom/android/server/display/color/ColorDisplayService$NightDisplayTintController;->setUp(Landroid/content/Context;Z)V
PLcom/android/server/display/color/ColorDisplayService$TintController;->cancelAnimator()V
PLcom/android/server/display/color/ColorDisplayService$TintController;->getAnimator()Landroid/animation/ValueAnimator;
PLcom/android/server/display/color/ColorDisplayService$TintController;->setActivated(Ljava/lang/Boolean;)V
PLcom/android/server/display/color/ColorDisplayService$TintController;->setAnimator(Landroid/animation/ValueAnimator;)V
PLcom/android/server/display/color/ColorDisplayService$TintHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/display/color/ColorDisplayService;->applyTint(Lcom/android/server/display/color/ColorDisplayService$TintController;Z)V
PLcom/android/server/display/color/ColorDisplayService;->getColorModeInternal()I
PLcom/android/server/display/color/ColorDisplayService;->getCurrentColorModeFromSystemProperties()I
PLcom/android/server/display/color/ColorDisplayService;->getDateTimeAfter(Ljava/time/LocalTime;Ljava/time/LocalDateTime;)Ljava/time/LocalDateTime;
PLcom/android/server/display/color/ColorDisplayService;->getDateTimeBefore(Ljava/time/LocalTime;Ljava/time/LocalDateTime;)Ljava/time/LocalDateTime;
PLcom/android/server/display/color/ColorDisplayService;->getNightDisplayAutoModeInternal()I
PLcom/android/server/display/color/ColorDisplayService;->getNightDisplayCustomEndTimeInternal()Landroid/hardware/display/Time;
PLcom/android/server/display/color/ColorDisplayService;->getNightDisplayCustomStartTimeInternal()Landroid/hardware/display/Time;
PLcom/android/server/display/color/ColorDisplayService;->getNightDisplayLastActivatedTimeSetting()Ljava/time/LocalDateTime;
PLcom/android/server/display/color/ColorDisplayService;->onDisplayColorModeChanged(I)V
PLcom/android/server/display/color/ColorDisplayService;->onNightDisplayAutoModeChanged(I)V
PLcom/android/server/display/color/ColorDisplayService;->setUp()V
PLcom/android/server/display/color/ColorDisplayService;->updateDisplayWhiteBalanceStatus()V
PLcom/android/server/display/color/DisplayTransformManager;->applyColorMatrix([F)V
PLcom/android/server/display/color/DisplayTransformManager;->applySaturation(F)V
PLcom/android/server/display/color/DisplayTransformManager;->computeColorMatrixLocked()[F
PLcom/android/server/display/color/DisplayTransformManager;->getColorMatrix(I)[F
PLcom/android/server/display/color/DisplayTransformManager;->isDeviceColorManaged()Z
PLcom/android/server/display/color/DisplayTransformManager;->setColorMatrix(I[F)V
PLcom/android/server/display/color/DisplayTransformManager;->setColorMode(I[F)Z
PLcom/android/server/display/color/DisplayTransformManager;->setDisplayColor(I)V
PLcom/android/server/display/color/DisplayTransformManager;->updateConfiguration()V
PLcom/android/server/dreams/-$$Lambda$DreamManagerService$f7cEVKQvPKMm_Ir9dq0e6PSOkX8;->run()V
PLcom/android/server/dreams/-$$Lambda$gXC4nM2f5GMCBX0ED45DCQQjqv0;->run()V
PLcom/android/server/dreams/DreamController$1;->run()V
PLcom/android/server/dreams/DreamController$3;->run()V
PLcom/android/server/dreams/DreamController$DreamRecord$2;->run()V
PLcom/android/server/dreams/DreamController$DreamRecord$4;->sendResult(Landroid/os/Bundle;)V
PLcom/android/server/dreams/DreamController$DreamRecord;-><init>(Lcom/android/server/dreams/DreamController;Landroid/os/Binder;Landroid/content/ComponentName;ZZILandroid/os/PowerManager$WakeLock;)V
PLcom/android/server/dreams/DreamController$DreamRecord;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/dreams/DreamController;->attach(Landroid/service/dreams/IDreamService;)V
PLcom/android/server/dreams/DreamController;->startDream(Landroid/os/Binder;Landroid/content/ComponentName;ZZILandroid/os/PowerManager$WakeLock;)V
PLcom/android/server/dreams/DreamController;->stopDream(Z)V
PLcom/android/server/dreams/DreamManagerService$3;->run()V
PLcom/android/server/dreams/DreamManagerService$4;->onDreamStopped(Landroid/os/Binder;)V
PLcom/android/server/dreams/DreamManagerService$BinderService;->awaken()V
PLcom/android/server/dreams/DreamManagerService$BinderService;->finishSelf(Landroid/os/IBinder;Z)V
PLcom/android/server/dreams/DreamManagerService$BinderService;->forceAmbientDisplayEnabled(Z)V
PLcom/android/server/dreams/DreamManagerService$BinderService;->getDefaultDreamComponent()Landroid/content/ComponentName;
PLcom/android/server/dreams/DreamManagerService$BinderService;->getDreamComponents()[Landroid/content/ComponentName;
PLcom/android/server/dreams/DreamManagerService$BinderService;->isDreaming()Z
PLcom/android/server/dreams/DreamManagerService$BinderService;->startDozing(Landroid/os/IBinder;II)V
PLcom/android/server/dreams/DreamManagerService$LocalService;->startDream(Z)V
PLcom/android/server/dreams/DreamManagerService$LocalService;->stopDream(Z)V
PLcom/android/server/dreams/DreamManagerService;->checkPermission(Ljava/lang/String;)V
PLcom/android/server/dreams/DreamManagerService;->finishSelfInternal(Landroid/os/IBinder;Z)V
PLcom/android/server/dreams/DreamManagerService;->forceAmbientDisplayEnabledInternal(Z)V
PLcom/android/server/dreams/DreamManagerService;->getDreamComponentsForUser(I)[Landroid/content/ComponentName;
PLcom/android/server/dreams/DreamManagerService;->startDozingInternal(Landroid/os/IBinder;II)V
PLcom/android/server/dreams/DreamManagerService;->startDreamInternal(Z)V
PLcom/android/server/dreams/DreamManagerService;->startDreamLocked(Landroid/content/ComponentName;ZZI)V
PLcom/android/server/dreams/DreamManagerService;->stopDreamInternal(Z)V
PLcom/android/server/emergency/EmergencyAffordanceService$1;->onCellInfoChanged(Ljava/util/List;)V
PLcom/android/server/emergency/EmergencyAffordanceService$1;->onCellLocationChanged(Landroid/telephony/CellLocation;)V
PLcom/android/server/emergency/EmergencyAffordanceService$3;->onSubscriptionsChanged()V
PLcom/android/server/emergency/EmergencyAffordanceService;->isEmergencyAffordanceNeeded()Z
PLcom/android/server/emergency/EmergencyAffordanceService;->onCellScanFinishedUnsuccessful()V
PLcom/android/server/emergency/EmergencyAffordanceService;->setNetworkNeedsEmergencyAffordance(Z)V
PLcom/android/server/emergency/EmergencyAffordanceService;->stopScanning()V
PLcom/android/server/ethernet/-$$Lambda$EthernetTracker$InterfaceObserver$N47vO7QrVbS59gsxVAc8Mt2Opco;->run()V
PLcom/android/server/ethernet/EthernetNetworkFactory;->removeInterface(Ljava/lang/String;)V
PLcom/android/server/ethernet/EthernetNetworkFactory;->updateCapabilityFilter()V
PLcom/android/server/ethernet/EthernetTracker$InterfaceObserver;->interfaceRemoved(Ljava/lang/String;)V
PLcom/android/server/ethernet/EthernetTracker$InterfaceObserver;->lambda$interfaceRemoved$2$EthernetTracker$InterfaceObserver(Ljava/lang/String;)V
PLcom/android/server/firewall/AndFilter;->matches(Lcom/android/server/firewall/IntentFirewall;Landroid/content/ComponentName;Landroid/content/Intent;IILjava/lang/String;I)Z
PLcom/android/server/firewall/IntentFirewall$FirewallIntentResolver;->allowFilterResult(Landroid/content/IntentFilter;Ljava/util/List;)Z
PLcom/android/server/firewall/IntentFirewall$FirewallIntentResolver;->allowFilterResult(Lcom/android/server/firewall/IntentFirewall$FirewallIntentFilter;Ljava/util/List;)Z
PLcom/android/server/firewall/IntentFirewall$FirewallIntentResolver;->newResult(Landroid/content/IntentFilter;II)Ljava/lang/Object;
PLcom/android/server/firewall/IntentFirewall$FirewallIntentResolver;->newResult(Lcom/android/server/firewall/IntentFirewall$FirewallIntentFilter;II)Lcom/android/server/firewall/IntentFirewall$Rule;
PLcom/android/server/firewall/StringFilter$3;->getValue(Landroid/content/ComponentName;Landroid/content/Intent;Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/firewall/StringFilter$EqualsFilter;->matchesValue(Ljava/lang/String;)Z
PLcom/android/server/firewall/StringFilter;->matches(Lcom/android/server/firewall/IntentFirewall;Landroid/content/ComponentName;Landroid/content/Intent;IILjava/lang/String;I)Z
PLcom/android/server/gpu/GpuService$PackageReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/gpu/GpuService;->assetToSettingsGlobal(Landroid/content/Context;Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/CharSequence;)V
PLcom/android/server/gpu/GpuService;->fetchGameDriverPackageProperties()V
PLcom/android/server/gpu/GpuService;->processBlacklists()V
PLcom/android/server/gpu/GpuService;->setBlacklist()V
PLcom/android/server/incident/PendingReports;->onBootCompleted()V
PLcom/android/server/incident/RequestQueue;->start()V
PLcom/android/server/infra/-$$Lambda$AbstractMasterSystemService$1$TLhe3_2yHs5UB69Y7lf2s7OxJCo;->visit(Ljava/lang/Object;)V
PLcom/android/server/infra/AbstractMasterSystemService$1;->onPackageUpdateFinished(Ljava/lang/String;I)V
PLcom/android/server/infra/AbstractMasterSystemService;->onCleanupUser(I)V
PLcom/android/server/infra/AbstractMasterSystemService;->onUnlockUser(I)V
PLcom/android/server/infra/AbstractMasterSystemService;->visitServicesLocked(Lcom/android/server/infra/AbstractMasterSystemService$Visitor;)V
PLcom/android/server/infra/AbstractPerUserSystemService;->getContext()Landroid/content/Context;
PLcom/android/server/infra/AbstractPerUserSystemService;->getServiceComponentName()Landroid/content/ComponentName;
PLcom/android/server/infra/AbstractPerUserSystemService;->handlePackageUpdateLocked(Ljava/lang/String;)V
PLcom/android/server/infra/FrameworkResourcesServiceNameResolver;->isTemporary(I)Z
PLcom/android/server/input/InputManagerService$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/input/InputManagerService$InputDevicesChangedListenerRecord;->binderDied()V
PLcom/android/server/input/InputManagerService$InputDevicesChangedListenerRecord;->notifyInputDevicesChanged([I)V
PLcom/android/server/input/InputManagerService$LocalService;->setInteractive(Z)V
PLcom/android/server/input/InputManagerService;->checkInjectEventsPermission(II)Z
PLcom/android/server/input/InputManagerService;->dispatchUnhandledKey(Landroid/os/IBinder;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
PLcom/android/server/input/InputManagerService;->getInputDevice(I)Landroid/view/InputDevice;
PLcom/android/server/input/InputManagerService;->getInputDeviceIds()[I
PLcom/android/server/input/InputManagerService;->hasKeys(II[I[Z)Z
PLcom/android/server/input/InputManagerService;->injectInputEvent(Landroid/view/InputEvent;I)Z
PLcom/android/server/input/InputManagerService;->injectInputEventInternal(Landroid/view/InputEvent;I)Z
PLcom/android/server/input/InputManagerService;->interceptKeyBeforeDispatching(Landroid/os/IBinder;Landroid/view/KeyEvent;I)J
PLcom/android/server/input/InputManagerService;->interceptKeyBeforeQueueing(Landroid/view/KeyEvent;I)I
PLcom/android/server/input/InputManagerService;->interceptMotionBeforeQueueingNonInteractive(IJI)I
PLcom/android/server/input/InputManagerService;->interceptMotionBeforeQueueingNonInteractive(JI)I
PLcom/android/server/input/InputManagerService;->notifyFocusChanged(Landroid/os/IBinder;Landroid/os/IBinder;)V
PLcom/android/server/input/InputManagerService;->onInputDevicesChangedListenerDied(I)V
PLcom/android/server/input/InputManagerService;->registerInputDevicesChangedListener(Landroid/hardware/input/IInputDevicesChangedListener;)V
PLcom/android/server/input/InputManagerService;->setInputDispatchMode(ZZ)V
PLcom/android/server/input/InputManagerService;->setPointerCapture(Z)V
PLcom/android/server/input/InputManagerService;->setSystemUiVisibility(I)V
PLcom/android/server/input/InputManagerService;->unregisterInputChannel(Landroid/view/InputChannel;)V
PLcom/android/server/inputmethod/AdditionalSubtypeUtils;->save(Landroid/util/ArrayMap;Landroid/util/ArrayMap;I)V
PLcom/android/server/inputmethod/InputContentUriTokenHandler;->doTakeLocked(Landroid/os/IBinder;)V
PLcom/android/server/inputmethod/InputContentUriTokenHandler;->finalize()V
PLcom/android/server/inputmethod/InputContentUriTokenHandler;->release()V
PLcom/android/server/inputmethod/InputContentUriTokenHandler;->take()V
PLcom/android/server/inputmethod/InputMethodManagerService$1;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/inputmethod/InputMethodManagerService$ClientDeathRecipient;->binderDied()V
PLcom/android/server/inputmethod/InputMethodManagerService$ClientState;->toString()Ljava/lang/String;
PLcom/android/server/inputmethod/InputMethodManagerService$ImmsBroadcastReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/inputmethod/InputMethodManagerService$InputMethodPrivilegedOperationsImpl;->createInputContentUriToken(Landroid/net/Uri;Ljava/lang/String;)Lcom/android/internal/inputmethod/IInputContentUriToken;
PLcom/android/server/inputmethod/InputMethodManagerService$InputMethodPrivilegedOperationsImpl;->hideMySoftInput(I)V
PLcom/android/server/inputmethod/InputMethodManagerService$InputMethodPrivilegedOperationsImpl;->notifyUserAction()V
PLcom/android/server/inputmethod/InputMethodManagerService$InputMethodPrivilegedOperationsImpl;->reportFullscreenMode(Z)V
PLcom/android/server/inputmethod/InputMethodManagerService$InputMethodPrivilegedOperationsImpl;->reportStartInput(Landroid/os/IBinder;)V
PLcom/android/server/inputmethod/InputMethodManagerService$InputMethodPrivilegedOperationsImpl;->setImeWindowStatus(II)V
PLcom/android/server/inputmethod/InputMethodManagerService$InputMethodPrivilegedOperationsImpl;->shouldOfferSwitchingToNextInputMethod()Z
PLcom/android/server/inputmethod/InputMethodManagerService$InputMethodPrivilegedOperationsImpl;->updateStatusIcon(Ljava/lang/String;I)V
PLcom/android/server/inputmethod/InputMethodManagerService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/inputmethod/InputMethodManagerService$LocalServiceImpl;->getInputMethodListAsUser(I)Ljava/util/List;
PLcom/android/server/inputmethod/InputMethodManagerService$LocalServiceImpl;->hideCurrentInputMethod()V
PLcom/android/server/inputmethod/InputMethodManagerService$LocalServiceImpl;->setInteractive(Z)V
PLcom/android/server/inputmethod/InputMethodManagerService$MethodCallback;->sessionCreated(Lcom/android/internal/view/IInputMethodSession;)V
PLcom/android/server/inputmethod/InputMethodManagerService$MyPackageMonitor;->onBeginPackageChanges()V
PLcom/android/server/inputmethod/InputMethodManagerService$MyPackageMonitor;->onFinishPackageChanges()V
PLcom/android/server/inputmethod/InputMethodManagerService$MyPackageMonitor;->onFinishPackageChangesInternal()V
PLcom/android/server/inputmethod/InputMethodManagerService$MyPackageMonitor;->onPackageAppeared(Ljava/lang/String;I)V
PLcom/android/server/inputmethod/InputMethodManagerService$MyPackageMonitor;->onPackageDisappeared(Ljava/lang/String;I)V
PLcom/android/server/inputmethod/InputMethodManagerService$MyPackageMonitor;->onPackageModified(Ljava/lang/String;)V
PLcom/android/server/inputmethod/InputMethodManagerService$MyPackageMonitor;->shouldRebuildInputMethodListLocked()Z
PLcom/android/server/inputmethod/InputMethodManagerService$StartInputHistory$Entry;->set(Lcom/android/server/inputmethod/InputMethodManagerService$StartInputInfo;)V
PLcom/android/server/inputmethod/InputMethodManagerService$StartInputInfo;-><init>(ILandroid/os/IBinder;ILjava/lang/String;IZIILandroid/os/IBinder;Landroid/view/inputmethod/EditorInfo;II)V
PLcom/android/server/inputmethod/InputMethodManagerService$StartInputInfo;-><init>(Landroid/os/IBinder;Ljava/lang/String;IZLandroid/os/IBinder;Landroid/view/inputmethod/EditorInfo;II)V
PLcom/android/server/inputmethod/InputMethodManagerService;->attachNewInputLocked(IZ)Lcom/android/internal/view/InputBindResult;
PLcom/android/server/inputmethod/InputMethodManagerService;->calledFromValidUserLocked()Z
PLcom/android/server/inputmethod/InputMethodManagerService;->calledWithValidTokenLocked(Landroid/os/IBinder;)Z
PLcom/android/server/inputmethod/InputMethodManagerService;->clearClientSessionLocked(Lcom/android/server/inputmethod/InputMethodManagerService$ClientState;)V
PLcom/android/server/inputmethod/InputMethodManagerService;->createInputContentUriToken(Landroid/os/IBinder;Landroid/net/Uri;Ljava/lang/String;)Lcom/android/internal/inputmethod/IInputContentUriToken;
PLcom/android/server/inputmethod/InputMethodManagerService;->finishSessionLocked(Lcom/android/server/inputmethod/InputMethodManagerService$SessionState;)V
PLcom/android/server/inputmethod/InputMethodManagerService;->getCurrentInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;
PLcom/android/server/inputmethod/InputMethodManagerService;->getCurrentInputMethodSubtypeLocked()Landroid/view/inputmethod/InputMethodSubtype;
PLcom/android/server/inputmethod/InputMethodManagerService;->getEnabledInputMethodList(I)Ljava/util/List;
PLcom/android/server/inputmethod/InputMethodManagerService;->getEnabledInputMethodListLocked(I)Ljava/util/List;
PLcom/android/server/inputmethod/InputMethodManagerService;->getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List;
PLcom/android/server/inputmethod/InputMethodManagerService;->getEnabledInputMethodSubtypeListLocked(Ljava/lang/String;ZI)Ljava/util/List;
PLcom/android/server/inputmethod/InputMethodManagerService;->getInputMethodList(I)Ljava/util/List;
PLcom/android/server/inputmethod/InputMethodManagerService;->getInputMethodListAsUser(I)Ljava/util/List;
PLcom/android/server/inputmethod/InputMethodManagerService;->getInputMethodListLocked(I)Ljava/util/List;
PLcom/android/server/inputmethod/InputMethodManagerService;->handleSetInteractive(Z)V
PLcom/android/server/inputmethod/InputMethodManagerService;->hideInputMethodMenu()V
PLcom/android/server/inputmethod/InputMethodManagerService;->hideInputMethodMenuLocked()V
PLcom/android/server/inputmethod/InputMethodManagerService;->hideMySoftInput(Landroid/os/IBinder;I)V
PLcom/android/server/inputmethod/InputMethodManagerService;->hideSoftInput(Lcom/android/internal/view/IInputMethodClient;ILandroid/os/ResultReceiver;)Z
PLcom/android/server/inputmethod/InputMethodManagerService;->notifyUserAction(Landroid/os/IBinder;)V
PLcom/android/server/inputmethod/InputMethodManagerService;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/inputmethod/InputMethodManagerService;->onServiceDisconnected(Landroid/content/ComponentName;)V
PLcom/android/server/inputmethod/InputMethodManagerService;->onSessionCreated(Lcom/android/internal/view/IInputMethod;Lcom/android/internal/view/IInputMethodSession;Landroid/view/InputChannel;)V
PLcom/android/server/inputmethod/InputMethodManagerService;->onUnlockUser(I)V
PLcom/android/server/inputmethod/InputMethodManagerService;->removeClient(Lcom/android/internal/view/IInputMethodClient;)V
PLcom/android/server/inputmethod/InputMethodManagerService;->reportFullscreenMode(Landroid/os/IBinder;Z)V
PLcom/android/server/inputmethod/InputMethodManagerService;->reportStartInput(Landroid/os/IBinder;Landroid/os/IBinder;)V
PLcom/android/server/inputmethod/InputMethodManagerService;->requestClientSessionLocked(Lcom/android/server/inputmethod/InputMethodManagerService$ClientState;)V
PLcom/android/server/inputmethod/InputMethodManagerService;->resetCurrentMethodAndClient(I)V
PLcom/android/server/inputmethod/InputMethodManagerService;->setEnabledSessionInMainThread(Lcom/android/server/inputmethod/InputMethodManagerService$SessionState;)V
PLcom/android/server/inputmethod/InputMethodManagerService;->setImeWindowStatus(Landroid/os/IBinder;II)V
PLcom/android/server/inputmethod/InputMethodManagerService;->shouldOfferSwitchingToNextInputMethod(Landroid/os/IBinder;)Z
PLcom/android/server/inputmethod/InputMethodManagerService;->shouldShowImeSwitcherLocked(I)Z
PLcom/android/server/inputmethod/InputMethodManagerService;->showCurrentInputLocked(ILandroid/os/ResultReceiver;)Z
PLcom/android/server/inputmethod/InputMethodManagerService;->showSoftInput(Lcom/android/internal/view/IInputMethodClient;ILandroid/os/ResultReceiver;)Z
PLcom/android/server/inputmethod/InputMethodManagerService;->switchUserLocked(I)V
PLcom/android/server/inputmethod/InputMethodManagerService;->updateStatusIcon(Landroid/os/IBinder;Ljava/lang/String;I)V
PLcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$ControllerImpl;->getNextInputMethod(ZLandroid/view/inputmethod/InputMethodInfo;Landroid/view/inputmethod/InputMethodSubtype;)Lcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$ImeSubtypeListItem;
PLcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$ControllerImpl;->onUserActionLocked(Landroid/view/inputmethod/InputMethodInfo;Landroid/view/inputmethod/InputMethodSubtype;)V
PLcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$DynamicRotationList;->getNextInputMethodLocked(ZLandroid/view/inputmethod/InputMethodInfo;Landroid/view/inputmethod/InputMethodSubtype;)Lcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$ImeSubtypeListItem;
PLcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$DynamicRotationList;->getUsageRank(Landroid/view/inputmethod/InputMethodInfo;Landroid/view/inputmethod/InputMethodSubtype;)I
PLcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$DynamicRotationList;->onUserAction(Landroid/view/inputmethod/InputMethodInfo;Landroid/view/inputmethod/InputMethodSubtype;)V
PLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->isSubtypeSelected()Z
PLcom/android/server/inputmethod/InputMethodUtils;->resolveUserId(IILjava/io/PrintWriter;)[I
PLcom/android/server/job/-$$Lambda$JobConcurrencyManager$5dmb0pQscXPwEG6SBnhs7aCwpSs;->run()V
PLcom/android/server/job/-$$Lambda$JobSchedulerService$AauD0it1BcgWldVm_V1m2Jo7_Zc;->test(Ljava/lang/Object;)Z
PLcom/android/server/job/-$$Lambda$JobSchedulerService$V6_ZmVmzJutg4w0s0LktDOsRAss;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
PLcom/android/server/job/-$$Lambda$JobStore$1$Wgepg1oHZp0-Q01q1baIVZKWujU;->accept(Ljava/lang/Object;)V
PLcom/android/server/job/JobConcurrencyManager$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/job/JobConcurrencyManager$JobCountTracker;->canJobStart(Z)Z
PLcom/android/server/job/JobConcurrencyManager$JobCountTracker;->incrementPendingJobCount(Z)V
PLcom/android/server/job/JobConcurrencyManager$JobCountTracker;->incrementRunningJobCount(Z)V
PLcom/android/server/job/JobConcurrencyManager$JobCountTracker;->onStartingNewJob(Z)V
PLcom/android/server/job/JobConcurrencyManager;->rampUpForScreenOff()V
PLcom/android/server/job/JobPackageTracker$DataSet;->decActive(ILjava/lang/String;JI)V
PLcom/android/server/job/JobPackageTracker$DataSet;->decActiveTop(ILjava/lang/String;JI)V
PLcom/android/server/job/JobPackageTracker$DataSet;->finish(Lcom/android/server/job/JobPackageTracker$DataSet;J)V
PLcom/android/server/job/JobPackageTracker$DataSet;->getOrCreateEntry(ILjava/lang/String;)Lcom/android/server/job/JobPackageTracker$PackageEntry;
PLcom/android/server/job/JobPackageTracker;->addEvent(IILjava/lang/String;IILjava/lang/String;)V
PLcom/android/server/job/JobPackageTracker;->getLoadFactor(Lcom/android/server/job/controllers/JobStatus;)F
PLcom/android/server/job/JobPackageTracker;->noteActive(Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/JobPackageTracker;->noteInactive(Lcom/android/server/job/controllers/JobStatus;ILjava/lang/String;)V
PLcom/android/server/job/JobPackageTracker;->rebatchIfNeeded(J)V
PLcom/android/server/job/JobSchedulerInternal$JobStorePersistStats;-><init>(Lcom/android/server/job/JobSchedulerInternal$JobStorePersistStats;)V
PLcom/android/server/job/JobSchedulerInternal$JobStorePersistStats;->toString()Ljava/lang/String;
PLcom/android/server/job/JobSchedulerService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/job/JobSchedulerService$JobSchedulerStub;->canPersistJobs(II)Z
PLcom/android/server/job/JobSchedulerService$JobSchedulerStub;->cancel(I)V
PLcom/android/server/job/JobSchedulerService$JobSchedulerStub;->enqueue(Landroid/app/job/JobInfo;Landroid/app/job/JobWorkItem;)I
PLcom/android/server/job/JobSchedulerService$JobSchedulerStub;->getAllPendingJobs()Ljava/util/List;
PLcom/android/server/job/JobSchedulerService$JobSchedulerStub;->scheduleAsPackage(Landroid/app/job/JobInfo;Ljava/lang/String;ILjava/lang/String;)I
PLcom/android/server/job/JobSchedulerService$LocalService;->addBackingUpUid(I)V
PLcom/android/server/job/JobSchedulerService$LocalService;->getPersistStats()Lcom/android/server/job/JobSchedulerInternal$JobStorePersistStats;
PLcom/android/server/job/JobSchedulerService$LocalService;->getSystemScheduledPendingJobs()Ljava/util/List;
PLcom/android/server/job/JobSchedulerService$LocalService;->noteJobStart(Ljava/lang/String;I)V
PLcom/android/server/job/JobSchedulerService$LocalService;->removeBackingUpUid(I)V
PLcom/android/server/job/JobSchedulerService$ReadyJobQueueFunctor;->accept(Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/JobSchedulerService$ReadyJobQueueFunctor;->accept(Ljava/lang/Object;)V
PLcom/android/server/job/JobSchedulerService$ReadyJobQueueFunctor;->postProcess()V
PLcom/android/server/job/JobSchedulerService;->cancelJob(III)Z
PLcom/android/server/job/JobSchedulerService;->cancelJobImplLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;Ljava/lang/String;)V
PLcom/android/server/job/JobSchedulerService;->cancelJobsForPackageAndUid(Ljava/lang/String;ILjava/lang/String;)V
PLcom/android/server/job/JobSchedulerService;->evaluateJobPriorityLocked(Lcom/android/server/job/controllers/JobStatus;)I
PLcom/android/server/job/JobSchedulerService;->getPendingJobs(I)Ljava/util/List;
PLcom/android/server/job/JobSchedulerService;->getRescheduleJobForFailureLocked(Lcom/android/server/job/controllers/JobStatus;)Lcom/android/server/job/controllers/JobStatus;
PLcom/android/server/job/JobSchedulerService;->getRescheduleJobForPeriodic(Lcom/android/server/job/controllers/JobStatus;)Lcom/android/server/job/controllers/JobStatus;
PLcom/android/server/job/JobSchedulerService;->heartbeatWhenJobsLastRun(Ljava/lang/String;I)J
PLcom/android/server/job/JobSchedulerService;->noteJobsPending(Ljava/util/List;)V
PLcom/android/server/job/JobSchedulerService;->onDeviceIdleStateChanged(Z)V
PLcom/android/server/job/JobSchedulerService;->onJobCompletedLocked(Lcom/android/server/job/controllers/JobStatus;Z)V
PLcom/android/server/job/JobSchedulerService;->onRunJobNow(Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/JobSchedulerService;->onStopUser(I)V
PLcom/android/server/job/JobSchedulerService;->onUnlockUser(I)V
PLcom/android/server/job/JobSchedulerService;->queueReadyJobsForExecutionLocked()V
PLcom/android/server/job/JobSchedulerService;->setLastJobHeartbeatLocked(Ljava/lang/String;IJ)V
PLcom/android/server/job/JobSchedulerService;->stopJobOnServiceContextLocked(Lcom/android/server/job/controllers/JobStatus;ILjava/lang/String;)Z
PLcom/android/server/job/JobSchedulerService;->stopTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;Z)Z
PLcom/android/server/job/JobServiceContext$JobCallback;->acknowledgeStartMessage(IZ)V
PLcom/android/server/job/JobServiceContext$JobCallback;->acknowledgeStopMessage(IZ)V
PLcom/android/server/job/JobServiceContext$JobCallback;->completeWork(II)Z
PLcom/android/server/job/JobServiceContext$JobCallback;->dequeueWork(I)Landroid/app/job/JobWorkItem;
PLcom/android/server/job/JobServiceContext$JobCallback;->jobFinished(IZ)V
PLcom/android/server/job/JobServiceContext$JobServiceHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/job/JobServiceContext;->assertCallerLocked(Lcom/android/server/job/JobServiceContext$JobCallback;)V
PLcom/android/server/job/JobServiceContext;->closeAndCleanupJobLocked(ZLjava/lang/String;)V
PLcom/android/server/job/JobServiceContext;->deriveWorkSource(Lcom/android/server/job/controllers/JobStatus;)Landroid/os/WorkSource;
PLcom/android/server/job/JobServiceContext;->doCallback(Lcom/android/server/job/JobServiceContext$JobCallback;ZLjava/lang/String;)V
PLcom/android/server/job/JobServiceContext;->doCallbackLocked(ZLjava/lang/String;)V
PLcom/android/server/job/JobServiceContext;->doCancelLocked(ILjava/lang/String;)V
PLcom/android/server/job/JobServiceContext;->doCompleteWork(Lcom/android/server/job/JobServiceContext$JobCallback;II)Z
PLcom/android/server/job/JobServiceContext;->doDequeueWork(Lcom/android/server/job/JobServiceContext$JobCallback;I)Landroid/app/job/JobWorkItem;
PLcom/android/server/job/JobServiceContext;->executeRunnableJob(Lcom/android/server/job/controllers/JobStatus;)Z
PLcom/android/server/job/JobServiceContext;->handleCancelLocked(Ljava/lang/String;)V
PLcom/android/server/job/JobServiceContext;->handleFinishedLocked(ZLjava/lang/String;)V
PLcom/android/server/job/JobServiceContext;->handleOpTimeoutLocked()V
PLcom/android/server/job/JobServiceContext;->handleServiceBoundLocked()V
PLcom/android/server/job/JobServiceContext;->handleStartedLocked(Z)V
PLcom/android/server/job/JobServiceContext;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/job/JobServiceContext;->onServiceDisconnected(Landroid/content/ComponentName;)V
PLcom/android/server/job/JobServiceContext;->scheduleOpTimeOutLocked()V
PLcom/android/server/job/JobServiceContext;->sendStopMessageLocked(Ljava/lang/String;)V
PLcom/android/server/job/JobStore$1;->addAttributesToJobTag(Lorg/xmlpull/v1/XmlSerializer;Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/JobStore$1;->deepCopyBundle(Landroid/os/PersistableBundle;I)Landroid/os/PersistableBundle;
PLcom/android/server/job/JobStore$1;->run()V
PLcom/android/server/job/JobStore$1;->writeConstraintsToXml(Lorg/xmlpull/v1/XmlSerializer;Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/JobStore$1;->writeExecutionCriteriaToXml(Lorg/xmlpull/v1/XmlSerializer;Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/JobStore$1;->writeJobsMapImpl(Ljava/util/List;)V
PLcom/android/server/job/JobStore;->maybeWriteStatusToDiskAsync()V
PLcom/android/server/job/JobStore;->remove(Lcom/android/server/job/controllers/JobStatus;Z)Z
PLcom/android/server/job/controllers/-$$Lambda$QuotaController$Sy3xZVkjJSYUVy4yBTZGfwQdAZ8;->accept(Ljava/lang/Object;)V
PLcom/android/server/job/controllers/BackgroundJobsController$1;->updateAllJobs()V
PLcom/android/server/job/controllers/BackgroundJobsController$UpdateJobFunctor;->accept(Ljava/lang/Object;)V
PLcom/android/server/job/controllers/BackgroundJobsController;->maybeStopTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;Z)V
PLcom/android/server/job/controllers/BatteryController$ChargingTracker;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/job/controllers/BatteryController$ChargingTracker;->onReceiveInternal(Landroid/content/Intent;)V
PLcom/android/server/job/controllers/BatteryController;->maybeReportNewChargingStateLocked()V
PLcom/android/server/job/controllers/BatteryController;->maybeStopTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;Z)V
PLcom/android/server/job/controllers/ConnectivityController$1;->onAvailable(Landroid/net/Network;)V
PLcom/android/server/job/controllers/ConnectivityController$1;->onCapabilitiesChanged(Landroid/net/Network;Landroid/net/NetworkCapabilities;)V
PLcom/android/server/job/controllers/ConnectivityController$1;->onLost(Landroid/net/Network;)V
PLcom/android/server/job/controllers/ConnectivityController;->isInsane(Lcom/android/server/job/controllers/JobStatus;Landroid/net/Network;Landroid/net/NetworkCapabilities;Lcom/android/server/job/JobSchedulerService$Constants;)Z
PLcom/android/server/job/controllers/ConnectivityController;->isRelaxedSatisfied(Lcom/android/server/job/controllers/JobStatus;Landroid/net/Network;Landroid/net/NetworkCapabilities;Lcom/android/server/job/JobSchedulerService$Constants;)Z
PLcom/android/server/job/controllers/ConnectivityController;->maybeStopTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;Z)V
PLcom/android/server/job/controllers/ConnectivityController;->onAppRemovedLocked(Ljava/lang/String;I)V
PLcom/android/server/job/controllers/ConnectivityController;->reevaluateStateLocked(I)V
PLcom/android/server/job/controllers/ConnectivityController;->requestStandbyExceptionLocked(Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/controllers/ConnectivityController;->revokeStandbyExceptionLocked(I)V
PLcom/android/server/job/controllers/ContentObserverController$JobInstance;-><init>(Lcom/android/server/job/controllers/ContentObserverController;Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/controllers/ContentObserverController$JobInstance;->detachLocked()V
PLcom/android/server/job/controllers/ContentObserverController$JobInstance;->scheduleLocked()V
PLcom/android/server/job/controllers/ContentObserverController$JobInstance;->trigger()V
PLcom/android/server/job/controllers/ContentObserverController$ObserverInstance;->onChange(ZLandroid/net/Uri;)V
PLcom/android/server/job/controllers/ContentObserverController$TriggerRunnable;->run()V
PLcom/android/server/job/controllers/ContentObserverController;->maybeStopTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;Z)V
PLcom/android/server/job/controllers/ContentObserverController;->prepareForExecutionLocked(Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/controllers/ContentObserverController;->rescheduleForFailureLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/controllers/DeviceIdleJobsController$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/job/controllers/DeviceIdleJobsController$DeviceIdleJobsDelayHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/job/controllers/DeviceIdleJobsController$DeviceIdleUpdateFunctor;->accept(Ljava/lang/Object;)V
PLcom/android/server/job/controllers/DeviceIdleJobsController;->maybeStopTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;Z)V
PLcom/android/server/job/controllers/DeviceIdleJobsController;->updateIdleMode(Z)V
PLcom/android/server/job/controllers/IdleController;->maybeStopTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;Z)V
PLcom/android/server/job/controllers/IdleController;->reportNewIdleState(Z)V
PLcom/android/server/job/controllers/JobStatus;-><init>(Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/controllers/JobStatus;-><init>(Lcom/android/server/job/controllers/JobStatus;JJJIJJ)V
PLcom/android/server/job/controllers/JobStatus;->completeWorkLocked(Landroid/app/IActivityManager;I)Z
PLcom/android/server/job/controllers/JobStatus;->dequeueWorkLocked()Landroid/app/job/JobWorkItem;
PLcom/android/server/job/controllers/JobStatus;->enqueueWorkLocked(Landroid/app/IActivityManager;Landroid/app/job/JobWorkItem;)V
PLcom/android/server/job/controllers/JobStatus;->stopTrackingJobLocked(Landroid/app/IActivityManager;Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/controllers/JobStatus;->toShortString()Ljava/lang/String;
PLcom/android/server/job/controllers/JobStatus;->unprepareLocked(Landroid/app/IActivityManager;)V
PLcom/android/server/job/controllers/QuotaController$1;->onAlarm()V
PLcom/android/server/job/controllers/QuotaController$ChargingTracker;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/job/controllers/QuotaController$DeleteTimingSessionsFunctor$1;->test(Lcom/android/server/job/controllers/QuotaController$TimingSession;)Z
PLcom/android/server/job/controllers/QuotaController$DeleteTimingSessionsFunctor$1;->test(Ljava/lang/Object;)Z
PLcom/android/server/job/controllers/QuotaController$DeleteTimingSessionsFunctor;->accept(Ljava/lang/Object;)V
PLcom/android/server/job/controllers/QuotaController$EarliestEndTimeFunctor;->accept(Ljava/lang/Object;)V
PLcom/android/server/job/controllers/QuotaController$QcAlarmListener;->getTriggerTimeElapsed()J
PLcom/android/server/job/controllers/QuotaController$QcAlarmListener;->isWaiting()Z
PLcom/android/server/job/controllers/QuotaController$QcAlarmListener;->onAlarm()V
PLcom/android/server/job/controllers/QuotaController$QcAlarmListener;->setTriggerTime(J)V
PLcom/android/server/job/controllers/QuotaController$Timer;->emitSessionLocked(J)V
PLcom/android/server/job/controllers/QuotaController$Timer;->getBgJobCount()I
PLcom/android/server/job/controllers/QuotaController$Timer;->getCurrentDuration(J)J
PLcom/android/server/job/controllers/QuotaController$Timer;->isActive()Z
PLcom/android/server/job/controllers/QuotaController$Timer;->onStateChanged(JZ)V
PLcom/android/server/job/controllers/QuotaController$Timer;->scheduleCutoff()V
PLcom/android/server/job/controllers/QuotaController$Timer;->startTrackingJob(Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/controllers/QuotaController$Timer;->stopTrackingJob(Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/controllers/QuotaController$TimingSession;-><init>(JJI)V
PLcom/android/server/job/controllers/QuotaController$UserPackageMap;->delete(ILjava/lang/String;)V
PLcom/android/server/job/controllers/QuotaController$UserPackageMap;->forEach(Ljava/util/function/Consumer;)V
PLcom/android/server/job/controllers/QuotaController$UserPackageMap;->keyAt(I)I
PLcom/android/server/job/controllers/QuotaController$UserPackageMap;->keyAt(II)Ljava/lang/String;
PLcom/android/server/job/controllers/QuotaController$UserPackageMap;->numPackagesForUser(I)I
PLcom/android/server/job/controllers/QuotaController$UserPackageMap;->valueAt(II)Ljava/lang/Object;
PLcom/android/server/job/controllers/QuotaController;->handleNewChargingStateLocked()V
PLcom/android/server/job/controllers/QuotaController;->incrementJobCount(ILjava/lang/String;I)V
PLcom/android/server/job/controllers/QuotaController;->maybeScheduleCleanupAlarmLocked()V
PLcom/android/server/job/controllers/QuotaController;->maybeScheduleStartAlarmLocked(ILjava/lang/String;I)V
PLcom/android/server/job/controllers/QuotaController;->maybeStopTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;Z)V
PLcom/android/server/job/controllers/QuotaController;->onAppRemovedLocked(Ljava/lang/String;I)V
PLcom/android/server/job/controllers/QuotaController;->prepareForExecutionLocked(Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/controllers/QuotaController;->saveTimingSession(ILjava/lang/String;Lcom/android/server/job/controllers/QuotaController$TimingSession;)V
PLcom/android/server/job/controllers/StateController;->onAppRemovedLocked(Ljava/lang/String;I)V
PLcom/android/server/job/controllers/StateController;->prepareForExecutionLocked(Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/controllers/StateController;->reevaluateStateLocked(I)V
PLcom/android/server/job/controllers/StateController;->rescheduleForFailureLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;)V
PLcom/android/server/job/controllers/StorageController;->maybeStopTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;Z)V
PLcom/android/server/job/controllers/TimeController$1;->onAlarm()V
PLcom/android/server/job/controllers/TimeController;->maybeStopTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;Z)V
PLcom/android/server/job/controllers/TimeController;->reevaluateStateLocked(I)V
PLcom/android/server/job/controllers/idle/-$$Lambda$DeviceIdlenessTracker$-H1-ZwZAJ-vh10A0PeYXaZLj_R0;->onAlarm()V
PLcom/android/server/job/controllers/idle/DeviceIdlenessTracker;->handleIdleTrigger()V
PLcom/android/server/job/controllers/idle/DeviceIdlenessTracker;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/location/-$$Lambda$ActivityRecognitionProxy$1$d2hvjp-Sk2zwb2N0mtEiubZ0jBE;->run(Landroid/os/IBinder;)V
PLcom/android/server/location/-$$Lambda$ContextHubClientBroker$iBGtMeLZ6k5dYJZb_VEUfBBYh9s;->accept(Landroid/hardware/location/IContextHubClientCallback;)V
PLcom/android/server/location/-$$Lambda$ContextHubClientBroker$ykmLCadaR6NcV4R42i4K8zw4AWs;->accept(Landroid/hardware/location/IContextHubClientCallback;)V
PLcom/android/server/location/-$$Lambda$ContextHubClientManager$VPD5ebhe8Z67S8QKuTR4KzeshK8;->accept(Ljava/lang/Object;)V
PLcom/android/server/location/-$$Lambda$ContextHubClientManager$gN_vRogwyzr9qBjrQpKwwHzrFAo;->accept(Ljava/lang/Object;)V
PLcom/android/server/location/-$$Lambda$ContextHubService$yrt4Ybb62ufyqsQQMJoTJ2JMw_4;->accept(Ljava/lang/Object;)V
PLcom/android/server/location/-$$Lambda$GeocoderProxy$jfLn3HL2BzwsKdoI6ZZeFfEe10k;->run(Landroid/os/IBinder;)Ljava/lang/Object;
PLcom/android/server/location/-$$Lambda$GeofenceProxy$nfSKchjbT2ANT9GbYwyAcTjzBwQ;->run(Landroid/os/IBinder;)V
PLcom/android/server/location/-$$Lambda$GnssLocationProvider$0fU7r6Mv7Rbb1locIu94oMkPETY;->run()V
PLcom/android/server/location/-$$Lambda$GnssLocationProvider$5JRdlnlBuHBzONt9pybF9IzcyVI;->run()V
PLcom/android/server/location/-$$Lambda$GnssLocationProvider$7an4_QLRsGpd_GYEEX9o8MWsh5g;->run()V
PLcom/android/server/location/-$$Lambda$GnssLocationProvider$NDN1yShW9DAV5AOPPdGxx-2UjAs;->run()V
PLcom/android/server/location/-$$Lambda$GnssLocationProvider$Q6M8z_ZBiD7BNs3kvNmVrqoHSng;->onNetworkAvailable()V
PLcom/android/server/location/-$$Lambda$GnssLocationProvider$gtHcvVLWX2LfpdP__1ZXfgMzijE;->run()V
PLcom/android/server/location/-$$Lambda$GnssLocationProvider$jI_1ijylK8qgSMUNPTBQdsK_VgI;->getGnssMetricsAsProtoString()Ljava/lang/String;
PLcom/android/server/location/-$$Lambda$GnssLocationProvider$oV78CWPlpzb195CgVgv-_YipNWw;->run()V
PLcom/android/server/location/-$$Lambda$GnssMeasurementsProvider$7zkPZ1cZT9il6UQ7nu_IZ88b3MU;->execute(Landroid/os/IInterface;Lcom/android/server/location/CallerIdentity;)V
PLcom/android/server/location/-$$Lambda$GnssNetworkConnectivityHandler$YEGTN3glQ7Hr1FK-xXGbC4KcmJY;->run()V
PLcom/android/server/location/-$$Lambda$GnssNetworkConnectivityHandler$aTyNcuGLHmJGtXKl9qoZpMmhfBY;->run()V
PLcom/android/server/location/-$$Lambda$GnssNetworkConnectivityHandler$axxNnxmo3KqgsSDot69yokC4KVE;->run()V
PLcom/android/server/location/-$$Lambda$GnssStatusListenerHelper$0MNjUouf1HJVcFD10rzoJIkzCrw;->execute(Landroid/os/IInterface;Lcom/android/server/location/CallerIdentity;)V
PLcom/android/server/location/-$$Lambda$GnssStatusListenerHelper$68FOYPQxCAVSdtoWmmZNfYGGIJE;->execute(Landroid/os/IInterface;Lcom/android/server/location/CallerIdentity;)V
PLcom/android/server/location/-$$Lambda$GnssStatusListenerHelper$6s2HBSMgP5pXrugfCvtIf9QHndI;-><init>()V
PLcom/android/server/location/-$$Lambda$GnssStatusListenerHelper$6s2HBSMgP5pXrugfCvtIf9QHndI;->execute(Landroid/os/IInterface;Lcom/android/server/location/CallerIdentity;)V
PLcom/android/server/location/-$$Lambda$GnssStatusListenerHelper$AtHI8E6PAjonHH1N0ZGabW0VF6c;->execute(Landroid/os/IInterface;Lcom/android/server/location/CallerIdentity;)V
PLcom/android/server/location/-$$Lambda$GnssStatusListenerHelper$H9Tg_OtCE9BSJiAQYs_ITHFpiHU;-><init>()V
PLcom/android/server/location/-$$Lambda$GnssStatusListenerHelper$H9Tg_OtCE9BSJiAQYs_ITHFpiHU;->execute(Landroid/os/IInterface;Lcom/android/server/location/CallerIdentity;)V
PLcom/android/server/location/-$$Lambda$NtpTimeHelper$xPxgficKWFyuwUj60WMuiGEEjdg;->run()V
PLcom/android/server/location/-$$Lambda$NtpTimeHelper$xWqlqJuq4jBJ5-xhFLCwEKGVB0k;->run()V
PLcom/android/server/location/AbstractLocationProvider;->getProviderPackages()Ljava/util/List;
PLcom/android/server/location/AbstractLocationProvider;->reportLocation(Landroid/location/Location;)V
PLcom/android/server/location/ActivityRecognitionProxy$1;->onBind()V
PLcom/android/server/location/ActivityRecognitionProxy;->initializeService(Landroid/os/IBinder;)V
PLcom/android/server/location/ComprehensiveCountryDetector$1;->onCountryDetected(Landroid/location/Country;)V
PLcom/android/server/location/ComprehensiveCountryDetector$4;->onServiceStateChanged(Landroid/telephony/ServiceState;)V
PLcom/android/server/location/ComprehensiveCountryDetector;->cancelLocationRefresh()V
PLcom/android/server/location/ComprehensiveCountryDetector;->removePhoneStateListener()V
PLcom/android/server/location/ComprehensiveCountryDetector;->stopLocationBasedDetector()V
PLcom/android/server/location/ContextHubClientBroker$PendingIntentRequest;->clear()V
PLcom/android/server/location/ContextHubClientBroker;->close()V
PLcom/android/server/location/ContextHubClientBroker;->onClientExit()V
PLcom/android/server/location/ContextHubClientBroker;->onNanoAppLoaded(J)V
PLcom/android/server/location/ContextHubClientBroker;->onNanoAppUnloaded(J)V
PLcom/android/server/location/ContextHubClientManager;->onNanoAppLoaded(IJ)V
PLcom/android/server/location/ContextHubClientManager;->onNanoAppUnloaded(IJ)V
PLcom/android/server/location/ContextHubClientManager;->unregisterClient(S)V
PLcom/android/server/location/ContextHubService$1;->onNanoAppLoaded(J)V
PLcom/android/server/location/ContextHubService$1;->onNanoAppUnloaded(J)V
PLcom/android/server/location/ContextHubService$2;->onTransactionComplete(I)V
PLcom/android/server/location/ContextHubService$3;->onTransactionComplete(I)V
PLcom/android/server/location/ContextHubService$ContextHubServiceCallback;->handleTxnResult(II)V
PLcom/android/server/location/ContextHubService;->checkHalProxyAndContextHubId(ILandroid/hardware/location/IContextHubTransactionCallback;I)Z
PLcom/android/server/location/ContextHubService;->findNanoAppOnHub(ILandroid/hardware/location/NanoAppFilter;)[I
PLcom/android/server/location/ContextHubService;->getContextHubHandles()[I
PLcom/android/server/location/ContextHubService;->getContextHubInfo(I)Landroid/hardware/location/ContextHubInfo;
PLcom/android/server/location/ContextHubService;->getNanoAppInstanceInfo(I)Landroid/hardware/location/NanoAppInstanceInfo;
PLcom/android/server/location/ContextHubService;->handleLoadResponseOldApi(IILandroid/hardware/location/NanoAppBinary;)V
PLcom/android/server/location/ContextHubService;->loadNanoApp(ILandroid/hardware/location/NanoApp;)I
PLcom/android/server/location/ContextHubService;->queryNanoApps(ILandroid/hardware/location/IContextHubTransactionCallback;)V
PLcom/android/server/location/ContextHubService;->sendMessage(IILandroid/hardware/location/ContextHubMessage;)I
PLcom/android/server/location/ContextHubService;->unloadNanoApp(I)I
PLcom/android/server/location/ContextHubServiceTransaction;->getTransactionId()I
PLcom/android/server/location/ContextHubServiceUtil;->createHidlNanoAppBinary(Landroid/hardware/location/NanoAppBinary;)Landroid/hardware/contexthub/V1_0/NanoAppBinary;
PLcom/android/server/location/ContextHubServiceUtil;->createPrimitiveIntArray(Ljava/util/Collection;)[I
PLcom/android/server/location/ContextHubTransactionManager$1;->onTransact()I
PLcom/android/server/location/ContextHubTransactionManager$1;->onTransactionComplete(I)V
PLcom/android/server/location/ContextHubTransactionManager$2;->onTransact()I
PLcom/android/server/location/ContextHubTransactionManager$2;->onTransactionComplete(I)V
PLcom/android/server/location/ContextHubTransactionManager;->createLoadTransaction(ILandroid/hardware/location/NanoAppBinary;Landroid/hardware/location/IContextHubTransactionCallback;)Lcom/android/server/location/ContextHubServiceTransaction;
PLcom/android/server/location/ContextHubTransactionManager;->createUnloadTransaction(IJLandroid/hardware/location/IContextHubTransactionCallback;)Lcom/android/server/location/ContextHubServiceTransaction;
PLcom/android/server/location/ContextHubTransactionManager;->onTransactionResponse(II)V
PLcom/android/server/location/CountryDetectorBase;->notifyListener(Landroid/location/Country;)V
PLcom/android/server/location/ExponentialBackOff;->nextBackoffMillis()J
PLcom/android/server/location/ExponentialBackOff;->reset()V
PLcom/android/server/location/GeocoderProxy;->getFromLocation(DDILandroid/location/GeocoderParams;Ljava/util/List;)Ljava/lang/String;
PLcom/android/server/location/GeofenceProxy$1;->onBind()V
PLcom/android/server/location/GeofenceProxy;->lambda$new$0$GeofenceProxy(Landroid/os/IBinder;)V
PLcom/android/server/location/GeofenceProxy;->lambda$new$0(Lcom/android/server/location/GeofenceProxy;Landroid/os/IBinder;)V
PLcom/android/server/location/GnssBatchingProvider$GnssBatchingProviderNative;->cleanupBatching()V
PLcom/android/server/location/GnssBatchingProvider$GnssBatchingProviderNative;->stopBatch()Z
PLcom/android/server/location/GnssBatchingProvider;->disable()V
PLcom/android/server/location/GnssBatchingProvider;->stop()Z
PLcom/android/server/location/GnssConfiguration;->getLppProfile()Ljava/lang/String;
PLcom/android/server/location/GnssGeofenceProvider$GnssGeofenceProviderNative;->addGeofence(IDDDIIII)Z
PLcom/android/server/location/GnssGeofenceProvider$GnssGeofenceProviderNative;->removeGeofence(I)Z
PLcom/android/server/location/GnssGeofenceProvider;->addCircularHardwareGeofence(IDDDIIII)Z
PLcom/android/server/location/GnssGeofenceProvider;->removeHardwareGeofence(I)Z
PLcom/android/server/location/GnssLocationProvider$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/location/GnssLocationProvider$2;->onSubscriptionsChanged()V
PLcom/android/server/location/GnssLocationProvider$3;->isAvailableInPlatform()Z
PLcom/android/server/location/GnssLocationProvider$3;->isGpsEnabled()Z
PLcom/android/server/location/GnssLocationProvider$6;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/location/GnssLocationProvider$LocationChangeListener;->onProviderDisabled(Ljava/lang/String;)V
PLcom/android/server/location/GnssLocationProvider$LocationExtras;->getBundle()Landroid/os/Bundle;
PLcom/android/server/location/GnssLocationProvider$LocationExtras;->reset()V
PLcom/android/server/location/GnssLocationProvider$LocationExtras;->set(III)V
PLcom/android/server/location/GnssLocationProvider$LocationExtras;->setBundle(Landroid/os/Bundle;)V
PLcom/android/server/location/GnssLocationProvider$NetworkLocationListener;->onLocationChanged(Landroid/location/Location;)V
PLcom/android/server/location/GnssLocationProvider;->getGeofenceStatus(I)I
PLcom/android/server/location/GnssLocationProvider;->handleDisable()V
PLcom/android/server/location/GnssLocationProvider;->handleReportLocation(ZLandroid/location/Location;)V
PLcom/android/server/location/GnssLocationProvider;->handleReportSvStatus(Lcom/android/server/location/GnssLocationProvider$SvStatusInfo;)V
PLcom/android/server/location/GnssLocationProvider;->handleRequestLocation(Z)V
PLcom/android/server/location/GnssLocationProvider;->injectTime(JJI)V
PLcom/android/server/location/GnssLocationProvider;->lambda$getGnssMetricsProvider$7$GnssLocationProvider()Ljava/lang/String;
PLcom/android/server/location/GnssLocationProvider;->lambda$reportGeofenceAddStatus$10$GnssLocationProvider(II)V
PLcom/android/server/location/GnssLocationProvider;->lambda$reportGeofenceRemoveStatus$11$GnssLocationProvider(II)V
PLcom/android/server/location/GnssLocationProvider;->lambda$reportGeofenceStatus$9$GnssLocationProvider(ILandroid/location/Location;)V
PLcom/android/server/location/GnssLocationProvider;->lambda$reportGeofenceTransition$8$GnssLocationProvider(ILandroid/location/Location;IJ)V
PLcom/android/server/location/GnssLocationProvider;->lambda$reportMeasurementData$3$GnssLocationProvider(Landroid/location/GnssMeasurementsEvent;)V
PLcom/android/server/location/GnssLocationProvider;->reportAGpsStatus(II[B)V
PLcom/android/server/location/GnssLocationProvider;->reportGeofenceAddStatus(II)V
PLcom/android/server/location/GnssLocationProvider;->reportGeofenceRemoveStatus(II)V
PLcom/android/server/location/GnssLocationProvider;->reportGeofenceStatus(ILandroid/location/Location;)V
PLcom/android/server/location/GnssLocationProvider;->reportGeofenceTransition(ILandroid/location/Location;IJ)V
PLcom/android/server/location/GnssLocationProvider;->reportLocation(ZLandroid/location/Location;)V
PLcom/android/server/location/GnssLocationProvider;->reportMeasurementData(Landroid/location/GnssMeasurementsEvent;)V
PLcom/android/server/location/GnssLocationProvider;->reportNmea(J)V
PLcom/android/server/location/GnssLocationProvider;->reportStatus(I)V
PLcom/android/server/location/GnssLocationProvider;->reportSvStatus(I[I[F[F[F[F)V
PLcom/android/server/location/GnssLocationProvider;->requestLocation(Z)V
PLcom/android/server/location/GnssLocationProvider;->setPositionMode(IIIIIZ)Z
PLcom/android/server/location/GnssLocationProvider;->startNavigating()V
PLcom/android/server/location/GnssLocationProvider;->subscriptionOrCarrierConfigChanged(Landroid/content/Context;)V
PLcom/android/server/location/GnssLocationProvider;->updateLowPowerMode()V
PLcom/android/server/location/GnssMeasurementsProvider$GnssMeasurementProviderNative;->startMeasurementCollection(Z)Z
PLcom/android/server/location/GnssMeasurementsProvider$GnssMeasurementProviderNative;->stopMeasurementCollection()Z
PLcom/android/server/location/GnssMeasurementsProvider$StatusChangedOperation;->execute(Landroid/location/IGnssMeasurementsListener;Lcom/android/server/location/CallerIdentity;)V
PLcom/android/server/location/GnssMeasurementsProvider$StatusChangedOperation;->execute(Landroid/os/IInterface;Lcom/android/server/location/CallerIdentity;)V
PLcom/android/server/location/GnssMeasurementsProvider;->getHandlerOperation(I)Lcom/android/server/location/RemoteListenerHelper$ListenerOperation;
PLcom/android/server/location/GnssMeasurementsProvider;->lambda$onMeasurementsAvailable$1$GnssMeasurementsProvider(Landroid/location/GnssMeasurementsEvent;Landroid/location/IGnssMeasurementsListener;Lcom/android/server/location/CallerIdentity;)V
PLcom/android/server/location/GnssMeasurementsProvider;->onMeasurementsAvailable(Landroid/location/GnssMeasurementsEvent;)V
PLcom/android/server/location/GnssMeasurementsProvider;->registerWithService()I
PLcom/android/server/location/GnssMeasurementsProvider;->unregisterFromService()V
PLcom/android/server/location/GnssNetworkConnectivityHandler$1;->onCapabilitiesChanged(Landroid/net/Network;Landroid/net/NetworkCapabilities;)V
PLcom/android/server/location/GnssNetworkConnectivityHandler$1;->onLost(Landroid/net/Network;)V
PLcom/android/server/location/GnssNetworkConnectivityHandler$2;->onAvailable(Landroid/net/Network;)V
PLcom/android/server/location/GnssNetworkConnectivityHandler;->getApnIpType(Ljava/lang/String;)I
PLcom/android/server/location/GnssNetworkConnectivityHandler;->getNetworkCapability(I)I
PLcom/android/server/location/GnssNetworkConnectivityHandler;->handleReleaseSuplConnection(I)V
PLcom/android/server/location/GnssNetworkConnectivityHandler;->handleRequestSuplConnection(I[B)V
PLcom/android/server/location/GnssNetworkConnectivityHandler;->handleSuplConnectionAvailable(Landroid/net/Network;)V
PLcom/android/server/location/GnssNetworkConnectivityHandler;->handleUpdateNetworkState(Landroid/net/Network;ZLandroid/net/NetworkCapabilities;)V
PLcom/android/server/location/GnssNetworkConnectivityHandler;->lambda$onReportAGpsStatus$0$GnssNetworkConnectivityHandler(I[B)V
PLcom/android/server/location/GnssNetworkConnectivityHandler;->lambda$onReportAGpsStatus$1$GnssNetworkConnectivityHandler()V
PLcom/android/server/location/GnssNetworkConnectivityHandler;->lambda$runEventAndReleaseWakeLock$2$GnssNetworkConnectivityHandler(Ljava/lang/Runnable;)V
PLcom/android/server/location/GnssNetworkConnectivityHandler;->lambda$runEventAndReleaseWakeLock$2(Lcom/android/server/location/GnssNetworkConnectivityHandler;Ljava/lang/Runnable;)V
PLcom/android/server/location/GnssNetworkConnectivityHandler;->onReportAGpsStatus(II[B)V
PLcom/android/server/location/GnssNetworkConnectivityHandler;->setRouting()V
PLcom/android/server/location/GnssNetworkConnectivityHandler;->translateToApnIpType(Ljava/lang/String;Ljava/lang/String;)I
PLcom/android/server/location/GnssNetworkConnectivityHandler;->updateTrackedNetworksState(ZLandroid/net/Network;Landroid/net/NetworkCapabilities;)Lcom/android/server/location/GnssNetworkConnectivityHandler$NetworkAttributes;
PLcom/android/server/location/GnssPositionMode;->equals(Ljava/lang/Object;)Z
PLcom/android/server/location/GnssStatusListenerHelper;->getHandlerOperation(I)Lcom/android/server/location/RemoteListenerHelper$ListenerOperation;
PLcom/android/server/location/GnssStatusListenerHelper;->lambda$onNmeaReceived$4$GnssStatusListenerHelper(JLjava/lang/String;Landroid/location/IGnssStatusListener;Lcom/android/server/location/CallerIdentity;)V
PLcom/android/server/location/GnssStatusListenerHelper;->lambda$onSvStatusChanged$3$GnssStatusListenerHelper(I[I[F[F[F[FLandroid/location/IGnssStatusListener;Lcom/android/server/location/CallerIdentity;)V
PLcom/android/server/location/GnssStatusListenerHelper;->onFirstFix(I)V
PLcom/android/server/location/GnssStatusListenerHelper;->onNmeaReceived(JLjava/lang/String;)V
PLcom/android/server/location/GnssStatusListenerHelper;->onStatusChanged(Z)V
PLcom/android/server/location/GnssStatusListenerHelper;->onSvStatusChanged(I[I[F[F[F[F)V
PLcom/android/server/location/GnssStatusListenerHelper;->registerWithService()I
PLcom/android/server/location/GnssStatusListenerHelper;->unregisterFromService()V
PLcom/android/server/location/LocationBasedCountryDetector$1;->onLocationChanged(Landroid/location/Location;)V
PLcom/android/server/location/LocationBasedCountryDetector$2;->run()V
PLcom/android/server/location/LocationBasedCountryDetector$3;->run()V
PLcom/android/server/location/LocationBasedCountryDetector;->getCountryFromLocation(Landroid/location/Location;)Ljava/lang/String;
PLcom/android/server/location/LocationBasedCountryDetector;->getLastKnownLocation()Landroid/location/Location;
PLcom/android/server/location/LocationBasedCountryDetector;->queryCountryCode(Landroid/location/Location;)V
PLcom/android/server/location/LocationBasedCountryDetector;->stop()V
PLcom/android/server/location/LocationBasedCountryDetector;->unregisterListener(Landroid/location/LocationListener;)V
PLcom/android/server/location/LocationBlacklist;->isBlacklisted(Ljava/lang/String;)Z
PLcom/android/server/location/LocationFudger;->createCoarseLocked(Landroid/location/Location;)Landroid/location/Location;
PLcom/android/server/location/LocationFudger;->getOrCreate(Landroid/location/Location;)Landroid/location/Location;
PLcom/android/server/location/LocationFudger;->updateRandomOffsetLocked()V
PLcom/android/server/location/LocationProviderProxy$1;->onReportLocation(Landroid/location/Location;)V
PLcom/android/server/location/LocationProviderProxy$2;->onUnbind()V
PLcom/android/server/location/LocationProviderProxy;->getProviderPackages()Ljava/util/List;
PLcom/android/server/location/LocationRequestStatistics$PackageStatistics;->stopRequesting()V
PLcom/android/server/location/LocationRequestStatistics;->stopRequesting(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/location/LocationRequestStatistics;->updateForeground(Ljava/lang/String;Ljava/lang/String;Z)V
PLcom/android/server/location/NanoAppStateManager;->foreachNanoAppInstanceInfo(Ljava/util/function/Consumer;)V
PLcom/android/server/location/NanoAppStateManager;->getNanoAppInstanceInfo(I)Landroid/hardware/location/NanoAppInstanceInfo;
PLcom/android/server/location/NtpTimeHelper;->blockingGetNtpTimeAndInject()V
PLcom/android/server/location/NtpTimeHelper;->lambda$blockingGetNtpTimeAndInject$0$NtpTimeHelper(JJJ)V
PLcom/android/server/location/NtpTimeHelper;->onNetworkAvailable()V
PLcom/android/server/location/NtpTimeHelper;->retrieveAndInjectNtpTime()V
PLcom/android/server/location/PassiveProvider;->updateLocation(Landroid/location/Location;)V
PLcom/android/server/location/RemoteListenerHelper$1;->run()V
PLcom/android/server/location/RemoteListenerHelper$HandlerRunnable;->run()V
PLcom/android/server/location/RemoteListenerHelper$LinkedListener;->binderDied()V
PLcom/android/server/location/RemoteListenerHelper;->addListener(Landroid/os/IInterface;Lcom/android/server/location/CallerIdentity;)V
PLcom/android/server/location/RemoteListenerHelper;->addListener(Landroid/os/IInterface;Lcom/android/server/location/CallerIdentity;)Z
PLcom/android/server/location/RemoteListenerHelper;->foreach(Lcom/android/server/location/RemoteListenerHelper$ListenerOperation;)V
PLcom/android/server/location/RemoteListenerHelper;->hasPermission(Landroid/content/Context;Lcom/android/server/location/CallerIdentity;)Z
PLcom/android/server/location/RemoteListenerHelper;->removeListener(Landroid/os/IInterface;)V
PLcom/android/server/locksettings/-$$Lambda$LockSettingsService$Hh44Kcp05cKI6Hc6dJfQupn4QY8;-><init>(Lcom/android/server/locksettings/LockSettingsService;Landroid/app/admin/PasswordMetrics;I)V
PLcom/android/server/locksettings/-$$Lambda$LockSettingsService$Hh44Kcp05cKI6Hc6dJfQupn4QY8;->run()V
PLcom/android/server/locksettings/-$$Lambda$LockSettingsService$lWTrcqR9gZxL-pxwBbtvTGqAifU;->run()V
PLcom/android/server/locksettings/-$$Lambda$SyntheticPasswordManager$aWnbfYziDTrRrLqWFePMTj6-dy0;->onValues(ILandroid/hardware/weaver/V1_0/WeaverReadResponse;)V
PLcom/android/server/locksettings/LockSettingsService$1;->run()V
PLcom/android/server/locksettings/LockSettingsService$3;->onFinished(ILandroid/os/Bundle;)V
PLcom/android/server/locksettings/LockSettingsService$3;->onProgress(IILandroid/os/Bundle;)V
PLcom/android/server/locksettings/LockSettingsService$3;->onStarted(ILandroid/os/Bundle;)V
PLcom/android/server/locksettings/LockSettingsService$Injector;->getDevicePolicyManager()Landroid/app/admin/DevicePolicyManager;
PLcom/android/server/locksettings/LockSettingsService$Injector;->getStorageManager()Landroid/os/storage/IStorageManager;
PLcom/android/server/locksettings/LockSettingsService$Injector;->hasBiometrics()Z
PLcom/android/server/locksettings/LockSettingsService$Injector;->isGsiRunning()Z
PLcom/android/server/locksettings/LockSettingsService$Lifecycle;->onCleanupUser(I)V
PLcom/android/server/locksettings/LockSettingsService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker;->getStrongAuthForUser(I)I
PLcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker;->handleStrongAuthRequiredChanged(II)V
PLcom/android/server/locksettings/LockSettingsService;->activateEscrowTokens(Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)V
PLcom/android/server/locksettings/LockSettingsService;->checkCredential(Ljava/lang/String;IILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;
PLcom/android/server/locksettings/LockSettingsService;->checkCredential([BIILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;
PLcom/android/server/locksettings/LockSettingsService;->checkVoldPassword(I)Z
PLcom/android/server/locksettings/LockSettingsService;->disableEscrowTokenOnNonManagedDevicesIfNeeded(I)V
PLcom/android/server/locksettings/LockSettingsService;->doVerifyCredential(Ljava/lang/String;IZJILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;
PLcom/android/server/locksettings/LockSettingsService;->doVerifyCredential([BIZJILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;
PLcom/android/server/locksettings/LockSettingsService;->ensureProfileKeystoreUnlocked(I)V
PLcom/android/server/locksettings/LockSettingsService;->getDecryptedPasswordForTiedProfile(I)Ljava/lang/String;
PLcom/android/server/locksettings/LockSettingsService;->getDecryptedPasswordForTiedProfile(I)[B
PLcom/android/server/locksettings/LockSettingsService;->getKey(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/locksettings/LockSettingsService;->getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;
PLcom/android/server/locksettings/LockSettingsService;->getRecoverySecretTypes()[I
PLcom/android/server/locksettings/LockSettingsService;->getRecoveryStatus()Ljava/util/Map;
PLcom/android/server/locksettings/LockSettingsService;->getStrongAuthForUser(I)I
PLcom/android/server/locksettings/LockSettingsService;->initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V
PLcom/android/server/locksettings/LockSettingsService;->isUserSecure(I)Z
PLcom/android/server/locksettings/LockSettingsService;->lambda$notifyActivePasswordMetricsAvailable$0$LockSettingsService(Landroid/app/admin/PasswordMetrics;I)V
PLcom/android/server/locksettings/LockSettingsService;->lambda$tryRemoveUserFromSpCacheLater$2$LockSettingsService(I)V
PLcom/android/server/locksettings/LockSettingsService;->lambda$tryRemoveUserFromSpCacheLater$2(Lcom/android/server/locksettings/LockSettingsService;I)V
PLcom/android/server/locksettings/LockSettingsService;->onAuthTokenKnownForUser(ILcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;)V
PLcom/android/server/locksettings/LockSettingsService;->onCleanupUser(I)V
PLcom/android/server/locksettings/LockSettingsService;->onUnlockUser(I)V
PLcom/android/server/locksettings/LockSettingsService;->requireStrongAuth(II)V
PLcom/android/server/locksettings/LockSettingsService;->setBoolean(Ljava/lang/String;ZI)V
PLcom/android/server/locksettings/LockSettingsService;->setRecoverySecretTypes([I)V
PLcom/android/server/locksettings/LockSettingsService;->setServerParams([B)V
PLcom/android/server/locksettings/LockSettingsService;->setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V
PLcom/android/server/locksettings/LockSettingsService;->shouldCacheSpForUser(I)Z
PLcom/android/server/locksettings/LockSettingsService;->showEncryptionNotification(Landroid/os/UserHandle;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/app/PendingIntent;)V
PLcom/android/server/locksettings/LockSettingsService;->showEncryptionNotificationForProfile(Landroid/os/UserHandle;)V
PLcom/android/server/locksettings/LockSettingsService;->spBasedDoVerifyCredential(Ljava/lang/String;IZJILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;
PLcom/android/server/locksettings/LockSettingsService;->spBasedDoVerifyCredential([BIZJILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;
PLcom/android/server/locksettings/LockSettingsService;->tieManagedProfileLockIfNecessary(ILjava/lang/String;)V
PLcom/android/server/locksettings/LockSettingsService;->tieManagedProfileLockIfNecessary(I[B)V
PLcom/android/server/locksettings/LockSettingsService;->tiedManagedProfileReadyToUnlock(Landroid/content/pm/UserInfo;)Z
PLcom/android/server/locksettings/LockSettingsService;->unlockChildProfile(IZ)V
PLcom/android/server/locksettings/LockSettingsService;->unlockUser(I[B[B)V
PLcom/android/server/locksettings/LockSettingsService;->userPresent(I)V
PLcom/android/server/locksettings/LockSettingsStorage$Cache;->putKeyValue(Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/locksettings/LockSettingsStorage;->deleteSyntheticPasswordState(IJLjava/lang/String;)V
PLcom/android/server/locksettings/LockSettingsStorage;->readChildProfileLock(I)[B
PLcom/android/server/locksettings/LockSettingsStorage;->writeKeyValue(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/locksettings/LockSettingsStorage;->writeKeyValue(Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/locksettings/LockSettingsStrongAuth;->handleScheduleStrongAuthTimeout(I)V
PLcom/android/server/locksettings/LockSettingsStrongAuth;->notifyStrongAuthTrackers(II)V
PLcom/android/server/locksettings/LockSettingsStrongAuth;->reportSuccessfulStrongAuthUnlock(I)V
PLcom/android/server/locksettings/LockSettingsStrongAuth;->reportUnlock(I)V
PLcom/android/server/locksettings/LockSettingsStrongAuth;->requireStrongAuth(II)V
PLcom/android/server/locksettings/SP800Derive;->getMac()Ljavax/crypto/Mac;
PLcom/android/server/locksettings/SP800Derive;->withContext([B[B)[B
PLcom/android/server/locksettings/SyntheticPasswordCrypto;->decrypt(Ljavax/crypto/SecretKey;[B)[B
PLcom/android/server/locksettings/SyntheticPasswordCrypto;->decrypt([B[B[B)[B
PLcom/android/server/locksettings/SyntheticPasswordCrypto;->decryptBlob(Ljava/lang/String;[B[B)[B
PLcom/android/server/locksettings/SyntheticPasswordCrypto;->personalisedHash([B[[B)[B
PLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;->deriveDiskEncryptionKey()[B
PLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;->deriveGkPassword()[B
PLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;->deriveKeyStorePassword()Ljava/lang/String;
PLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;->deriveKeyStorePassword()[B
PLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;->derivePassword([B)[B
PLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;->deriveVendorAuthSecret()[B
PLcom/android/server/locksettings/SyntheticPasswordManager;->bytesToHex([B)Ljava/lang/String;
PLcom/android/server/locksettings/SyntheticPasswordManager;->bytesToHex([B)[B
PLcom/android/server/locksettings/SyntheticPasswordManager;->decryptSPBlob(Ljava/lang/String;[B[B)[B
PLcom/android/server/locksettings/SyntheticPasswordManager;->destroyEscrowData(I)V
PLcom/android/server/locksettings/SyntheticPasswordManager;->getPendingTokensForUser(I)Ljava/util/Set;
PLcom/android/server/locksettings/SyntheticPasswordManager;->isWeaverAvailable()Z
PLcom/android/server/locksettings/SyntheticPasswordManager;->lambda$weaverVerify$1([Lcom/android/internal/widget/VerifyCredentialResponse;IILandroid/hardware/weaver/V1_0/WeaverReadResponse;)V
PLcom/android/server/locksettings/SyntheticPasswordManager;->loadWeaverSlot(JI)I
PLcom/android/server/locksettings/SyntheticPasswordManager;->passwordTokenToWeaverKey([B)[B
PLcom/android/server/locksettings/SyntheticPasswordManager;->scrypt(Ljava/lang/String;[BIIII)[B
PLcom/android/server/locksettings/SyntheticPasswordManager;->scrypt([B[BIIII)[B
PLcom/android/server/locksettings/SyntheticPasswordManager;->unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLjava/lang/String;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult;
PLcom/android/server/locksettings/SyntheticPasswordManager;->unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;J[BILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult;
PLcom/android/server/locksettings/SyntheticPasswordManager;->unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;
PLcom/android/server/locksettings/SyntheticPasswordManager;->verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse;
PLcom/android/server/locksettings/SyntheticPasswordManager;->weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse;
PLcom/android/server/locksettings/recoverablekeystore/KeySyncTask;-><init>(Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage;Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage;IILjava/lang/String;ZLcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager;Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper;Landroid/security/Scrypt;)V
PLcom/android/server/locksettings/recoverablekeystore/KeySyncTask;-><init>(Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage;Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage;II[BZLcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager;Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper;Landroid/security/Scrypt;)V
PLcom/android/server/locksettings/recoverablekeystore/KeySyncTask;->run()V
PLcom/android/server/locksettings/recoverablekeystore/KeySyncTask;->shouldCreateSnapshot(I)Z
PLcom/android/server/locksettings/recoverablekeystore/KeySyncTask;->syncKeys()V
PLcom/android/server/locksettings/recoverablekeystore/KeySyncTask;->syncKeysForAgent(I)V
PLcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager;->getInstance(Landroid/content/Context;Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;)Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager;
PLcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;->checkRecoverKeyStorePermission()V
PLcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;->getKey(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;->getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;
PLcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;->getRecoverySecretTypes()[I
PLcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;->getRecoveryStatus()Ljava/util/Map;
PLcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;->initRecoveryService(Ljava/lang/String;[B)V
PLcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;->initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V
PLcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;->lockScreenSecretAvailable(ILjava/lang/String;I)V
PLcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;->lockScreenSecretAvailable(I[BI)V
PLcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;->setRecoverySecretTypes([I)V
PLcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;->setServerParams([B)V
PLcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;->setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V
PLcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage;->setSnapshotListener(ILandroid/app/PendingIntent;)V
PLcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper;-><init>()V
PLcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper;->getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper;->getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate;
PLcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper;->isTestOnlyCertificateAlias(Ljava/lang/String;)Z
PLcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper;->isValidRootCertificateAlias(Ljava/lang/String;)Z
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils;->buildCertPath(Ljava/security/cert/PKIXParameters;)Ljava/security/cert/CertPath;
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils;->buildPkixParams(Ljava/util/Date;Ljava/security/cert/X509Certificate;Ljava/util/List;Ljava/security/cert/X509Certificate;)Ljava/security/cert/PKIXParameters;
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils;->decodeBase64(Ljava/lang/String;)[B
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils;->decodeCert(Ljava/io/InputStream;)Ljava/security/cert/X509Certificate;
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils;->getXmlDirectChildren(Lorg/w3c/dom/Element;Ljava/lang/String;)Ljava/util/List;
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils;->getXmlNodeContents(ILorg/w3c/dom/Element;[Ljava/lang/String;)Ljava/util/List;
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils;->getXmlRootNode([B)Lorg/w3c/dom/Element;
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils;->validateCert(Ljava/util/Date;Ljava/security/cert/X509Certificate;Ljava/util/List;Ljava/security/cert/X509Certificate;)Ljava/security/cert/CertPath;
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils;->verifyRsaSha256Signature(Ljava/security/PublicKey;[B[B)V
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertXml;-><init>(JJLjava/util/List;Ljava/util/List;)V
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertXml;-><init>(JLjava/util/List;Ljava/util/List;)V
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertXml;->parseEndpointCerts(Lorg/w3c/dom/Element;)Ljava/util/List;
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertXml;->parseIntermediateCerts(Lorg/w3c/dom/Element;)Ljava/util/List;
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertXml;->parseRefreshInterval(Lorg/w3c/dom/Element;)J
PLcom/android/server/locksettings/recoverablekeystore/certificate/CertXml;->parseSerial(Lorg/w3c/dom/Element;)J
PLcom/android/server/locksettings/recoverablekeystore/certificate/SigXml;->parseIntermediateCerts(Lorg/w3c/dom/Element;)Ljava/util/List;
PLcom/android/server/locksettings/recoverablekeystore/serialization/KeyChainSnapshotDeserializer;->deserialize(Ljava/io/InputStream;)Landroid/security/keystore/recovery/KeyChainSnapshot;
PLcom/android/server/locksettings/recoverablekeystore/serialization/KeyChainSnapshotDeserializer;->deserializeInternal(Ljava/io/InputStream;)Landroid/security/keystore/recovery/KeyChainSnapshot;
PLcom/android/server/locksettings/recoverablekeystore/serialization/KeyChainSnapshotDeserializer;->readBlobTag(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)[B
PLcom/android/server/locksettings/recoverablekeystore/serialization/KeyChainSnapshotDeserializer;->readCertPathTag(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)Ljava/security/cert/CertPath;
PLcom/android/server/locksettings/recoverablekeystore/serialization/KeyChainSnapshotDeserializer;->readIntTag(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)I
PLcom/android/server/locksettings/recoverablekeystore/serialization/KeyChainSnapshotDeserializer;->readKeyChainProtectionParams(Lorg/xmlpull/v1/XmlPullParser;)Landroid/security/keystore/recovery/KeyChainProtectionParams;
PLcom/android/server/locksettings/recoverablekeystore/serialization/KeyChainSnapshotDeserializer;->readKeyChainProtectionParamsList(Lorg/xmlpull/v1/XmlPullParser;)Ljava/util/List;
PLcom/android/server/locksettings/recoverablekeystore/serialization/KeyChainSnapshotDeserializer;->readKeyDerivationParams(Lorg/xmlpull/v1/XmlPullParser;)Landroid/security/keystore/recovery/KeyDerivationParams;
PLcom/android/server/locksettings/recoverablekeystore/serialization/KeyChainSnapshotDeserializer;->readLongTag(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)J
PLcom/android/server/locksettings/recoverablekeystore/serialization/KeyChainSnapshotDeserializer;->readWrappedApplicationKey(Lorg/xmlpull/v1/XmlPullParser;)Landroid/security/keystore/recovery/WrappedApplicationKey;
PLcom/android/server/locksettings/recoverablekeystore/serialization/KeyChainSnapshotDeserializer;->readWrappedApplicationKeys(Lorg/xmlpull/v1/XmlPullParser;)Ljava/util/List;
PLcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage;->getGrantAlias(IILjava/lang/String;)Ljava/lang/String;
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;->ensureRecoveryServiceMetadataEntryExists(II)V
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;->getActiveRootOfTrust(II)Ljava/lang/String;
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;->getBytes(IILjava/lang/String;)[B
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;->getLong(IILjava/lang/String;)Ljava/lang/Long;
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;->getLong(IILjava/lang/String;Ljava/lang/String;)Ljava/lang/Long;
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;->getRecoveryAgents(I)Ljava/util/List;
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;->getRecoverySecretTypes(II)[I
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;->getRecoveryServiceCertSerial(IILjava/lang/String;)Ljava/lang/Long;
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;->getServerParams(II)[B
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;->getShouldCreateSnapshot(II)Z
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;->getSnapshotVersion(II)Ljava/lang/Long;
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;->getStatusForAllKeys(I)Ljava/util/Map;
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;->setActiveRootOfTrust(IILjava/lang/String;)J
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage;->get(I)Landroid/security/keystore/recovery/KeyChainSnapshot;
PLcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage;->readFromDisk(I)Landroid/security/keystore/recovery/KeyChainSnapshot;
PLcom/android/server/media/-$$Lambda$MediaSessionServiceImpl$a3VtB0CQuvV4UG4nWgvCgkL6hec;->onAudioPlayerActiveStateChanged(Landroid/media/AudioPlaybackConfiguration;Z)V
PLcom/android/server/media/AudioPlayerStateMonitor$MessageHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/media/AudioPlayerStateMonitor;->cleanUpAudioPlaybackUids(I)V
PLcom/android/server/media/AudioPlayerStateMonitor;->dispatchPlaybackConfigChange(Ljava/util/List;Z)V
PLcom/android/server/media/MediaResourceMonitorService$MediaResourceMonitorImpl;->getPackageNamesFromPid(I)[Ljava/lang/String;
PLcom/android/server/media/MediaResourceMonitorService$MediaResourceMonitorImpl;->notifyResourceGranted(II)V
PLcom/android/server/media/MediaRouterService$1$1;->run()V
PLcom/android/server/media/MediaRouterService$1;->onAudioPlayerActiveStateChanged(Landroid/media/AudioPlaybackConfiguration;Z)V
PLcom/android/server/media/MediaRouterService$2;->dispatchAudioRoutesChanged(Landroid/media/AudioRoutesInfo;)V
PLcom/android/server/media/MediaRouterService$ClientRecord;->binderDied()V
PLcom/android/server/media/MediaRouterService$MediaRouterServiceBroadcastReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/media/MediaRouterService$UserHandler$ProviderRecord;-><init>(Lcom/android/server/media/RemoteDisplayProviderProxy;)V
PLcom/android/server/media/MediaRouterService$UserHandler$ProviderRecord;->updateDescriptor(Landroid/media/RemoteDisplayState;)Z
PLcom/android/server/media/MediaRouterService$UserHandler;->addProvider(Lcom/android/server/media/RemoteDisplayProviderProxy;)V
PLcom/android/server/media/MediaRouterService$UserHandler;->updateClientState()V
PLcom/android/server/media/MediaRouterService$UserHandler;->updateDiscoveryRequest()V
PLcom/android/server/media/MediaRouterService;->clientDied(Lcom/android/server/media/MediaRouterService$ClientRecord;)V
PLcom/android/server/media/MediaRouterService;->disposeClientLocked(Lcom/android/server/media/MediaRouterService$ClientRecord;Z)V
PLcom/android/server/media/MediaRouterService;->disposeUserIfNeededLocked(Lcom/android/server/media/MediaRouterService$UserRecord;)V
PLcom/android/server/media/MediaRouterService;->restoreBluetoothA2dp()V
PLcom/android/server/media/MediaRouterService;->restoreRoute(I)V
PLcom/android/server/media/MediaSessionRecord$2;->run()V
PLcom/android/server/media/MediaSessionRecord$3;->run()V
PLcom/android/server/media/MediaSessionRecord$ControllerStub;->getExtras()Landroid/os/Bundle;
PLcom/android/server/media/MediaSessionRecord$ControllerStub;->getFlags()J
PLcom/android/server/media/MediaSessionRecord$ControllerStub;->getMetadata()Landroid/media/MediaMetadata;
PLcom/android/server/media/MediaSessionRecord$ControllerStub;->getPackageName()Ljava/lang/String;
PLcom/android/server/media/MediaSessionRecord$ControllerStub;->getPlaybackState()Landroid/media/session/PlaybackState;
PLcom/android/server/media/MediaSessionRecord$ControllerStub;->getQueue()Ljava/util/List;
PLcom/android/server/media/MediaSessionRecord$ControllerStub;->getQueueTitle()Ljava/lang/CharSequence;
PLcom/android/server/media/MediaSessionRecord$ControllerStub;->getRatingType()I
PLcom/android/server/media/MediaSessionRecord$ControllerStub;->getVolumeAttributes()Landroid/media/session/MediaController$PlaybackInfo;
PLcom/android/server/media/MediaSessionRecord$ControllerStub;->registerCallback(Ljava/lang/String;Landroid/media/session/ControllerCallbackLink;)V
PLcom/android/server/media/MediaSessionRecord$ControllerStub;->sendCommand(Ljava/lang/String;Landroid/media/session/ControllerCallbackLink;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/ResultReceiver;)V
PLcom/android/server/media/MediaSessionRecord$ControllerStub;->sendMediaButton(Ljava/lang/String;Landroid/media/session/ControllerCallbackLink;Landroid/view/KeyEvent;)Z
PLcom/android/server/media/MediaSessionRecord$ControllerStub;->unregisterCallback(Landroid/media/session/ControllerCallbackLink;)V
PLcom/android/server/media/MediaSessionRecord$SessionCb;->adjustVolume(Ljava/lang/String;IILandroid/media/session/ControllerCallbackLink;ZI)V
PLcom/android/server/media/MediaSessionRecord$SessionCb;->sendCommand(Ljava/lang/String;IILandroid/media/session/ControllerCallbackLink;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/ResultReceiver;)V
PLcom/android/server/media/MediaSessionRecord$SessionCb;->sendMediaButton(Ljava/lang/String;IILandroid/media/session/ControllerCallbackLink;ZLandroid/view/KeyEvent;)Z
PLcom/android/server/media/MediaSessionRecord$SessionStub;->destroySession()V
PLcom/android/server/media/MediaSessionRecord$SessionStub;->setActive(Z)V
PLcom/android/server/media/MediaSessionRecord$SessionStub;->setCurrentVolume(I)V
PLcom/android/server/media/MediaSessionRecord$SessionStub;->setExtras(Landroid/os/Bundle;)V
PLcom/android/server/media/MediaSessionRecord$SessionStub;->setLaunchPendingIntent(Landroid/app/PendingIntent;)V
PLcom/android/server/media/MediaSessionRecord$SessionStub;->setMediaButtonReceiver(Landroid/app/PendingIntent;)V
PLcom/android/server/media/MediaSessionRecord$SessionStub;->setMetadata(Landroid/media/MediaMetadata;JLjava/lang/String;)V
PLcom/android/server/media/MediaSessionRecord$SessionStub;->setPlaybackState(Landroid/media/session/PlaybackState;)V
PLcom/android/server/media/MediaSessionRecord$SessionStub;->setPlaybackToRemote(II)V
PLcom/android/server/media/MediaSessionRecord$SessionStub;->setQueue(Ljava/util/List;)V
PLcom/android/server/media/MediaSessionRecord$SessionStub;->setQueueTitle(Ljava/lang/CharSequence;)V
PLcom/android/server/media/MediaSessionRecord$SessionStub;->setRatingType(I)V
PLcom/android/server/media/MediaSessionRecord;->adjustVolume(Ljava/lang/String;Ljava/lang/String;IILandroid/media/session/ControllerCallbackLink;ZIIZ)V
PLcom/android/server/media/MediaSessionRecord;->binderDied()V
PLcom/android/server/media/MediaSessionRecord;->getCallback()Landroid/media/session/SessionCallbackLink;
PLcom/android/server/media/MediaSessionRecord;->getControllerHolderIndexForCb(Landroid/media/session/ControllerCallbackLink;)I
PLcom/android/server/media/MediaSessionRecord;->getControllerLink()Landroid/media/session/ControllerLink;
PLcom/android/server/media/MediaSessionRecord;->getFlags()J
PLcom/android/server/media/MediaSessionRecord;->getMediaButtonReceiver()Landroid/app/PendingIntent;
PLcom/android/server/media/MediaSessionRecord;->getPackageName()Ljava/lang/String;
PLcom/android/server/media/MediaSessionRecord;->getPlaybackState()Landroid/media/session/PlaybackState;
PLcom/android/server/media/MediaSessionRecord;->getPlaybackType()I
PLcom/android/server/media/MediaSessionRecord;->getSessionToken()Landroid/media/session/MediaSession$Token;
PLcom/android/server/media/MediaSessionRecord;->getStateWithUpdatedPosition()Landroid/media/session/PlaybackState;
PLcom/android/server/media/MediaSessionRecord;->getUid()I
PLcom/android/server/media/MediaSessionRecord;->getVolumeAttributes()Landroid/media/session/MediaController$PlaybackInfo;
PLcom/android/server/media/MediaSessionRecord;->hasFlag(I)Z
PLcom/android/server/media/MediaSessionRecord;->isPlaybackActive()Z
PLcom/android/server/media/MediaSessionRecord;->onDestroy()V
PLcom/android/server/media/MediaSessionRecord;->postAdjustLocalVolume(IIILjava/lang/String;IIZZI)V
PLcom/android/server/media/MediaSessionRecord;->pushExtrasUpdate()V
PLcom/android/server/media/MediaSessionRecord;->pushMetadataUpdate()V
PLcom/android/server/media/MediaSessionRecord;->pushPlaybackStateUpdate()V
PLcom/android/server/media/MediaSessionRecord;->pushQueueTitleUpdate()V
PLcom/android/server/media/MediaSessionRecord;->pushQueueUpdate()V
PLcom/android/server/media/MediaSessionRecord;->pushSessionDestroyed()V
PLcom/android/server/media/MediaSessionRecord;->pushVolumeUpdate()V
PLcom/android/server/media/MediaSessionService;->onStopUser(I)V
PLcom/android/server/media/MediaSessionServiceImpl$FullUserRecord;->getComponentType(Landroid/content/ComponentName;)I
PLcom/android/server/media/MediaSessionServiceImpl$FullUserRecord;->onMediaButtonSessionChanged(Lcom/android/server/media/MediaSessionRecord;Lcom/android/server/media/MediaSessionRecord;)V
PLcom/android/server/media/MediaSessionServiceImpl$FullUserRecord;->pushAddressedPlayerChangedLocked()V
PLcom/android/server/media/MediaSessionServiceImpl$FullUserRecord;->rememberMediaButtonReceiverLocked(Lcom/android/server/media/MediaSessionRecord;)V
PLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl$4;->run()V
PLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->dispatchAdjustVolumeLocked(Ljava/lang/String;Ljava/lang/String;IIZIII)V
PLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->dispatchMediaKeyEvent(Ljava/lang/String;ZLandroid/view/KeyEvent;Z)V
PLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->dispatchMediaKeyEventLocked(Ljava/lang/String;IIZLandroid/view/KeyEvent;Z)V
PLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->dispatchVolumeKeyEvent(Ljava/lang/String;Ljava/lang/String;ZLandroid/view/KeyEvent;IZ)V
PLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->dispatchVolumeKeyEventLocked(Ljava/lang/String;Ljava/lang/String;IIZLandroid/view/KeyEvent;IZ)V
PLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->dispatchVolumeKeyEventToSessionAsSystemService(Ljava/lang/String;Ljava/lang/String;Landroid/media/session/MediaSession$Token;Landroid/view/KeyEvent;)V
PLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->removeSessionsListener(Landroid/media/session/IActiveSessionsListener;)V
PLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->setCallback(Landroid/media/session/ICallback;)V
PLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->setOnMediaKeyListener(Landroid/media/session/IOnMediaKeyListener;)V
PLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->setOnVolumeKeyLongPressListener(Landroid/media/session/IOnVolumeKeyLongPressListener;)V
PLcom/android/server/media/MediaSessionServiceImpl;->access$2100(Lcom/android/server/media/MediaSessionServiceImpl;Ljava/lang/String;I)V
PLcom/android/server/media/MediaSessionServiceImpl;->destroySession(Lcom/android/server/media/MediaSessionRecord;)V
PLcom/android/server/media/MediaSessionServiceImpl;->destroySessionLocked(Lcom/android/server/media/MediaSessionRecord;)V
PLcom/android/server/media/MediaSessionServiceImpl;->getFullUserRecordLocked(I)Lcom/android/server/media/MediaSessionServiceImpl$FullUserRecord;
PLcom/android/server/media/MediaSessionServiceImpl;->isEnabledNotificationListener(Landroid/content/ComponentName;II)Z
PLcom/android/server/media/MediaSessionServiceImpl;->isGlobalPriorityActiveLocked()Z
PLcom/android/server/media/MediaSessionServiceImpl;->lambda$onStart$0$MediaSessionServiceImpl(Landroid/media/AudioPlaybackConfiguration;Z)V
PLcom/android/server/media/MediaSessionServiceImpl;->lambda$onStart$0(Lcom/android/server/media/MediaSessionServiceImpl;Landroid/media/AudioPlaybackConfiguration;Z)V
PLcom/android/server/media/MediaSessionServiceImpl;->notifyRemoteVolumeChanged(ILcom/android/server/media/MediaSessionRecord;)V
PLcom/android/server/media/MediaSessionServiceImpl;->onMediaButtonReceiverChanged(Lcom/android/server/media/MediaSessionRecord;)V
PLcom/android/server/media/MediaSessionServiceImpl;->onSessionPlaybackTypeChanged(Lcom/android/server/media/MediaSessionRecord;)V
PLcom/android/server/media/MediaSessionServiceImpl;->onSessionPlaystateChanged(Lcom/android/server/media/MediaSessionRecord;II)V
PLcom/android/server/media/MediaSessionServiceImpl;->onStopUser(I)V
PLcom/android/server/media/MediaSessionServiceImpl;->sessionDied(Lcom/android/server/media/MediaSessionRecord;)V
PLcom/android/server/media/MediaSessionServiceImpl;->updateSession(Lcom/android/server/media/MediaSessionRecord;)V
PLcom/android/server/media/MediaSessionStack;->findMediaButtonSession(I)Lcom/android/server/media/MediaSessionRecord;
PLcom/android/server/media/MediaSessionStack;->getDefaultVolumeSession()Lcom/android/server/media/MediaSessionRecord;
PLcom/android/server/media/MediaSessionStack;->getMediaButtonSession()Lcom/android/server/media/MediaSessionRecord;
PLcom/android/server/media/MediaSessionStack;->getMediaSessionRecord(Landroid/media/session/MediaSession$Token;)Lcom/android/server/media/MediaSessionRecord;
PLcom/android/server/media/MediaSessionStack;->onPlaystateChanged(Lcom/android/server/media/MediaSessionRecord;II)V
PLcom/android/server/media/MediaSessionStack;->onSessionStateChange(Lcom/android/server/media/MediaSessionRecord;)V
PLcom/android/server/media/RemoteDisplayProviderProxy;->setSelectedDisplay(Ljava/lang/String;)V
PLcom/android/server/media/RemoteDisplayProviderProxy;->start()V
PLcom/android/server/media/RemoteDisplayProviderProxy;->unbind()V
PLcom/android/server/media/RemoteDisplayProviderWatcher$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/media/RemoteDisplayProviderWatcher;->verifyServiceTrusted(Landroid/content/pm/ServiceInfo;)Z
PLcom/android/server/midi/MidiService$1;->onPackageAdded(Ljava/lang/String;I)V
PLcom/android/server/midi/MidiService$1;->onPackageModified(Ljava/lang/String;)V
PLcom/android/server/midi/MidiService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/midi/MidiService;->addPackageDeviceServer(Landroid/content/pm/ServiceInfo;)V
PLcom/android/server/midi/MidiService;->addPackageDeviceServers(Ljava/lang/String;)V
PLcom/android/server/midi/MidiService;->onUnlockUser()V
PLcom/android/server/midi/MidiService;->removePackageDeviceServers(Ljava/lang/String;)V
PLcom/android/server/net/NetworkIdentitySet;->areAllMembersOnDefaultNetwork()Z
PLcom/android/server/net/NetworkIdentitySet;->compareTo(Lcom/android/server/net/NetworkIdentitySet;)I
PLcom/android/server/net/NetworkIdentitySet;->isAnyMemberMetered()Z
PLcom/android/server/net/NetworkIdentitySet;->isAnyMemberRoaming()Z
PLcom/android/server/net/NetworkIdentitySet;->writeToStream(Ljava/io/DataOutputStream;)V
PLcom/android/server/net/NetworkPolicyLogger;->appIdleWlChanged(IZ)V
PLcom/android/server/net/NetworkPolicyLogger;->deviceIdleModeEnabled(Z)V
PLcom/android/server/net/NetworkPolicyLogger;->meterednessChanged(IZ)V
PLcom/android/server/net/NetworkPolicyLogger;->networkBlocked(II)V
PLcom/android/server/net/NetworkPolicyLogger;->tempPowerSaveWlChanged(IZ)V
PLcom/android/server/net/NetworkPolicyManagerService$12;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/net/NetworkPolicyManagerService$13;->onCapabilitiesChanged(Landroid/net/Network;Landroid/net/NetworkCapabilities;)V
PLcom/android/server/net/NetworkPolicyManagerService$14;->limitReached(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/net/NetworkPolicyManagerService$15;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/net/NetworkPolicyManagerService$16;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/net/NetworkPolicyManagerService$1;->getServiceType()I
PLcom/android/server/net/NetworkPolicyManagerService$1;->onLowPowerModeChanged(Landroid/os/PowerSaveState;)V
PLcom/android/server/net/NetworkPolicyManagerService$2;->getServiceType()I
PLcom/android/server/net/NetworkPolicyManagerService$2;->onLowPowerModeChanged(Landroid/os/PowerSaveState;)V
PLcom/android/server/net/NetworkPolicyManagerService$3;->onSubscriptionsChanged()V
PLcom/android/server/net/NetworkPolicyManagerService$6;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/net/NetworkPolicyManagerService$NetworkPolicyManagerInternalImpl;->getSubscriptionOpportunisticQuota(Landroid/net/Network;I)J
PLcom/android/server/net/NetworkPolicyManagerService$NetworkPolicyManagerInternalImpl;->getSubscriptionPlan(Landroid/net/NetworkTemplate;)Landroid/telephony/SubscriptionPlan;
PLcom/android/server/net/NetworkPolicyManagerService$NetworkPolicyManagerInternalImpl;->isUidNetworkingBlocked(ILjava/lang/String;)Z
PLcom/android/server/net/NetworkPolicyManagerService$NetworkPolicyManagerInternalImpl;->isUidRestrictedOnMeteredNetworks(I)Z
PLcom/android/server/net/NetworkPolicyManagerService$NetworkPolicyManagerInternalImpl;->onTempPowerSaveWhitelistChange(IZ)V
PLcom/android/server/net/NetworkPolicyManagerService$NetworkPolicyManagerInternalImpl;->setAppIdleWhitelist(IZ)V
PLcom/android/server/net/NetworkPolicyManagerService;->collectIfaces(Landroid/util/ArraySet;Landroid/net/NetworkState;)V
PLcom/android/server/net/NetworkPolicyManagerService;->defeatNullable([Landroid/net/NetworkState;)[Landroid/net/NetworkState;
PLcom/android/server/net/NetworkPolicyManagerService;->dispatchMeteredIfacesChanged(Landroid/net/INetworkPolicyListener;[Ljava/lang/String;)V
PLcom/android/server/net/NetworkPolicyManagerService;->enforceSubscriptionPlanAccess(IILjava/lang/String;)V
PLcom/android/server/net/NetworkPolicyManagerService;->ensureActiveMobilePolicyAL()V
PLcom/android/server/net/NetworkPolicyManagerService;->ensureActiveMobilePolicyAL(ILjava/lang/String;)Z
PLcom/android/server/net/NetworkPolicyManagerService;->getBooleanDefeatingNullable(Landroid/os/PersistableBundle;Ljava/lang/String;Z)Z
PLcom/android/server/net/NetworkPolicyManagerService;->getCycleDayFromCarrierConfig(Landroid/os/PersistableBundle;I)I
PLcom/android/server/net/NetworkPolicyManagerService;->getLimitBytesFromCarrierConfig(Landroid/os/PersistableBundle;J)J
PLcom/android/server/net/NetworkPolicyManagerService;->getNetworkPolicies(Ljava/lang/String;)[Landroid/net/NetworkPolicy;
PLcom/android/server/net/NetworkPolicyManagerService;->getNetworkTotalBytes(Landroid/net/NetworkTemplate;JJ)J
PLcom/android/server/net/NetworkPolicyManagerService;->getPrimarySubscriptionPlanLocked(I)Landroid/telephony/SubscriptionPlan;
PLcom/android/server/net/NetworkPolicyManagerService;->getRestrictBackgroundByCaller()I
PLcom/android/server/net/NetworkPolicyManagerService;->getSubIdLocked(Landroid/net/Network;)I
PLcom/android/server/net/NetworkPolicyManagerService;->getSubscriptionPlans(ILjava/lang/String;)[Landroid/telephony/SubscriptionPlan;
PLcom/android/server/net/NetworkPolicyManagerService;->getTotalBytes(Landroid/net/NetworkTemplate;JJ)J
PLcom/android/server/net/NetworkPolicyManagerService;->getUidPolicy(I)I
PLcom/android/server/net/NetworkPolicyManagerService;->getWarningBytesFromCarrierConfig(Landroid/os/PersistableBundle;J)J
PLcom/android/server/net/NetworkPolicyManagerService;->handleNetworkPoliciesUpdateAL(Z)V
PLcom/android/server/net/NetworkPolicyManagerService;->isUidNetworkingBlockedInternal(IIZZLcom/android/server/net/NetworkPolicyLogger;)Z
PLcom/android/server/net/NetworkPolicyManagerService;->maybeUpdateMobilePolicyCycleAL(ILjava/lang/String;)Z
PLcom/android/server/net/NetworkPolicyManagerService;->normalizePoliciesNL([Landroid/net/NetworkPolicy;)V
PLcom/android/server/net/NetworkPolicyManagerService;->notifyUnderLimitNL(Landroid/net/NetworkTemplate;)V
PLcom/android/server/net/NetworkPolicyManagerService;->parseSubId(Landroid/net/NetworkState;)I
PLcom/android/server/net/NetworkPolicyManagerService;->removeInterfaceQuota(Ljava/lang/String;)V
PLcom/android/server/net/NetworkPolicyManagerService;->removeInterfaceQuotaAsync(Ljava/lang/String;)V
PLcom/android/server/net/NetworkPolicyManagerService;->setAppIdleWhitelist(IZ)V
PLcom/android/server/net/NetworkPolicyManagerService;->setDeviceIdleMode(Z)V
PLcom/android/server/net/NetworkPolicyManagerService;->setInterfaceQuota(Ljava/lang/String;J)V
PLcom/android/server/net/NetworkPolicyManagerService;->setInterfaceQuotaAsync(Ljava/lang/String;J)V
PLcom/android/server/net/NetworkPolicyManagerService;->setMeteredNetworkWhitelist(IZ)V
PLcom/android/server/net/NetworkPolicyManagerService;->setSubscriptionPlans(I[Landroid/telephony/SubscriptionPlan;Ljava/lang/String;)V
PLcom/android/server/net/NetworkPolicyManagerService;->unregisterListener(Landroid/net/INetworkPolicyListener;)V
PLcom/android/server/net/NetworkPolicyManagerService;->updateDefaultMobilePolicyAL(ILandroid/net/NetworkPolicy;)Z
PLcom/android/server/net/NetworkPolicyManagerService;->updateNetworkRulesNL()V
PLcom/android/server/net/NetworkPolicyManagerService;->updateNetworksInternal()V
PLcom/android/server/net/NetworkPolicyManagerService;->updateRestrictBackgroundByLowPowerModeUL(Landroid/os/PowerSaveState;)V
PLcom/android/server/net/NetworkPolicyManagerService;->updateRuleForDeviceIdleUL(I)V
PLcom/android/server/net/NetworkPolicyManagerService;->updateRuleForRestrictPowerUL(I)V
PLcom/android/server/net/NetworkPolicyManagerService;->updateRulesForTempWhitelistChangeUL(I)V
PLcom/android/server/net/NetworkPolicyManagerService;->updateSubscriptions()V
PLcom/android/server/net/NetworkPolicyManagerService;->upgradeWifiMeteredOverrideAL()V
PLcom/android/server/net/NetworkStatsAccess;->checkAccessLevel(Landroid/content/Context;ILjava/lang/String;)I
PLcom/android/server/net/NetworkStatsAccess;->hasAppOpsPermission(Landroid/content/Context;ILjava/lang/String;)Z
PLcom/android/server/net/NetworkStatsAccess;->isAccessibleToUser(III)Z
PLcom/android/server/net/NetworkStatsCollection$Key;->compareTo(Lcom/android/server/net/NetworkStatsCollection$Key;)I
PLcom/android/server/net/NetworkStatsCollection$Key;->compareTo(Ljava/lang/Object;)I
PLcom/android/server/net/NetworkStatsCollection;->dump(Lcom/android/internal/util/IndentingPrintWriter;)V
PLcom/android/server/net/NetworkStatsCollection;->findOrCreateHistory(Lcom/android/server/net/NetworkIdentitySet;III)Landroid/net/NetworkStatsHistory;
PLcom/android/server/net/NetworkStatsCollection;->getHistory(Landroid/net/NetworkTemplate;Landroid/telephony/SubscriptionPlan;IIIIJJII)Landroid/net/NetworkStatsHistory;
PLcom/android/server/net/NetworkStatsCollection;->isDirty()Z
PLcom/android/server/net/NetworkStatsCollection;->recordData(Lcom/android/server/net/NetworkIdentitySet;IIIJJLandroid/net/NetworkStats$Entry;)V
PLcom/android/server/net/NetworkStatsCollection;->reset()V
PLcom/android/server/net/NetworkStatsCollection;->templateMatches(Landroid/net/NetworkTemplate;Lcom/android/server/net/NetworkIdentitySet;)Z
PLcom/android/server/net/NetworkStatsCollection;->write(Ljava/io/DataOutputStream;)V
PLcom/android/server/net/NetworkStatsObservers$NetworkUsageRequestInfo;->checkStats()Z
PLcom/android/server/net/NetworkStatsObservers$NetworkUsageRequestInfo;->recordSample(Lcom/android/server/net/NetworkStatsObservers$StatsContext;)V
PLcom/android/server/net/NetworkStatsObservers$RequestInfo;-><init>(Lcom/android/server/net/NetworkStatsObservers;Landroid/net/DataUsageRequest;Landroid/os/Messenger;Landroid/os/IBinder;II)V
PLcom/android/server/net/NetworkStatsObservers$RequestInfo;->callCallback(I)V
PLcom/android/server/net/NetworkStatsObservers;->buildRequest(Landroid/net/DataUsageRequest;)Landroid/net/DataUsageRequest;
PLcom/android/server/net/NetworkStatsObservers;->buildRequestInfo(Landroid/net/DataUsageRequest;Landroid/os/Messenger;Landroid/os/IBinder;II)Lcom/android/server/net/NetworkStatsObservers$RequestInfo;
PLcom/android/server/net/NetworkStatsObservers;->handleUnregister(Landroid/net/DataUsageRequest;I)V
PLcom/android/server/net/NetworkStatsObservers;->register(Landroid/net/DataUsageRequest;Landroid/os/Messenger;Landroid/os/IBinder;II)Landroid/net/DataUsageRequest;
PLcom/android/server/net/NetworkStatsObservers;->unregister(Landroid/net/DataUsageRequest;I)V
PLcom/android/server/net/NetworkStatsRecorder$CombiningRewriter;->read(Ljava/io/InputStream;)V
PLcom/android/server/net/NetworkStatsRecorder$CombiningRewriter;->reset()V
PLcom/android/server/net/NetworkStatsRecorder$CombiningRewriter;->shouldWrite()Z
PLcom/android/server/net/NetworkStatsRecorder$CombiningRewriter;->write(Ljava/io/OutputStream;)V
PLcom/android/server/net/NetworkStatsRecorder;-><init>()V
PLcom/android/server/net/NetworkStatsRecorder;->dumpLocked(Lcom/android/internal/util/IndentingPrintWriter;Z)V
PLcom/android/server/net/NetworkStatsRecorder;->forcePersistLocked(J)V
PLcom/android/server/net/NetworkStatsRecorder;->getSinceBoot()Lcom/android/server/net/NetworkStatsCollection;
PLcom/android/server/net/NetworkStatsService$1;->close()V
PLcom/android/server/net/NetworkStatsService$1;->getDeviceSummaryForNetwork(Landroid/net/NetworkTemplate;JJ)Landroid/net/NetworkStats;
PLcom/android/server/net/NetworkStatsService$1;->getHistoryForNetwork(Landroid/net/NetworkTemplate;I)Landroid/net/NetworkStatsHistory;
PLcom/android/server/net/NetworkStatsService$1;->getHistoryForUid(Landroid/net/NetworkTemplate;IIII)Landroid/net/NetworkStatsHistory;
PLcom/android/server/net/NetworkStatsService$1;->getHistoryIntervalForUid(Landroid/net/NetworkTemplate;IIIIJJ)Landroid/net/NetworkStatsHistory;
PLcom/android/server/net/NetworkStatsService$1;->getSummaryForAllUid(Landroid/net/NetworkTemplate;JJZ)Landroid/net/NetworkStats;
PLcom/android/server/net/NetworkStatsService$1;->getUidComplete()Lcom/android/server/net/NetworkStatsCollection;
PLcom/android/server/net/NetworkStatsService$1;->getUidTagComplete()Lcom/android/server/net/NetworkStatsCollection;
PLcom/android/server/net/NetworkStatsService$7;->limitReached(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/net/NetworkStatsService$DefaultNetworkStatsSettings;->getAugmentEnabled()Z
PLcom/android/server/net/NetworkStatsService$HandlerCallback;->handleMessage(Landroid/os/Message;)Z
PLcom/android/server/net/NetworkStatsService$NetworkStatsManagerInternalImpl;->advisePersistThreshold(J)V
PLcom/android/server/net/NetworkStatsService$NetworkStatsManagerInternalImpl;->getNetworkTotalBytes(Landroid/net/NetworkTemplate;JJ)J
PLcom/android/server/net/NetworkStatsService;->advisePersistThreshold(J)V
PLcom/android/server/net/NetworkStatsService;->assertBandwidthControlEnabled()V
PLcom/android/server/net/NetworkStatsService;->assertSystemReady()V
PLcom/android/server/net/NetworkStatsService;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/net/NetworkStatsService;->forceUpdateIfaces([Landroid/net/Network;)V
PLcom/android/server/net/NetworkStatsService;->getDetailedUidStats([Ljava/lang/String;)Landroid/net/NetworkStats;
PLcom/android/server/net/NetworkStatsService;->getIfaceStats(Ljava/lang/String;I)J
PLcom/android/server/net/NetworkStatsService;->getMobileIfaces()[Ljava/lang/String;
PLcom/android/server/net/NetworkStatsService;->getTetherStats(Ljava/lang/String;I)J
PLcom/android/server/net/NetworkStatsService;->getTotalStats(I)J
PLcom/android/server/net/NetworkStatsService;->getUidStats(II)J
PLcom/android/server/net/NetworkStatsService;->incrementOperationCount(III)V
PLcom/android/server/net/NetworkStatsService;->internalGetHistoryForNetwork(Landroid/net/NetworkTemplate;IIII)Landroid/net/NetworkStatsHistory;
PLcom/android/server/net/NetworkStatsService;->internalGetSummaryForNetwork(Landroid/net/NetworkTemplate;IJJII)Landroid/net/NetworkStats;
PLcom/android/server/net/NetworkStatsService;->isRateLimitedForPoll(I)Z
PLcom/android/server/net/NetworkStatsService;->openSession()Landroid/net/INetworkStatsSession;
PLcom/android/server/net/NetworkStatsService;->openSessionForUsageStats(ILjava/lang/String;)Landroid/net/INetworkStatsSession;
PLcom/android/server/net/NetworkStatsService;->openSessionInternal(ILjava/lang/String;)Landroid/net/INetworkStatsSession;
PLcom/android/server/net/NetworkStatsService;->registerUsageCallback(Ljava/lang/String;Landroid/net/DataUsageRequest;Landroid/os/Messenger;Landroid/os/IBinder;)Landroid/net/DataUsageRequest;
PLcom/android/server/net/NetworkStatsService;->resolveSubscriptionPlan(Landroid/net/NetworkTemplate;I)Landroid/telephony/SubscriptionPlan;
PLcom/android/server/net/NetworkStatsService;->unregisterUsageRequest(Landroid/net/DataUsageRequest;)V
PLcom/android/server/net/NetworkStatsService;->updateIfaces([Landroid/net/Network;)V
PLcom/android/server/net/NetworkStatsService;->updateIfacesLocked([Landroid/net/Network;)V
PLcom/android/server/net/watchlist/HarmfulDigests;->contains([B)Z
PLcom/android/server/net/watchlist/NetworkWatchlistService$1;->onConnectEvent(Ljava/lang/String;IJI)V
PLcom/android/server/net/watchlist/NetworkWatchlistService$1;->onDnsEvent(IIILjava/lang/String;[Ljava/lang/String;IJI)V
PLcom/android/server/net/watchlist/NetworkWatchlistService;->reportWatchlistIfNecessary()V
PLcom/android/server/net/watchlist/PrivacyUtils;->createDpEncodedReportMap(Z[BLjava/util/List;Lcom/android/server/net/watchlist/WatchlistReportDbHelper$AggregatedResult;)Ljava/util/Map;
PLcom/android/server/net/watchlist/PrivacyUtils;->createLongitudinalReportingConfig(Ljava/lang/String;)Landroid/privacy/internal/longitudinalreporting/LongitudinalReportingConfig;
PLcom/android/server/net/watchlist/ReportEncoder;->serializeReport(Lcom/android/server/net/watchlist/WatchlistConfig;Ljava/util/Map;)[B
PLcom/android/server/net/watchlist/ReportWatchlistJobService;-><init>()V
PLcom/android/server/net/watchlist/ReportWatchlistJobService;->onStartJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/net/watchlist/WatchlistConfig;->containsDomain(Ljava/lang/String;)Z
PLcom/android/server/net/watchlist/WatchlistConfig;->containsIp(Ljava/lang/String;)Z
PLcom/android/server/net/watchlist/WatchlistConfig;->getCrc32(Ljava/lang/String;)[B
PLcom/android/server/net/watchlist/WatchlistConfig;->getWatchlistConfigHash()[B
PLcom/android/server/net/watchlist/WatchlistConfig;->isConfigSecure()Z
PLcom/android/server/net/watchlist/WatchlistLoggingHandler;->asyncNetworkEvent(Ljava/lang/String;[Ljava/lang/String;I)V
PLcom/android/server/net/watchlist/WatchlistLoggingHandler;->getAllSubDomains(Ljava/lang/String;)[Ljava/lang/String;
PLcom/android/server/net/watchlist/WatchlistLoggingHandler;->handleNetworkEvent(Ljava/lang/String;[Ljava/lang/String;IJ)V
PLcom/android/server/net/watchlist/WatchlistSettings;->getPrivacySecretKey()[B
PLcom/android/server/notification/-$$Lambda$NotificationManagerService$11$zVdn9N0ybkMxz8xM8Qa1AXowlic;->run()V
PLcom/android/server/notification/-$$Lambda$NotificationManagerService$14$hWnH6mjUAxwVmpU3QRoPHh5_FyI;->apply(I)Z
PLcom/android/server/notification/-$$Lambda$NotificationManagerService$9w6AHlBdw5iqUuefzw5prTMG5fg;-><init>(Lcom/android/server/notification/NotificationManagerService;Ljava/lang/CharSequence;)V
PLcom/android/server/notification/-$$Lambda$NotificationManagerService$9w6AHlBdw5iqUuefzw5prTMG5fg;->runOrThrow()V
PLcom/android/server/notification/-$$Lambda$NotificationManagerService$NotificationAssistants$03ForXNcU0L8j72c6kqcuawuSgg;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/notification/-$$Lambda$NotificationManagerService$NotificationAssistants$8526LUpwQ8eBesZREQSLe_J-CfQ;->run()V
PLcom/android/server/notification/-$$Lambda$NotificationManagerService$NotificationAssistants$FeL2M_vNfZUM3ReF-ma0lRPyBKs;->run()V
PLcom/android/server/notification/-$$Lambda$NotificationManagerService$NotificationAssistants$cPE_ZmWqkchox5ocNJyIa3vlbAU;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/notification/-$$Lambda$NotificationManagerService$NotificationAssistants$yo8elBmcIwdMbMVaigHxvG4j5zc;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/notification/-$$Lambda$NotificationManagerService$NotificationAssistants$yzxmk-scq72eWJGdHVo6qLs876g;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/notification/-$$Lambda$NotificationManagerService$NotificationListeners$3bretMyG2YyNFKU5plLQgmxuGr0;->run()V
PLcom/android/server/notification/-$$Lambda$NotificationManagerService$NotificationListeners$Srt8NNqA1xJUAp_7nDU6CBZJm_0;->run()V
PLcom/android/server/notification/-$$Lambda$NotificationManagerService$j4BPSChjnlmaf86eJ3K-gjNHWGc;->run()V
PLcom/android/server/notification/-$$Lambda$NotificationRecord$XgkrZGcjOHPHem34oE9qLGy3siA;->accept(Ljava/lang/Object;)V
PLcom/android/server/notification/AlertRateLimiter;->shouldRateLimitAlert(J)Z
PLcom/android/server/notification/BadgeExtractor;->process(Lcom/android/server/notification/NotificationRecord;)Lcom/android/server/notification/RankingReconsideration;
PLcom/android/server/notification/BubbleExtractor;->process(Lcom/android/server/notification/NotificationRecord;)Lcom/android/server/notification/RankingReconsideration;
PLcom/android/server/notification/CalendarTracker$1;->onChange(ZLandroid/net/Uri;)V
PLcom/android/server/notification/CalendarTracker;->meetsAttendee(Landroid/service/notification/ZenModeConfig$EventInfo;ILjava/lang/String;)Z
PLcom/android/server/notification/ConditionProviders;->asInterface(Landroid/os/IBinder;)Landroid/os/IInterface;
PLcom/android/server/notification/ConditionProviders;->isValidEntry(Ljava/lang/String;I)Z
PLcom/android/server/notification/ConditionProviders;->onPackagesChanged(Z[Ljava/lang/String;[I)V
PLcom/android/server/notification/ConditionProviders;->onServiceRemovedLocked(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;)V
PLcom/android/server/notification/CriticalNotificationExtractor;->process(Lcom/android/server/notification/NotificationRecord;)Lcom/android/server/notification/RankingReconsideration;
PLcom/android/server/notification/EventConditionProvider$2;->onChanged()V
PLcom/android/server/notification/GlobalSortKeyComparator;->compare(Lcom/android/server/notification/NotificationRecord;Lcom/android/server/notification/NotificationRecord;)I
PLcom/android/server/notification/GlobalSortKeyComparator;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
PLcom/android/server/notification/GroupHelper;->adjustNotificationBundling(Ljava/util/List;Z)V
PLcom/android/server/notification/GroupHelper;->maybeUngroup(Landroid/service/notification/StatusBarNotification;ZI)V
PLcom/android/server/notification/GroupHelper;->onNotificationPosted(Landroid/service/notification/StatusBarNotification;Z)V
PLcom/android/server/notification/GroupHelper;->onNotificationRemoved(Landroid/service/notification/StatusBarNotification;)V
PLcom/android/server/notification/ImportanceExtractor;->process(Lcom/android/server/notification/NotificationRecord;)Lcom/android/server/notification/RankingReconsideration;
PLcom/android/server/notification/ManagedServices$1$1;->run()V
PLcom/android/server/notification/ManagedServices$1;->onBindingDied(Landroid/content/ComponentName;)V
PLcom/android/server/notification/ManagedServices$1;->onServiceDisconnected(Landroid/content/ComponentName;)V
PLcom/android/server/notification/ManagedServices$ManagedServiceInfo;->binderDied()V
PLcom/android/server/notification/ManagedServices$ManagedServiceInfo;->getOwner()Lcom/android/server/notification/ManagedServices;
PLcom/android/server/notification/ManagedServices$ManagedServiceInfo;->hashCode()I
PLcom/android/server/notification/ManagedServices$ManagedServiceInfo;->isGuest(Lcom/android/server/notification/ManagedServices;)Z
PLcom/android/server/notification/ManagedServices$ManagedServiceInfo;->isPermittedForProfile(I)Z
PLcom/android/server/notification/ManagedServices$ManagedServiceInfo;->isSameUser(I)Z
PLcom/android/server/notification/ManagedServices$ManagedServiceInfo;->supportsProfiles()Z
PLcom/android/server/notification/ManagedServices$UserProfiles;->isCurrentProfile(I)Z
PLcom/android/server/notification/ManagedServices;->isComponentEnabledForCurrentProfiles(Landroid/content/ComponentName;)Z
PLcom/android/server/notification/ManagedServices;->isComponentEnabledForPackage(Ljava/lang/String;)Z
PLcom/android/server/notification/ManagedServices;->isPackageAllowed(Ljava/lang/String;I)Z
PLcom/android/server/notification/ManagedServices;->isSameUser(Landroid/os/IInterface;I)Z
PLcom/android/server/notification/ManagedServices;->isServiceTokenValidLocked(Landroid/os/IInterface;)Z
PLcom/android/server/notification/ManagedServices;->isValidEntry(Ljava/lang/String;I)Z
PLcom/android/server/notification/ManagedServices;->onPackagesChanged(Z[Ljava/lang/String;[I)V
PLcom/android/server/notification/ManagedServices;->onUserUnlocked(I)V
PLcom/android/server/notification/ManagedServices;->removeServiceImpl(Landroid/os/IInterface;I)Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;
PLcom/android/server/notification/ManagedServices;->removeUninstalledItemsFromApprovedLists(ILjava/lang/String;)Z
PLcom/android/server/notification/ManagedServices;->setComponentState(Landroid/content/ComponentName;Z)V
PLcom/android/server/notification/ManagedServices;->trimApprovedListsAccordingToInstalledServices(I)V
PLcom/android/server/notification/ManagedServices;->unbindService(Landroid/content/ServiceConnection;Landroid/content/ComponentName;I)V
PLcom/android/server/notification/ManagedServices;->unregisterService(Landroid/content/ComponentName;I)V
PLcom/android/server/notification/ManagedServices;->unregisterService(Landroid/os/IInterface;I)V
PLcom/android/server/notification/ManagedServices;->unregisterServiceLocked(Landroid/content/ComponentName;I)V
PLcom/android/server/notification/NotificationAdjustmentExtractor;->process(Lcom/android/server/notification/NotificationRecord;)Lcom/android/server/notification/RankingReconsideration;
PLcom/android/server/notification/NotificationChannelExtractor;->process(Lcom/android/server/notification/NotificationRecord;)Lcom/android/server/notification/RankingReconsideration;
PLcom/android/server/notification/NotificationComparator;->compare(Lcom/android/server/notification/NotificationRecord;Lcom/android/server/notification/NotificationRecord;)I
PLcom/android/server/notification/NotificationComparator;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
PLcom/android/server/notification/NotificationComparator;->isDefaultPhoneApp(Ljava/lang/String;)Z
PLcom/android/server/notification/NotificationComparator;->isImportantMessaging(Lcom/android/server/notification/NotificationRecord;)Z
PLcom/android/server/notification/NotificationComparator;->isImportantPeople(Lcom/android/server/notification/NotificationRecord;)Z
PLcom/android/server/notification/NotificationIntrusivenessExtractor$1;->applyChangesLocked(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationIntrusivenessExtractor$1;->work()V
PLcom/android/server/notification/NotificationIntrusivenessExtractor;->process(Lcom/android/server/notification/NotificationRecord;)Lcom/android/server/notification/RankingReconsideration;
PLcom/android/server/notification/NotificationManagerService$10;->applyAdjustmentFromAssistant(Landroid/service/notification/INotificationListener;Landroid/service/notification/Adjustment;)V
PLcom/android/server/notification/NotificationManagerService$10;->applyAdjustmentsFromAssistant(Landroid/service/notification/INotificationListener;Ljava/util/List;)V
PLcom/android/server/notification/NotificationManagerService$10;->applyEnqueuedAdjustmentFromAssistant(Landroid/service/notification/INotificationListener;Landroid/service/notification/Adjustment;)V
PLcom/android/server/notification/NotificationManagerService$10;->areBubblesAllowedForPackage(Ljava/lang/String;I)Z
PLcom/android/server/notification/NotificationManagerService$10;->areNotificationsEnabled(Ljava/lang/String;)Z
PLcom/android/server/notification/NotificationManagerService$10;->areNotificationsEnabledForPackage(Ljava/lang/String;I)Z
PLcom/android/server/notification/NotificationManagerService$10;->canShowBadge(Ljava/lang/String;I)Z
PLcom/android/server/notification/NotificationManagerService$10;->cancelAllNotifications(Ljava/lang/String;I)V
PLcom/android/server/notification/NotificationManagerService$10;->cancelNotificationsFromListener(Landroid/service/notification/INotificationListener;[Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService$10;->cancelToast(Ljava/lang/String;Landroid/app/ITransientNotification;)V
PLcom/android/server/notification/NotificationManagerService$10;->checkPolicyAccess(Ljava/lang/String;)Z
PLcom/android/server/notification/NotificationManagerService$10;->createNotificationChannelGroups(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;)V
PLcom/android/server/notification/NotificationManagerService$10;->deleteNotificationChannelGroup(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService$10;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService$10;->enforcePolicyAccess(ILjava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService$10;->enforcePolicyAccess(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService$10;->enforceSystemOrSystemUIOrSamePackage(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService$10;->enqueueNotificationWithTag(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILandroid/app/Notification;I)V
PLcom/android/server/notification/NotificationManagerService$10;->enqueueToast(Ljava/lang/String;Landroid/app/ITransientNotification;II)V
PLcom/android/server/notification/NotificationManagerService$10;->finishToken(Ljava/lang/String;Landroid/app/ITransientNotification;)V
PLcom/android/server/notification/NotificationManagerService$10;->getAppsBypassingDndCount(I)I
PLcom/android/server/notification/NotificationManagerService$10;->getAutomaticZenRule(Ljava/lang/String;)Landroid/app/AutomaticZenRule;
PLcom/android/server/notification/NotificationManagerService$10;->getBackupPayload(I)[B
PLcom/android/server/notification/NotificationManagerService$10;->getBlockedChannelCount(Ljava/lang/String;I)I
PLcom/android/server/notification/NotificationManagerService$10;->getNotificationChannelGroupForPackage(Ljava/lang/String;Ljava/lang/String;I)Landroid/app/NotificationChannelGroup;
PLcom/android/server/notification/NotificationManagerService$10;->getNotificationChannelGroups(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/notification/NotificationManagerService$10;->getNotificationChannels(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/notification/NotificationManagerService$10;->getNotificationPolicy(Ljava/lang/String;)Landroid/app/NotificationManager$Policy;
PLcom/android/server/notification/NotificationManagerService$10;->getNumNotificationChannelsForPackage(Ljava/lang/String;IZ)I
PLcom/android/server/notification/NotificationManagerService$10;->getPackageImportance(Ljava/lang/String;)I
PLcom/android/server/notification/NotificationManagerService$10;->getPrivateNotificationsAllowed()Z
PLcom/android/server/notification/NotificationManagerService$10;->getZenRules()Ljava/util/List;
PLcom/android/server/notification/NotificationManagerService$10;->isNotificationListenerAccessGranted(Landroid/content/ComponentName;)Z
PLcom/android/server/notification/NotificationManagerService$10;->isNotificationListenerAccessGrantedForUser(Landroid/content/ComponentName;I)Z
PLcom/android/server/notification/NotificationManagerService$10;->isNotificationPolicyAccessGranted(Ljava/lang/String;)Z
PLcom/android/server/notification/NotificationManagerService$10;->matchesCallFilter(Landroid/os/Bundle;)Z
PLcom/android/server/notification/NotificationManagerService$10;->removeAutomaticZenRules(Ljava/lang/String;)Z
PLcom/android/server/notification/NotificationManagerService$10;->requestBindListener(Landroid/content/ComponentName;)V
PLcom/android/server/notification/NotificationManagerService$10;->requestBindProvider(Landroid/content/ComponentName;)V
PLcom/android/server/notification/NotificationManagerService$10;->requestHintsFromListener(Landroid/service/notification/INotificationListener;I)V
PLcom/android/server/notification/NotificationManagerService$10;->requestUnbindListener(Landroid/service/notification/INotificationListener;)V
PLcom/android/server/notification/NotificationManagerService$10;->requestUnbindProvider(Landroid/service/notification/IConditionProvider;)V
PLcom/android/server/notification/NotificationManagerService$10;->sanitizeSbn(Ljava/lang/String;ILandroid/service/notification/StatusBarNotification;)Landroid/service/notification/StatusBarNotification;
PLcom/android/server/notification/NotificationManagerService$10;->setInterruptionFilter(Ljava/lang/String;I)V
PLcom/android/server/notification/NotificationManagerService$10;->setNotificationPolicy(Ljava/lang/String;Landroid/app/NotificationManager$Policy;)V
PLcom/android/server/notification/NotificationManagerService$10;->setNotificationsShownFromListener(Landroid/service/notification/INotificationListener;[Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService$10;->setPrivateNotificationsAllowed(Z)V
PLcom/android/server/notification/NotificationManagerService$10;->setZenMode(ILandroid/net/Uri;Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService$10;->updateAutomaticZenRule(Ljava/lang/String;Landroid/app/AutomaticZenRule;)Z
PLcom/android/server/notification/NotificationManagerService$10;->updateNotificationChannelForPackage(Ljava/lang/String;ILandroid/app/NotificationChannel;)V
PLcom/android/server/notification/NotificationManagerService$11;->enqueueNotification(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;ILandroid/app/Notification;I)V
PLcom/android/server/notification/NotificationManagerService$11;->getNotificationChannel(Ljava/lang/String;ILjava/lang/String;)Landroid/app/NotificationChannel;
PLcom/android/server/notification/NotificationManagerService$11;->lambda$removeForegroundServiceFlagFromNotification$0$NotificationManagerService$11(Ljava/lang/String;II)V
PLcom/android/server/notification/NotificationManagerService$11;->lambda$removeForegroundServiceFlagFromNotification$0(Lcom/android/server/notification/NotificationManagerService$11;Ljava/lang/String;II)V
PLcom/android/server/notification/NotificationManagerService$11;->removeForegroundServiceFlagFromNotification(Ljava/lang/String;II)V
PLcom/android/server/notification/NotificationManagerService$13;->run()V
PLcom/android/server/notification/NotificationManagerService$1;->clearEffects()V
PLcom/android/server/notification/NotificationManagerService$1;->onNotificationActionClick(IILjava/lang/String;ILandroid/app/Notification$Action;Lcom/android/internal/statusbar/NotificationVisibility;Z)V
PLcom/android/server/notification/NotificationManagerService$1;->onNotificationClear(IILjava/lang/String;Ljava/lang/String;IILjava/lang/String;IILcom/android/internal/statusbar/NotificationVisibility;)V
PLcom/android/server/notification/NotificationManagerService$1;->onNotificationClick(IILjava/lang/String;Lcom/android/internal/statusbar/NotificationVisibility;)V
PLcom/android/server/notification/NotificationManagerService$1;->onNotificationDirectReplied(Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService$1;->onNotificationExpansionChanged(Ljava/lang/String;ZZI)V
PLcom/android/server/notification/NotificationManagerService$1;->onNotificationSmartSuggestionsAdded(Ljava/lang/String;IIZZ)V
PLcom/android/server/notification/NotificationManagerService$1;->onNotificationVisibilityChanged([Lcom/android/internal/statusbar/NotificationVisibility;[Lcom/android/internal/statusbar/NotificationVisibility;)V
PLcom/android/server/notification/NotificationManagerService$1;->onPanelHidden()V
PLcom/android/server/notification/NotificationManagerService$1;->onPanelRevealed(ZI)V
PLcom/android/server/notification/NotificationManagerService$4;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/notification/NotificationManagerService$5;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/notification/NotificationManagerService$9;->addAutoGroup(Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService$9;->addAutoGroupSummary(ILjava/lang/String;Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService$9;->removeAutoGroup(Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService$9;->removeAutoGroupSummary(ILjava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService$Archive;->record(Landroid/service/notification/StatusBarNotification;)V
PLcom/android/server/notification/NotificationManagerService$DumpFilter;->parseFromArguments([Ljava/lang/String;)Lcom/android/server/notification/NotificationManagerService$DumpFilter;
PLcom/android/server/notification/NotificationManagerService$EnqueueNotificationRunnable;->run()V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->isEnabled()Z
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->lambda$notifyAssistantActionClicked$5$NotificationManagerService$NotificationAssistants(Ljava/lang/String;Landroid/app/Notification$Action;ZLandroid/service/notification/INotificationListener;Lcom/android/server/notification/NotificationManagerService$StatusBarNotificationHolder;)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->lambda$notifyAssistantActionClicked$5(Lcom/android/server/notification/NotificationManagerService$NotificationAssistants;Ljava/lang/String;Landroid/app/Notification$Action;ZLandroid/service/notification/INotificationListener;Lcom/android/server/notification/NotificationManagerService$StatusBarNotificationHolder;)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->lambda$notifyAssistantExpansionChangedLocked$2$NotificationManagerService$NotificationAssistants(Ljava/lang/String;ZZLandroid/service/notification/INotificationListener;Lcom/android/server/notification/NotificationManagerService$StatusBarNotificationHolder;)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->lambda$notifyAssistantExpansionChangedLocked$2(Lcom/android/server/notification/NotificationManagerService$NotificationAssistants;Ljava/lang/String;ZZLandroid/service/notification/INotificationListener;Lcom/android/server/notification/NotificationManagerService$StatusBarNotificationHolder;)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->lambda$notifyAssistantNotificationDirectReplyLocked$3(Lcom/android/server/notification/NotificationManagerService$NotificationAssistants;Ljava/lang/String;Landroid/service/notification/INotificationListener;Lcom/android/server/notification/NotificationManagerService$StatusBarNotificationHolder;)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->lambda$onNotificationEnqueuedLocked$1$NotificationManagerService$NotificationAssistants(Lcom/android/server/notification/NotificationRecord;Landroid/service/notification/INotificationListener;Lcom/android/server/notification/NotificationManagerService$StatusBarNotificationHolder;)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->lambda$onNotificationEnqueuedLocked$1(Lcom/android/server/notification/NotificationManagerService$NotificationAssistants;Lcom/android/server/notification/NotificationRecord;Landroid/service/notification/INotificationListener;Lcom/android/server/notification/NotificationManagerService$StatusBarNotificationHolder;)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->lambda$onNotificationsSeenLocked$0$NotificationManagerService$NotificationAssistants(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;Ljava/util/ArrayList;)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->notifyAssistantActionClicked(Landroid/service/notification/StatusBarNotification;ILandroid/app/Notification$Action;Z)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->notifyAssistantExpansionChangedLocked(Landroid/service/notification/StatusBarNotification;ZZ)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->notifyAssistantLocked(Landroid/service/notification/StatusBarNotification;ZLjava/util/function/BiConsumer;)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->notifyAssistantNotificationDirectReplyLocked(Landroid/service/notification/StatusBarNotification;)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->notifySeen(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;Ljava/util/ArrayList;)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->onNotificationsSeenLocked(Ljava/util/ArrayList;)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->onServiceRemovedLocked(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;)V
PLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->onUserUnlocked(I)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners$2;->run()V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners$3;->run()V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners$4;->run()V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners$5;->run()V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners$6;->run()V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->asInterface(Landroid/os/IBinder;)Landroid/os/IInterface;
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->getOnNotificationPostedTrim(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;)I
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->lambda$notifyNotificationChannelGroupChanged$3$NotificationManagerService$NotificationListeners(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannelGroup;I)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->lambda$notifyRemovedLocked$1$NotificationManagerService$NotificationListeners(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyInterruptionFilterChanged(I)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyInterruptionFilterChanged(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;I)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyListenerHintsChanged(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;I)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyListenerHintsChangedLocked(I)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyNotificationChannelChanged(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannel;I)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyNotificationChannelGroupChanged(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannelGroup;I)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyNotificationChannelGroupChanged(Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannelGroup;I)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyPosted(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;Landroid/service/notification/StatusBarNotification;Landroid/service/notification/NotificationRankingUpdate;)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyPostedLocked(Lcom/android/server/notification/NotificationRecord;Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyPostedLocked(Lcom/android/server/notification/NotificationRecord;Lcom/android/server/notification/NotificationRecord;Z)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyRankingUpdate(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;Landroid/service/notification/NotificationRankingUpdate;)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyRankingUpdateLocked(Ljava/util/List;)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyRemoved(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;Landroid/service/notification/StatusBarNotification;Landroid/service/notification/NotificationRankingUpdate;Landroid/service/notification/NotificationStats;I)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyRemovedLocked(Lcom/android/server/notification/NotificationRecord;ILandroid/service/notification/NotificationStats;)V
PLcom/android/server/notification/NotificationManagerService$NotificationListeners;->onServiceRemovedLocked(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;)V
PLcom/android/server/notification/NotificationManagerService$PostNotificationRunnable$1;->run()V
PLcom/android/server/notification/NotificationManagerService$PostNotificationRunnable;->run()V
PLcom/android/server/notification/NotificationManagerService$RankingHandlerWorker;->requestReconsideration(Lcom/android/server/notification/RankingReconsideration;)V
PLcom/android/server/notification/NotificationManagerService$StatusBarNotificationHolder;->get()Landroid/service/notification/StatusBarNotification;
PLcom/android/server/notification/NotificationManagerService$TrimCache;->ForListener(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;)Landroid/service/notification/StatusBarNotification;
PLcom/android/server/notification/NotificationManagerService$WorkerHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/notification/NotificationManagerService$WorkerHandler;->scheduleOnPackageChanged(ZI[Ljava/lang/String;[I)V
PLcom/android/server/notification/NotificationManagerService$WorkerHandler;->scheduleSendRankingUpdate()V
PLcom/android/server/notification/NotificationManagerService;->access$1300(Lcom/android/server/notification/NotificationManagerService;)Landroid/content/pm/IPackageManager;
PLcom/android/server/notification/NotificationManagerService;->access$1400()I
PLcom/android/server/notification/NotificationManagerService;->access$1500()I
PLcom/android/server/notification/NotificationManagerService;->access$1600(Lcom/android/server/notification/NotificationManagerService;)Lcom/android/server/notification/NotificationManagerService$WorkerHandler;
PLcom/android/server/notification/NotificationManagerService;->access$200(Lcom/android/server/notification/NotificationManagerService;)V
PLcom/android/server/notification/NotificationManagerService;->addAutoGroupAdjustment(Lcom/android/server/notification/NotificationRecord;Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService;->addAutogroupKeyLocked(Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService;->buzzBeepBlinkLocked(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationManagerService;->calculateHints()I
PLcom/android/server/notification/NotificationManagerService;->calculateSuppressedVisualEffects(Landroid/app/NotificationManager$Policy;Landroid/app/NotificationManager$Policy;I)I
PLcom/android/server/notification/NotificationManagerService;->canShowLightsLocked(Lcom/android/server/notification/NotificationRecord;Z)Z
PLcom/android/server/notification/NotificationManagerService;->cancelGroupChildrenByListLocked(Ljava/util/ArrayList;Lcom/android/server/notification/NotificationRecord;IILjava/lang/String;ZZLcom/android/server/notification/NotificationManagerService$FlagChecker;)V
PLcom/android/server/notification/NotificationManagerService;->cancelGroupChildrenLocked(Lcom/android/server/notification/NotificationRecord;IILjava/lang/String;ZLcom/android/server/notification/NotificationManagerService$FlagChecker;)V
PLcom/android/server/notification/NotificationManagerService;->cancelNotificationLocked(Lcom/android/server/notification/NotificationRecord;ZIIIZLjava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService;->cancelToastLocked(I)V
PLcom/android/server/notification/NotificationManagerService;->checkDisqualifyingFeatures(IIILjava/lang/String;Lcom/android/server/notification/NotificationRecord;Z)Z
PLcom/android/server/notification/NotificationManagerService;->checkRestrictedCategories(Landroid/app/Notification;)V
PLcom/android/server/notification/NotificationManagerService;->clearAutogroupSummaryLocked(ILjava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService;->clearSoundLocked()V
PLcom/android/server/notification/NotificationManagerService;->clearVibrateLocked()V
PLcom/android/server/notification/NotificationManagerService;->createAutoGroupSummary(ILjava/lang/String;Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService;->createNotificationChannelGroup(Ljava/lang/String;ILandroid/app/NotificationChannelGroup;ZZ)V
PLcom/android/server/notification/NotificationManagerService;->dumpJson(Ljava/io/PrintWriter;Lcom/android/server/notification/NotificationManagerService$DumpFilter;)V
PLcom/android/server/notification/NotificationManagerService;->enqueueNotificationInternal(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;ILandroid/app/Notification;I)V
PLcom/android/server/notification/NotificationManagerService;->exitIdle()V
PLcom/android/server/notification/NotificationManagerService;->findNotificationByListLocked(Ljava/util/ArrayList;Ljava/lang/String;)Lcom/android/server/notification/NotificationRecord;
PLcom/android/server/notification/NotificationManagerService;->findNotificationsByListLocked(Ljava/util/ArrayList;Ljava/lang/String;Ljava/lang/String;II)Ljava/util/List;
PLcom/android/server/notification/NotificationManagerService;->finishTokenLocked(Landroid/os/IBinder;I)V
PLcom/android/server/notification/NotificationManagerService;->fixNotification(Landroid/app/Notification;Ljava/lang/String;I)V
PLcom/android/server/notification/NotificationManagerService;->getNotificationCountLocked(Ljava/lang/String;IILjava/lang/String;)I
PLcom/android/server/notification/NotificationManagerService;->getSuppressors()Ljava/util/ArrayList;
PLcom/android/server/notification/NotificationManagerService;->grantUriPermission(Landroid/os/IBinder;Landroid/net/Uri;ILjava/lang/String;I)V
PLcom/android/server/notification/NotificationManagerService;->handleDurationReached(Lcom/android/server/notification/NotificationManagerService$ToastRecord;)V
PLcom/android/server/notification/NotificationManagerService;->handleGroupedNotificationLocked(Lcom/android/server/notification/NotificationRecord;Lcom/android/server/notification/NotificationRecord;II)V
PLcom/android/server/notification/NotificationManagerService;->handleKillTokenTimeout(Lcom/android/server/notification/NotificationManagerService$ToastRecord;)V
PLcom/android/server/notification/NotificationManagerService;->handleListenerHintsChanged(I)V
PLcom/android/server/notification/NotificationManagerService;->handleListenerInterruptionFilterChanged(I)V
PLcom/android/server/notification/NotificationManagerService;->handleRankingReconsideration(Landroid/os/Message;)V
PLcom/android/server/notification/NotificationManagerService;->handleSendRankingUpdate()V
PLcom/android/server/notification/NotificationManagerService;->indexOfNotificationLocked(Ljava/lang/String;)I
PLcom/android/server/notification/NotificationManagerService;->indexOfToastLocked(Ljava/lang/String;Landroid/app/ITransientNotification;)I
PLcom/android/server/notification/NotificationManagerService;->isBlocked(Lcom/android/server/notification/NotificationRecord;)Z
PLcom/android/server/notification/NotificationManagerService;->isBlocked(Lcom/android/server/notification/NotificationRecord;Lcom/android/server/notification/NotificationUsageStats;)Z
PLcom/android/server/notification/NotificationManagerService;->isCallerInstantApp(II)Z
PLcom/android/server/notification/NotificationManagerService;->isCallerSameApp(Ljava/lang/String;II)Z
PLcom/android/server/notification/NotificationManagerService;->isNotificationForCurrentUser(Lcom/android/server/notification/NotificationRecord;)Z
PLcom/android/server/notification/NotificationManagerService;->isPackageSuspendedForUser(Ljava/lang/String;I)Z
PLcom/android/server/notification/NotificationManagerService;->isVisibleToListener(Landroid/service/notification/StatusBarNotification;Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;)Z
PLcom/android/server/notification/NotificationManagerService;->isVisuallyInterruptive(Lcom/android/server/notification/NotificationRecord;Lcom/android/server/notification/NotificationRecord;)Z
PLcom/android/server/notification/NotificationManagerService;->keepProcessAliveIfNeededLocked(I)V
PLcom/android/server/notification/NotificationManagerService;->lambda$doChannelWarningToast$1(Lcom/android/server/notification/NotificationManagerService;Ljava/lang/CharSequence;)V
PLcom/android/server/notification/NotificationManagerService;->lambda$playVibration$2$NotificationManagerService(Lcom/android/server/notification/NotificationRecord;Landroid/os/VibrationEffect;)V
PLcom/android/server/notification/NotificationManagerService;->lambda$playVibration$2(Lcom/android/server/notification/NotificationManagerService;Lcom/android/server/notification/NotificationRecord;Landroid/os/VibrationEffect;)V
PLcom/android/server/notification/NotificationManagerService;->logRecentLocked(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationManagerService;->logSmartSuggestionsVisible(Lcom/android/server/notification/NotificationRecord;I)V
PLcom/android/server/notification/NotificationManagerService;->maybeNotifyChannelOwner(Ljava/lang/String;ILandroid/app/NotificationChannel;Landroid/app/NotificationChannel;)V
PLcom/android/server/notification/NotificationManagerService;->maybeRecordInterruptionLocked(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationManagerService;->playInCallNotification()V
PLcom/android/server/notification/NotificationManagerService;->playSound(Lcom/android/server/notification/NotificationRecord;Landroid/net/Uri;)Z
PLcom/android/server/notification/NotificationManagerService;->playVibration(Lcom/android/server/notification/NotificationRecord;[JZ)Z
PLcom/android/server/notification/NotificationManagerService;->removeAutogroupKeyLocked(Ljava/lang/String;)V
PLcom/android/server/notification/NotificationManagerService;->removeDisabledHints(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;I)Z
PLcom/android/server/notification/NotificationManagerService;->removeFromNotificationListsLocked(Lcom/android/server/notification/NotificationRecord;)Z
PLcom/android/server/notification/NotificationManagerService;->reportSeen(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationManagerService;->reportUserInteraction(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationManagerService;->resolveNotificationUid(Ljava/lang/String;Ljava/lang/String;II)I
PLcom/android/server/notification/NotificationManagerService;->scheduleDurationReachedLocked(Lcom/android/server/notification/NotificationManagerService$ToastRecord;)V
PLcom/android/server/notification/NotificationManagerService;->scheduleTimeoutLocked(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationManagerService;->sendAccessibilityEvent(Landroid/app/Notification;Ljava/lang/CharSequence;)V
PLcom/android/server/notification/NotificationManagerService;->shouldMuteNotificationLocked(Lcom/android/server/notification/NotificationRecord;)Z
PLcom/android/server/notification/NotificationManagerService;->showNextToastLocked()V
PLcom/android/server/notification/NotificationManagerService;->updateEffectsSuppressorLocked()V
PLcom/android/server/notification/NotificationManagerService;->updateLightsLocked()V
PLcom/android/server/notification/NotificationManagerService;->updateNotificationChannelInt(Ljava/lang/String;ILandroid/app/NotificationChannel;Z)V
PLcom/android/server/notification/NotificationManagerService;->updateNotificationPulse()V
PLcom/android/server/notification/NotificationManagerService;->updateUriPermissions(Lcom/android/server/notification/NotificationRecord;Lcom/android/server/notification/NotificationRecord;Ljava/lang/String;I)V
PLcom/android/server/notification/NotificationRecord;-><init>(Landroid/content/Context;Landroid/service/notification/StatusBarNotification;Landroid/app/NotificationChannel;)V
PLcom/android/server/notification/NotificationRecord;->addAdjustment(Landroid/service/notification/Adjustment;)V
PLcom/android/server/notification/NotificationRecord;->applyAdjustments()V
PLcom/android/server/notification/NotificationRecord;->calculateAttributes()Landroid/media/AudioAttributes;
PLcom/android/server/notification/NotificationRecord;->calculateGrantableUris()V
PLcom/android/server/notification/NotificationRecord;->calculateImportance()V
PLcom/android/server/notification/NotificationRecord;->calculateInitialImportance()I
PLcom/android/server/notification/NotificationRecord;->calculateLights()Lcom/android/server/notification/NotificationRecord$Light;
PLcom/android/server/notification/NotificationRecord;->calculateRankingTimeMs(J)J
PLcom/android/server/notification/NotificationRecord;->calculateSound()Landroid/net/Uri;
PLcom/android/server/notification/NotificationRecord;->calculateUserSentiment()V
PLcom/android/server/notification/NotificationRecord;->calculateVibration()[J
PLcom/android/server/notification/NotificationRecord;->copyRankingInformation(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationRecord;->getItemLogMaker()Landroid/metrics/LogMaker;
PLcom/android/server/notification/NotificationRecord;->getLogMaker(J)Landroid/metrics/LogMaker;
PLcom/android/server/notification/NotificationRecord;->getNotification()Landroid/app/Notification;
PLcom/android/server/notification/NotificationRecord;->getUserId()I
PLcom/android/server/notification/NotificationRecord;->isCategory(Ljava/lang/String;)Z
PLcom/android/server/notification/NotificationRecord;->recordDismissalSentiment(I)V
PLcom/android/server/notification/NotificationRecord;->recordDismissalSurface(I)V
PLcom/android/server/notification/NotificationRecord;->setInterruptive(Z)V
PLcom/android/server/notification/NotificationRecord;->setVisibility(ZII)V
PLcom/android/server/notification/NotificationRecord;->visitGrantableUri(Landroid/net/Uri;Z)V
PLcom/android/server/notification/NotificationUsageStats$1;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/notification/NotificationUsageStats$AggregatedStats;-><init>(Landroid/content/Context;Ljava/lang/String;)V
PLcom/android/server/notification/NotificationUsageStats$AggregatedStats;->countApiUse(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationUsageStats$AggregatedStats;->dumpJson()Lorg/json/JSONObject;
PLcom/android/server/notification/NotificationUsageStats$AggregatedStats;->emit()V
PLcom/android/server/notification/NotificationUsageStats$AggregatedStats;->getEnqueueRate()F
PLcom/android/server/notification/NotificationUsageStats$AggregatedStats;->getEnqueueRate(J)F
PLcom/android/server/notification/NotificationUsageStats$AggregatedStats;->getPrevious()Lcom/android/server/notification/NotificationUsageStats$AggregatedStats;
PLcom/android/server/notification/NotificationUsageStats$AggregatedStats;->isAlertRateLimited()Z
PLcom/android/server/notification/NotificationUsageStats$AggregatedStats;->maybeCount(Ljava/lang/String;I)V
PLcom/android/server/notification/NotificationUsageStats$AggregatedStats;->updateInterarrivalEstimate(J)V
PLcom/android/server/notification/NotificationUsageStats$ImportanceHistogram;-><init>(Landroid/content/Context;Ljava/lang/String;)V
PLcom/android/server/notification/NotificationUsageStats$ImportanceHistogram;->increment(I)V
PLcom/android/server/notification/NotificationUsageStats$ImportanceHistogram;->maybeCount(Lcom/android/server/notification/NotificationUsageStats$ImportanceHistogram;)V
PLcom/android/server/notification/NotificationUsageStats$ImportanceHistogram;->maybePut(Lorg/json/JSONObject;Lcom/android/server/notification/NotificationUsageStats$ImportanceHistogram;)V
PLcom/android/server/notification/NotificationUsageStats$ImportanceHistogram;->update(Lcom/android/server/notification/NotificationUsageStats$ImportanceHistogram;)V
PLcom/android/server/notification/NotificationUsageStats$SQLiteLog$1;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/notification/NotificationUsageStats$SQLiteLog$2;->onConfigure(Landroid/database/sqlite/SQLiteDatabase;)V
PLcom/android/server/notification/NotificationUsageStats$SQLiteLog;->dumpJson(Lcom/android/server/notification/NotificationManagerService$DumpFilter;)Lorg/json/JSONObject;
PLcom/android/server/notification/NotificationUsageStats$SQLiteLog;->getMidnightMs()J
PLcom/android/server/notification/NotificationUsageStats$SQLiteLog;->jsonPostFrequencies(Lcom/android/server/notification/NotificationManagerService$DumpFilter;)Lorg/json/JSONArray;
PLcom/android/server/notification/NotificationUsageStats$SQLiteLog;->logClicked(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationUsageStats$SQLiteLog;->logDismissed(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationUsageStats$SQLiteLog;->logPosted(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationUsageStats$SQLiteLog;->logRemoved(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationUsageStats$SQLiteLog;->pruneIfNecessary(Landroid/database/sqlite/SQLiteDatabase;)V
PLcom/android/server/notification/NotificationUsageStats$SQLiteLog;->putNotificationDetails(Lcom/android/server/notification/NotificationRecord;Landroid/content/ContentValues;)V
PLcom/android/server/notification/NotificationUsageStats$SQLiteLog;->putPosttimeVisibility(Lcom/android/server/notification/NotificationRecord;Landroid/content/ContentValues;)V
PLcom/android/server/notification/NotificationUsageStats$SQLiteLog;->writeEvent(JILcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationUsageStats$SingleNotificationStats;-><init>()V
PLcom/android/server/notification/NotificationUsageStats$SingleNotificationStats;->finish()V
PLcom/android/server/notification/NotificationUsageStats$SingleNotificationStats;->getCurrentAirtimeExpandedMs()J
PLcom/android/server/notification/NotificationUsageStats$SingleNotificationStats;->getCurrentAirtimeMs()J
PLcom/android/server/notification/NotificationUsageStats$SingleNotificationStats;->getCurrentPosttimeMs()J
PLcom/android/server/notification/NotificationUsageStats$SingleNotificationStats;->hasBeenVisiblyExpanded()Z
PLcom/android/server/notification/NotificationUsageStats$SingleNotificationStats;->onClick()V
PLcom/android/server/notification/NotificationUsageStats$SingleNotificationStats;->onDismiss()V
PLcom/android/server/notification/NotificationUsageStats$SingleNotificationStats;->onExpansionChanged(ZZ)V
PLcom/android/server/notification/NotificationUsageStats$SingleNotificationStats;->onRemoved()V
PLcom/android/server/notification/NotificationUsageStats$SingleNotificationStats;->onVisibilityChanged(Z)V
PLcom/android/server/notification/NotificationUsageStats$SingleNotificationStats;->updateFrom(Lcom/android/server/notification/NotificationUsageStats$SingleNotificationStats;)V
PLcom/android/server/notification/NotificationUsageStats$SingleNotificationStats;->updateVisiblyExpandedStats()V
PLcom/android/server/notification/NotificationUsageStats;->dumpJson(Lcom/android/server/notification/NotificationManagerService$DumpFilter;)Lorg/json/JSONObject;
PLcom/android/server/notification/NotificationUsageStats;->emit()V
PLcom/android/server/notification/NotificationUsageStats;->getAppEnqueueRate(Ljava/lang/String;)F
PLcom/android/server/notification/NotificationUsageStats;->isAlertRateLimited(Ljava/lang/String;)Z
PLcom/android/server/notification/NotificationUsageStats;->registerBlocked(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationUsageStats;->registerClickedByUser(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationUsageStats;->registerDismissedByUser(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationUsageStats;->registerEnqueuedByApp(Ljava/lang/String;)V
PLcom/android/server/notification/NotificationUsageStats;->registerOverCountQuota(Ljava/lang/String;)V
PLcom/android/server/notification/NotificationUsageStats;->registerOverRateQuota(Ljava/lang/String;)V
PLcom/android/server/notification/NotificationUsageStats;->registerPeopleAffinity(Lcom/android/server/notification/NotificationRecord;ZZZ)V
PLcom/android/server/notification/NotificationUsageStats;->registerPostedByApp(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationUsageStats;->registerRemovedByApp(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/NotificationUsageStats;->registerUpdatedByApp(Lcom/android/server/notification/NotificationRecord;Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/PreferencesHelper;->areBubblesAllowed(Ljava/lang/String;I)Z
PLcom/android/server/notification/PreferencesHelper;->badgingEnabled(Landroid/os/UserHandle;)Z
PLcom/android/server/notification/PreferencesHelper;->bubblesEnabled(Landroid/os/UserHandle;)Z
PLcom/android/server/notification/PreferencesHelper;->canShowBadge(Ljava/lang/String;I)Z
PLcom/android/server/notification/PreferencesHelper;->clearLockedFields(Landroid/app/NotificationChannel;)V
PLcom/android/server/notification/PreferencesHelper;->createNotificationChannelGroup(Ljava/lang/String;ILandroid/app/NotificationChannelGroup;Z)V
PLcom/android/server/notification/PreferencesHelper;->dumpBansJson(Lcom/android/server/notification/NotificationManagerService$DumpFilter;)Lorg/json/JSONArray;
PLcom/android/server/notification/PreferencesHelper;->dumpChannelsJson(Lcom/android/server/notification/NotificationManagerService$DumpFilter;)Lorg/json/JSONArray;
PLcom/android/server/notification/PreferencesHelper;->dumpJson(Lcom/android/server/notification/NotificationManagerService$DumpFilter;)Lorg/json/JSONObject;
PLcom/android/server/notification/PreferencesHelper;->getAppsBypassingDndCount(I)I
PLcom/android/server/notification/PreferencesHelper;->getBlockedChannelCount(Ljava/lang/String;I)I
PLcom/android/server/notification/PreferencesHelper;->getChannelLog(Landroid/app/NotificationChannel;Ljava/lang/String;)Landroid/metrics/LogMaker;
PLcom/android/server/notification/PreferencesHelper;->getImportance(Ljava/lang/String;I)I
PLcom/android/server/notification/PreferencesHelper;->getIsAppImportanceLocked(Ljava/lang/String;I)Z
PLcom/android/server/notification/PreferencesHelper;->getNotificationChannelGroup(Ljava/lang/String;Ljava/lang/String;I)Landroid/app/NotificationChannelGroup;
PLcom/android/server/notification/PreferencesHelper;->getNotificationChannelGroups(Ljava/lang/String;IZZZ)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/notification/PreferencesHelper;->getNotificationChannels(Ljava/lang/String;IZ)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/notification/PreferencesHelper;->getPackageBans()Ljava/util/Map;
PLcom/android/server/notification/PreferencesHelper;->getPackageChannels()Ljava/util/Map;
PLcom/android/server/notification/PreferencesHelper;->lockFieldsForUpdate(Landroid/app/NotificationChannel;Landroid/app/NotificationChannel;)V
PLcom/android/server/notification/PreferencesHelper;->onPackagesChanged(ZI[Ljava/lang/String;[I)V
PLcom/android/server/notification/PreferencesHelper;->onUserUnlocked(I)V
PLcom/android/server/notification/PreferencesHelper;->onlyHasDefaultChannel(Ljava/lang/String;I)Z
PLcom/android/server/notification/PreferencesHelper;->updateNotificationChannel(Ljava/lang/String;ILandroid/app/NotificationChannel;Z)V
PLcom/android/server/notification/PriorityExtractor;->process(Lcom/android/server/notification/NotificationRecord;)Lcom/android/server/notification/RankingReconsideration;
PLcom/android/server/notification/RankingHelper;->extractSignals(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/RankingHelper;->findExtractor(Ljava/lang/Class;)Lcom/android/server/notification/NotificationSignalExtractor;
PLcom/android/server/notification/RankingHelper;->indexOf(Ljava/util/ArrayList;Lcom/android/server/notification/NotificationRecord;)I
PLcom/android/server/notification/RankingReconsideration;-><init>(Ljava/lang/String;J)V
PLcom/android/server/notification/RankingReconsideration;->getDelay(Ljava/util/concurrent/TimeUnit;)J
PLcom/android/server/notification/RankingReconsideration;->getKey()Ljava/lang/String;
PLcom/android/server/notification/RankingReconsideration;->run()V
PLcom/android/server/notification/RateEstimator;->getInterarrivalEstimate(J)D
PLcom/android/server/notification/RateEstimator;->getRate(J)F
PLcom/android/server/notification/RateEstimator;->update(J)F
PLcom/android/server/notification/ScheduleConditionProvider;->conditionSnoozed(Landroid/net/Uri;)Z
PLcom/android/server/notification/SnoozeHelper;->isSnoozed(ILjava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/notification/SnoozeHelper;->repostGroupSummary(Ljava/lang/String;ILjava/lang/String;)V
PLcom/android/server/notification/ValidateNotificationPeople$1;->onChange(ZLandroid/net/Uri;I)V
PLcom/android/server/notification/ValidateNotificationPeople$2;->run()V
PLcom/android/server/notification/ValidateNotificationPeople$LookupResult;->getAffinity()F
PLcom/android/server/notification/ValidateNotificationPeople$LookupResult;->mergeContact(Landroid/database/Cursor;)V
PLcom/android/server/notification/ValidateNotificationPeople$PeopleRankingReconsideration;->applyChangesLocked(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/ValidateNotificationPeople$PeopleRankingReconsideration;->getContactAffinity()F
PLcom/android/server/notification/ValidateNotificationPeople$PeopleRankingReconsideration;->setRecord(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/ValidateNotificationPeople$PeopleRankingReconsideration;->work()V
PLcom/android/server/notification/ValidateNotificationPeople;->combineLists([Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;
PLcom/android/server/notification/ValidateNotificationPeople;->getContactAffinity(Landroid/os/UserHandle;Landroid/os/Bundle;IF)F
PLcom/android/server/notification/ValidateNotificationPeople;->getContextAsUser(Landroid/os/UserHandle;)Landroid/content/Context;
PLcom/android/server/notification/ValidateNotificationPeople;->getExtraPeopleForKey(Landroid/os/Bundle;Ljava/lang/String;)[Ljava/lang/String;
PLcom/android/server/notification/ValidateNotificationPeople;->process(Lcom/android/server/notification/NotificationRecord;)Lcom/android/server/notification/RankingReconsideration;
PLcom/android/server/notification/ValidateNotificationPeople;->searchContacts(Landroid/content/Context;Landroid/net/Uri;)Lcom/android/server/notification/ValidateNotificationPeople$LookupResult;
PLcom/android/server/notification/ValidateNotificationPeople;->validatePeople(Landroid/content/Context;Lcom/android/server/notification/NotificationRecord;)Lcom/android/server/notification/RankingReconsideration;
PLcom/android/server/notification/ValidateNotificationPeople;->validatePeople(Landroid/content/Context;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/List;[F)Lcom/android/server/notification/ValidateNotificationPeople$PeopleRankingReconsideration;
PLcom/android/server/notification/VisibilityExtractor;->process(Lcom/android/server/notification/NotificationRecord;)Lcom/android/server/notification/RankingReconsideration;
PLcom/android/server/notification/ZenLog;->componentListToString(Ljava/util/List;)Ljava/lang/String;
PLcom/android/server/notification/ZenLog;->traceEffectsSuppressorChanged(Ljava/util/List;Ljava/util/List;J)V
PLcom/android/server/notification/ZenLog;->traceIntercepted(Lcom/android/server/notification/NotificationRecord;Ljava/lang/String;)V
PLcom/android/server/notification/ZenLog;->traceListenerHintsChanged(III)V
PLcom/android/server/notification/ZenLog;->traceNotIntercepted(Lcom/android/server/notification/NotificationRecord;Ljava/lang/String;)V
PLcom/android/server/notification/ZenLog;->traceSetNotificationPolicy(Ljava/lang/String;ILandroid/app/NotificationManager$Policy;)V
PLcom/android/server/notification/ZenModeConditions;->onServiceAdded(Landroid/content/ComponentName;)V
PLcom/android/server/notification/ZenModeExtractor;->process(Lcom/android/server/notification/NotificationRecord;)Lcom/android/server/notification/RankingReconsideration;
PLcom/android/server/notification/ZenModeFiltering$RepeatCallers;->cleanUp(Landroid/util/ArrayMap;J)V
PLcom/android/server/notification/ZenModeFiltering$RepeatCallers;->peopleString(Landroid/os/Bundle;)Ljava/lang/String;
PLcom/android/server/notification/ZenModeFiltering$RepeatCallers;->recordCall(Landroid/content/Context;Landroid/os/Bundle;)V
PLcom/android/server/notification/ZenModeFiltering;->audienceMatches(IF)Z
PLcom/android/server/notification/ZenModeFiltering;->isCall(Lcom/android/server/notification/NotificationRecord;)Z
PLcom/android/server/notification/ZenModeFiltering;->isDefaultPhoneApp(Ljava/lang/String;)Z
PLcom/android/server/notification/ZenModeFiltering;->isMedia(Lcom/android/server/notification/NotificationRecord;)Z
PLcom/android/server/notification/ZenModeFiltering;->isMessage(Lcom/android/server/notification/NotificationRecord;)Z
PLcom/android/server/notification/ZenModeFiltering;->isSystem(Lcom/android/server/notification/NotificationRecord;)Z
PLcom/android/server/notification/ZenModeFiltering;->matchesCallFilter(Landroid/content/Context;ILandroid/app/NotificationManager$Policy;Landroid/os/UserHandle;Landroid/os/Bundle;Lcom/android/server/notification/ValidateNotificationPeople;IF)Z
PLcom/android/server/notification/ZenModeFiltering;->recordCall(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/ZenModeFiltering;->shouldIntercept(ILandroid/app/NotificationManager$Policy;Lcom/android/server/notification/NotificationRecord;)Z
PLcom/android/server/notification/ZenModeHelper$SettingsObserver;->onChange(ZLandroid/net/Uri;)V
PLcom/android/server/notification/ZenModeHelper;->canManageAutomaticZenRule(Landroid/service/notification/ZenModeConfig$ZenRule;)Z
PLcom/android/server/notification/ZenModeHelper;->createAutomaticZenRule(Landroid/service/notification/ZenModeConfig$ZenRule;)Landroid/app/AutomaticZenRule;
PLcom/android/server/notification/ZenModeHelper;->getAutomaticZenRule(Ljava/lang/String;)Landroid/app/AutomaticZenRule;
PLcom/android/server/notification/ZenModeHelper;->getSuppressedEffects()J
PLcom/android/server/notification/ZenModeHelper;->getZenRules()Ljava/util/List;
PLcom/android/server/notification/ZenModeHelper;->isCall(Lcom/android/server/notification/NotificationRecord;)Z
PLcom/android/server/notification/ZenModeHelper;->matchesCallFilter(Landroid/os/UserHandle;Landroid/os/Bundle;Lcom/android/server/notification/ValidateNotificationPeople;IF)Z
PLcom/android/server/notification/ZenModeHelper;->onUserUnlocked(I)V
PLcom/android/server/notification/ZenModeHelper;->populateZenRule(Landroid/app/AutomaticZenRule;Landroid/service/notification/ZenModeConfig$ZenRule;Z)V
PLcom/android/server/notification/ZenModeHelper;->recordCaller(Lcom/android/server/notification/NotificationRecord;)V
PLcom/android/server/notification/ZenModeHelper;->removeAutomaticZenRules(Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/notification/ZenModeHelper;->setConfig(Landroid/service/notification/ZenModeConfig;Landroid/content/ComponentName;Ljava/lang/String;)V
PLcom/android/server/notification/ZenModeHelper;->setManualZenMode(ILandroid/net/Uri;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/notification/ZenModeHelper;->setManualZenMode(ILandroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Z)V
PLcom/android/server/notification/ZenModeHelper;->setNotificationPolicy(Landroid/app/NotificationManager$Policy;)V
PLcom/android/server/notification/ZenModeHelper;->setSuppressedEffects(J)V
PLcom/android/server/notification/ZenModeHelper;->shouldIntercept(Lcom/android/server/notification/NotificationRecord;)Z
PLcom/android/server/notification/ZenModeHelper;->updateAutomaticZenRule(Ljava/lang/String;Landroid/app/AutomaticZenRule;Ljava/lang/String;)Z
PLcom/android/server/oemlock/-$$Lambda$VendorLock$HjegvthxXAHFarV_FukbaMGePGU;->onValues(IZ)V
PLcom/android/server/oemlock/OemLockService$2;->isOemUnlockAllowedByCarrier()Z
PLcom/android/server/oemlock/OemLockService$2;->setOemUnlockAllowedByCarrier(Z[B)V
PLcom/android/server/oemlock/OemLockService;->enforceUserIsAdmin()V
PLcom/android/server/oemlock/VendorLock;->isOemUnlockAllowedByCarrier()Z
PLcom/android/server/oemlock/VendorLock;->setOemUnlockAllowedByCarrier(Z[B)V
PLcom/android/server/om/-$$Lambda$OverlayManagerService$OverlayChangeListener$u9oeN2C0PDMo0pYiLqfMBkwuMNA;->run()V
PLcom/android/server/om/IdmapManager;->idmapExists(Landroid/content/om/OverlayInfo;)Z
PLcom/android/server/om/IdmapManager;->removeIdmap(Landroid/content/om/OverlayInfo;I)Z
PLcom/android/server/om/OverlayManagerService$1;->getOverlayInfosForTarget(Ljava/lang/String;I)Ljava/util/List;
PLcom/android/server/om/OverlayManagerService$OverlayChangeListener;->lambda$onOverlaysChanged$0$OverlayManagerService$OverlayChangeListener(ILjava/lang/String;)V
PLcom/android/server/om/OverlayManagerService$OverlayChangeListener;->lambda$onOverlaysChanged$0(Lcom/android/server/om/OverlayManagerService$OverlayChangeListener;ILjava/lang/String;)V
PLcom/android/server/om/OverlayManagerService$OverlayChangeListener;->onOverlaysChanged(Ljava/lang/String;I)V
PLcom/android/server/om/OverlayManagerService$PackageReceiver;->onPackageAdded(Ljava/lang/String;[I)V
PLcom/android/server/om/OverlayManagerService$PackageReceiver;->onPackageChanged(Ljava/lang/String;[I)V
PLcom/android/server/om/OverlayManagerService$PackageReceiver;->onPackageRemoved(Ljava/lang/String;[I)V
PLcom/android/server/om/OverlayManagerService$PackageReceiver;->onPackageUpgraded(Ljava/lang/String;[I)V
PLcom/android/server/om/OverlayManagerService$PackageReceiver;->onPackageUpgrading(Ljava/lang/String;[I)V
PLcom/android/server/om/OverlayManagerService$PackageReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/om/OverlayManagerServiceImpl;->getOverlayInfo(Ljava/lang/String;I)Landroid/content/om/OverlayInfo;
PLcom/android/server/om/OverlayManagerServiceImpl;->removeIdmapIfPossible(Landroid/content/om/OverlayInfo;)V
PLcom/android/server/om/OverlayManagerServiceImpl;->updateAllOverlaysForTarget(Ljava/lang/String;II)Z
PLcom/android/server/os/DeviceIdentifiersPolicyService$DeviceIdentifiersPolicy;->getSerialForPackage(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/pm/-$$Lambda$ApexManager$fDbC18mNN6grw85kgXXSUd-qPFA;-><init>()V
PLcom/android/server/pm/-$$Lambda$ApexManager$fDbC18mNN6grw85kgXXSUd-qPFA;->apply(Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/pm/-$$Lambda$BackgroundDexOptService$-KiE2NsUP--OYmoSDt9BwEQICZw;->get()Ljava/lang/Object;
PLcom/android/server/pm/-$$Lambda$BackgroundDexOptService$TAsfDUuoxt92xKFoSCfpMUmY2Es;->get()Ljava/lang/Object;
PLcom/android/server/pm/-$$Lambda$FW40Da1L1EZJ_usDX0ew1qRMmtc;-><init>()V
PLcom/android/server/pm/-$$Lambda$FW40Da1L1EZJ_usDX0ew1qRMmtc;->test(Ljava/lang/Object;)Z
PLcom/android/server/pm/-$$Lambda$InstantAppRegistry$BuKCbLr_MGBazMPl54-pWTuGHYY;-><init>(J)V
PLcom/android/server/pm/-$$Lambda$InstantAppResolverConnection$D-JKXi4qrYjnPQMOwj8UtfZenps;->run()V
PLcom/android/server/pm/-$$Lambda$K2g8Oho05j5S7zVOkoQrHzM_Gig;-><init>()V
PLcom/android/server/pm/-$$Lambda$K2g8Oho05j5S7zVOkoQrHzM_Gig;->test(Ljava/lang/Object;)Z
PLcom/android/server/pm/-$$Lambda$LauncherAppsService$LauncherAppsImpl$MyPackageMonitor$eTair5Mvr14v4M0nq9aQEW2cp-Y;->run()V
PLcom/android/server/pm/-$$Lambda$PackageInstallerService$vra5ZkE3juVvcgDBu5xv0wVzno8;->test(I)Z
PLcom/android/server/pm/-$$Lambda$PackageManagerService$4R9Zu2zflm9xqt9wOD23IIJnqLs;->run()V
PLcom/android/server/pm/-$$Lambda$PackageManagerService$7HjdhhFZo8gOrsDCJlkCvdaQEOk;->run()V
PLcom/android/server/pm/-$$Lambda$PackageManagerService$Iz1l7RVtATr5Ybl_zHeYuCbGMvA;->run()V
PLcom/android/server/pm/-$$Lambda$PackageManagerService$MJFsiYQii6YHHiZmQVJ6_-AWFd0;->runOrThrow()V
PLcom/android/server/pm/-$$Lambda$PackageManagerService$S4WxZjKnT0iu1kmEXSrs7BiizN4;->run()V
PLcom/android/server/pm/-$$Lambda$PackageManagerService$dR0QsEeIVnA2M2a7vKNvBVkA7Eo;->run()V
PLcom/android/server/pm/-$$Lambda$PackageManagerService$flUQp0qTsxUQY0aupDT6UsHb48I;->run()V
PLcom/android/server/pm/-$$Lambda$PackageManagerService$gBfmUwr3vJpLKJEYBEtR1vtJL-Q;->run()V
PLcom/android/server/pm/-$$Lambda$PackageManagerService$jiWj-rF_ZhwQGw4UG_eVrRLMJC0;->runOrThrow()V
PLcom/android/server/pm/-$$Lambda$PackageManagerService$qAu0GY28zjo3OL4CDN4HmpcCPTU;-><init>()V
PLcom/android/server/pm/-$$Lambda$PackageManagerService$rBFEstQVW677jj2Z8w3Ei9Li_HQ;->run()V
PLcom/android/server/pm/-$$Lambda$PackageManagerService$rdLHjmsGR7uMsqkjihg7l_9Kulg;->onGetRuntimePermissionsBackup([B)V
PLcom/android/server/pm/-$$Lambda$PackageManagerService$zctU2dgZjxqnOdALZC5siQN33Bs;->run()V
PLcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$QMV-UHbRIK26QMZL5iM27MchX7U;-><init>()V
PLcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$QMV-UHbRIK26QMZL5iM27MchX7U;->test(Ljava/lang/Object;)Z
PLcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$ePZ6rsJ05hJ2glmOqcq1_jX6J8w;-><init>()V
PLcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$ePZ6rsJ05hJ2glmOqcq1_jX6J8w;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
PLcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$fMBP3pPR7BB2hICieRxkdNG-3H8;->test(Ljava/lang/Object;)Z
PLcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$nPt0Hym3GvYeWA2vwfOLFDxZmCE;->test(Ljava/lang/Object;)Z
PLcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$p5q19y4-2x-i747j_hTNL1EMzt0;->test(Ljava/lang/Object;)Z
PLcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$whx96xO50U3fax1NRe1upTcx9jc;-><init>()V
PLcom/android/server/pm/-$$Lambda$PackageManagerServiceUtils$whx96xO50U3fax1NRe1upTcx9jc;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
PLcom/android/server/pm/-$$Lambda$ShortcutBitmapSaver$AUDgG57FGyGDUVDAjL-7cuiE0pM;->run()V
PLcom/android/server/pm/-$$Lambda$ShortcutBitmapSaver$xgjvZfaiKXavxgGCSta_eIdVBnk;->run()V
PLcom/android/server/pm/-$$Lambda$ShortcutDumpFiles$rwmVVp6PnQCcurF7D6VzrdNqEdk;->accept(Ljava/lang/Object;)V
PLcom/android/server/pm/-$$Lambda$ShortcutPackage$ZN-r6tS0M7WKGK6nbXyJZPwNRGc;-><init>()V
PLcom/android/server/pm/-$$Lambda$ShortcutPackage$hEXnzlESoRjagj8Pd9f4PrqudKE;-><init>()V
PLcom/android/server/pm/-$$Lambda$ShortcutPackage$hEXnzlESoRjagj8Pd9f4PrqudKE;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
PLcom/android/server/pm/-$$Lambda$ShortcutService$DzwraUeMWDwA0XDfFxd3sGOsA0E;->run()V
PLcom/android/server/pm/-$$Lambda$ShortcutService$H1HFyb1U9E1-y03suEsi37_w-t0;->accept(Ljava/lang/Object;)V
PLcom/android/server/pm/-$$Lambda$ShortcutService$LocalService$Q0t7aDuDFJ8HWAf1NHW1dGQjOf8;-><init>(Lcom/android/server/pm/ShortcutService$LocalService;ILjava/lang/String;Ljava/util/List;JLandroid/content/ComponentName;IILjava/util/ArrayList;III)V
PLcom/android/server/pm/-$$Lambda$ShortcutService$LocalService$Q0t7aDuDFJ8HWAf1NHW1dGQjOf8;->accept(Ljava/lang/Object;)V
PLcom/android/server/pm/-$$Lambda$ShortcutService$LocalService$a6cj3oQpS-Z6FB4DytB0FytYmiM;->test(Ljava/lang/Object;)Z
PLcom/android/server/pm/-$$Lambda$ShortcutService$LocalService$ltDE7qm9grkumxffFI8cLCFpNqU;-><init>(JLandroid/util/ArraySet;Landroid/content/ComponentName;ZZZZ)V
PLcom/android/server/pm/-$$Lambda$ShortcutService$LocalService$ltDE7qm9grkumxffFI8cLCFpNqU;->test(Ljava/lang/Object;)Z
PLcom/android/server/pm/-$$Lambda$ShortcutService$QFWliMhWloedhnaZCwVKaqKPVb4;->run()V
PLcom/android/server/pm/-$$Lambda$ShortcutService$TUT0CJsDhxqkpcseduaAriOs6bg;-><init>()V
PLcom/android/server/pm/-$$Lambda$ShortcutService$TUT0CJsDhxqkpcseduaAriOs6bg;->accept(Ljava/lang/Object;)V
PLcom/android/server/pm/-$$Lambda$ShortcutService$exGcjcSQADxpLL30XenIn9sDxlI;-><init>()V
PLcom/android/server/pm/-$$Lambda$ShortcutService$exGcjcSQADxpLL30XenIn9sDxlI;->accept(Ljava/lang/Object;)V
PLcom/android/server/pm/-$$Lambda$ShortcutService$io6aQoSP1ibWQCoayRXJaxbmJvA;->accept(Ljava/lang/Object;)V
PLcom/android/server/pm/-$$Lambda$ShortcutService$l8T8kXBB-Gktym0FoX_WiKj2Glc;-><init>()V
PLcom/android/server/pm/-$$Lambda$ShortcutService$l8T8kXBB-Gktym0FoX_WiKj2Glc;->accept(Ljava/lang/Object;)V
PLcom/android/server/pm/-$$Lambda$ShortcutService$y1mZhNAWeEp6GCbsOBAt4g-DS3s;->accept(Ljava/lang/Object;)V
PLcom/android/server/pm/-$$Lambda$ShortcutUser$XHWlvjfCvG1SoVwGHi3envhmtfM;->accept(Ljava/lang/Object;)V
PLcom/android/server/pm/-$$Lambda$ShortcutUser$bsc89E_40a5X2amehalpqawQ5hY;-><init>()V
PLcom/android/server/pm/-$$Lambda$ShortcutUser$bsc89E_40a5X2amehalpqawQ5hY;->accept(Ljava/lang/Object;)V
PLcom/android/server/pm/-$$Lambda$jZzCUQd1whVIqs_s1XMLbFqTP_E;->run()V
PLcom/android/server/pm/-$$Lambda$vv6Ko6L2p38nn3EYcL5PZxcyRyk;-><init>()V
PLcom/android/server/pm/-$$Lambda$vv6Ko6L2p38nn3EYcL5PZxcyRyk;->test(Ljava/lang/Object;)Z
PLcom/android/server/pm/AbstractStatsBase$1;->run()V
PLcom/android/server/pm/AbstractStatsBase;->writeImpl(Ljava/lang/Object;)V
PLcom/android/server/pm/ApexManager$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/pm/ApexManager;->onBootCompleted()V
PLcom/android/server/pm/ApexManager;->populateActivePackagesCacheIfNeeded()V
PLcom/android/server/pm/BackgroundDexOptService$1;->run()V
PLcom/android/server/pm/BackgroundDexOptService$2;->run()V
PLcom/android/server/pm/BackgroundDexOptService;-><init>()V
PLcom/android/server/pm/BackgroundDexOptService;->abortIdleOptimizations(J)I
PLcom/android/server/pm/BackgroundDexOptService;->getBatteryLevel()I
PLcom/android/server/pm/BackgroundDexOptService;->idleOptimization(Lcom/android/server/pm/PackageManagerService;Landroid/util/ArraySet;Landroid/content/Context;)I
PLcom/android/server/pm/BackgroundDexOptService;->notifyPackageChanged(Ljava/lang/String;)V
PLcom/android/server/pm/BackgroundDexOptService;->notifyPinService(Landroid/util/ArraySet;)V
PLcom/android/server/pm/BackgroundDexOptService;->onStartJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/pm/BackgroundDexOptService;->onStopJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/pm/BackgroundDexOptService;->optimizePackages(Lcom/android/server/pm/PackageManagerService;Landroid/util/ArraySet;JZ)I
PLcom/android/server/pm/BackgroundDexOptService;->postBootUpdate(Landroid/app/job/JobParameters;Lcom/android/server/pm/PackageManagerService;Landroid/util/ArraySet;)V
PLcom/android/server/pm/BackgroundDexOptService;->reconcileSecondaryDexFiles(Lcom/android/server/pm/dex/DexManager;)I
PLcom/android/server/pm/BackgroundDexOptService;->trackPerformDexOpt(Ljava/lang/String;ZLjava/util/function/Supplier;)I
PLcom/android/server/pm/CompilerStats$PackageStats;->getPackageName()Ljava/lang/String;
PLcom/android/server/pm/CompilerStats;->maybeWriteAsync()Z
PLcom/android/server/pm/CompilerStats;->write(Ljava/io/Writer;)V
PLcom/android/server/pm/CompilerStats;->writeInternal(Ljava/lang/Object;)V
PLcom/android/server/pm/CompilerStats;->writeInternal(Ljava/lang/Void;)V
PLcom/android/server/pm/ComponentResolver$ActivityIntentResolver;->removeActivity(Landroid/content/pm/PackageParser$Activity;Ljava/lang/String;)V
PLcom/android/server/pm/ComponentResolver$InstantAppIntentResolver;->filterResults(Ljava/util/List;)V
PLcom/android/server/pm/ComponentResolver$InstantAppIntentResolver;->newArray(I)[Landroid/content/IntentFilter;
PLcom/android/server/pm/ComponentResolver$ProviderIntentResolver;->allowFilterResult(Landroid/content/IntentFilter;Ljava/util/List;)Z
PLcom/android/server/pm/ComponentResolver$ProviderIntentResolver;->allowFilterResult(Landroid/content/pm/PackageParser$ProviderIntentInfo;Ljava/util/List;)Z
PLcom/android/server/pm/ComponentResolver$ProviderIntentResolver;->isPackageForFilter(Ljava/lang/String;Landroid/content/IntentFilter;)Z
PLcom/android/server/pm/ComponentResolver$ProviderIntentResolver;->newResult(Landroid/content/IntentFilter;II)Ljava/lang/Object;
PLcom/android/server/pm/ComponentResolver$ProviderIntentResolver;->newResult(Landroid/content/pm/PackageParser$ProviderIntentInfo;II)Landroid/content/pm/ResolveInfo;
PLcom/android/server/pm/ComponentResolver$ProviderIntentResolver;->queryIntentForPackage(Landroid/content/Intent;Ljava/lang/String;ILjava/util/List;I)Ljava/util/List;
PLcom/android/server/pm/ComponentResolver$ProviderIntentResolver;->removeProvider(Landroid/content/pm/PackageParser$Provider;)V
PLcom/android/server/pm/ComponentResolver$ProviderIntentResolver;->sortResults(Ljava/util/List;)V
PLcom/android/server/pm/ComponentResolver$ServiceIntentResolver;->isFilterStopped(Landroid/content/IntentFilter;I)Z
PLcom/android/server/pm/ComponentResolver$ServiceIntentResolver;->isFilterStopped(Landroid/content/pm/PackageParser$ServiceIntentInfo;I)Z
PLcom/android/server/pm/ComponentResolver$ServiceIntentResolver;->removeService(Landroid/content/pm/PackageParser$Service;)V
PLcom/android/server/pm/ComponentResolver;->assertProvidersNotDefined(Landroid/content/pm/PackageParser$Package;)V
PLcom/android/server/pm/ComponentResolver;->assertProvidersNotDefinedLocked(Landroid/content/pm/PackageParser$Package;)V
PLcom/android/server/pm/ComponentResolver;->getProvider(Landroid/content/ComponentName;)Landroid/content/pm/PackageParser$Provider;
PLcom/android/server/pm/ComponentResolver;->queryProviders(Landroid/content/Intent;Ljava/lang/String;II)Ljava/util/List;
PLcom/android/server/pm/ComponentResolver;->queryProviders(Landroid/content/Intent;Ljava/lang/String;ILjava/util/List;I)Ljava/util/List;
PLcom/android/server/pm/ComponentResolver;->removeAllComponents(Landroid/content/pm/PackageParser$Package;Z)V
PLcom/android/server/pm/ComponentResolver;->removeAllComponentsLocked(Landroid/content/pm/PackageParser$Package;Z)V
PLcom/android/server/pm/CrossProfileAppsServiceImpl$InjectorImpl;->clearCallingIdentity()J
PLcom/android/server/pm/CrossProfileAppsServiceImpl$InjectorImpl;->getAppOpsManager()Landroid/app/AppOpsManager;
PLcom/android/server/pm/CrossProfileAppsServiceImpl$InjectorImpl;->getCallingUid()I
PLcom/android/server/pm/CrossProfileAppsServiceImpl$InjectorImpl;->getCallingUserId()I
PLcom/android/server/pm/CrossProfileAppsServiceImpl$InjectorImpl;->getPackageManagerInternal()Landroid/content/pm/PackageManagerInternal;
PLcom/android/server/pm/CrossProfileAppsServiceImpl$InjectorImpl;->getUserManager()Landroid/os/UserManager;
PLcom/android/server/pm/CrossProfileAppsServiceImpl$InjectorImpl;->restoreCallingIdentity(J)V
PLcom/android/server/pm/CrossProfileAppsServiceImpl;->getTargetUserProfiles(Ljava/lang/String;)Ljava/util/List;
PLcom/android/server/pm/CrossProfileAppsServiceImpl;->getTargetUserProfilesUnchecked(Ljava/lang/String;I)Ljava/util/List;
PLcom/android/server/pm/CrossProfileAppsServiceImpl;->isPackageEnabled(Ljava/lang/String;I)Z
PLcom/android/server/pm/CrossProfileIntentFilter;->getFlags()I
PLcom/android/server/pm/CrossProfileIntentFilter;->getOwnerPackage()Ljava/lang/String;
PLcom/android/server/pm/CrossProfileIntentFilter;->getTargetUserId()I
PLcom/android/server/pm/DumpState;-><init>()V
PLcom/android/server/pm/DumpState;->isDumping(I)Z
PLcom/android/server/pm/DumpState;->onTitlePrinted()Z
PLcom/android/server/pm/DynamicCodeLoggingService$AuditWatchingThread;->processAuditEvents()Z
PLcom/android/server/pm/DynamicCodeLoggingService$AuditWatchingThread;->run()V
PLcom/android/server/pm/DynamicCodeLoggingService$IdleLoggingThread;->run()V
PLcom/android/server/pm/DynamicCodeLoggingService;-><init>()V
PLcom/android/server/pm/DynamicCodeLoggingService;->onStartJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/pm/Installer;->clearAppData(Ljava/lang/String;Ljava/lang/String;IIJ)V
PLcom/android/server/pm/Installer;->copySystemProfile(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/pm/Installer;->createOatDir(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/pm/Installer;->createProfileSnapshot(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/pm/Installer;->createUserData(Ljava/lang/String;III)V
PLcom/android/server/pm/Installer;->destroyProfileSnapshot(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/pm/Installer;->dexopt(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/pm/Installer;->getAppSize(Ljava/lang/String;[Ljava/lang/String;III[J[Ljava/lang/String;Landroid/content/pm/PackageStats;)V
PLcom/android/server/pm/Installer;->getExternalSize(Ljava/lang/String;II[I)[J
PLcom/android/server/pm/Installer;->getUserSize(Ljava/lang/String;II[ILandroid/content/pm/PackageStats;)V
PLcom/android/server/pm/Installer;->hashSecondaryDexFile(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;I)[B
PLcom/android/server/pm/Installer;->installApkVerity(Ljava/lang/String;Ljava/io/FileDescriptor;I)V
PLcom/android/server/pm/Installer;->isQuotaSupported(Ljava/lang/String;)Z
PLcom/android/server/pm/Installer;->linkNativeLibraryDirectory(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/pm/Installer;->markBootComplete(Ljava/lang/String;)V
PLcom/android/server/pm/Installer;->mergeProfiles(ILjava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/pm/Installer;->moveAb(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/pm/Installer;->prepareAppProfile(Ljava/lang/String;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/pm/Installer;->reconcileSecondaryDexFile(Ljava/lang/String;Ljava/lang/String;I[Ljava/lang/String;Ljava/lang/String;I)Z
PLcom/android/server/pm/InstantAppRegistry;->getInstalledInstantApplicationsLPr(I)Ljava/util/List;
PLcom/android/server/pm/InstantAppRegistry;->getInstantApplicationsDir(I)Ljava/io/File;
PLcom/android/server/pm/InstantAppRegistry;->getInstantAppsLPr(I)Ljava/util/List;
PLcom/android/server/pm/InstantAppRegistry;->getUninstalledInstantAppStatesLPr(I)Ljava/util/List;
PLcom/android/server/pm/InstantAppRegistry;->getUninstalledInstantApplicationsLPr(I)Ljava/util/List;
PLcom/android/server/pm/InstantAppRegistry;->isInstantAccessGranted(III)Z
PLcom/android/server/pm/InstantAppRegistry;->onPackageInstalledLPw(Landroid/content/pm/PackageParser$Package;[I)V
PLcom/android/server/pm/InstantAppRegistry;->parseMetadataFile(Ljava/io/File;)Lcom/android/server/pm/InstantAppRegistry$UninstalledInstantAppState;
PLcom/android/server/pm/InstantAppRegistry;->peekInstantCookieFile(Ljava/lang/String;I)Ljava/io/File;
PLcom/android/server/pm/InstantAppRegistry;->peekOrParseUninstalledInstantAppInfo(Ljava/lang/String;I)Landroid/content/pm/InstantAppInfo;
PLcom/android/server/pm/InstantAppRegistry;->propagateInstantAppPermissionsIfNeeded(Landroid/content/pm/PackageParser$Package;I)V
PLcom/android/server/pm/InstantAppRegistry;->pruneInstantApps()V
PLcom/android/server/pm/InstantAppRegistry;->pruneInstantApps(JJJ)Z
PLcom/android/server/pm/InstantAppRegistry;->removeUninstalledInstantAppStateLPw(Ljava/util/function/Predicate;I)V
PLcom/android/server/pm/InstantAppResolver;->computeResolveFilters(Landroid/content/Intent;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Landroid/content/pm/InstantAppResolveInfo;)Ljava/util/List;
PLcom/android/server/pm/InstantAppResolver;->doInstantAppResolutionPhaseOne(Lcom/android/server/pm/InstantAppResolverConnection;Landroid/content/pm/InstantAppRequest;)Landroid/content/pm/AuxiliaryResolveInfo;
PLcom/android/server/pm/InstantAppResolver;->filterInstantAppIntent(Ljava/util/List;Landroid/content/Intent;Ljava/lang/String;ILjava/lang/String;Landroid/content/pm/InstantAppResolveInfo$InstantAppDigest;Ljava/lang/String;)Landroid/content/pm/AuxiliaryResolveInfo;
PLcom/android/server/pm/InstantAppResolver;->logMetrics(IJLjava/lang/String;I)V
PLcom/android/server/pm/InstantAppResolver;->sanitizeIntent(Landroid/content/Intent;)Landroid/content/Intent;
PLcom/android/server/pm/InstantAppResolverConnection$GetInstantAppResolveInfoCaller$1;->sendResult(Landroid/os/Bundle;)V
PLcom/android/server/pm/InstantAppResolverConnection$MyServiceConnection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/pm/InstantAppResolverConnection$MyServiceConnection;->onServiceDisconnected(Landroid/content/ComponentName;)V
PLcom/android/server/pm/InstantAppResolverConnection;->bind(Ljava/lang/String;)Landroid/app/IInstantAppResolver;
PLcom/android/server/pm/InstantAppResolverConnection;->binderDied()V
PLcom/android/server/pm/InstantAppResolverConnection;->getInstantAppResolveInfoList(Landroid/content/Intent;[IILjava/lang/String;)Ljava/util/List;
PLcom/android/server/pm/InstantAppResolverConnection;->getRemoteInstanceLazy(Ljava/lang/String;)Landroid/app/IInstantAppResolver;
PLcom/android/server/pm/InstantAppResolverConnection;->handleBinderDiedLocked()V
PLcom/android/server/pm/InstantAppResolverConnection;->lambda$optimisticBind$0$InstantAppResolverConnection()V
PLcom/android/server/pm/InstantAppResolverConnection;->lambda$optimisticBind$0(Lcom/android/server/pm/InstantAppResolverConnection;)V
PLcom/android/server/pm/InstantAppResolverConnection;->waitForBindLocked(Ljava/lang/String;)V
PLcom/android/server/pm/InstructionSets;->getAppDexInstructionSets(Landroid/content/pm/ApplicationInfo;)[Ljava/lang/String;
PLcom/android/server/pm/InstructionSets;->getDexCodeInstructionSet(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/pm/InstructionSets;->getPreferredInstructionSet()Ljava/lang/String;
PLcom/android/server/pm/IntentFilterVerificationState;->addFilter(Landroid/content/pm/PackageParser$ActivityIntentInfo;)V
PLcom/android/server/pm/IntentFilterVerificationState;->getFilters()Ljava/util/ArrayList;
PLcom/android/server/pm/IntentFilterVerificationState;->getHostsString()Ljava/lang/String;
PLcom/android/server/pm/IntentFilterVerificationState;->getPackageName()Ljava/lang/String;
PLcom/android/server/pm/IntentFilterVerificationState;->getUserId()I
PLcom/android/server/pm/IntentFilterVerificationState;->isVerificationComplete()Z
PLcom/android/server/pm/IntentFilterVerificationState;->isVerified()Z
PLcom/android/server/pm/IntentFilterVerificationState;->setState(I)V
PLcom/android/server/pm/IntentFilterVerificationState;->setVerifierResponse(II)Z
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl$MyPackageMonitor;->lambda$onShortcutChanged$0$LauncherAppsService$LauncherAppsImpl$MyPackageMonitor(Ljava/lang/String;I)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl$MyPackageMonitor;->onPackageAdded(Ljava/lang/String;I)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl$MyPackageMonitor;->onPackageModified(Ljava/lang/String;)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl$MyPackageMonitor;->onShortcutChanged(Ljava/lang/String;I)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl$MyPackageMonitor;->onShortcutChangedInner(Ljava/lang/String;I)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl$PackageCallbackList;->onCallbackDied(Landroid/os/IInterface;Ljava/lang/Object;)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl$VouchesChangedMonitor;->onPackageAdded(Ljava/lang/String;I)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl$VouchesChangedMonitor;->onPackageModified(Ljava/lang/String;)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->addOnAppsChangedListener(Ljava/lang/String;Landroid/content/pm/IOnAppsChangedListener;)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->canAccessProfile(ILjava/lang/String;)Z
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->checkCallbackCount()V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->computePackageCertDigest(Landroid/content/pm/Signature;)Ljava/lang/String;
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->getAppUsageLimit(Ljava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;)Landroid/content/pm/LauncherApps$AppUsageLimit;
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->getApplicationInfo(Ljava/lang/String;Ljava/lang/String;ILandroid/os/UserHandle;)Landroid/content/pm/ApplicationInfo;
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->getHiddenAppActivityInfo(Ljava/lang/String;ILandroid/os/UserHandle;)Landroid/content/pm/ResolveInfo;
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->getLauncherActivities(Ljava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->getShortcutConfigActivities(Ljava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->getShortcutIconFd(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Landroid/os/ParcelFileDescriptor;
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->getShortcuts(Ljava/lang/String;JLjava/lang/String;Ljava/util/List;Landroid/content/ComponentName;ILandroid/os/UserHandle;)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->hasShortcutHostPermission(Ljava/lang/String;)Z
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->initVouchedSignatures(Landroid/os/UserHandle;)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->injectBinderCallingPid()I
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->injectBinderCallingUid()I
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->injectClearCallingIdentity()J
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->injectRestoreCallingIdentity(J)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->isActivityEnabled(Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/UserHandle;)Z
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->isManagedProfileAdmin(Landroid/os/UserHandle;Ljava/lang/String;)Z
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->isPackageEnabled(Ljava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;)Z
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->postToPackageMonitorHandler(Ljava/lang/Runnable;)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->queryActivitiesForUser(Ljava/lang/String;Landroid/content/Intent;Landroid/os/UserHandle;)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->resolveActivity(Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/UserHandle;)Landroid/content/pm/ActivityInfo;
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->shouldHideFromSuggestions(Ljava/lang/String;Landroid/os/UserHandle;)Z
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->shouldShowHiddenApp(Landroid/os/UserHandle;Landroid/content/pm/ApplicationInfo;)Z
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/ComponentName;Landroid/graphics/Rect;Landroid/os/Bundle;Landroid/os/UserHandle;)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->startShortcut(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Rect;Landroid/os/Bundle;I)Z
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->startShortcutIntentsAsPublisher([Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;I)Z
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->updateVouches(Landroid/content/pm/ApplicationInfo;Landroid/os/UserHandle;)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->updateVouches(Ljava/lang/String;Landroid/os/UserHandle;)V
PLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;->verifyCallingPackage(Ljava/lang/String;)V
PLcom/android/server/pm/ModuleInfoProvider;->getInstalledModules(I)Ljava/util/List;
PLcom/android/server/pm/PackageDexOptimizer;->adjustDexoptFlags(I)I
PLcom/android/server/pm/PackageDexOptimizer;->adjustDexoptNeeded(I)I
PLcom/android/server/pm/PackageDexOptimizer;->createOatDirIfSupported(Landroid/content/pm/PackageParser$Package;Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/pm/PackageDexOptimizer;->dexOptPath(Landroid/content/pm/PackageParser$Package;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;IILcom/android/server/pm/CompilerStats$PackageStats;ZLjava/lang/String;Ljava/lang/String;I)I
PLcom/android/server/pm/PackageDexOptimizer;->dexOptSecondaryDexPath(Landroid/content/pm/ApplicationInfo;Ljava/lang/String;Lcom/android/server/pm/dex/PackageDexUsage$DexUseInfo;Lcom/android/server/pm/dex/DexoptOptions;)I
PLcom/android/server/pm/PackageDexOptimizer;->dexOptSecondaryDexPathLI(Landroid/content/pm/ApplicationInfo;Ljava/lang/String;Lcom/android/server/pm/dex/PackageDexUsage$DexUseInfo;Lcom/android/server/pm/dex/DexoptOptions;)I
PLcom/android/server/pm/PackageDexOptimizer;->getAugmentedReasonName(IZ)Ljava/lang/String;
PLcom/android/server/pm/PackageDexOptimizer;->getDexFlags(Landroid/content/pm/ApplicationInfo;Ljava/lang/String;Lcom/android/server/pm/dex/DexoptOptions;)I
PLcom/android/server/pm/PackageDexOptimizer;->getDexFlags(Landroid/content/pm/PackageParser$Package;Ljava/lang/String;Lcom/android/server/pm/dex/DexoptOptions;)I
PLcom/android/server/pm/PackageDexOptimizer;->getDexoptNeeded(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)I
PLcom/android/server/pm/PackageDexOptimizer;->getRealCompilerFilter(Landroid/content/pm/ApplicationInfo;Ljava/lang/String;Z)Ljava/lang/String;
PLcom/android/server/pm/PackageDexOptimizer;->isProfileUpdated(Landroid/content/pm/PackageParser$Package;ILjava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/pm/PackageDexOptimizer;->performDexOpt(Landroid/content/pm/PackageParser$Package;Ljava/util/List;[Ljava/lang/String;Lcom/android/server/pm/CompilerStats$PackageStats;Lcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;Lcom/android/server/pm/dex/DexoptOptions;)I
PLcom/android/server/pm/PackageDexOptimizer;->performDexOpt(Landroid/content/pm/PackageParser$Package;[Ljava/lang/String;Lcom/android/server/pm/CompilerStats$PackageStats;Lcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;Lcom/android/server/pm/dex/DexoptOptions;)I
PLcom/android/server/pm/PackageDexOptimizer;->performDexOptLI(Landroid/content/pm/PackageParser$Package;Ljava/util/List;[Ljava/lang/String;Lcom/android/server/pm/CompilerStats$PackageStats;Lcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;Lcom/android/server/pm/dex/DexoptOptions;)I
PLcom/android/server/pm/PackageDexOptimizer;->performDexOptLI(Landroid/content/pm/PackageParser$Package;[Ljava/lang/String;Lcom/android/server/pm/CompilerStats$PackageStats;Lcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;Lcom/android/server/pm/dex/DexoptOptions;)I
PLcom/android/server/pm/PackageDexOptimizer;->printDexoptFlags(I)Ljava/lang/String;
PLcom/android/server/pm/PackageDexOptimizer;->releaseWakeLockLI(J)V
PLcom/android/server/pm/PackageInstallerService$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/pm/PackageInstallerService$2;->run()V
PLcom/android/server/pm/PackageInstallerService$3;->run()V
PLcom/android/server/pm/PackageInstallerService$Callbacks;->access$200(Lcom/android/server/pm/PackageInstallerService$Callbacks;II)V
PLcom/android/server/pm/PackageInstallerService$Callbacks;->access$400(Lcom/android/server/pm/PackageInstallerService$Callbacks;II)V
PLcom/android/server/pm/PackageInstallerService$Callbacks;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/pm/PackageInstallerService$Callbacks;->invokeCallback(Landroid/content/pm/IPackageInstallerCallback;Landroid/os/Message;)V
PLcom/android/server/pm/PackageInstallerService$Callbacks;->notifySessionFinished(IIZ)V
PLcom/android/server/pm/PackageInstallerService$Callbacks;->unregister(Landroid/content/pm/IPackageInstallerCallback;)V
PLcom/android/server/pm/PackageInstallerService$InternalCallback$1;->run()V
PLcom/android/server/pm/PackageInstallerService$InternalCallback;->onSessionActiveChanged(Lcom/android/server/pm/PackageInstallerSession;Z)V
PLcom/android/server/pm/PackageInstallerService$InternalCallback;->onSessionFinished(Lcom/android/server/pm/PackageInstallerSession;Z)V
PLcom/android/server/pm/PackageInstallerService$InternalCallback;->onSessionPrepared(Lcom/android/server/pm/PackageInstallerSession;)V
PLcom/android/server/pm/PackageInstallerService$InternalCallback;->onSessionProgressChanged(Lcom/android/server/pm/PackageInstallerSession;F)V
PLcom/android/server/pm/PackageInstallerService$InternalCallback;->onSessionSealedBlocking(Lcom/android/server/pm/PackageInstallerSession;)V
PLcom/android/server/pm/PackageInstallerService$PackageInstallObserverAdapter;->onPackageInstalled(Ljava/lang/String;ILjava/lang/String;Landroid/os/Bundle;)V
PLcom/android/server/pm/PackageInstallerService;->abandonSession(I)V
PLcom/android/server/pm/PackageInstallerService;->addHistoricalSessionLocked(Lcom/android/server/pm/PackageInstallerSession;)V
PLcom/android/server/pm/PackageInstallerService;->allocateSessionIdLocked()I
PLcom/android/server/pm/PackageInstallerService;->buildSessionDir(ILandroid/content/pm/PackageInstaller$SessionParams;)Ljava/io/File;
PLcom/android/server/pm/PackageInstallerService;->buildTmpSessionDir(ILjava/lang/String;)Ljava/io/File;
PLcom/android/server/pm/PackageInstallerService;->createSession(Landroid/content/pm/PackageInstaller$SessionParams;Ljava/lang/String;I)I
PLcom/android/server/pm/PackageInstallerService;->createSessionInternal(Landroid/content/pm/PackageInstaller$SessionParams;Ljava/lang/String;I)I
PLcom/android/server/pm/PackageInstallerService;->getAllSessions(I)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/PackageInstallerService;->getMySessions(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/PackageInstallerService;->getSessionCount(Landroid/util/SparseArray;I)I
PLcom/android/server/pm/PackageInstallerService;->getSessionInfo(I)Landroid/content/pm/PackageInstaller$SessionInfo;
PLcom/android/server/pm/PackageInstallerService;->getStagedSessions()Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/PackageInstallerService;->isBootCompleted()Z
PLcom/android/server/pm/PackageInstallerService;->openSession(I)Landroid/content/pm/IPackageInstallerSession;
PLcom/android/server/pm/PackageInstallerService;->openSessionInternal(I)Landroid/content/pm/IPackageInstallerSession;
PLcom/android/server/pm/PackageInstallerService;->prepareStageDir(Ljava/io/File;)V
PLcom/android/server/pm/PackageInstallerService;->unregisterCallback(Landroid/content/pm/IPackageInstallerCallback;)V
PLcom/android/server/pm/PackageInstallerService;->writeSessionsAsync()V
PLcom/android/server/pm/PackageInstallerSession$1;-><init>()V
PLcom/android/server/pm/PackageInstallerSession$1;->accept(Ljava/io/File;)Z
PLcom/android/server/pm/PackageInstallerSession$2;-><init>()V
PLcom/android/server/pm/PackageInstallerSession$2;->accept(Ljava/io/File;)Z
PLcom/android/server/pm/PackageInstallerSession$3;-><init>(Lcom/android/server/pm/PackageInstallerSession;)V
PLcom/android/server/pm/PackageInstallerSession$3;->handleMessage(Landroid/os/Message;)Z
PLcom/android/server/pm/PackageInstallerSession$4;->onPackageInstalled(Ljava/lang/String;ILjava/lang/String;Landroid/os/Bundle;)V
PLcom/android/server/pm/PackageInstallerSession;-><init>(Lcom/android/server/pm/PackageInstallerService$InternalCallback;Landroid/content/Context;Lcom/android/server/pm/PackageManagerService;Lcom/android/server/pm/PackageSessionProvider;Landroid/os/Looper;Lcom/android/server/pm/StagingManager;IILjava/lang/String;ILandroid/content/pm/PackageInstaller$SessionParams;JLjava/io/File;Ljava/lang/String;ZZ[IIZZZILjava/lang/String;)V
PLcom/android/server/pm/PackageInstallerSession;->abandon()V
PLcom/android/server/pm/PackageInstallerSession;->addClientProgress(F)V
PLcom/android/server/pm/PackageInstallerSession;->assertApkConsistentLocked(Ljava/lang/String;Landroid/content/pm/PackageParser$ApkLite;)V
PLcom/android/server/pm/PackageInstallerSession;->assertCallerIsOwnerOrRootLocked()V
PLcom/android/server/pm/PackageInstallerSession;->assertNoWriteFileTransfersOpenLocked()V
PLcom/android/server/pm/PackageInstallerSession;->assertPreparedAndNotCommittedOrDestroyedLocked(Ljava/lang/String;)V
PLcom/android/server/pm/PackageInstallerSession;->assertPreparedAndNotDestroyedLocked(Ljava/lang/String;)V
PLcom/android/server/pm/PackageInstallerSession;->assertPreparedAndNotSealedLocked(Ljava/lang/String;)V
PLcom/android/server/pm/PackageInstallerSession;->buildAppIconFile(ILjava/io/File;)Ljava/io/File;
PLcom/android/server/pm/PackageInstallerSession;->close()V
PLcom/android/server/pm/PackageInstallerSession;->closeInternal(Z)V
PLcom/android/server/pm/PackageInstallerSession;->commit(Landroid/content/IntentSender;Z)V
PLcom/android/server/pm/PackageInstallerSession;->commitLocked()V
PLcom/android/server/pm/PackageInstallerSession;->commitNonStagedLocked(Ljava/util/List;)V
PLcom/android/server/pm/PackageInstallerSession;->computeProgressLocked(Z)V
PLcom/android/server/pm/PackageInstallerSession;->destroyInternal()V
PLcom/android/server/pm/PackageInstallerSession;->dispatchSessionFinished(ILjava/lang/String;Landroid/os/Bundle;)V
PLcom/android/server/pm/PackageInstallerSession;->doWriteInternal(Ljava/lang/String;JJLandroid/os/ParcelFileDescriptor;)Landroid/os/ParcelFileDescriptor;
PLcom/android/server/pm/PackageInstallerSession;->dump(Lcom/android/internal/util/IndentingPrintWriter;)V
PLcom/android/server/pm/PackageInstallerSession;->dumpLocked(Lcom/android/internal/util/IndentingPrintWriter;)V
PLcom/android/server/pm/PackageInstallerSession;->extractNativeLibraries(Ljava/io/File;Ljava/lang/String;Z)V
PLcom/android/server/pm/PackageInstallerSession;->generateInfo()Landroid/content/pm/PackageInstaller$SessionInfo;
PLcom/android/server/pm/PackageInstallerSession;->generateInfo(Z)Landroid/content/pm/PackageInstaller$SessionInfo;
PLcom/android/server/pm/PackageInstallerSession;->getChildSessionIds()[I
PLcom/android/server/pm/PackageInstallerSession;->getInstallerUid()I
PLcom/android/server/pm/PackageInstallerSession;->getNames()[Ljava/lang/String;
PLcom/android/server/pm/PackageInstallerSession;->handleCommit()V
PLcom/android/server/pm/PackageInstallerSession;->hasParentSessionId()Z
PLcom/android/server/pm/PackageInstallerSession;->isInstallerDeviceOwnerOrAffiliatedProfileOwnerLocked()Z
PLcom/android/server/pm/PackageInstallerSession;->isMultiPackage()Z
PLcom/android/server/pm/PackageInstallerSession;->isPrepared()Z
PLcom/android/server/pm/PackageInstallerSession;->isSealed()Z
PLcom/android/server/pm/PackageInstallerSession;->isStaged()Z
PLcom/android/server/pm/PackageInstallerSession;->makeSessionActiveLocked()Lcom/android/server/pm/PackageManagerService$ActiveInstallSession;
PLcom/android/server/pm/PackageInstallerSession;->markAsCommitted(Landroid/content/IntentSender;Z)Z
PLcom/android/server/pm/PackageInstallerSession;->maybeRenameFile(Ljava/io/File;Ljava/io/File;)V
PLcom/android/server/pm/PackageInstallerSession;->needToAskForPermissionsLocked()Z
PLcom/android/server/pm/PackageInstallerSession;->open()V
PLcom/android/server/pm/PackageInstallerSession;->openWrite(Ljava/lang/String;JJ)Landroid/os/ParcelFileDescriptor;
PLcom/android/server/pm/PackageInstallerSession;->readFromXml(Lorg/xmlpull/v1/XmlPullParser;Lcom/android/server/pm/PackageInstallerService$InternalCallback;Landroid/content/Context;Lcom/android/server/pm/PackageManagerService;Landroid/os/Looper;Lcom/android/server/pm/StagingManager;Ljava/io/File;Lcom/android/server/pm/PackageSessionProvider;)Lcom/android/server/pm/PackageInstallerSession;
PLcom/android/server/pm/PackageInstallerSession;->resolveAndStageFile(Ljava/io/File;Ljava/io/File;)V
PLcom/android/server/pm/PackageInstallerSession;->resolveStageDirLocked()Ljava/io/File;
PLcom/android/server/pm/PackageInstallerSession;->sealAndValidateLocked()V
PLcom/android/server/pm/PackageInstallerSession;->setClientProgress(F)V
PLcom/android/server/pm/PackageInstallerSession;->validateApkInstallLocked(Landroid/content/pm/PackageInfo;)V
PLcom/android/server/pm/PackageInstallerSession;->write(Lorg/xmlpull/v1/XmlSerializer;Ljava/io/File;)V
PLcom/android/server/pm/PackageManagerService$1;->onPermissionGranted(II)V
PLcom/android/server/pm/PackageManagerService$1;->onPermissionRevoked(II)V
PLcom/android/server/pm/PackageManagerService$3;->onDefaultRuntimePermissionsGranted(I)V
PLcom/android/server/pm/PackageManagerService$4;->onPermissionChanged()V
PLcom/android/server/pm/PackageManagerService$8;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/pm/PackageManagerService$ActiveInstallSession;->getInstallerPackageName()Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService$ActiveInstallSession;->getInstallerUid()I
PLcom/android/server/pm/PackageManagerService$ActiveInstallSession;->getObserver()Landroid/content/pm/IPackageInstallObserver2;
PLcom/android/server/pm/PackageManagerService$ActiveInstallSession;->getSessionParams()Landroid/content/pm/PackageInstaller$SessionParams;
PLcom/android/server/pm/PackageManagerService$ActiveInstallSession;->getSigningDetails()Landroid/content/pm/PackageParser$SigningDetails;
PLcom/android/server/pm/PackageManagerService$ActiveInstallSession;->getStagedDir()Ljava/io/File;
PLcom/android/server/pm/PackageManagerService$ActiveInstallSession;->getUser()Landroid/os/UserHandle;
PLcom/android/server/pm/PackageManagerService$FileInstallArgs;-><init>(Lcom/android/server/pm/PackageManagerService;Lcom/android/server/pm/PackageManagerService$InstallParams;)V
PLcom/android/server/pm/PackageManagerService$FileInstallArgs;->copyApk()I
PLcom/android/server/pm/PackageManagerService$FileInstallArgs;->doCopyApk()I
PLcom/android/server/pm/PackageManagerService$FileInstallArgs;->doPostDeleteLI(Z)Z
PLcom/android/server/pm/PackageManagerService$FileInstallArgs;->doPostInstall(II)I
PLcom/android/server/pm/PackageManagerService$FileInstallArgs;->doPreInstall(I)I
PLcom/android/server/pm/PackageManagerService$FileInstallArgs;->doRename(ILandroid/content/pm/PackageParser$Package;)Z
PLcom/android/server/pm/PackageManagerService$FileInstallArgs;->getCodePath()Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService$HandlerParams;->getUser()Landroid/os/UserHandle;
PLcom/android/server/pm/PackageManagerService$InstallArgs;->getUser()Landroid/os/UserHandle;
PLcom/android/server/pm/PackageManagerService$InstallParams$1;-><init>(Lcom/android/server/pm/PackageManagerService$InstallParams;I)V
PLcom/android/server/pm/PackageManagerService$InstallParams$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/pm/PackageManagerService$InstallParams;-><init>(Lcom/android/server/pm/PackageManagerService;Lcom/android/server/pm/PackageManagerService$ActiveInstallSession;)V
PLcom/android/server/pm/PackageManagerService$InstallParams;->handleReturnCode()V
PLcom/android/server/pm/PackageManagerService$InstallParams;->handleStartCopy()V
PLcom/android/server/pm/PackageManagerService$InstallParams;->handleVerificationFinished()V
PLcom/android/server/pm/PackageManagerService$InstallParams;->installLocationPolicy(Landroid/content/pm/PackageInfoLite;)I
PLcom/android/server/pm/PackageManagerService$IntentVerifierProxy;->addOneIntentFilterVerification(IIILandroid/content/IntentFilter;Ljava/lang/String;)Z
PLcom/android/server/pm/PackageManagerService$IntentVerifierProxy;->addOneIntentFilterVerification(IIILandroid/content/pm/PackageParser$ActivityIntentInfo;Ljava/lang/String;)Z
PLcom/android/server/pm/PackageManagerService$IntentVerifierProxy;->createDomainVerificationState(IIILjava/lang/String;)Lcom/android/server/pm/IntentFilterVerificationState;
PLcom/android/server/pm/PackageManagerService$IntentVerifierProxy;->receiveVerificationResponse(I)V
PLcom/android/server/pm/PackageManagerService$IntentVerifierProxy;->sendVerificationRequest(ILcom/android/server/pm/IntentFilterVerificationState;)V
PLcom/android/server/pm/PackageManagerService$IntentVerifierProxy;->startVerifications(I)V
PLcom/android/server/pm/PackageManagerService$OnPermissionChangeListeners;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/pm/PackageManagerService$OnPermissionChangeListeners;->handleOnPermissionsChanged(I)V
PLcom/android/server/pm/PackageManagerService$PackageFreezer;->finalize()V
PLcom/android/server/pm/PackageManagerService$PackageHandler;->doHandleMessage(Landroid/os/Message;)V
PLcom/android/server/pm/PackageManagerService$PackageHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/pm/PackageManagerService$PackageInstalledInfo;->setReturnCode(I)V
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->canAccessComponent(ILandroid/content/ComponentName;I)Z
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->canAccessInstantApps(II)Z
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->finishPackageInstall(IZ)V
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->freeStorage(Ljava/lang/String;JI)V
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getActivityInfo(Landroid/content/ComponentName;III)Landroid/content/pm/ActivityInfo;
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getApplicationInfo(Ljava/lang/String;III)Landroid/content/pm/ApplicationInfo;
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getAppsWithSharedUserIds()Landroid/util/SparseArray;
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getDistractingPackageRestrictions(Ljava/lang/String;I)I
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getInstalledApplications(III)Ljava/util/List;
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getPackageInfo(Ljava/lang/String;III)Landroid/content/pm/PackageInfo;
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->isInstantAppInstallerComponent(Landroid/content/ComponentName;)Z
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->isPlatformSigned(Ljava/lang/String;)Z
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->isResolveActivityComponent(Landroid/content/pm/ComponentInfo;)Z
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->pruneInstantApps()V
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->queryIntentActivities(Landroid/content/Intent;III)Ljava/util/List;
PLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->resolveIntent(Landroid/content/Intent;Ljava/lang/String;IIZI)Landroid/content/pm/ResolveInfo;
PLcom/android/server/pm/PackageManagerService$PackageManagerNative;->getVersionCodeForPackage(Ljava/lang/String;)J
PLcom/android/server/pm/PackageManagerService$PackageParserCallback;->getStaticOverlayPaths(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService$PackageRemovedInfo;-><init>(Lcom/android/server/pm/PackageSender;)V
PLcom/android/server/pm/PackageManagerService$PackageRemovedInfo;->populateUsers([ILcom/android/server/pm/PackageSetting;)V
PLcom/android/server/pm/PackageManagerService$PackageRemovedInfo;->sendPackageRemovedBroadcasts(Z)V
PLcom/android/server/pm/PackageManagerService$PendingPackageBroadcasts;->clear()V
PLcom/android/server/pm/PackageManagerService$PendingPackageBroadcasts;->get(ILjava/lang/String;)Ljava/util/ArrayList;
PLcom/android/server/pm/PackageManagerService$PendingPackageBroadcasts;->packagesForUserId(I)Landroid/util/ArrayMap;
PLcom/android/server/pm/PackageManagerService$PendingPackageBroadcasts;->put(ILjava/lang/String;Ljava/util/ArrayList;)V
PLcom/android/server/pm/PackageManagerService$PendingPackageBroadcasts;->size()I
PLcom/android/server/pm/PackageManagerService$PendingPackageBroadcasts;->userIdAt(I)I
PLcom/android/server/pm/PackageManagerService$PendingPackageBroadcasts;->userIdCount()I
PLcom/android/server/pm/PackageManagerService$PrepareResult;-><init>(ILjava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;ZIILandroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;ZZLjava/lang/String;Lcom/android/server/pm/PackageManagerService$PackageFreezer;Lcom/android/server/pm/PackageSetting;Lcom/android/server/pm/PackageSetting;[Lcom/android/server/pm/PackageSetting;)V
PLcom/android/server/pm/PackageManagerService$PrepareResult;-><init>(ILjava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;ZIILandroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;ZZLjava/lang/String;Lcom/android/server/pm/PackageManagerService$PackageFreezer;Lcom/android/server/pm/PackageSetting;Lcom/android/server/pm/PackageSetting;[Lcom/android/server/pm/PackageSetting;Lcom/android/server/pm/PackageManagerService$1;)V
PLcom/android/server/pm/PackageManagerService$ReconcileRequest;-><init>(Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V
PLcom/android/server/pm/PackageManagerService;->access$000(Lcom/android/server/pm/PackageManagerService;)J
PLcom/android/server/pm/PackageManagerService;->access$000(Lcom/android/server/pm/PackageManagerService;)Lcom/android/server/DeviceIdleController$LocalService;
PLcom/android/server/pm/PackageManagerService;->access$100(Lcom/android/server/pm/PackageManagerService;)J
PLcom/android/server/pm/PackageManagerService;->access$100(Lcom/android/server/pm/PackageManagerService;)Lcom/android/server/DeviceIdleController$LocalService;
PLcom/android/server/pm/PackageManagerService;->access$2300()Z
PLcom/android/server/pm/PackageManagerService;->access$2700(Lcom/android/server/pm/PackageManagerService;Lcom/android/server/pm/PackageManagerService$InstallParams;)Lcom/android/server/pm/PackageManagerService$InstallArgs;
PLcom/android/server/pm/PackageManagerService;->access$2800(Lcom/android/server/pm/PackageManagerService;III)Z
PLcom/android/server/pm/PackageManagerService;->access$2900(Lcom/android/server/pm/PackageManagerService;Landroid/content/Intent;Ljava/lang/String;IIZ)Ljava/util/List;
PLcom/android/server/pm/PackageManagerService;->access$3008(Lcom/android/server/pm/PackageManagerService;)I
PLcom/android/server/pm/PackageManagerService;->access$3100(Lcom/android/server/pm/PackageManagerService;Landroid/content/pm/PackageInfoLite;Ljava/util/List;Lcom/android/server/pm/PackageVerificationState;)Ljava/util/List;
PLcom/android/server/pm/PackageManagerService;->access$3200(Lcom/android/server/pm/PackageManagerService;Ljava/lang/String;Ljava/util/List;)Landroid/content/ComponentName;
PLcom/android/server/pm/PackageManagerService;->addCrossProfileIntentFilter(Landroid/content/IntentFilter;Ljava/lang/String;III)V
PLcom/android/server/pm/PackageManagerService;->addPermissionAsync(Landroid/content/pm/PermissionInfo;)Z
PLcom/android/server/pm/PackageManagerService;->addPreferredActivityInternal(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;ZILjava/lang/String;)V
PLcom/android/server/pm/PackageManagerService;->apkHasCode(Ljava/lang/String;)Z
PLcom/android/server/pm/PackageManagerService;->applyPostContentProviderResolutionFilter(Ljava/util/List;Ljava/lang/String;)Ljava/util/List;
PLcom/android/server/pm/PackageManagerService;->assertCodePolicy(Landroid/content/pm/PackageParser$Package;)V
PLcom/android/server/pm/PackageManagerService;->broadcastPackageVerified(ILandroid/net/Uri;ILandroid/os/UserHandle;)V
PLcom/android/server/pm/PackageManagerService;->canSuspendPackageForUserInternal(Ljava/lang/String;I)Z
PLcom/android/server/pm/PackageManagerService;->canonicalToCurrentPackageNames([Ljava/lang/String;)[Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService;->checkDowngrade(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageInfoLite;)V
PLcom/android/server/pm/PackageManagerService;->checkPackageFrozen(Ljava/lang/String;)V
PLcom/android/server/pm/PackageManagerService;->checkUidSignatures(II)I
PLcom/android/server/pm/PackageManagerService;->cleanPackageDataStructuresLILPw(Landroid/content/pm/PackageParser$Package;Z)V
PLcom/android/server/pm/PackageManagerService;->clearAppDataLIF(Landroid/content/pm/PackageParser$Package;II)V
PLcom/android/server/pm/PackageManagerService;->clearAppDataLeafLIF(Landroid/content/pm/PackageParser$Package;II)V
PLcom/android/server/pm/PackageManagerService;->clearCrossProfileIntentFilters(ILjava/lang/String;)V
PLcom/android/server/pm/PackageManagerService;->commitPackagesLocked(Lcom/android/server/pm/PackageManagerService$CommitRequest;)V
PLcom/android/server/pm/PackageManagerService;->createForwardingResolveInfo(Lcom/android/server/pm/CrossProfileIntentFilter;Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ResolveInfo;
PLcom/android/server/pm/PackageManagerService;->createForwardingResolveInfoUnchecked(Landroid/content/IntentFilter;II)Landroid/content/pm/ResolveInfo;
PLcom/android/server/pm/PackageManagerService;->deleteInstalledPackageLIF(Lcom/android/server/pm/PackageSetting;ZI[ILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;ZLandroid/content/pm/PackageParser$Package;)V
PLcom/android/server/pm/PackageManagerService;->disableSystemPackageLPw(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;)Z
PLcom/android/server/pm/PackageManagerService;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/pm/PackageManagerService;->dumpFeaturesProto(Landroid/util/proto/ProtoOutputStream;)V
PLcom/android/server/pm/PackageManagerService;->dumpProto(Ljava/io/FileDescriptor;)V
PLcom/android/server/pm/PackageManagerService;->dumpSharedLibrariesProto(Landroid/util/proto/ProtoOutputStream;)V
PLcom/android/server/pm/PackageManagerService;->enforceOwnerRights(Ljava/lang/String;I)V
PLcom/android/server/pm/PackageManagerService;->executePostCommitSteps(Lcom/android/server/pm/PackageManagerService$CommitRequest;)V
PLcom/android/server/pm/PackageManagerService;->extrasForInstallResult(Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)Landroid/os/Bundle;
PLcom/android/server/pm/PackageManagerService;->filterCandidatesWithDomainPreferredActivitiesLPr(Landroid/content/Intent;ILjava/util/List;Lcom/android/server/pm/PackageManagerService$CrossProfileDomainInfo;I)Ljava/util/List;
PLcom/android/server/pm/PackageManagerService;->findSharedNonSystemLibraries(Landroid/content/pm/PackageParser$Package;)Ljava/util/List;
PLcom/android/server/pm/PackageManagerService;->findSharedNonSystemLibrariesRecursive(Landroid/content/pm/PackageParser$Package;Ljava/util/ArrayList;Ljava/util/Set;)V
PLcom/android/server/pm/PackageManagerService;->findSharedNonSystemLibrariesRecursive(Ljava/util/ArrayList;[JLjava/util/ArrayList;Ljava/util/Set;)V
PLcom/android/server/pm/PackageManagerService;->findSharedNonSystemLibrary(Ljava/lang/String;J)Landroid/content/pm/PackageParser$Package;
PLcom/android/server/pm/PackageManagerService;->finishPackageInstall(IZ)V
PLcom/android/server/pm/PackageManagerService;->fixUpInstallReason(Ljava/lang/String;II)I
PLcom/android/server/pm/PackageManagerService;->freeStorage(Ljava/lang/String;JI)V
PLcom/android/server/pm/PackageManagerService;->freeStorageAndNotify(Ljava/lang/String;JILandroid/content/pm/IPackageDataObserver;)V
PLcom/android/server/pm/PackageManagerService;->freezePackageForInstall(Ljava/lang/String;IILjava/lang/String;)Lcom/android/server/pm/PackageManagerService$PackageFreezer;
PLcom/android/server/pm/PackageManagerService;->freezePackageForInstall(Ljava/lang/String;ILjava/lang/String;)Lcom/android/server/pm/PackageManagerService$PackageFreezer;
PLcom/android/server/pm/PackageManagerService;->generateApplicationInfoFromSettingsLPw(Ljava/lang/String;III)Landroid/content/pm/ApplicationInfo;
PLcom/android/server/pm/PackageManagerService;->getActiveLauncherPackageName(I)Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService;->getAllIntentFilters(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/PackageManagerService;->getAppOpPermissionPackages(Ljava/lang/String;)[Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService;->getApplicationEnabledSetting(Ljava/lang/String;I)I
PLcom/android/server/pm/PackageManagerService;->getAppsWithSharedUserIdsLocked()Landroid/util/SparseArray;
PLcom/android/server/pm/PackageManagerService;->getArtManager()Landroid/content/pm/dex/IArtManager;
PLcom/android/server/pm/PackageManagerService;->getChangedPackages(II)Landroid/content/pm/ChangedPackages;
PLcom/android/server/pm/PackageManagerService;->getComponentEnabledSetting(Landroid/content/ComponentName;I)I
PLcom/android/server/pm/PackageManagerService;->getContentCaptureServicePackageName()Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService;->getCrossProfileDomainPreferredLpr(Landroid/content/Intent;Ljava/lang/String;III)Lcom/android/server/pm/PackageManagerService$CrossProfileDomainInfo;
PLcom/android/server/pm/PackageManagerService;->getDefaultAppsBackup(I)[B
PLcom/android/server/pm/PackageManagerService;->getDefaultDialerPackageName(I)Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService;->getDexManager()Lcom/android/server/pm/dex/DexManager;
PLcom/android/server/pm/PackageManagerService;->getDomainVerificationStatusLPr(Lcom/android/server/pm/PackageSetting;I)J
PLcom/android/server/pm/PackageManagerService;->getHomeActivities(Ljava/util/List;)Landroid/content/ComponentName;
PLcom/android/server/pm/PackageManagerService;->getInstalledModules(I)Ljava/util/List;
PLcom/android/server/pm/PackageManagerService;->getInstantAppAndroidId(Ljava/lang/String;I)Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService;->getInstantAppResolverSettingsComponent()Landroid/content/ComponentName;
PLcom/android/server/pm/PackageManagerService;->getInstantApps(I)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/PackageManagerService;->getIntentFilterVerificationBackup(I)[B
PLcom/android/server/pm/PackageManagerService;->getIntentFilterVerifications(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/PackageManagerService;->getIntentVerificationStatus(Ljava/lang/String;I)I
PLcom/android/server/pm/PackageManagerService;->getLastChosenActivity(Landroid/content/Intent;Ljava/lang/String;I)Landroid/content/pm/ResolveInfo;
PLcom/android/server/pm/PackageManagerService;->getNameForUid(I)Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService;->getNextCodePath(Ljava/io/File;Ljava/lang/String;)Ljava/io/File;
PLcom/android/server/pm/PackageManagerService;->getOptimizablePackages()Landroid/util/ArraySet;
PLcom/android/server/pm/PackageManagerService;->getOrCreateCompilerPackageStats(Landroid/content/pm/PackageParser$Package;)Lcom/android/server/pm/CompilerStats$PackageStats;
PLcom/android/server/pm/PackageManagerService;->getOrCreateCompilerPackageStats(Ljava/lang/String;)Lcom/android/server/pm/CompilerStats$PackageStats;
PLcom/android/server/pm/PackageManagerService;->getPackages()Ljava/util/Collection;
PLcom/android/server/pm/PackageManagerService;->getParentOrChildPackageChangedSharedUser(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;)Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService;->getPermissionGrantBackup(I)[B
PLcom/android/server/pm/PackageManagerService;->getPermissionGroupInfo(Ljava/lang/String;I)Landroid/content/pm/PermissionGroupInfo;
PLcom/android/server/pm/PackageManagerService;->getPreferredActivities(Ljava/util/List;Ljava/util/List;Ljava/lang/String;)I
PLcom/android/server/pm/PackageManagerService;->getPreferredActivityBackup(I)[B
PLcom/android/server/pm/PackageManagerService;->getProfileParent(I)Landroid/content/pm/UserInfo;
PLcom/android/server/pm/PackageManagerService;->getProviderInfo(Landroid/content/ComponentName;II)Landroid/content/pm/ProviderInfo;
PLcom/android/server/pm/PackageManagerService;->getServicesSystemSharedLibraryPackageName()Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService;->getSharedSystemSharedLibraryPackageName()Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService;->getSystemAvailableFeatures()Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/PackageManagerService;->getSystemSharedLibraryNames()[Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService;->getUnknownSourcesSettings()I
PLcom/android/server/pm/PackageManagerService;->getUnsuspendablePackagesForUser([Ljava/lang/String;I)[Ljava/lang/String;
PLcom/android/server/pm/PackageManagerService;->getUnusedPackages(J)Ljava/util/Set;
PLcom/android/server/pm/PackageManagerService;->handlePackagePostInstall(Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;ZZZ[Ljava/lang/String;ZLjava/lang/String;Landroid/content/pm/IPackageInstallObserver2;)V
PLcom/android/server/pm/PackageManagerService;->installExistingPackageAsUser(Ljava/lang/String;III)I
PLcom/android/server/pm/PackageManagerService;->installExistingPackageAsUser(Ljava/lang/String;IIILandroid/content/IntentSender;)I
PLcom/android/server/pm/PackageManagerService;->installPackagesLI(Ljava/util/List;)V
PLcom/android/server/pm/PackageManagerService;->installPackagesTracedLI(Ljava/util/List;)V
PLcom/android/server/pm/PackageManagerService;->installStage(Lcom/android/server/pm/PackageManagerService$ActiveInstallSession;)V
PLcom/android/server/pm/PackageManagerService;->isCompatSignatureUpdateNeeded(Landroid/content/pm/PackageParser$Package;)Z
PLcom/android/server/pm/PackageManagerService;->isExternal(Landroid/content/pm/PackageParser$Package;)Z
PLcom/android/server/pm/PackageManagerService;->isHistoricalPackageUsageAvailable()Z
PLcom/android/server/pm/PackageManagerService;->isOemApp(Landroid/content/pm/PackageParser$Package;)Z
PLcom/android/server/pm/PackageManagerService;->isPermissionRevokedByPolicy(Ljava/lang/String;Ljava/lang/String;I)Z
PLcom/android/server/pm/PackageManagerService;->isPrivilegedApp(Landroid/content/pm/PackageParser$Package;)Z
PLcom/android/server/pm/PackageManagerService;->isProductApp(Landroid/content/pm/PackageParser$Package;)Z
PLcom/android/server/pm/PackageManagerService;->isRecoverSignatureUpdateNeeded(Landroid/content/pm/PackageParser$Package;)Z
PLcom/android/server/pm/PackageManagerService;->isSafeMode()Z
PLcom/android/server/pm/PackageManagerService;->isStorageLow()Z
PLcom/android/server/pm/PackageManagerService;->isUidPrivileged(I)Z
PLcom/android/server/pm/PackageManagerService;->isUserEnabled(I)Z
PLcom/android/server/pm/PackageManagerService;->isVendorApp(Landroid/content/pm/PackageParser$Package;)Z
PLcom/android/server/pm/PackageManagerService;->isVerificationEnabled(III)Z
PLcom/android/server/pm/PackageManagerService;->killUid(IILjava/lang/String;)V
PLcom/android/server/pm/PackageManagerService;->lambda$commitPackageSettings$6$PackageManagerService(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;Ljava/util/ArrayList;)V
PLcom/android/server/pm/PackageManagerService;->lambda$freeStorageAndNotify$1$PackageManagerService(Ljava/lang/String;JILandroid/content/pm/IPackageDataObserver;)V
PLcom/android/server/pm/PackageManagerService;->lambda$freeStorageAndNotify$1(Lcom/android/server/pm/PackageManagerService;Ljava/lang/String;JILandroid/content/pm/IPackageDataObserver;)V
PLcom/android/server/pm/PackageManagerService;->lambda$getPermissionGrantBackup$26(Ljava/util/concurrent/atomic/AtomicReference;[B)V
PLcom/android/server/pm/PackageManagerService;->lambda$grantDefaultPermissionsToEnabledTelephonyDataServices$32$PackageManagerService([Ljava/lang/String;I)V
PLcom/android/server/pm/PackageManagerService;->lambda$notifyFirstLaunch$13(Lcom/android/server/pm/PackageManagerService;Ljava/lang/String;ILjava/lang/String;)V
PLcom/android/server/pm/PackageManagerService;->lambda$notifyFirstLaunch$14$PackageManagerService(Ljava/lang/String;ILjava/lang/String;)V
PLcom/android/server/pm/PackageManagerService;->lambda$postPreferredActivityChangedBroadcast$22(I)V
PLcom/android/server/pm/PackageManagerService;->lambda$postPreferredActivityChangedBroadcast$23(I)V
PLcom/android/server/pm/PackageManagerService;->lambda$processInstallRequestsAsync$12$PackageManagerService(ZLjava/util/List;)V
PLcom/android/server/pm/PackageManagerService;->lambda$processInstallRequestsAsync$12(Lcom/android/server/pm/PackageManagerService;ZLjava/util/List;)V
PLcom/android/server/pm/PackageManagerService;->lambda$processInstallRequestsAsync$13$PackageManagerService(ZLjava/util/List;)V
PLcom/android/server/pm/PackageManagerService;->lambda$revokeDefaultPermissionsFromDisabledTelephonyDataServices$33$PackageManagerService([Ljava/lang/String;I)V
PLcom/android/server/pm/PackageManagerService;->lambda$sendPackageAddedForNewUsers$9$PackageManagerService([ILjava/lang/String;Z)V
PLcom/android/server/pm/PackageManagerService;->lambda$sendPackageBroadcast$7(Lcom/android/server/pm/PackageManagerService;[ILjava/lang/String;Ljava/lang/String;Landroid/os/Bundle;ILjava/lang/String;Landroid/content/IIntentReceiver;[I)V
PLcom/android/server/pm/PackageManagerService;->matchComponentForVerifier(Ljava/lang/String;Ljava/util/List;)Landroid/content/ComponentName;
PLcom/android/server/pm/PackageManagerService;->matchVerifiers(Landroid/content/pm/PackageInfoLite;Ljava/util/List;Lcom/android/server/pm/PackageVerificationState;)Ljava/util/List;
PLcom/android/server/pm/PackageManagerService;->maybeAddInstantAppInstaller(Ljava/util/List;Landroid/content/Intent;Ljava/lang/String;IIZ)Ljava/util/List;
PLcom/android/server/pm/PackageManagerService;->needsNetworkVerificationLPr(Landroid/content/pm/PackageParser$ActivityIntentInfo;)Z
PLcom/android/server/pm/PackageManagerService;->notifyFirstLaunch(Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/pm/PackageManagerService;->notifyPackageAdded(Ljava/lang/String;)V
PLcom/android/server/pm/PackageManagerService;->onShellCommand(Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;[Ljava/lang/String;Landroid/os/ShellCallback;Landroid/os/ResultReceiver;)V
PLcom/android/server/pm/PackageManagerService;->packageIsBrowser(Ljava/lang/String;I)Z
PLcom/android/server/pm/PackageManagerService;->performDexOpt(Lcom/android/server/pm/dex/DexoptOptions;)Z
PLcom/android/server/pm/PackageManagerService;->performDexOptInternal(Lcom/android/server/pm/dex/DexoptOptions;)I
PLcom/android/server/pm/PackageManagerService;->performDexOptInternalWithDependenciesLI(Landroid/content/pm/PackageParser$Package;Lcom/android/server/pm/dex/DexoptOptions;)I
PLcom/android/server/pm/PackageManagerService;->performDexOptTraced(Lcom/android/server/pm/dex/DexoptOptions;)I
PLcom/android/server/pm/PackageManagerService;->performDexOptUpgrade(Ljava/util/List;ZIZ)[I
PLcom/android/server/pm/PackageManagerService;->performDexOptWithStatus(Lcom/android/server/pm/dex/DexoptOptions;)I
PLcom/android/server/pm/PackageManagerService;->prepareAppDataAfterInstallLIF(Landroid/content/pm/PackageParser$Package;)V
PLcom/android/server/pm/PackageManagerService;->preparePackageLI(Lcom/android/server/pm/PackageManagerService$InstallArgs;Lcom/android/server/pm/PackageManagerService$PackageInstalledInfo;)Lcom/android/server/pm/PackageManagerService$PrepareResult;
PLcom/android/server/pm/PackageManagerService;->processPendingInstall(Lcom/android/server/pm/PackageManagerService$InstallArgs;I)V
PLcom/android/server/pm/PackageManagerService;->queryIntentContentProviders(Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/PackageManagerService;->queryIntentContentProvidersInternal(Landroid/content/Intent;Ljava/lang/String;II)Ljava/util/List;
PLcom/android/server/pm/PackageManagerService;->reconcileAppsData(IIZ)V
PLcom/android/server/pm/PackageManagerService;->removeOnPermissionsChangeListener(Landroid/content/pm/IOnPermissionsChangeListener;)V
PLcom/android/server/pm/PackageManagerService;->removePackageDataLIF(Lcom/android/server/pm/PackageSetting;[ILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;IZ)V
PLcom/android/server/pm/PackageManagerService;->removePackageLI(Landroid/content/pm/PackageParser$Package;Z)V
PLcom/android/server/pm/PackageManagerService;->removePackageLI(Ljava/lang/String;Z)V
PLcom/android/server/pm/PackageManagerService;->removeSharedLibraryLPw(Ljava/lang/String;J)Z
PLcom/android/server/pm/PackageManagerService;->replacePreferredActivity(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;I)V
PLcom/android/server/pm/PackageManagerService;->restoreAndPostInstall(ILcom/android/server/pm/PackageManagerService$PackageInstalledInfo;Lcom/android/server/pm/PackageManagerService$PostInstallData;)V
PLcom/android/server/pm/PackageManagerService;->revokeRuntimePermission(Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/pm/PackageManagerService;->scanPackageTracedLI(Landroid/content/pm/PackageParser$Package;IIJLandroid/os/UserHandle;)Ljava/util/List;
PLcom/android/server/pm/PackageManagerService;->scheduleWriteSettingsLocked()V
PLcom/android/server/pm/PackageManagerService;->sendBootCompletedBroadcastToSystemApp(Ljava/lang/String;ZI)V
PLcom/android/server/pm/PackageManagerService;->sendPackageAddedForNewUsers(Ljava/lang/String;ZZI[I[I)V
PLcom/android/server/pm/PackageManagerService;->sendPackageAddedForUser(Ljava/lang/String;Lcom/android/server/pm/PackageSetting;I)V
PLcom/android/server/pm/PackageManagerService;->sendPackageChangedBroadcast(Ljava/lang/String;ZLjava/util/ArrayList;I)V
PLcom/android/server/pm/PackageManagerService;->sendSessionCommitBroadcast(Landroid/content/pm/PackageInstaller$SessionInfo;I)V
PLcom/android/server/pm/PackageManagerService;->setApplicationCategoryHint(Ljava/lang/String;ILjava/lang/String;)V
PLcom/android/server/pm/PackageManagerService;->setApplicationEnabledSetting(Ljava/lang/String;IIILjava/lang/String;)V
PLcom/android/server/pm/PackageManagerService;->setDefaultBrowserPackageName(Ljava/lang/String;I)Z
PLcom/android/server/pm/PackageManagerService;->setInstallAndUpdateTime(Landroid/content/pm/PackageParser$Package;JJ)V
PLcom/android/server/pm/PackageManagerService;->setUpFsVerityIfPossible(Landroid/content/pm/PackageParser$Package;)V
PLcom/android/server/pm/PackageManagerService;->shouldShowRequestPermissionRationale(Ljava/lang/String;Ljava/lang/String;I)Z
PLcom/android/server/pm/PackageManagerService;->startIntentFilterVerifications(IZLandroid/content/pm/PackageParser$Package;)V
PLcom/android/server/pm/PackageManagerService;->updateDefaultHomeLPw(I)V
PLcom/android/server/pm/PackageManagerService;->updatePermissionFlags(Ljava/lang/String;Ljava/lang/String;III)V
PLcom/android/server/pm/PackageManagerService;->updateSettingsInternalLI(Landroid/content/pm/PackageParser$Package;Ljava/lang/String;[I[ILcom/android/server/pm/PackageManagerService$PackageInstalledInfo;Landroid/os/UserHandle;I)V
PLcom/android/server/pm/PackageManagerService;->updateSettingsLI(Landroid/content/pm/PackageParser$Package;Ljava/lang/String;[ILcom/android/server/pm/PackageManagerService$PackageInstalledInfo;Landroid/os/UserHandle;I)V
PLcom/android/server/pm/PackageManagerService;->verifyIntentFilter(IILjava/util/List;)V
PLcom/android/server/pm/PackageManagerService;->verifyIntentFiltersIfNeeded(IIZLandroid/content/pm/PackageParser$Package;)V
PLcom/android/server/pm/PackageManagerService;->verifyPendingInstall(II)V
PLcom/android/server/pm/PackageManagerServiceCompilerMapping;->getCompilerFilterForReason(I)Ljava/lang/String;
PLcom/android/server/pm/PackageManagerServiceCompilerMapping;->getReasonName(I)Ljava/lang/String;
PLcom/android/server/pm/PackageManagerServiceUtils;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
PLcom/android/server/pm/PackageManagerServiceUtils;->applyPackageFilter(Ljava/util/function/Predicate;Ljava/util/Collection;Ljava/util/Collection;Ljava/util/List;Lcom/android/server/pm/PackageManagerService;)V
PLcom/android/server/pm/PackageManagerServiceUtils;->dumpCriticalInfo(Landroid/util/proto/ProtoOutputStream;)V
PLcom/android/server/pm/PackageManagerServiceUtils;->dumpCriticalInfo(Ljava/io/PrintWriter;Ljava/lang/String;)V
PLcom/android/server/pm/PackageManagerServiceUtils;->getMinimalPackageInfo(Landroid/content/Context;Ljava/lang/String;ILjava/lang/String;)Landroid/content/pm/PackageInfoLite;
PLcom/android/server/pm/PackageManagerServiceUtils;->getPackageNamesForIntent(Landroid/content/Intent;I)Landroid/util/ArraySet;
PLcom/android/server/pm/PackageManagerServiceUtils;->getPackagesForDexopt(Ljava/util/Collection;Lcom/android/server/pm/PackageManagerService;Z)Ljava/util/List;
PLcom/android/server/pm/PackageManagerServiceUtils;->isUnusedSinceTimeInMillis(JJJLcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;JJ)Z
PLcom/android/server/pm/PackageManagerShellCommand$SnapshotRuntimeProfileCallback;->onSuccess(Landroid/os/ParcelFileDescriptor;)V
PLcom/android/server/pm/PackageManagerShellCommand$SnapshotRuntimeProfileCallback;->waitTillDone()Z
PLcom/android/server/pm/PackageManagerShellCommand;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
PLcom/android/server/pm/PackageManagerShellCommand;->onCommand(Ljava/lang/String;)I
PLcom/android/server/pm/PackageManagerShellCommand;->runList()I
PLcom/android/server/pm/PackageManagerShellCommand;->runListPackages(Z)I
PLcom/android/server/pm/PackageManagerShellCommand;->runSnapshotProfile()I
PLcom/android/server/pm/PackageSetting;->isSharedUser()Z
PLcom/android/server/pm/PackageSetting;->writeToProto(Landroid/util/proto/ProtoOutputStream;JLjava/util/List;)V
PLcom/android/server/pm/PackageSettingBase;->getCurrentEnabledStateLPr(Ljava/lang/String;I)I
PLcom/android/server/pm/PackageSettingBase;->getDomainVerificationStatusForUser(I)J
PLcom/android/server/pm/PackageSettingBase;->getEnabled(I)I
PLcom/android/server/pm/PackageSettingBase;->getHarmfulAppWarning(I)Ljava/lang/String;
PLcom/android/server/pm/PackageSettingBase;->getHidden(I)Z
PLcom/android/server/pm/PackageSettingBase;->getInstallReason(I)I
PLcom/android/server/pm/PackageSettingBase;->getLastDisabledAppCaller(I)Ljava/lang/String;
PLcom/android/server/pm/PackageSettingBase;->getNotLaunched(I)Z
PLcom/android/server/pm/PackageSettingBase;->getPermissionsState()Lcom/android/server/pm/permission/PermissionsState;
PLcom/android/server/pm/PackageSettingBase;->getStopped(I)Z
PLcom/android/server/pm/PackageSettingBase;->getSuspended(I)Z
PLcom/android/server/pm/PackageSettingBase;->getVirtulalPreload(I)Z
PLcom/android/server/pm/PackageSettingBase;->writeUsersInfoToProto(Landroid/util/proto/ProtoOutputStream;J)V
PLcom/android/server/pm/PackageUsage;->isHistoricalPackageUsageAvailable()Z
PLcom/android/server/pm/PackageUsage;->writeInternal(Ljava/lang/Object;)V
PLcom/android/server/pm/PackageUsage;->writeInternal(Ljava/util/Map;)V
PLcom/android/server/pm/PackageVerificationState;-><init>(ILcom/android/server/pm/PackageManagerService$InstallParams;)V
PLcom/android/server/pm/PackageVerificationState;->getInstallParams()Lcom/android/server/pm/PackageManagerService$InstallParams;
PLcom/android/server/pm/PackageVerificationState;->isInstallAllowed()Z
PLcom/android/server/pm/PackageVerificationState;->isVerificationComplete()Z
PLcom/android/server/pm/PackageVerificationState;->setVerifierResponse(II)Z
PLcom/android/server/pm/PreferredComponent;-><init>(Lcom/android/server/pm/PreferredComponent$Callbacks;I[Landroid/content/ComponentName;Landroid/content/ComponentName;Z)V
PLcom/android/server/pm/PreferredComponent;->sameSet([Landroid/content/ComponentName;)Z
PLcom/android/server/pm/ProcessLoggingHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/pm/ProcessLoggingHandler;->invalidateProcessLoggingBaseApkHash(Ljava/lang/String;)V
PLcom/android/server/pm/Settings;->applyPendingPermissionGrantsLPw(Ljava/lang/String;I)V
PLcom/android/server/pm/Settings;->disableSystemPackageLPw(Ljava/lang/String;Z)Z
PLcom/android/server/pm/Settings;->dumpPackageLPr(Ljava/io/PrintWriter;Ljava/lang/String;Ljava/lang/String;Landroid/util/ArraySet;Lcom/android/server/pm/PackageSetting;Ljava/text/SimpleDateFormat;Ljava/util/Date;Ljava/util/List;ZZ)V
PLcom/android/server/pm/Settings;->dumpPackagesLPr(Ljava/io/PrintWriter;Ljava/lang/String;Landroid/util/ArraySet;Lcom/android/server/pm/DumpState;Z)V
PLcom/android/server/pm/Settings;->dumpPackagesProto(Landroid/util/proto/ProtoOutputStream;)V
PLcom/android/server/pm/Settings;->dumpSharedUsersLPr(Ljava/io/PrintWriter;Ljava/lang/String;Landroid/util/ArraySet;Lcom/android/server/pm/DumpState;Z)V
PLcom/android/server/pm/Settings;->getApplicationEnabledSettingLPr(Ljava/lang/String;I)I
PLcom/android/server/pm/Settings;->getComponentEnabledSettingLPr(Landroid/content/ComponentName;I)I
PLcom/android/server/pm/Settings;->getDisabledSystemPkgLPr(Lcom/android/server/pm/PackageSetting;)Lcom/android/server/pm/PackageSetting;
PLcom/android/server/pm/Settings;->getIntentFilterVerificationsLPr(Ljava/lang/String;)Ljava/util/List;
PLcom/android/server/pm/Settings;->removeDisabledSystemPackageLPw(Ljava/lang/String;)V
PLcom/android/server/pm/Settings;->updateIntentFilterVerificationStatusLPw(Ljava/lang/String;II)Z
PLcom/android/server/pm/Settings;->writeAllDomainVerificationsLPr(Lorg/xmlpull/v1/XmlSerializer;I)V
PLcom/android/server/pm/SharedUserSetting;->getPermissionsState()Lcom/android/server/pm/permission/PermissionsState;
PLcom/android/server/pm/ShortcutBitmapSaver;->getBitmapPathMayWaitLocked(Landroid/content/pm/ShortcutInfo;)Ljava/lang/String;
PLcom/android/server/pm/ShortcutBitmapSaver;->lambda$new$1$ShortcutBitmapSaver()V
PLcom/android/server/pm/ShortcutBitmapSaver;->processPendingItems()Z
PLcom/android/server/pm/ShortcutBitmapSaver;->removeIcon(Landroid/content/pm/ShortcutInfo;)V
PLcom/android/server/pm/ShortcutBitmapSaver;->saveBitmapLocked(Landroid/content/pm/ShortcutInfo;ILandroid/graphics/Bitmap$CompressFormat;I)V
PLcom/android/server/pm/ShortcutBitmapSaver;->waitForAllSavesLocked()Z
PLcom/android/server/pm/ShortcutDumpFiles;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
PLcom/android/server/pm/ShortcutDumpFiles;->save(Ljava/lang/String;Ljava/util/function/Consumer;)Z
PLcom/android/server/pm/ShortcutDumpFiles;->save(Ljava/lang/String;[B)Z
PLcom/android/server/pm/ShortcutLauncher;-><init>(Lcom/android/server/pm/ShortcutUser;ILjava/lang/String;ILcom/android/server/pm/ShortcutPackageInfo;)V
PLcom/android/server/pm/ShortcutLauncher;->ensurePackageInfo()V
PLcom/android/server/pm/ShortcutLauncher;->getOwnerUserId()I
PLcom/android/server/pm/ShortcutLauncher;->getPinnedShortcutIds(Ljava/lang/String;I)Landroid/util/ArraySet;
PLcom/android/server/pm/ShortcutLauncher;->loadFromXml(Lorg/xmlpull/v1/XmlPullParser;Lcom/android/server/pm/ShortcutUser;IZ)Lcom/android/server/pm/ShortcutLauncher;
PLcom/android/server/pm/ShortcutLauncher;->saveToXml(Lorg/xmlpull/v1/XmlSerializer;Z)V
PLcom/android/server/pm/ShortcutNonPersistentUser;->hasHostPackage(Ljava/lang/String;)Z
PLcom/android/server/pm/ShortcutNonPersistentUser;->setShortcutHostPackage(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/pm/ShortcutPackage;-><init>(Lcom/android/server/pm/ShortcutUser;ILjava/lang/String;Lcom/android/server/pm/ShortcutPackageInfo;)V
PLcom/android/server/pm/ShortcutPackage;->addOrReplaceDynamicShortcut(Landroid/content/pm/ShortcutInfo;)V
PLcom/android/server/pm/ShortcutPackage;->adjustRanks()V
PLcom/android/server/pm/ShortcutPackage;->areAllActivitiesStillEnabled()Z
PLcom/android/server/pm/ShortcutPackage;->clearAllImplicitRanks()V
PLcom/android/server/pm/ShortcutPackage;->deleteAllDynamicShortcuts(Z)V
PLcom/android/server/pm/ShortcutPackage;->deleteDynamicWithId(Ljava/lang/String;Z)Z
PLcom/android/server/pm/ShortcutPackage;->deleteOrDisableWithId(Ljava/lang/String;ZZZI)Landroid/content/pm/ShortcutInfo;
PLcom/android/server/pm/ShortcutPackage;->enforceShortcutCountsBeforeOperation(Ljava/util/List;I)V
PLcom/android/server/pm/ShortcutPackage;->ensureImmutableShortcutsNotIncluded(Ljava/util/List;Z)V
PLcom/android/server/pm/ShortcutPackage;->ensureImmutableShortcutsNotIncludedWithIds(Ljava/util/List;Z)V
PLcom/android/server/pm/ShortcutPackage;->ensureNotImmutable(Landroid/content/pm/ShortcutInfo;Z)V
PLcom/android/server/pm/ShortcutPackage;->ensureNotImmutable(Ljava/lang/String;Z)V
PLcom/android/server/pm/ShortcutPackage;->findAll(Ljava/util/List;Ljava/util/function/Predicate;I)V
PLcom/android/server/pm/ShortcutPackage;->findAll(Ljava/util/List;Ljava/util/function/Predicate;ILjava/lang/String;IZ)V
PLcom/android/server/pm/ShortcutPackage;->findShortcutById(Ljava/lang/String;)Landroid/content/pm/ShortcutInfo;
PLcom/android/server/pm/ShortcutPackage;->getApiCallCount(Z)I
PLcom/android/server/pm/ShortcutPackage;->getMatchingShareTargets(Landroid/content/IntentFilter;)Ljava/util/List;
PLcom/android/server/pm/ShortcutPackage;->getOwnerUserId()I
PLcom/android/server/pm/ShortcutPackage;->getPackageResources()Landroid/content/res/Resources;
PLcom/android/server/pm/ShortcutPackage;->getUsedBitmapFiles()Landroid/util/ArraySet;
PLcom/android/server/pm/ShortcutPackage;->hasShareTargets()Z
PLcom/android/server/pm/ShortcutPackage;->isShortcutExistsAndVisibleToPublisher(Ljava/lang/String;)Z
PLcom/android/server/pm/ShortcutPackage;->lambda$new$2(Landroid/content/pm/ShortcutInfo;Landroid/content/pm/ShortcutInfo;)I
PLcom/android/server/pm/ShortcutPackage;->loadFromXml(Lcom/android/server/pm/ShortcutService;Lcom/android/server/pm/ShortcutUser;Lorg/xmlpull/v1/XmlPullParser;Z)Lcom/android/server/pm/ShortcutPackage;
PLcom/android/server/pm/ShortcutPackage;->parseIntent(Lorg/xmlpull/v1/XmlPullParser;)Landroid/content/Intent;
PLcom/android/server/pm/ShortcutPackage;->parseShortcut(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;IZ)Landroid/content/pm/ShortcutInfo;
PLcom/android/server/pm/ShortcutPackage;->publishManifestShortcuts(Ljava/util/List;)Z
PLcom/android/server/pm/ShortcutPackage;->pushOutExcessShortcuts()Z
PLcom/android/server/pm/ShortcutPackage;->removeOrphans()V
PLcom/android/server/pm/ShortcutPackage;->rescanPackageIfNeeded(ZZ)Z
PLcom/android/server/pm/ShortcutPackage;->resetRateLimiting()V
PLcom/android/server/pm/ShortcutPackage;->resetRateLimitingForCommandLineNoSaving()V
PLcom/android/server/pm/ShortcutPackage;->saveShortcut(Lorg/xmlpull/v1/XmlSerializer;Landroid/content/pm/ShortcutInfo;ZZ)V
PLcom/android/server/pm/ShortcutPackage;->saveToXml(Lorg/xmlpull/v1/XmlSerializer;Z)V
PLcom/android/server/pm/ShortcutPackage;->sortShortcutsToActivities()Landroid/util/ArrayMap;
PLcom/android/server/pm/ShortcutPackage;->tryApiCall(Z)Z
PLcom/android/server/pm/ShortcutPackageInfo;-><init>(JJLjava/util/ArrayList;Z)V
PLcom/android/server/pm/ShortcutPackageInfo;->getLastUpdateTime()J
PLcom/android/server/pm/ShortcutPackageInfo;->getVersionCode()J
PLcom/android/server/pm/ShortcutPackageInfo;->isBackupAllowed()Z
PLcom/android/server/pm/ShortcutPackageInfo;->isShadow()Z
PLcom/android/server/pm/ShortcutPackageInfo;->loadFromXml(Lorg/xmlpull/v1/XmlPullParser;Z)V
PLcom/android/server/pm/ShortcutPackageInfo;->refreshSignature(Lcom/android/server/pm/ShortcutService;Lcom/android/server/pm/ShortcutPackageItem;)V
PLcom/android/server/pm/ShortcutPackageInfo;->saveToXml(Lcom/android/server/pm/ShortcutService;Lorg/xmlpull/v1/XmlSerializer;Z)V
PLcom/android/server/pm/ShortcutPackageInfo;->updateFromPackageInfo(Landroid/content/pm/PackageInfo;)V
PLcom/android/server/pm/ShortcutPackageItem;->attemptToRestoreIfNeededAndSave()V
PLcom/android/server/pm/ShortcutPackageItem;->getPackageInfo()Lcom/android/server/pm/ShortcutPackageInfo;
PLcom/android/server/pm/ShortcutPackageItem;->getPackageName()Ljava/lang/String;
PLcom/android/server/pm/ShortcutPackageItem;->getPackageUserId()I
PLcom/android/server/pm/ShortcutPackageItem;->getUser()Lcom/android/server/pm/ShortcutUser;
PLcom/android/server/pm/ShortcutPackageItem;->refreshPackageSignatureAndSave()V
PLcom/android/server/pm/ShortcutPackageItem;->replaceUser(Lcom/android/server/pm/ShortcutUser;)V
PLcom/android/server/pm/ShortcutParser;->createShortcutFromManifest(Lcom/android/server/pm/ShortcutService;ILjava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;IIIIIZ)Landroid/content/pm/ShortcutInfo;
PLcom/android/server/pm/ShortcutParser;->parseCategories(Lcom/android/server/pm/ShortcutService;Landroid/util/AttributeSet;)Ljava/lang/String;
PLcom/android/server/pm/ShortcutParser;->parseShortcutAttributes(Lcom/android/server/pm/ShortcutService;Landroid/util/AttributeSet;Ljava/lang/String;Landroid/content/ComponentName;II)Landroid/content/pm/ShortcutInfo;
PLcom/android/server/pm/ShortcutParser;->parseShortcuts(Lcom/android/server/pm/ShortcutService;Ljava/lang/String;ILjava/util/List;)Ljava/util/List;
PLcom/android/server/pm/ShortcutParser;->parseShortcutsOneFile(Lcom/android/server/pm/ShortcutService;Landroid/content/pm/ActivityInfo;Ljava/lang/String;ILjava/util/List;Ljava/util/List;)Ljava/util/List;
PLcom/android/server/pm/ShortcutRequestPinProcessor;->getRequestPinConfirmationActivity(II)Landroid/util/Pair;
PLcom/android/server/pm/ShortcutRequestPinProcessor;->isRequestPinItemSupported(II)Z
PLcom/android/server/pm/ShortcutService$1;->test(Landroid/content/pm/ResolveInfo;)Z
PLcom/android/server/pm/ShortcutService$1;->test(Ljava/lang/Object;)Z
PLcom/android/server/pm/ShortcutService$2;->test(Landroid/content/pm/PackageInfo;)Z
PLcom/android/server/pm/ShortcutService$2;->test(Ljava/lang/Object;)Z
PLcom/android/server/pm/ShortcutService$FileOutputStreamWithPath;->getFile()Ljava/io/File;
PLcom/android/server/pm/ShortcutService$Lifecycle;->onStopUser(I)V
PLcom/android/server/pm/ShortcutService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/pm/ShortcutService$LocalService;->createShortcutIntents(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;III)[Landroid/content/Intent;
PLcom/android/server/pm/ShortcutService$LocalService;->getShortcutIconFd(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Landroid/os/ParcelFileDescriptor;
PLcom/android/server/pm/ShortcutService$LocalService;->getShortcutInfoLocked(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)Landroid/content/pm/ShortcutInfo;
PLcom/android/server/pm/ShortcutService$LocalService;->getShortcuts(ILjava/lang/String;JLjava/lang/String;Ljava/util/List;Landroid/content/ComponentName;IIII)Ljava/util/List;
PLcom/android/server/pm/ShortcutService$LocalService;->getShortcutsInnerLocked(ILjava/lang/String;Ljava/lang/String;Ljava/util/List;JLandroid/content/ComponentName;IILjava/util/ArrayList;III)V
PLcom/android/server/pm/ShortcutService$LocalService;->hasShortcutHostPermission(ILjava/lang/String;II)Z
PLcom/android/server/pm/ShortcutService$LocalService;->isPinnedByCaller(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Z
PLcom/android/server/pm/ShortcutService$LocalService;->lambda$getShortcuts$0$ShortcutService$LocalService(ILjava/lang/String;Ljava/util/List;JLandroid/content/ComponentName;IILjava/util/ArrayList;IIILcom/android/server/pm/ShortcutPackage;)V
PLcom/android/server/pm/ShortcutService$LocalService;->lambda$getShortcutsInnerLocked$1(JLandroid/util/ArraySet;Landroid/content/ComponentName;ZZZZLandroid/content/pm/ShortcutInfo;)Z
PLcom/android/server/pm/ShortcutService$LocalService;->setShortcutHostPackage(Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/pm/ShortcutService;->access$200(Lcom/android/server/pm/ShortcutService;)Ljava/lang/Object;
PLcom/android/server/pm/ShortcutService;->access$300(Lcom/android/server/pm/ShortcutService;Ljava/util/List;)Ljava/util/List;
PLcom/android/server/pm/ShortcutService;->addDynamicShortcuts(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;I)Z
PLcom/android/server/pm/ShortcutService;->canSeeAnyPinnedShortcut(Ljava/lang/String;III)Z
PLcom/android/server/pm/ShortcutService;->checkPackageChanges(I)V
PLcom/android/server/pm/ShortcutService;->cleanupDanglingBitmapDirectoriesLocked(I)V
PLcom/android/server/pm/ShortcutService;->cleanupDanglingBitmapFilesLocked(ILcom/android/server/pm/ShortcutUser;Ljava/lang/String;Ljava/io/File;)V
PLcom/android/server/pm/ShortcutService;->disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V
PLcom/android/server/pm/ShortcutService;->enableShortcuts(Ljava/lang/String;Ljava/util/List;I)V
PLcom/android/server/pm/ShortcutService;->enforceMaxActivityShortcuts(I)V
PLcom/android/server/pm/ShortcutService;->fillInDefaultActivity(Ljava/util/List;)V
PLcom/android/server/pm/ShortcutService;->fixUpIncomingShortcutInfo(Landroid/content/pm/ShortcutInfo;ZZ)V
PLcom/android/server/pm/ShortcutService;->fixUpShortcutResourceNamesAndValues(Landroid/content/pm/ShortcutInfo;)V
PLcom/android/server/pm/ShortcutService;->forUpdatedPackages(IJZLjava/util/function/Consumer;)V
PLcom/android/server/pm/ShortcutService;->getBackupPayload(I)[B
PLcom/android/server/pm/ShortcutService;->getDefaultLauncher(I)Landroid/content/ComponentName;
PLcom/android/server/pm/ShortcutService;->getDumpPath()Ljava/io/File;
PLcom/android/server/pm/ShortcutService;->getDynamicShortcuts(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/ShortcutService;->getIconMaxDimensions(Ljava/lang/String;I)I
PLcom/android/server/pm/ShortcutService;->getInstalledPackages(I)Ljava/util/List;
PLcom/android/server/pm/ShortcutService;->getLauncherShortcutsLocked(Ljava/lang/String;II)Lcom/android/server/pm/ShortcutLauncher;
PLcom/android/server/pm/ShortcutService;->getManifestShortcuts(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/ShortcutService;->getMaxActivityShortcuts()I
PLcom/android/server/pm/ShortcutService;->getMaxShortcutCountPerActivity(Ljava/lang/String;I)I
PLcom/android/server/pm/ShortcutService;->getNonPersistentUserLocked(I)Lcom/android/server/pm/ShortcutNonPersistentUser;
PLcom/android/server/pm/ShortcutService;->getPackageShortcutsForPublisherLocked(Ljava/lang/String;I)Lcom/android/server/pm/ShortcutPackage;
PLcom/android/server/pm/ShortcutService;->getPackageShortcutsLocked(Ljava/lang/String;I)Lcom/android/server/pm/ShortcutPackage;
PLcom/android/server/pm/ShortcutService;->getParentOrSelfUserId(I)I
PLcom/android/server/pm/ShortcutService;->getPinnedShortcuts(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/ShortcutService;->getRemainingCallCount(Ljava/lang/String;I)I
PLcom/android/server/pm/ShortcutService;->getShareTargets(Ljava/lang/String;Landroid/content/IntentFilter;I)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/ShortcutService;->getStatStartTime()J
PLcom/android/server/pm/ShortcutService;->getUidLastForegroundElapsedTimeLocked(I)J
PLcom/android/server/pm/ShortcutService;->getUserBitmapFilePath(I)Ljava/io/File;
PLcom/android/server/pm/ShortcutService;->getUserShortcutsLocked(I)Lcom/android/server/pm/ShortcutUser;
PLcom/android/server/pm/ShortcutService;->handlePackageAdded(Ljava/lang/String;I)V
PLcom/android/server/pm/ShortcutService;->handlePackageChanged(Ljava/lang/String;I)V
PLcom/android/server/pm/ShortcutService;->handlePackageUpdateFinished(Ljava/lang/String;I)V
PLcom/android/server/pm/ShortcutService;->handleStopUser(I)V
PLcom/android/server/pm/ShortcutService;->handleUnlockUser(I)V
PLcom/android/server/pm/ShortcutService;->hasShareTargets(Ljava/lang/String;Ljava/lang/String;I)Z
PLcom/android/server/pm/ShortcutService;->hasShortcutHostPermission(Ljava/lang/String;III)Z
PLcom/android/server/pm/ShortcutService;->hasShortcutHostPermissionInner(Ljava/lang/String;I)Z
PLcom/android/server/pm/ShortcutService;->injectApplicationInfoWithUninstalled(Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;
PLcom/android/server/pm/ShortcutService;->injectBinderCallingPid()I
PLcom/android/server/pm/ShortcutService;->injectBinderCallingUid()I
PLcom/android/server/pm/ShortcutService;->injectBuildFingerprint()Ljava/lang/String;
PLcom/android/server/pm/ShortcutService;->injectEnforceCallingPermission(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/pm/ShortcutService;->injectGetActivityInfoWithMetadataWithUninstalled(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;
PLcom/android/server/pm/ShortcutService;->injectGetDefaultMainActivity(Ljava/lang/String;I)Landroid/content/ComponentName;
PLcom/android/server/pm/ShortcutService;->injectGetLocaleTagsForUser(I)Ljava/lang/String;
PLcom/android/server/pm/ShortcutService;->injectGetMainActivities(Ljava/lang/String;I)Ljava/util/List;
PLcom/android/server/pm/ShortcutService;->injectGetPackageUid(Ljava/lang/String;I)I
PLcom/android/server/pm/ShortcutService;->injectGetPackagesWithUninstalled(I)Ljava/util/List;
PLcom/android/server/pm/ShortcutService;->injectGetPinConfirmationActivity(Ljava/lang/String;II)Landroid/content/ComponentName;
PLcom/android/server/pm/ShortcutService;->injectGetResourcesForApplicationAsUser(Ljava/lang/String;I)Landroid/content/res/Resources;
PLcom/android/server/pm/ShortcutService;->injectHasAccessShortcutsPermission(II)Z
PLcom/android/server/pm/ShortcutService;->injectHasUnlimitedShortcutsApiCallsPermission(II)Z
PLcom/android/server/pm/ShortcutService;->injectIsActivityEnabledAndExported(Landroid/content/ComponentName;I)Z
PLcom/android/server/pm/ShortcutService;->injectIsMainActivity(Landroid/content/ComponentName;I)Z
PLcom/android/server/pm/ShortcutService;->injectIsSafeModeEnabled()Z
PLcom/android/server/pm/ShortcutService;->injectPackageInfoWithUninstalled(Ljava/lang/String;IZ)Landroid/content/pm/PackageInfo;
PLcom/android/server/pm/ShortcutService;->injectRunOnNewThread(Ljava/lang/Runnable;)V
PLcom/android/server/pm/ShortcutService;->injectShouldPerformVerification()Z
PLcom/android/server/pm/ShortcutService;->injectUserDataPath(I)Ljava/io/File;
PLcom/android/server/pm/ShortcutService;->injectValidateIconResPackage(Landroid/content/pm/ShortcutInfo;Landroid/graphics/drawable/Icon;)V
PLcom/android/server/pm/ShortcutService;->injectXmlMetaData(Landroid/content/pm/ActivityInfo;Ljava/lang/String;)Landroid/content/res/XmlResourceParser;
PLcom/android/server/pm/ShortcutService;->isEphemeralApp(Ljava/lang/String;I)Z
PLcom/android/server/pm/ShortcutService;->isInstalled(Landroid/content/pm/PackageInfo;)Z
PLcom/android/server/pm/ShortcutService;->isPackageInstalled(Ljava/lang/String;I)Z
PLcom/android/server/pm/ShortcutService;->isRequestPinItemSupported(II)Z
PLcom/android/server/pm/ShortcutService;->isUidForegroundLocked(I)Z
PLcom/android/server/pm/ShortcutService;->lambda$checkPackageChanges$7$ShortcutService(Ljava/util/ArrayList;Lcom/android/server/pm/ShortcutPackageItem;)V
PLcom/android/server/pm/ShortcutService;->lambda$checkPackageChanges$7(Lcom/android/server/pm/ShortcutService;Ljava/util/ArrayList;Lcom/android/server/pm/ShortcutPackageItem;)V
PLcom/android/server/pm/ShortcutService;->lambda$handleUnlockUser$0$ShortcutService(JI)V
PLcom/android/server/pm/ShortcutService;->lambda$handleUnlockUser$0(Lcom/android/server/pm/ShortcutService;JI)V
PLcom/android/server/pm/ShortcutService;->lambda$notifyListeners$1$ShortcutService(ILjava/lang/String;)V
PLcom/android/server/pm/ShortcutService;->lambda$notifyListeners$1(Lcom/android/server/pm/ShortcutService;ILjava/lang/String;)V
PLcom/android/server/pm/ShortcutService;->lambda$rescanUpdatedPackagesLocked$8$ShortcutService(Lcom/android/server/pm/ShortcutUser;ILandroid/content/pm/ApplicationInfo;)V
PLcom/android/server/pm/ShortcutService;->loadUserInternal(ILjava/io/InputStream;Z)Lcom/android/server/pm/ShortcutUser;
PLcom/android/server/pm/ShortcutService;->loadUserLocked(I)Lcom/android/server/pm/ShortcutUser;
PLcom/android/server/pm/ShortcutService;->logDurationStat(IJ)V
PLcom/android/server/pm/ShortcutService;->onApplicationActive(Ljava/lang/String;I)V
PLcom/android/server/pm/ShortcutService;->openIconFileForWrite(ILandroid/content/pm/ShortcutInfo;)Lcom/android/server/pm/ShortcutService$FileOutputStreamWithPath;
PLcom/android/server/pm/ShortcutService;->packageShortcutsChanged(Ljava/lang/String;I)V
PLcom/android/server/pm/ShortcutService;->parseComponentNameAttribute(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)Landroid/content/ComponentName;
PLcom/android/server/pm/ShortcutService;->parseIntAttribute(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)I
PLcom/android/server/pm/ShortcutService;->parseIntentAttributeNoDefault(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)Landroid/content/Intent;
PLcom/android/server/pm/ShortcutService;->parseLongAttribute(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)J
PLcom/android/server/pm/ShortcutService;->parseStringAttribute(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/pm/ShortcutService;->queryActivities(Landroid/content/Intent;IZ)Ljava/util/List;
PLcom/android/server/pm/ShortcutService;->queryActivities(Landroid/content/Intent;Ljava/lang/String;Landroid/content/ComponentName;I)Ljava/util/List;
PLcom/android/server/pm/ShortcutService;->removeAllDynamicShortcuts(Ljava/lang/String;I)V
PLcom/android/server/pm/ShortcutService;->removeDynamicShortcuts(Ljava/lang/String;Ljava/util/List;I)V
PLcom/android/server/pm/ShortcutService;->removeIconLocked(Landroid/content/pm/ShortcutInfo;)V
PLcom/android/server/pm/ShortcutService;->reportShortcutUsed(Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/pm/ShortcutService;->rescanUpdatedPackagesLocked(IJ)V
PLcom/android/server/pm/ShortcutService;->saveBaseStateLocked()V
PLcom/android/server/pm/ShortcutService;->saveDirtyInfo()V
PLcom/android/server/pm/ShortcutService;->saveIconAndFixUpShortcutLocked(Landroid/content/pm/ShortcutInfo;)V
PLcom/android/server/pm/ShortcutService;->saveUserInternalLocked(ILjava/io/OutputStream;Z)V
PLcom/android/server/pm/ShortcutService;->saveUserLocked(I)V
PLcom/android/server/pm/ShortcutService;->scheduleSaveInner(I)V
PLcom/android/server/pm/ShortcutService;->scheduleSaveUser(I)V
PLcom/android/server/pm/ShortcutService;->setDynamicShortcuts(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;I)Z
PLcom/android/server/pm/ShortcutService;->setShortcutHostPackage(Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/pm/ShortcutService;->shrinkBitmap(Landroid/graphics/Bitmap;I)Landroid/graphics/Bitmap;
PLcom/android/server/pm/ShortcutService;->throwIfUserLockedL(I)V
PLcom/android/server/pm/ShortcutService;->updateShortcuts(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;I)Z
PLcom/android/server/pm/ShortcutService;->verifyCaller(Ljava/lang/String;I)V
PLcom/android/server/pm/ShortcutService;->verifyShortcutInfoPackage(Ljava/lang/String;Landroid/content/pm/ShortcutInfo;)V
PLcom/android/server/pm/ShortcutUser$PackageWithUser;->equals(Ljava/lang/Object;)Z
PLcom/android/server/pm/ShortcutUser$PackageWithUser;->hashCode()I
PLcom/android/server/pm/ShortcutUser;->attemptToRestoreIfNeededAndSave(Lcom/android/server/pm/ShortcutService;Ljava/lang/String;I)V
PLcom/android/server/pm/ShortcutUser;->clearLauncher()V
PLcom/android/server/pm/ShortcutUser;->detectLocaleChange()V
PLcom/android/server/pm/ShortcutUser;->forAllLaunchers(Ljava/util/function/Consumer;)V
PLcom/android/server/pm/ShortcutUser;->forAllPackageItems(Ljava/util/function/Consumer;)V
PLcom/android/server/pm/ShortcutUser;->forAllPackages(Ljava/util/function/Consumer;)V
PLcom/android/server/pm/ShortcutUser;->forPackageItem(Ljava/lang/String;ILjava/util/function/Consumer;)V
PLcom/android/server/pm/ShortcutUser;->getCachedLauncher()Landroid/content/ComponentName;
PLcom/android/server/pm/ShortcutUser;->getLastAppScanOsFingerprint()Ljava/lang/String;
PLcom/android/server/pm/ShortcutUser;->getLastAppScanTime()J
PLcom/android/server/pm/ShortcutUser;->getLastKnownLauncher()Landroid/content/ComponentName;
PLcom/android/server/pm/ShortcutUser;->getLauncherShortcuts(Ljava/lang/String;I)Lcom/android/server/pm/ShortcutLauncher;
PLcom/android/server/pm/ShortcutUser;->getPackageShortcuts(Ljava/lang/String;)Lcom/android/server/pm/ShortcutPackage;
PLcom/android/server/pm/ShortcutUser;->getPackageShortcutsIfExists(Ljava/lang/String;)Lcom/android/server/pm/ShortcutPackage;
PLcom/android/server/pm/ShortcutUser;->getUserId()I
PLcom/android/server/pm/ShortcutUser;->hasPackage(Ljava/lang/String;)Z
PLcom/android/server/pm/ShortcutUser;->loadFromXml(Lcom/android/server/pm/ShortcutService;Lorg/xmlpull/v1/XmlPullParser;IZ)Lcom/android/server/pm/ShortcutUser;
PLcom/android/server/pm/ShortcutUser;->onCalledByPublisher(Ljava/lang/String;)V
PLcom/android/server/pm/ShortcutUser;->rescanPackageIfNeeded(Ljava/lang/String;Z)V
PLcom/android/server/pm/ShortcutUser;->saveToXml(Lorg/xmlpull/v1/XmlSerializer;Z)V
PLcom/android/server/pm/ShortcutUser;->setLastAppScanOsFingerprint(Ljava/lang/String;)V
PLcom/android/server/pm/ShortcutUser;->setLastAppScanTime(J)V
PLcom/android/server/pm/ShortcutUser;->setLauncher(Landroid/content/ComponentName;)V
PLcom/android/server/pm/StagingManager;->getSessions()Landroid/content/pm/ParceledListSlice;
PLcom/android/server/pm/UserDataPreparer;->getDataSystemCeDirectory(I)Ljava/io/File;
PLcom/android/server/pm/UserDataPreparer;->getDataSystemDeDirectory(I)Ljava/io/File;
PLcom/android/server/pm/UserDataPreparer;->getDataUserCeDirectory(Ljava/lang/String;I)Ljava/io/File;
PLcom/android/server/pm/UserDataPreparer;->getDataUserDeDirectory(Ljava/lang/String;I)Ljava/io/File;
PLcom/android/server/pm/UserDataPreparer;->prepareUserData(III)V
PLcom/android/server/pm/UserDataPreparer;->prepareUserDataLI(Ljava/lang/String;IIIZ)V
PLcom/android/server/pm/UserManagerService$LifeCycle;->onStopUser(I)V
PLcom/android/server/pm/UserManagerService$LifeCycle;->onUnlockUser(I)V
PLcom/android/server/pm/UserManagerService$LocalService;->getProfileParentId(I)I
PLcom/android/server/pm/UserManagerService$LocalService;->isProfileAccessible(IILjava/lang/String;Z)Z
PLcom/android/server/pm/UserManagerService$LocalService;->isUserInitialized(I)Z
PLcom/android/server/pm/UserManagerService$LocalService;->removeUserState(I)V
PLcom/android/server/pm/UserManagerService$LocalService;->setUserState(II)V
PLcom/android/server/pm/UserManagerService$MainHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/pm/UserManagerService$UserData;->getLastRequestQuietModeEnabledMillis()J
PLcom/android/server/pm/UserManagerService$UserData;->setLastRequestQuietModeEnabledMillis(J)V
PLcom/android/server/pm/UserManagerService;->broadcastProfileAvailabilityChanges(Landroid/os/UserHandle;Landroid/os/UserHandle;Z)V
PLcom/android/server/pm/UserManagerService;->canAddMoreManagedProfiles(IZ)Z
PLcom/android/server/pm/UserManagerService;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/pm/UserManagerService;->ensureCanModifyQuietMode(Ljava/lang/String;IZ)V
PLcom/android/server/pm/UserManagerService;->getAliveUsersExcludingGuestsCountLU()I
PLcom/android/server/pm/UserManagerService;->getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;
PLcom/android/server/pm/UserManagerService;->getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle;
PLcom/android/server/pm/UserManagerService;->getManagedProfileBadge(I)I
PLcom/android/server/pm/UserManagerService;->getUidForPackage(Ljava/lang/String;)I
PLcom/android/server/pm/UserManagerService;->getUserRestrictionSource(Ljava/lang/String;I)I
PLcom/android/server/pm/UserManagerService;->getUserStartRealtime()J
PLcom/android/server/pm/UserManagerService;->getUserUnlockRealtime()J
PLcom/android/server/pm/UserManagerService;->hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z
PLcom/android/server/pm/UserManagerService;->isDemoUser(I)Z
PLcom/android/server/pm/UserManagerService;->isRestricted()Z
PLcom/android/server/pm/UserManagerService;->logQuietModeEnabled(IZLjava/lang/String;)V
PLcom/android/server/pm/UserManagerService;->onBeforeStartUser(I)V
PLcom/android/server/pm/UserManagerService;->onBeforeUnlockUser(I)V
PLcom/android/server/pm/UserManagerService;->onUserLoggedIn(I)V
PLcom/android/server/pm/UserManagerService;->readApplicationRestrictionsLAr(Landroid/util/AtomicFile;)Landroid/os/Bundle;
PLcom/android/server/pm/UserManagerService;->readEntry(Landroid/os/Bundle;Ljava/util/ArrayList;Lorg/xmlpull/v1/XmlPullParser;)V
PLcom/android/server/pm/UserManagerService;->requestQuietModeEnabled(Ljava/lang/String;ZILandroid/content/IntentSender;)Z
PLcom/android/server/pm/UserManagerService;->setQuietModeEnabled(IZLandroid/content/IntentSender;Ljava/lang/String;)V
PLcom/android/server/pm/UserManagerService;->writeUserLP(Lcom/android/server/pm/UserManagerService$UserData;)V
PLcom/android/server/pm/UserManagerService;->writeUserLP(Lcom/android/server/pm/UserManagerService$UserData;Ljava/io/OutputStream;)V
PLcom/android/server/pm/UserRestrictionsUtils;->dumpRestrictions(Ljava/io/PrintWriter;Ljava/lang/String;Landroid/os/Bundle;)V
PLcom/android/server/pm/UserRestrictionsUtils;->isGlobal(ZLjava/lang/String;)Z
PLcom/android/server/pm/UserRestrictionsUtils;->writeRestrictions(Lorg/xmlpull/v1/XmlSerializer;Landroid/os/Bundle;Ljava/lang/String;)V
PLcom/android/server/pm/dex/-$$Lambda$ArtManagerService$MEVzU-orlv4msZVF-bA5NLti04g;->run()V
PLcom/android/server/pm/dex/-$$Lambda$ArtManagerService$_rD0Y6OPSJHMdjTIOtucoGQ1xag;->run()V
PLcom/android/server/pm/dex/ArtManagerService$ArtManagerInternalImpl;->getPackageOptimizationInfo(Landroid/content/pm/ApplicationInfo;Ljava/lang/String;)Landroid/content/pm/dex/PackageOptimizationInfo;
PLcom/android/server/pm/dex/ArtManagerService;->checkAndroidPermissions(ILjava/lang/String;)Z
PLcom/android/server/pm/dex/ArtManagerService;->checkShellPermissions(ILjava/lang/String;I)Z
PLcom/android/server/pm/dex/ArtManagerService;->createProfileSnapshot(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILandroid/content/pm/dex/ISnapshotRuntimeProfileCallback;)V
PLcom/android/server/pm/dex/ArtManagerService;->destroyProfileSnapshot(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/pm/dex/ArtManagerService;->getCompilationFilterTronValue(Ljava/lang/String;)I
PLcom/android/server/pm/dex/ArtManagerService;->isRuntimeProfilingEnabled(ILjava/lang/String;)Z
PLcom/android/server/pm/dex/ArtManagerService;->lambda$postError$0(Landroid/content/pm/dex/ISnapshotRuntimeProfileCallback;ILjava/lang/String;)V
PLcom/android/server/pm/dex/ArtManagerService;->lambda$postSuccess$1(Landroid/os/ParcelFileDescriptor;Landroid/content/pm/dex/ISnapshotRuntimeProfileCallback;Ljava/lang/String;)V
PLcom/android/server/pm/dex/ArtManagerService;->postError(Landroid/content/pm/dex/ISnapshotRuntimeProfileCallback;Ljava/lang/String;I)V
PLcom/android/server/pm/dex/ArtManagerService;->postSuccess(Ljava/lang/String;Landroid/os/ParcelFileDescriptor;Landroid/content/pm/dex/ISnapshotRuntimeProfileCallback;)V
PLcom/android/server/pm/dex/ArtManagerService;->prepareAppProfiles(Landroid/content/pm/PackageParser$Package;IZ)V
PLcom/android/server/pm/dex/ArtManagerService;->prepareAppProfiles(Landroid/content/pm/PackageParser$Package;[IZ)V
PLcom/android/server/pm/dex/ArtManagerService;->snapshotAppProfile(Ljava/lang/String;Ljava/lang/String;Landroid/content/pm/dex/ISnapshotRuntimeProfileCallback;)V
PLcom/android/server/pm/dex/ArtManagerService;->snapshotBootImageProfile(Landroid/content/pm/dex/ISnapshotRuntimeProfileCallback;)V
PLcom/android/server/pm/dex/ArtManagerService;->snapshotRuntimeProfile(ILjava/lang/String;Ljava/lang/String;Landroid/content/pm/dex/ISnapshotRuntimeProfileCallback;Ljava/lang/String;)V
PLcom/android/server/pm/dex/DexLogger;->fileIsUnder(Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/pm/dex/DexLogger;->getAllPackagesWithDynamicCodeLoading()Ljava/util/Set;
PLcom/android/server/pm/dex/DexLogger;->getPackageDynamicCodeInfo(Ljava/lang/String;)Lcom/android/server/pm/dex/PackageDynamicCodeLoading$PackageDynamicCode;
PLcom/android/server/pm/dex/DexLogger;->logDynamicCodeLoading(Ljava/lang/String;)V
PLcom/android/server/pm/dex/DexLogger;->recordNative(ILjava/lang/String;)V
PLcom/android/server/pm/dex/DexLogger;->writeDclEvent(Ljava/lang/String;ILjava/lang/String;)V
PLcom/android/server/pm/dex/DexManager;->dexoptSecondaryDex(Lcom/android/server/pm/dex/DexoptOptions;)Z
PLcom/android/server/pm/dex/DexManager;->getAllPackagesWithSecondaryDexFiles()Ljava/util/Set;
PLcom/android/server/pm/dex/DexManager;->getDexLogger()Lcom/android/server/pm/dex/DexLogger;
PLcom/android/server/pm/dex/DexManager;->getDynamicCodeLogger()Lcom/android/server/pm/dex/DynamicCodeLogger;
PLcom/android/server/pm/dex/DexManager;->getPackageUseInfoOrDefault(Ljava/lang/String;)Lcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;
PLcom/android/server/pm/dex/DexManager;->notifyPackageInstalled(Landroid/content/pm/PackageInfo;I)V
PLcom/android/server/pm/dex/DexManager;->notifyPackageUpdated(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V
PLcom/android/server/pm/dex/DexManager;->reconcileSecondaryDexFiles(Ljava/lang/String;)V
PLcom/android/server/pm/dex/DexoptOptions;-><init>(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/pm/dex/DexoptUtils;->encodeSharedLibraries(Ljava/util/List;)Ljava/lang/String;
PLcom/android/server/pm/dex/DexoptUtils;->encodeSharedLibrary(Landroid/content/pm/SharedLibraryInfo;)Ljava/lang/String;
PLcom/android/server/pm/dex/DexoptUtils;->getClassLoaderContexts(Landroid/content/pm/ApplicationInfo;Ljava/util/List;[Z)[Ljava/lang/String;
PLcom/android/server/pm/dex/DexoptUtils;->getSplitRelativeCodePaths(Landroid/content/pm/ApplicationInfo;)[Ljava/lang/String;
PLcom/android/server/pm/dex/DynamicCodeLogger;->fileIsUnder(Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/pm/dex/DynamicCodeLogger;->getAllPackagesWithDynamicCodeLoading()Ljava/util/Set;
PLcom/android/server/pm/dex/DynamicCodeLogger;->getPackageDynamicCodeInfo(Ljava/lang/String;)Lcom/android/server/pm/dex/PackageDynamicCodeLoading$PackageDynamicCode;
PLcom/android/server/pm/dex/DynamicCodeLogger;->logDynamicCodeLoading(Ljava/lang/String;)V
PLcom/android/server/pm/dex/DynamicCodeLogger;->recordDex(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/pm/dex/DynamicCodeLogger;->recordNative(ILjava/lang/String;)V
PLcom/android/server/pm/dex/DynamicCodeLogger;->writeDclEvent(Ljava/lang/String;ILjava/lang/String;)V
PLcom/android/server/pm/dex/PackageDexUsage$DexUseInfo;-><init>(Lcom/android/server/pm/dex/PackageDexUsage$DexUseInfo;)V
PLcom/android/server/pm/dex/PackageDexUsage$DexUseInfo;->getClassLoaderContext()Ljava/lang/String;
PLcom/android/server/pm/dex/PackageDexUsage$DexUseInfo;->getLoaderIsas()Ljava/util/Set;
PLcom/android/server/pm/dex/PackageDexUsage$DexUseInfo;->getOwnerUserId()I
PLcom/android/server/pm/dex/PackageDexUsage$DexUseInfo;->isUnknownClassLoaderContext()Z
PLcom/android/server/pm/dex/PackageDexUsage$DexUseInfo;->isUsedByOtherApps()Z
PLcom/android/server/pm/dex/PackageDexUsage$DexUseInfo;->isVariableClassLoaderContext()Z
PLcom/android/server/pm/dex/PackageDexUsage$DexUseInfo;->merge(Lcom/android/server/pm/dex/PackageDexUsage$DexUseInfo;)Z
PLcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;-><init>(Lcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;)V
PLcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;->clearCodePathUsedByOtherApps()Z
PLcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;->getDexUseInfoMap()Ljava/util/Map;
PLcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;->isUsedByOtherApps(Ljava/lang/String;)Z
PLcom/android/server/pm/dex/PackageDexUsage;->clearUsedByOtherApps(Ljava/lang/String;)Z
PLcom/android/server/pm/dex/PackageDexUsage;->clonePackageUseInfoMap()Ljava/util/Map;
PLcom/android/server/pm/dex/PackageDexUsage;->getAllPackagesWithSecondaryDexFiles()Ljava/util/Set;
PLcom/android/server/pm/dex/PackageDexUsage;->getPackageUseInfo(Ljava/lang/String;)Lcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;
PLcom/android/server/pm/dex/PackageDexUsage;->maybeWriteAsync()V
PLcom/android/server/pm/dex/PackageDexUsage;->removeDexFile(Ljava/lang/String;Ljava/lang/String;I)Z
PLcom/android/server/pm/dex/PackageDexUsage;->write(Ljava/io/Writer;)V
PLcom/android/server/pm/dex/PackageDexUsage;->writeInternal(Ljava/lang/Object;)V
PLcom/android/server/pm/dex/PackageDexUsage;->writeInternal(Ljava/lang/Void;)V
PLcom/android/server/pm/dex/PackageDynamicCodeLoading$PackageDynamicCode;-><init>(Lcom/android/server/pm/dex/PackageDynamicCodeLoading$PackageDynamicCode;)V
PLcom/android/server/pm/dex/PackageDynamicCodeLoading;->escape(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/pm/dex/PackageDynamicCodeLoading;->getAllPackagesWithDynamicCodeLoading()Ljava/util/Set;
PLcom/android/server/pm/dex/PackageDynamicCodeLoading;->getPackageDynamicCodeInfo(Ljava/lang/String;)Lcom/android/server/pm/dex/PackageDynamicCodeLoading$PackageDynamicCode;
PLcom/android/server/pm/dex/PackageDynamicCodeLoading;->removeFile(Ljava/lang/String;Ljava/lang/String;I)Z
PLcom/android/server/pm/dex/PackageDynamicCodeLoading;->write(Ljava/io/OutputStream;)V
PLcom/android/server/pm/dex/PackageDynamicCodeLoading;->write(Ljava/io/OutputStream;Ljava/util/Map;)V
PLcom/android/server/pm/dex/PackageDynamicCodeLoading;->writeInternal(Ljava/lang/Object;)V
PLcom/android/server/pm/dex/PackageDynamicCodeLoading;->writeInternal(Ljava/lang/Void;)V
PLcom/android/server/pm/permission/-$$Lambda$DefaultPermissionGrantPolicy$SHfHTWKpfBf_vZtWArm-FlNBI8k;-><init>()V
PLcom/android/server/pm/permission/-$$Lambda$DefaultPermissionGrantPolicy$SHfHTWKpfBf_vZtWArm-FlNBI8k;->apply(I)Ljava/lang/Object;
PLcom/android/server/pm/permission/-$$Lambda$js2BSmz1ucAEj8fgl3jw5trxIjw;->onGetRuntimePermissionsBackup([B)V
PLcom/android/server/pm/permission/BasePermission;->addToTree(ILandroid/content/pm/PermissionInfo;Lcom/android/server/pm/permission/BasePermission;)Z
PLcom/android/server/pm/permission/BasePermission;->comparePermissionInfos(Landroid/content/pm/PermissionInfo;Landroid/content/pm/PermissionInfo;)Z
PLcom/android/server/pm/permission/BasePermission;->enforcePermissionTree(Ljava/util/Collection;Ljava/lang/String;I)Lcom/android/server/pm/permission/BasePermission;
PLcom/android/server/pm/permission/BasePermission;->getSourcePackageName()Ljava/lang/String;
PLcom/android/server/pm/permission/BasePermission;->getSourcePackageSetting()Lcom/android/server/pm/PackageSettingBase;
PLcom/android/server/pm/permission/BasePermission;->isRuntime()Z
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->doesPackageSupportRuntimePermissions(Landroid/content/pm/PackageInfo;)Z
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->getBackgroundPermission(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->getDefaultProviderAuthorityPackage(Ljava/lang/String;I)Ljava/lang/String;
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->getDefaultSystemHandlerActivityPackage(Landroid/content/Intent;I)Ljava/lang/String;
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->getDefaultSystemHandlerActivityPackage(Ljava/lang/String;I)Ljava/lang/String;
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->getDefaultSystemHandlerActivityPackageForCategory(Ljava/lang/String;I)Ljava/lang/String;
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->getDefaultSystemHandlerServicePackage(Landroid/content/Intent;I)Ljava/lang/String;
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->getDefaultSystemHandlerServicePackage(Ljava/lang/String;I)Ljava/lang/String;
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->getHeadlessSyncAdapterPackages([Ljava/lang/String;I)Ljava/util/ArrayList;
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->getKnownPackage(II)Ljava/lang/String;
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->getPackageInfo(Ljava/lang/String;)Landroid/content/pm/PackageInfo;
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->grantDefaultPermissionExceptions(I)V
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->grantDefaultPermissionsToDefaultSmsApp(Ljava/lang/String;I)V
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->grantDefaultPermissionsToDefaultSystemDialerApp(Ljava/lang/String;I)V
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->grantDefaultPermissionsToDefaultSystemSmsApp(Ljava/lang/String;I)V
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->grantDefaultSystemHandlerPermissions(I)V
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->grantPermissionToEachSystemPackage(Ljava/util/ArrayList;I[Ljava/util/Set;)V
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->grantPermissionsToPackage(Ljava/lang/String;IZ[Ljava/util/Set;)V
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->grantPermissionsToSysComponentsAndPrivApps(I)V
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->grantPermissionsToSystemPackage(Ljava/lang/String;I[Ljava/util/Set;)V
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->grantRuntimePermissions(Landroid/content/pm/PackageInfo;Ljava/util/Set;ZZI)V
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->grantRuntimePermissionsForSystemPackage(ILandroid/content/pm/PackageInfo;)V
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->grantSystemFixedPermissionsToSystemPackage(Ljava/lang/String;I[Ljava/util/Set;)V
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->isPermissionDangerous(Ljava/lang/String;)Z
PLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->isSystemPackage(Ljava/lang/String;)Z
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->addDynamicPermission(Landroid/content/pm/PermissionInfo;ZILcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)Z
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->getAllPermissionGroups(II)Ljava/util/List;
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->getAppOpPermissionPackages(Ljava/lang/String;)[Ljava/lang/String;
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->getPermissionGroupInfo(Ljava/lang/String;II)Landroid/content/pm/PermissionGroupInfo;
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->getPermissionInfoByGroup(Ljava/lang/String;II)Ljava/util/List;
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->getPermissionTEMP(Ljava/lang/String;)Lcom/android/server/pm/permission/BasePermission;
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->grantRequestedRuntimePermissions(Landroid/content/pm/PackageParser$Package;[I[Ljava/lang/String;ILcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->removeAllPermissions(Landroid/content/pm/PackageParser$Package;Z)V
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->revokeRuntimePermission(Ljava/lang/String;Ljava/lang/String;ZIILcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->revokeRuntimePermissionsIfGroupChanged(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;Ljava/util/ArrayList;Lcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->updatePermissionFlags(Ljava/lang/String;Ljava/lang/String;IIIILcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->updatePermissions(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;ZLjava/util/Collection;Lcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->addDynamicPermission(Landroid/content/pm/PermissionInfo;ZILcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)Z
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->backupRuntimePermissions(Landroid/os/UserHandle;)[B
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->getPermissionGroupInfo(Ljava/lang/String;II)Landroid/content/pm/PermissionGroupInfo;
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->removeAllPermissions(Landroid/content/pm/PackageParser$Package;Z)V
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->revokeRuntimePermission(Ljava/lang/String;Ljava/lang/String;ZIILcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->revokeRuntimePermissionsIfGroupChanged(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;Ljava/util/ArrayList;Lcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->updatePermissionFlags(Ljava/lang/String;Ljava/lang/String;IIIILcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->updatePermissions(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;ZLjava/util/Collection;Lcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService;->addDynamicPermission(Landroid/content/pm/PermissionInfo;ILcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)Z
PLcom/android/server/pm/permission/PermissionManagerService;->addDynamicPermission(Landroid/content/pm/PermissionInfo;ILcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)Z
PLcom/android/server/pm/permission/PermissionManagerService;->backupRuntimePermissions(Landroid/os/UserHandle;)[B
PLcom/android/server/pm/permission/PermissionManagerService;->getAppOpPermissionPackages(Ljava/lang/String;)[Ljava/lang/String;
PLcom/android/server/pm/permission/PermissionManagerService;->getBackgroundPermissions()Landroid/util/ArrayMap;
PLcom/android/server/pm/permission/PermissionManagerService;->getPermission(Ljava/lang/String;)Lcom/android/server/pm/permission/BasePermission;
PLcom/android/server/pm/permission/PermissionManagerService;->getPermissionGroupInfo(Ljava/lang/String;II)Landroid/content/pm/PermissionGroupInfo;
PLcom/android/server/pm/permission/PermissionManagerService;->grantRequestedRuntimePermissionsForUser(Landroid/content/pm/PackageParser$Package;I[Ljava/lang/String;ILcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService;->hasPermission(Landroid/content/pm/PackageParser$Package;Ljava/lang/String;)Z
PLcom/android/server/pm/permission/PermissionManagerService;->removeAllPermissions(Landroid/content/pm/PackageParser$Package;Z)V
PLcom/android/server/pm/permission/PermissionManagerService;->revokeRuntimePermission(Ljava/lang/String;Ljava/lang/String;ZIILcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService;->revokeRuntimePermission(Ljava/lang/String;Ljava/lang/String;ZIILcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService;->revokeRuntimePermissionsIfGroupChanged(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;Ljava/util/ArrayList;Lcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService;->revokeRuntimePermissionsIfGroupChanged(Landroid/content/pm/PackageParser$Package;Landroid/content/pm/PackageParser$Package;Ljava/util/ArrayList;Lcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService;->revokeUnusedSharedUserPermissionsLocked(Lcom/android/server/pm/SharedUserSetting;[I)[I
PLcom/android/server/pm/permission/PermissionManagerService;->updatePermissionFlags(Ljava/lang/String;Ljava/lang/String;IIIILcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService;->updatePermissionFlags(Ljava/lang/String;Ljava/lang/String;IIIILcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService;->updatePermissions(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;ZLjava/util/Collection;Lcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionManagerService;->updatePermissions(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;ZLjava/util/Collection;Lcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
PLcom/android/server/pm/permission/PermissionSettings;->enforcePermissionTree(Ljava/lang/String;I)Lcom/android/server/pm/permission/BasePermission;
PLcom/android/server/pm/permission/PermissionSettings;->isPermissionAppOp(Ljava/lang/String;)Z
PLcom/android/server/pm/permission/PermissionSettings;->removePermissionLocked(Ljava/lang/String;)V
PLcom/android/server/pm/permission/PermissionsState;-><init>(Lcom/android/server/pm/permission/PermissionsState;)V
PLcom/android/server/pm/permission/PermissionsState;->getInstallPermissionState(Ljava/lang/String;)Lcom/android/server/pm/permission/PermissionsState$PermissionState;
PLcom/android/server/pm/permission/PermissionsState;->reset()V
PLcom/android/server/policy/-$$Lambda$oXa0y3A-00RiQs6-KTPBgpkGtgw;->run()V
PLcom/android/server/policy/GlobalActions;-><init>(Landroid/content/Context;Lcom/android/server/policy/WindowManagerPolicy$WindowManagerFuncs;)V
PLcom/android/server/policy/GlobalActions;->onGlobalActionsAvailableChanged(Z)V
PLcom/android/server/policy/GlobalActions;->onGlobalActionsDismissed()V
PLcom/android/server/policy/GlobalActions;->onGlobalActionsShown()V
PLcom/android/server/policy/GlobalActions;->showDialog(ZZ)V
PLcom/android/server/policy/GlobalKeyManager;->handleGlobalKey(Landroid/content/Context;ILandroid/view/KeyEvent;)Z
PLcom/android/server/policy/IconUtilities;->createIconBitmap(Landroid/graphics/drawable/Drawable;)Landroid/graphics/Bitmap;
PLcom/android/server/policy/LogDecelerateInterpolator;->getInterpolation(F)F
PLcom/android/server/policy/PhoneWindowManager$10;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/policy/PhoneWindowManager$11;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/policy/PhoneWindowManager$1;->run()V
PLcom/android/server/policy/PhoneWindowManager$2;->onDrawn()V
PLcom/android/server/policy/PhoneWindowManager$7;->onAppTransitionCancelledLocked(I)V
PLcom/android/server/policy/PhoneWindowManager$DisplayHomeButtonHandler;-><init>(Lcom/android/server/policy/PhoneWindowManager;I)V
PLcom/android/server/policy/PhoneWindowManager$DisplayHomeButtonHandler;->handleHomeButton(Lcom/android/server/policy/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;)I
PLcom/android/server/policy/PhoneWindowManager$PolicyHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/policy/PhoneWindowManager$ScreenLockTimeout;->run()V
PLcom/android/server/policy/PhoneWindowManager$ScreenshotRunnable;->run()V
PLcom/android/server/policy/PhoneWindowManager$ScreenshotRunnable;->setScreenshotType(I)V
PLcom/android/server/policy/PhoneWindowManager;->addSplashScreen(Landroid/os/IBinder;Ljava/lang/String;ILandroid/content/res/CompatibilityInfo;Ljava/lang/CharSequence;IIIILandroid/content/res/Configuration;I)Lcom/android/server/policy/WindowManagerPolicy$StartingSurface;
PLcom/android/server/policy/PhoneWindowManager;->addSplashscreenContent(Lcom/android/internal/policy/PhoneWindow;Landroid/content/Context;)V
PLcom/android/server/policy/PhoneWindowManager;->applyLidSwitchState()V
PLcom/android/server/policy/PhoneWindowManager;->awakenDreams()V
PLcom/android/server/policy/PhoneWindowManager;->createHiddenByKeyguardExit(ZZ)Landroid/view/animation/Animation;
PLcom/android/server/policy/PhoneWindowManager;->createHomeDockIntent()Landroid/content/Intent;
PLcom/android/server/policy/PhoneWindowManager;->createKeyguardWallpaperExit(Z)Landroid/view/animation/Animation;
PLcom/android/server/policy/PhoneWindowManager;->dismissKeyguardLw(Lcom/android/internal/policy/IKeyguardDismissCallback;Ljava/lang/CharSequence;)V
PLcom/android/server/policy/PhoneWindowManager;->dispatchUnhandledKey(Lcom/android/server/policy/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
PLcom/android/server/policy/PhoneWindowManager;->enableKeyguard(Z)V
PLcom/android/server/policy/PhoneWindowManager;->enableScreenAfterBoot()V
PLcom/android/server/policy/PhoneWindowManager;->finishKeyguardDrawn()V
PLcom/android/server/policy/PhoneWindowManager;->finishScreenTurningOn()V
PLcom/android/server/policy/PhoneWindowManager;->finishedGoingToSleep(I)V
PLcom/android/server/policy/PhoneWindowManager;->finishedWakingUp(I)V
PLcom/android/server/policy/PhoneWindowManager;->getAccessibilityShortcutTimeout()J
PLcom/android/server/policy/PhoneWindowManager;->getAudioManagerInternal()Landroid/media/AudioManagerInternal;
PLcom/android/server/policy/PhoneWindowManager;->getDisplayContext(Landroid/content/Context;I)Landroid/content/Context;
PLcom/android/server/policy/PhoneWindowManager;->getHdmiControl()Lcom/android/server/policy/PhoneWindowManager$HdmiControl;
PLcom/android/server/policy/PhoneWindowManager;->getScreenshotChordLongPressDelay()J
PLcom/android/server/policy/PhoneWindowManager;->getStatusBarService()Lcom/android/internal/statusbar/IStatusBarService;
PLcom/android/server/policy/PhoneWindowManager;->getTelecommService()Landroid/telecom/TelecomManager;
PLcom/android/server/policy/PhoneWindowManager;->getVibrationEffect(I)Landroid/os/VibrationEffect;
PLcom/android/server/policy/PhoneWindowManager;->handleRingerChordGesture()V
PLcom/android/server/policy/PhoneWindowManager;->inKeyguardRestrictedKeyInputMode()Z
PLcom/android/server/policy/PhoneWindowManager;->interceptAccessibilityShortcutChord()V
PLcom/android/server/policy/PhoneWindowManager;->interceptBackKeyDown()V
PLcom/android/server/policy/PhoneWindowManager;->interceptBackKeyUp(Landroid/view/KeyEvent;)Z
PLcom/android/server/policy/PhoneWindowManager;->interceptKeyBeforeDispatching(Lcom/android/server/policy/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
PLcom/android/server/policy/PhoneWindowManager;->interceptKeyBeforeDispatchingInner(Lcom/android/server/policy/WindowManagerPolicy$WindowState;Landroid/view/KeyEvent;I)J
PLcom/android/server/policy/PhoneWindowManager;->interceptKeyBeforeQueueing(Landroid/view/KeyEvent;I)I
PLcom/android/server/policy/PhoneWindowManager;->interceptMotionBeforeQueueingNonInteractive(IJI)I
PLcom/android/server/policy/PhoneWindowManager;->interceptMotionBeforeQueueingNonInteractive(JI)I
PLcom/android/server/policy/PhoneWindowManager;->interceptPowerKeyDown(Landroid/view/KeyEvent;Z)V
PLcom/android/server/policy/PhoneWindowManager;->interceptPowerKeyUp(Landroid/view/KeyEvent;ZZ)V
PLcom/android/server/policy/PhoneWindowManager;->interceptRingerToggleChord()V
PLcom/android/server/policy/PhoneWindowManager;->interceptScreenshotChord()V
PLcom/android/server/policy/PhoneWindowManager;->interceptSystemNavigationKey(Landroid/view/KeyEvent;)V
PLcom/android/server/policy/PhoneWindowManager;->isDeviceProvisioned()Z
PLcom/android/server/policy/PhoneWindowManager;->isKeyguardDrawnLw()Z
PLcom/android/server/policy/PhoneWindowManager;->isKeyguardHostWindow(Landroid/view/WindowManager$LayoutParams;)Z
PLcom/android/server/policy/PhoneWindowManager;->isKeyguardSecure(I)Z
PLcom/android/server/policy/PhoneWindowManager;->isKeyguardTrustedLw()Z
PLcom/android/server/policy/PhoneWindowManager;->isTheaterModeEnabled()Z
PLcom/android/server/policy/PhoneWindowManager;->isUserSetupComplete()Z
PLcom/android/server/policy/PhoneWindowManager;->isValidGlobalKey(I)Z
PLcom/android/server/policy/PhoneWindowManager;->keepScreenOnStartedLw()V
PLcom/android/server/policy/PhoneWindowManager;->keepScreenOnStoppedLw()V
PLcom/android/server/policy/PhoneWindowManager;->launchHomeFromHotKey(I)V
PLcom/android/server/policy/PhoneWindowManager;->launchHomeFromHotKey(IZZ)V
PLcom/android/server/policy/PhoneWindowManager;->okToAnimate()Z
PLcom/android/server/policy/PhoneWindowManager;->onKeyguardOccludedChangedLw(Z)V
PLcom/android/server/policy/PhoneWindowManager;->performHapticFeedback(ILjava/lang/String;IZLjava/lang/String;)Z
PLcom/android/server/policy/PhoneWindowManager;->performHapticFeedbackLw(Lcom/android/server/policy/WindowManagerPolicy$WindowState;IZLjava/lang/String;)Z
PLcom/android/server/policy/PhoneWindowManager;->powerLongPress()V
PLcom/android/server/policy/PhoneWindowManager;->powerPress(JZI)V
PLcom/android/server/policy/PhoneWindowManager;->screenTurnedOff()V
PLcom/android/server/policy/PhoneWindowManager;->screenTurningOff(Lcom/android/server/policy/WindowManagerPolicy$ScreenOffListener;)V
PLcom/android/server/policy/PhoneWindowManager;->sendCloseSystemWindows(Ljava/lang/String;)V
PLcom/android/server/policy/PhoneWindowManager;->sendSystemKeyToStatusBar(I)V
PLcom/android/server/policy/PhoneWindowManager;->setDismissImeOnBackKeyPressed(Z)V
PLcom/android/server/policy/PhoneWindowManager;->setNavBarVirtualKeyHapticFeedbackEnabledLw(Z)V
PLcom/android/server/policy/PhoneWindowManager;->setPipVisibilityLw(Z)V
PLcom/android/server/policy/PhoneWindowManager;->shouldDispatchInputWhenNonInteractive(II)Z
PLcom/android/server/policy/PhoneWindowManager;->shouldDispatchInputWhenNonInteractive(Landroid/view/KeyEvent;)Z
PLcom/android/server/policy/PhoneWindowManager;->showGlobalActionsInternal()V
PLcom/android/server/policy/PhoneWindowManager;->startActivityAsUser(Landroid/content/Intent;Landroid/os/Bundle;Landroid/os/UserHandle;)V
PLcom/android/server/policy/PhoneWindowManager;->startDockOrHome(IZZ)V
PLcom/android/server/policy/PhoneWindowManager;->startKeyguardExitAnimation(JJ)V
PLcom/android/server/policy/PhoneWindowManager;->startedGoingToSleep(I)V
PLcom/android/server/policy/PhoneWindowManager;->userActivity()V
PLcom/android/server/policy/SplashScreenSurface;-><init>(Landroid/view/View;Landroid/os/IBinder;)V
PLcom/android/server/policy/SplashScreenSurface;->remove()V
PLcom/android/server/policy/WindowManagerPolicy;->getSubWindowLayerFromTypeLw(I)I
PLcom/android/server/policy/WindowOrientationListener$OrientationSensorJudge$1;->run()V
PLcom/android/server/policy/WindowOrientationListener$OrientationSensorJudge;->getProposedRotationLocked()I
PLcom/android/server/policy/WindowOrientationListener$OrientationSensorJudge;->onAccuracyChanged(Landroid/hardware/Sensor;I)V
PLcom/android/server/policy/WindowOrientationListener$OrientationSensorJudge;->onSensorChanged(Landroid/hardware/SensorEvent;)V
PLcom/android/server/policy/WindowOrientationListener$OrientationSensorJudge;->onTouchEndLocked(J)V
PLcom/android/server/policy/WindowOrientationListener$OrientationSensorJudge;->onTouchStartLocked()V
PLcom/android/server/policy/WindowOrientationListener$OrientationSensorJudge;->resetLocked(Z)V
PLcom/android/server/policy/WindowOrientationListener$OrientationSensorJudge;->scheduleRotationEvaluationIfNecessaryLocked(J)V
PLcom/android/server/policy/WindowOrientationListener;->disable()V
PLcom/android/server/policy/WindowOrientationListener;->enable(Z)V
PLcom/android/server/policy/WindowOrientationListener;->getHandler()Landroid/os/Handler;
PLcom/android/server/policy/WindowOrientationListener;->getProposedRotation()I
PLcom/android/server/policy/WindowOrientationListener;->onTouchEnd()V
PLcom/android/server/policy/WindowOrientationListener;->onTouchStart()V
PLcom/android/server/policy/keyguard/KeyguardServiceDelegate$KeyguardShowDelegate;->onDrawn()V
PLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->doKeyguardTimeout(Landroid/os/Bundle;)V
PLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->isInputRestricted()Z
PLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->isSecure(I)Z
PLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->isTrusted()Z
PLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->onDreamingStarted()V
PLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->onDreamingStopped()V
PLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->onFinishedGoingToSleep(IZ)V
PLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->onFinishedWakingUp()V
PLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->onScreenTurnedOff()V
PLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->onScreenTurningOff()V
PLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->onStartedGoingToSleep(I)V
PLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->setKeyguardEnabled(Z)V
PLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->startKeyguardExitAnimation(JJ)V
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->doKeyguardTimeout(Landroid/os/Bundle;)V
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->hasLockscreenWallpaper()Z
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->isInputRestricted()Z
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->isSecure(I)Z
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->isTrusted()Z
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->onDreamingStarted()V
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->onDreamingStopped()V
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->onFinishedGoingToSleep(IZ)V
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->onFinishedWakingUp()V
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->onScreenTurnedOff()V
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->onScreenTurningOff()V
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->onStartedGoingToSleep(I)V
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->setKeyguardEnabled(Z)V
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->setOccluded(ZZ)V
PLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->startKeyguardExitAnimation(JJ)V
PLcom/android/server/policy/keyguard/KeyguardStateMonitor;->hasLockscreenWallpaper()Z
PLcom/android/server/policy/keyguard/KeyguardStateMonitor;->isInputRestricted()Z
PLcom/android/server/policy/keyguard/KeyguardStateMonitor;->isSecure(I)Z
PLcom/android/server/policy/keyguard/KeyguardStateMonitor;->isTrusted()Z
PLcom/android/server/policy/role/LegacyRoleResolutionPolicy;->getRoleHolders(Ljava/lang/String;I)Ljava/util/List;
PLcom/android/server/power/-$$Lambda$ThermalManagerService$9JFHCKCwrnUIYoXDsqNamhlY5VU;->onValues(Landroid/os/Temperature;)V
PLcom/android/server/power/AttentionDetector;->onUserActivity(JI)I
PLcom/android/server/power/AttentionDetector;->onWakefulnessChangeStarted(I)V
PLcom/android/server/power/Notifier$1;->run()V
PLcom/android/server/power/Notifier$2;->run()V
PLcom/android/server/power/Notifier$3;->run()V
PLcom/android/server/power/Notifier$4;->run()V
PLcom/android/server/power/Notifier$5;->run()V
PLcom/android/server/power/Notifier$7;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/power/Notifier$8;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/power/Notifier$NotifierHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/power/Notifier;->handleEarlyInteractiveChange()V
PLcom/android/server/power/Notifier;->handleLateInteractiveChange()V
PLcom/android/server/power/Notifier;->isChargingFeedbackEnabled(I)Z
PLcom/android/server/power/Notifier;->onLongPartialWakeLockFinish(Ljava/lang/String;ILandroid/os/WorkSource;Ljava/lang/String;)V
PLcom/android/server/power/Notifier;->onLongPartialWakeLockStart(Ljava/lang/String;ILandroid/os/WorkSource;Ljava/lang/String;)V
PLcom/android/server/power/Notifier;->onUserActivity(II)V
PLcom/android/server/power/Notifier;->onWakeUp(ILjava/lang/String;ILjava/lang/String;I)V
PLcom/android/server/power/Notifier;->onWakefulnessChangeFinished()V
PLcom/android/server/power/Notifier;->onWakefulnessChangeStarted(IIJ)V
PLcom/android/server/power/Notifier;->onWiredChargingStarted(I)V
PLcom/android/server/power/Notifier;->onWirelessChargingStarted(II)V
PLcom/android/server/power/Notifier;->playChargingStartedFeedback(I)V
PLcom/android/server/power/Notifier;->playChargingStartedVibration(I)V
PLcom/android/server/power/Notifier;->sendGoToSleepBroadcast()V
PLcom/android/server/power/Notifier;->sendNextBroadcast()V
PLcom/android/server/power/Notifier;->sendUserActivity()V
PLcom/android/server/power/Notifier;->sendWakeUpBroadcast()V
PLcom/android/server/power/Notifier;->updatePendingBroadcastLocked()V
PLcom/android/server/power/PowerManagerService$1;->onProximityNegative()V
PLcom/android/server/power/PowerManagerService$1;->onProximityPositive()V
PLcom/android/server/power/PowerManagerService$BinderService;->goToSleep(JII)V
PLcom/android/server/power/PowerManagerService$BinderService;->updateWakeLockUids(Landroid/os/IBinder;[I)V
PLcom/android/server/power/PowerManagerService$BinderService;->wakeUp(JILjava/lang/String;Ljava/lang/String;)V
PLcom/android/server/power/PowerManagerService$DreamReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/power/PowerManagerService$ForegroundProfileObserver;->onForegroundProfileSwitch(I)V
PLcom/android/server/power/PowerManagerService$LocalService;->setDeviceIdleMode(Z)Z
PLcom/android/server/power/PowerManagerService$LocalService;->setDeviceIdleTempWhitelist([I)V
PLcom/android/server/power/PowerManagerService$LocalService;->setDozeOverrideFromDreamManager(II)V
PLcom/android/server/power/PowerManagerService$LocalService;->setLightDeviceIdleMode(Z)Z
PLcom/android/server/power/PowerManagerService$WakeLock;->binderDied()V
PLcom/android/server/power/PowerManagerService;->canDreamLocked()Z
PLcom/android/server/power/PowerManagerService;->checkForLongWakeLocks()V
PLcom/android/server/power/PowerManagerService;->getFirstNonEmptyWorkChain(Landroid/os/WorkSource;)Landroid/os/WorkSource$WorkChain;
PLcom/android/server/power/PowerManagerService;->goToSleepInternal(JIII)V
PLcom/android/server/power/PowerManagerService;->goToSleepNoUpdateLocked(JIII)Z
PLcom/android/server/power/PowerManagerService;->handleUserActivityTimeout()V
PLcom/android/server/power/PowerManagerService;->handleWakeLockDeath(Lcom/android/server/power/PowerManagerService$WakeLock;)V
PLcom/android/server/power/PowerManagerService;->reallyGoToSleepNoUpdateLocked(JI)Z
PLcom/android/server/power/PowerManagerService;->setDeviceIdleModeInternal(Z)Z
PLcom/android/server/power/PowerManagerService;->setDeviceIdleTempWhitelistInternal([I)V
PLcom/android/server/power/PowerManagerService;->setDozeOverrideFromDreamManagerInternal(II)V
PLcom/android/server/power/PowerManagerService;->setLightDeviceIdleModeInternal(Z)Z
PLcom/android/server/power/PowerManagerService;->updateWakeLockDisabledStatesLocked()V
PLcom/android/server/power/PowerManagerService;->wakeUpInternal(JILjava/lang/String;ILjava/lang/String;I)V
PLcom/android/server/power/ThermalManagerService$1;->getCurrentTemperatures()Ljava/util/List;
PLcom/android/server/power/ThermalManagerService$ThermalHal20Wrapper$1;->notifyThrottling(Landroid/hardware/thermal/V2_0/Temperature;)V
PLcom/android/server/power/ThermalManagerService;->onTemperatureChangedCallback(Landroid/os/Temperature;)V
PLcom/android/server/power/WirelessChargerDetector$1;->onSensorChanged(Landroid/hardware/SensorEvent;)V
PLcom/android/server/power/WirelessChargerDetector$2;->run()V
PLcom/android/server/power/WirelessChargerDetector;->finishDetectionLocked()V
PLcom/android/server/power/WirelessChargerDetector;->hasMoved(FFFFFF)Z
PLcom/android/server/power/WirelessChargerDetector;->processSampleLocked(FFF)V
PLcom/android/server/power/WirelessChargerDetector;->startDetectionLocked()V
PLcom/android/server/power/batterysaver/-$$Lambda$BatterySaverPolicy$rfw31Sb8JX1OVD2rGHGtCXyfop8;->onAccessibilityStateChanged(Z)V
PLcom/android/server/power/batterysaver/-$$Lambda$BatterySaverStateMachine$fEidyt_9TXlXBpF6D2lhOOrfOC4;->run()V
PLcom/android/server/power/batterysaver/-$$Lambda$FileUpdater$NUmipjKCJwbgmFbIcGS3uaz3QFk;->run()V
PLcom/android/server/power/batterysaver/BatterySaverController$MyHandler;->postStateChanged(ZI)V
PLcom/android/server/power/batterysaver/BatterySaverController;->enableBatterySaver(ZI)V
PLcom/android/server/power/batterysaver/BatterySaverController;->handleBatterySaverStateChanged(ZI)V
PLcom/android/server/power/batterysaver/BatterySaverController;->isFullEnabled()Z
PLcom/android/server/power/batterysaver/BatterySaverController;->isInteractive()Z
PLcom/android/server/power/batterysaver/BatterySaverController;->resetAdaptivePolicyLocked(I)Z
PLcom/android/server/power/batterysaver/BatterySaverController;->setAdaptivePolicyEnabledLocked(ZI)Z
PLcom/android/server/power/batterysaver/BatterySaverLocationPlugin;->onBatterySaverChanged(Lcom/android/server/power/batterysaver/BatterySaverController;)V
PLcom/android/server/power/batterysaver/BatterySaverPolicy$Policy;->equals(Ljava/lang/Object;)Z
PLcom/android/server/power/batterysaver/BatterySaverPolicy;->getFileValues(Z)Landroid/util/ArrayMap;
PLcom/android/server/power/batterysaver/BatterySaverPolicy;->isLaunchBoostDisabled()Z
PLcom/android/server/power/batterysaver/BatterySaverPolicy;->lambda$systemReady$0$BatterySaverPolicy(Z)V
PLcom/android/server/power/batterysaver/BatterySaverPolicy;->resetAdaptivePolicyLocked()Z
PLcom/android/server/power/batterysaver/BatterySaverPolicy;->setAdaptivePolicyLocked(Lcom/android/server/power/batterysaver/BatterySaverPolicy$Policy;)Z
PLcom/android/server/power/batterysaver/BatterySaverPolicy;->setPolicyLevel(I)Z
PLcom/android/server/power/batterysaver/BatterySaverPolicy;->toEventLogString()Ljava/lang/String;
PLcom/android/server/power/batterysaver/BatterySaverStateMachine$1;->onChange(Z)V
PLcom/android/server/power/batterysaver/BatterySaverStateMachine;->enableBatterySaverLocked(ZZILjava/lang/String;)V
PLcom/android/server/power/batterysaver/BatterySaverStateMachine;->getGlobalSetting(Ljava/lang/String;I)I
PLcom/android/server/power/batterysaver/BatterySaverStateMachine;->lambda$onBootCompleted$0$BatterySaverStateMachine()V
PLcom/android/server/power/batterysaver/BatterySaverStateMachine;->lambda$onBootCompleted$0(Lcom/android/server/power/batterysaver/BatterySaverStateMachine;)V
PLcom/android/server/power/batterysaver/BatterySaverStateMachine;->onBootCompleted()V
PLcom/android/server/power/batterysaver/BatterySaverStateMachine;->putGlobalSetting(Ljava/lang/String;I)V
PLcom/android/server/power/batterysaver/BatterySaverStateMachine;->refreshSettingsLocked()V
PLcom/android/server/power/batterysaver/BatterySaverStateMachine;->runOnBgThread(Ljava/lang/Runnable;)V
PLcom/android/server/power/batterysaver/BatterySaverStateMachine;->setSettingsLocked(ZZIZIIZI)V
PLcom/android/server/power/batterysaver/BatterySavingStats;->startCharging()V
PLcom/android/server/power/batterysaver/FileUpdater;->handleWriteOnHandler()V
PLcom/android/server/power/batterysaver/FileUpdater;->lambda$new$0$FileUpdater()V
PLcom/android/server/power/batterysaver/FileUpdater;->restoreDefault()V
PLcom/android/server/power/batterysaver/FileUpdater;->writeFiles(Landroid/util/ArrayMap;)V
PLcom/android/server/print/-$$Lambda$RemotePrintService$tI07K2u4Z5L72sd1hvSEunGclrg;-><init>()V
PLcom/android/server/print/-$$Lambda$RemotePrintService$tI07K2u4Z5L72sd1hvSEunGclrg;->accept(Ljava/lang/Object;)V
PLcom/android/server/print/-$$Lambda$UserState$LdWYUAKz4cbWqoxOD4oZ_ZslKdg;-><init>()V
PLcom/android/server/print/-$$Lambda$UserState$LdWYUAKz4cbWqoxOD4oZ_ZslKdg;->accept(Ljava/lang/Object;)V
PLcom/android/server/print/PrintManagerService$PrintManagerImpl$2;->hadPrintService(Lcom/android/server/print/UserState;Ljava/lang/String;)Z
PLcom/android/server/print/PrintManagerService$PrintManagerImpl$2;->hasPrintService(Ljava/lang/String;)Z
PLcom/android/server/print/PrintManagerService$PrintManagerImpl$2;->onPackageAdded(Ljava/lang/String;I)V
PLcom/android/server/print/PrintManagerService$PrintManagerImpl$2;->onPackageModified(Ljava/lang/String;)V
PLcom/android/server/print/PrintManagerService$PrintManagerImpl$3;->run()V
PLcom/android/server/print/PrintManagerService$PrintManagerImpl$4;->run()V
PLcom/android/server/print/PrintManagerService$PrintManagerImpl;->getOrCreateUserStateLocked(IZZ)Lcom/android/server/print/UserState;
PLcom/android/server/print/PrintManagerService;->onStopUser(I)V
PLcom/android/server/print/PrintManagerService;->onUnlockUser(I)V
PLcom/android/server/print/RemotePrintService;-><init>(Landroid/content/Context;Landroid/content/ComponentName;ILcom/android/server/print/RemotePrintSpooler;Lcom/android/server/print/RemotePrintService$PrintServiceCallbacks;)V
PLcom/android/server/print/RemotePrintService;->ensureUnbound()V
PLcom/android/server/print/RemotePrintService;->stopTrackingAllPrinters()V
PLcom/android/server/print/RemotePrintSpooler$MyServiceConnection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/print/RemotePrintSpooler$PrintSpoolerClient;->onAllPrintJobsHandled()V
PLcom/android/server/print/RemotePrintSpooler;-><init>(Landroid/content/Context;IZLcom/android/server/print/RemotePrintSpooler$PrintSpoolerCallbacks;)V
PLcom/android/server/print/RemotePrintSpooler;->bindLocked()V
PLcom/android/server/print/RemotePrintSpooler;->clearClientLocked()V
PLcom/android/server/print/RemotePrintSpooler;->destroy()V
PLcom/android/server/print/RemotePrintSpooler;->getRemoteInstanceLazy()Landroid/print/IPrintSpooler;
PLcom/android/server/print/RemotePrintSpooler;->increasePriority()V
PLcom/android/server/print/RemotePrintSpooler;->onAllPrintJobsHandled()V
PLcom/android/server/print/RemotePrintSpooler;->pruneApprovedPrintServices(Ljava/util/List;)V
PLcom/android/server/print/RemotePrintSpooler;->removeObsoletePrintJobs()V
PLcom/android/server/print/RemotePrintSpooler;->setClientLocked()V
PLcom/android/server/print/RemotePrintSpooler;->throwIfDestroyedLocked()V
PLcom/android/server/print/RemotePrintSpooler;->unbindLocked()V
PLcom/android/server/print/UserState;-><init>(Landroid/content/Context;ILjava/lang/Object;Z)V
PLcom/android/server/print/UserState;->destroyLocked()V
PLcom/android/server/print/UserState;->getInstalledComponents()Ljava/util/ArrayList;
PLcom/android/server/print/UserState;->getPrintServices(I)Ljava/util/List;
PLcom/android/server/print/UserState;->handleDispatchPrintServicesChanged()V
PLcom/android/server/print/UserState;->onConfigurationChanged()V
PLcom/android/server/print/UserState;->onConfigurationChangedLocked()V
PLcom/android/server/print/UserState;->prunePrintServices()V
PLcom/android/server/print/UserState;->readInstalledPrintServicesLocked()V
PLcom/android/server/print/UserState;->readPrintServicesFromSettingLocked(Ljava/lang/String;Ljava/util/Set;)V
PLcom/android/server/print/UserState;->updateIfNeededLocked()V
PLcom/android/server/print/UserState;->upgradePersistentStateIfNeeded()V
PLcom/android/server/restrictions/RestrictionsManagerService$RestrictionsManagerImpl;->getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;
PLcom/android/server/restrictions/RestrictionsManagerService$RestrictionsManagerImpl;->hasRestrictionsProvider()Z
PLcom/android/server/role/-$$Lambda$RemoteRoleControllerService$Connection$Call$CallbackDelegate$CVzmIkaLmJgs1i9DlvvzTRUP480;-><init>()V
PLcom/android/server/role/-$$Lambda$RemoteRoleControllerService$Connection$Call$CallbackDelegate$CVzmIkaLmJgs1i9DlvvzTRUP480;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/role/-$$Lambda$RemoteRoleControllerService$Connection$JT0tphPh3CS3yG7jQxEV-ehCZIw;->run()V
PLcom/android/server/role/-$$Lambda$RemoteRoleControllerService$wGrZc65FsK5pnjX7WAKn-2TkjbA;->execute(Landroid/rolecontrollerservice/IRoleControllerService;Landroid/app/role/IRoleManagerCallback;)V
PLcom/android/server/role/-$$Lambda$RoleManagerService$fFhedpUuSpSjKJZ9TlWFGJ-_xeo;-><init>()V
PLcom/android/server/role/-$$Lambda$RoleManagerService$fFhedpUuSpSjKJZ9TlWFGJ-_xeo;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/role/-$$Lambda$RoleUserState$e8W_Zaq_FyocW_DX1qcbN0ld0co;-><init>()V
PLcom/android/server/role/-$$Lambda$RoleUserState$e8W_Zaq_FyocW_DX1qcbN0ld0co;->accept(Ljava/lang/Object;)V
PLcom/android/server/role/RemoteRoleControllerService$Connection$Call$CallbackDelegate;->onSuccess()V
PLcom/android/server/role/RemoteRoleControllerService$Connection$Call;->notifyCallback(Z)V
PLcom/android/server/role/RemoteRoleControllerService$Connection;->onBindingDied(Landroid/content/ComponentName;)V
PLcom/android/server/role/RemoteRoleControllerService;->onClearRoleHolders(Ljava/lang/String;ILandroid/app/role/IRoleManagerCallback;)V
PLcom/android/server/role/RoleManagerService$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/role/RoleManagerService$4;->onSuccess()V
PLcom/android/server/role/RoleManagerService$DefaultBrowserProvider$1;->onSuccess()V
PLcom/android/server/role/RoleManagerService$DefaultBrowserProvider;->setDefaultBrowser(Ljava/lang/String;I)Z
PLcom/android/server/role/RoleManagerService$DefaultHomeProvider$1;->onSuccess()V
PLcom/android/server/role/RoleManagerService$DefaultHomeProvider;->setDefaultHomeAsync(Ljava/lang/String;I)V
PLcom/android/server/role/RoleManagerService$Stub;->addRoleHolderFromController(Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/role/RoleManagerService$Stub;->getHeldRolesFromController(Ljava/lang/String;)Ljava/util/List;
PLcom/android/server/role/RoleManagerService$Stub;->removeRoleHolderFromController(Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/role/RoleManagerService;->getListeners(I)Landroid/os/RemoteCallbackList;
PLcom/android/server/role/RoleManagerService;->notifyRoleHoldersChangedForListeners(Landroid/os/RemoteCallbackList;Ljava/lang/String;I)V
PLcom/android/server/role/RoleManagerService;->onRoleHoldersChanged(Ljava/lang/String;I)V
PLcom/android/server/role/RoleUserState;->addRoleHolder(Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/role/RoleUserState;->getHeldRoles(Ljava/lang/String;)Ljava/util/List;
PLcom/android/server/role/RoleUserState;->removeRoleHolder(Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/role/RoleUserState;->scheduleWriteFileLocked()V
PLcom/android/server/role/RoleUserState;->serializeRoles(Lorg/xmlpull/v1/XmlSerializer;ILjava/lang/String;Landroid/util/ArrayMap;)V
PLcom/android/server/role/RoleUserState;->setPackagesHash(Ljava/lang/String;)V
PLcom/android/server/role/RoleUserState;->snapshotRolesLocked()Landroid/util/ArrayMap;
PLcom/android/server/role/RoleUserState;->writeFile()V
PLcom/android/server/rollback/-$$Lambda$RollbackManagerServiceImpl$5VimxC3UlEV_IzyoBdYlrATzYd8;->run()V
PLcom/android/server/rollback/-$$Lambda$RollbackManagerServiceImpl$7mIH_4Cm4A-tqsIceQEQSUp2ycU;->run()V
PLcom/android/server/rollback/-$$Lambda$RollbackManagerServiceImpl$Ia4HWfDcXKuiMklIIxUfsk4MRKg;->run()V
PLcom/android/server/rollback/-$$Lambda$RollbackManagerServiceImpl$dWP3a0DA6Sn9vs01tikxWWbZIZs;->run()V
PLcom/android/server/rollback/-$$Lambda$RollbackManagerServiceImpl$mJNIXm_c6MQdH60jiRiYOGk2vQs;->run()V
PLcom/android/server/rollback/-$$Lambda$RollbackManagerServiceImpl$pS5jbfXLgvSVqxzjSkJaMnydaOY;->run()V
PLcom/android/server/rollback/AppDataRollbackHelper;->commitPendingBackupAndRestoreForUser(ILjava/util/ArrayList;Ljava/util/Map;Ljava/util/List;)V
PLcom/android/server/rollback/AppDataRollbackHelper;->commitPendingBackupAndRestoreForUser(ILjava/util/List;Ljava/util/List;)Ljava/util/List;
PLcom/android/server/rollback/AppDataRollbackHelper;->computePendingBackups(ILjava/util/Map;Ljava/util/List;)Ljava/util/List;
PLcom/android/server/rollback/AppDataRollbackHelper;->computePendingBackupsAndRestores(ILjava/util/ArrayList;Ljava/util/Map;Ljava/util/List;Ljava/util/List;)Ljava/util/List;
PLcom/android/server/rollback/AppDataRollbackHelper;->computePendingRestores(ILjava/util/Map;Ljava/util/List;)Ljava/util/List;
PLcom/android/server/rollback/AppDataRollbackHelper;->restoreAppData(Ljava/lang/String;Lcom/android/server/rollback/RollbackData;IIJLjava/lang/String;)Z
PLcom/android/server/rollback/RollbackManagerService;->onUnlockUser(I)V
PLcom/android/server/rollback/RollbackManagerServiceImpl$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/rollback/RollbackManagerServiceImpl$SessionCallback;->onActiveChanged(IZ)V
PLcom/android/server/rollback/RollbackManagerServiceImpl$SessionCallback;->onCreated(I)V
PLcom/android/server/rollback/RollbackManagerServiceImpl$SessionCallback;->onFinished(IZ)V
PLcom/android/server/rollback/RollbackManagerServiceImpl$SessionCallback;->onProgressChanged(IF)V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->completeEnableRollback(IZ)V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->getInstalledPackageVersion(Ljava/lang/String;)Landroid/content/pm/VersionedPackage;
PLcom/android/server/rollback/RollbackManagerServiceImpl;->getRollbackForPackage(Ljava/lang/String;)Lcom/android/server/rollback/RollbackData;
PLcom/android/server/rollback/RollbackManagerServiceImpl;->lambda$onBootCompleted$6$RollbackManagerServiceImpl()V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->lambda$onBootCompleted$6(Lcom/android/server/rollback/RollbackManagerServiceImpl;)V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->lambda$onBootCompleted$7$RollbackManagerServiceImpl()V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->lambda$onUnlockUser$5$RollbackManagerServiceImpl(I)V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->lambda$onUnlockUser$5(Lcom/android/server/rollback/RollbackManagerServiceImpl;I)V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->lambda$restoreUserData$8(Lcom/android/server/rollback/RollbackManagerServiceImpl;Ljava/lang/String;[IIJLjava/lang/String;I)V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->lambda$restoreUserData$9$RollbackManagerServiceImpl(Ljava/lang/String;[IIJLjava/lang/String;I)V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->lambda$scheduleExpiration$8$RollbackManagerServiceImpl()V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->onBootCompleted()V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->onPackageReplaced(Ljava/lang/String;)V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->onUnlockUser(I)V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->restoreUserData(Ljava/lang/String;[IIJLjava/lang/String;I)V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->restoreUserDataInternal(Ljava/lang/String;[IIJLjava/lang/String;I)V
PLcom/android/server/rollback/RollbackManagerServiceImpl;->updateRollbackLifetimeDurationInMillis()V
PLcom/android/server/rollback/RollbackStore;->saveRecentlyExecutedRollbacks(Ljava/util/List;)V
PLcom/android/server/search/SearchManagerService$Lifecycle$1;->run()V
PLcom/android/server/search/SearchManagerService$Lifecycle;->onCleanupUser(I)V
PLcom/android/server/search/SearchManagerService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/search/SearchManagerService$MyPackageMonitor;->onPackageModified(Ljava/lang/String;)V
PLcom/android/server/search/SearchManagerService;->getSearchableInfo(Landroid/content/ComponentName;)Landroid/app/SearchableInfo;
PLcom/android/server/search/SearchManagerService;->getSearchables(IZ)Lcom/android/server/search/Searchables;
PLcom/android/server/search/SearchManagerService;->onCleanupUser(I)V
PLcom/android/server/search/SearchManagerService;->onUnlockUser(I)V
PLcom/android/server/search/Searchables$1;-><init>()V
PLcom/android/server/search/Searchables;->findWebSearchActivity(Landroid/content/ComponentName;)Landroid/content/ComponentName;
PLcom/android/server/search/Searchables;->getDefaultGlobalSearchProvider(Ljava/util/List;)Landroid/content/ComponentName;
PLcom/android/server/search/Searchables;->getSearchableInfo(Landroid/content/ComponentName;)Landroid/app/SearchableInfo;
PLcom/android/server/search/Searchables;->queryIntentActivities(Landroid/content/Intent;I)Ljava/util/List;
PLcom/android/server/search/Searchables;->updateSearchableList()V
PLcom/android/server/security/KeyAttestationApplicationIdProviderService;->getKeyAttestationApplicationId(I)Landroid/security/keymaster/KeyAttestationApplicationId;
PLcom/android/server/security/KeyChainSystemService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/security/KeyChainSystemService;->startServiceInBackgroundAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V
PLcom/android/server/security/VerityUtils$SetupResult;->getContentSize()I
PLcom/android/server/security/VerityUtils$SetupResult;->getUnownedFileDescriptor()Ljava/io/FileDescriptor;
PLcom/android/server/security/VerityUtils$SetupResult;->isFailed()Z
PLcom/android/server/security/VerityUtils$SetupResult;->isOk()Z
PLcom/android/server/security/VerityUtils$TrackedShmBufferFactory;->create(I)Ljava/nio/ByteBuffer;
PLcom/android/server/security/VerityUtils;->generateApkVeritySetupData(Ljava/lang/String;)Lcom/android/server/security/VerityUtils$SetupResult;
PLcom/android/server/security/VerityUtils;->generateFsVerityIntoSharedMemory(Ljava/lang/String;[B)Landroid/util/Pair;
PLcom/android/server/signedconfig/SignedConfigService$UpdateReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/signedconfig/SignedConfigService;->handlePackageBroadcast(Landroid/content/Intent;)V
PLcom/android/server/slice/-$$Lambda$PinnedSliceState$2PaYhOaggf1E5xg82LTTEwxmLE4;-><init>()V
PLcom/android/server/slice/-$$Lambda$PinnedSliceState$2PaYhOaggf1E5xg82LTTEwxmLE4;->test(Ljava/lang/Object;)Z
PLcom/android/server/slice/-$$Lambda$PinnedSliceState$KzxFkvfomRuMb5PD8_pIHDIhUUE;->binderDied()V
PLcom/android/server/slice/-$$Lambda$PinnedSliceState$j_JfEZwPCa729MjgsTSd8MAItIw;->apply(Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/slice/-$$Lambda$PinnedSliceState$t5Vl61Ns1u_83c4ri7920sczEu0;->run()V
PLcom/android/server/slice/-$$Lambda$PinnedSliceState$vxnx7v9Z67Tj9aywVmtdX48br1M;-><init>()V
PLcom/android/server/slice/-$$Lambda$PinnedSliceState$vxnx7v9Z67Tj9aywVmtdX48br1M;->apply(I)Ljava/lang/Object;
PLcom/android/server/slice/-$$Lambda$SliceManagerService$EsoJb3dNe0G_qzoQixj72OS5gnw;->test(Ljava/lang/Object;)Z
PLcom/android/server/slice/-$$Lambda$SlicePermissionManager$y3Tun5dTftw8s8sky62syeWR34U;-><init>()V
PLcom/android/server/slice/PinnedSliceState;->destroy()V
PLcom/android/server/slice/PinnedSliceState;->getPkg()Ljava/lang/String;
PLcom/android/server/slice/PinnedSliceState;->getSpecs()[Landroid/app/slice/SliceSpec;
PLcom/android/server/slice/PinnedSliceState;->getUri()Landroid/net/Uri;
PLcom/android/server/slice/PinnedSliceState;->handleRecheckListeners()V
PLcom/android/server/slice/PinnedSliceState;->handleSendUnpinned()V
PLcom/android/server/slice/PinnedSliceState;->hasPinOrListener()Z
PLcom/android/server/slice/PinnedSliceState;->lambda$mergeSpecs$0$PinnedSliceState([Landroid/app/slice/SliceSpec;Landroid/app/slice/SliceSpec;)Landroid/app/slice/SliceSpec;
PLcom/android/server/slice/PinnedSliceState;->unpin(Ljava/lang/String;Landroid/os/IBinder;)Z
PLcom/android/server/slice/SliceClientPermissions$SliceAuthority;->addPath(Ljava/util/List;)V
PLcom/android/server/slice/SliceClientPermissions$SliceAuthority;->hasPermission(Ljava/util/List;)Z
PLcom/android/server/slice/SliceClientPermissions$SliceAuthority;->readFrom(Lorg/xmlpull/v1/XmlPullParser;)V
PLcom/android/server/slice/SliceClientPermissions$SliceAuthority;->writeTo(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/slice/SliceClientPermissions;->createFrom(Lorg/xmlpull/v1/XmlPullParser;Lcom/android/server/slice/DirtyTracker;)Lcom/android/server/slice/SliceClientPermissions;
PLcom/android/server/slice/SliceClientPermissions;->getFileName()Ljava/lang/String;
PLcom/android/server/slice/SliceClientPermissions;->getOrCreateAuthority(Lcom/android/server/slice/SlicePermissionManager$PkgUser;Lcom/android/server/slice/SlicePermissionManager$PkgUser;)Lcom/android/server/slice/SliceClientPermissions$SliceAuthority;
PLcom/android/server/slice/SliceClientPermissions;->grantUri(Landroid/net/Uri;Lcom/android/server/slice/SlicePermissionManager$PkgUser;)V
PLcom/android/server/slice/SliceClientPermissions;->onPersistableDirty(Lcom/android/server/slice/DirtyTracker$Persistable;)V
PLcom/android/server/slice/SliceClientPermissions;->writeTo(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/slice/SliceManagerService$Lifecycle;->onStopUser(I)V
PLcom/android/server/slice/SliceManagerService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/slice/SliceManagerService;->enforceOwner(Ljava/lang/String;Landroid/net/Uri;I)V
PLcom/android/server/slice/SliceManagerService;->getBackupPayload(I)[B
PLcom/android/server/slice/SliceManagerService;->getPinnedSlice(Landroid/net/Uri;)Lcom/android/server/slice/PinnedSliceState;
PLcom/android/server/slice/SliceManagerService;->getPinnedSpecs(Landroid/net/Uri;Ljava/lang/String;)[Landroid/app/slice/SliceSpec;
PLcom/android/server/slice/SliceManagerService;->grantSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V
PLcom/android/server/slice/SliceManagerService;->onStopUser(I)V
PLcom/android/server/slice/SliceManagerService;->removePinnedSlice(Landroid/net/Uri;)V
PLcom/android/server/slice/SliceManagerService;->unpinSlice(Ljava/lang/String;Landroid/net/Uri;Landroid/os/IBinder;)V
PLcom/android/server/slice/SlicePermissionManager$H;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/slice/SlicePermissionManager$ParserHolder;->close()V
PLcom/android/server/slice/SlicePermissionManager$PkgUser;-><init>(Ljava/lang/String;)V
PLcom/android/server/slice/SlicePermissionManager$PkgUser;->getUserId()I
PLcom/android/server/slice/SlicePermissionManager;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
PLcom/android/server/slice/SlicePermissionManager;->grantSliceAccess(Ljava/lang/String;ILjava/lang/String;ILandroid/net/Uri;)V
PLcom/android/server/slice/SlicePermissionManager;->handlePersist()V
PLcom/android/server/slice/SlicePermissionManager;->onPersistableDirty(Lcom/android/server/slice/DirtyTracker$Persistable;)V
PLcom/android/server/slice/SlicePermissionManager;->writeBackup(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/slice/SliceProviderPermissions$SliceAuthority;->addPkg(Lcom/android/server/slice/SlicePermissionManager$PkgUser;)V
PLcom/android/server/slice/SliceProviderPermissions$SliceAuthority;->readFrom(Lorg/xmlpull/v1/XmlPullParser;)V
PLcom/android/server/slice/SliceProviderPermissions$SliceAuthority;->writeTo(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/slice/SliceProviderPermissions;->createFrom(Lorg/xmlpull/v1/XmlPullParser;Lcom/android/server/slice/DirtyTracker;)Lcom/android/server/slice/SliceProviderPermissions;
PLcom/android/server/slice/SliceProviderPermissions;->getOrCreateAuthority(Ljava/lang/String;)Lcom/android/server/slice/SliceProviderPermissions$SliceAuthority;
PLcom/android/server/slice/SliceProviderPermissions;->writeTo(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/soundtrigger/-$$Lambda$SoundTriggerService$RemoteSoundTriggerDetectionService$F-iA254xzDfAHrQW86c2oSqXfwI;->run(ILandroid/media/soundtrigger/ISoundTriggerDetectionService;)V
PLcom/android/server/soundtrigger/-$$Lambda$SoundTriggerService$RemoteSoundTriggerDetectionService$t5mBYXswwLAAdm47WS10stLjYng;->run()V
PLcom/android/server/soundtrigger/-$$Lambda$SoundTriggerService$RemoteSoundTriggerDetectionService$wfDlqQ7aPvu9qZCZ24jJu4tfUMY;-><init>()V
PLcom/android/server/soundtrigger/-$$Lambda$SoundTriggerService$RemoteSoundTriggerDetectionService$wfDlqQ7aPvu9qZCZ24jJu4tfUMY;->accept(Ljava/lang/Object;)V
PLcom/android/server/soundtrigger/-$$Lambda$SoundTriggerService$RemoteSoundTriggerDetectionService$yqLMvkOmrO13yWrggtSaVrLgsWo;->run()V
PLcom/android/server/soundtrigger/SoundTriggerDbHelper;->deleteGenericSoundModel(Ljava/util/UUID;)Z
PLcom/android/server/soundtrigger/SoundTriggerDbHelper;->getGenericSoundModel(Ljava/util/UUID;)Landroid/hardware/soundtrigger/SoundTrigger$GenericSoundModel;
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->clearCallback()V
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->clearState()V
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->getCallback()Landroid/hardware/soundtrigger/IRecognitionStatusCallback;
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->getHandle()I
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->getModelId()Ljava/util/UUID;
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->getRecognitionConfig()Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->getSoundModel()Landroid/hardware/soundtrigger/SoundTrigger$SoundModel;
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->isGenericModel()Z
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->isKeyphraseModel()Z
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->isModelLoaded()Z
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->isModelStarted()Z
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->isRequested()Z
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->setCallback(Landroid/hardware/soundtrigger/IRecognitionStatusCallback;)V
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->setHandle(I)V
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->setLoaded()V
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->setRecognitionConfig(Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)V
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->setRequested(Z)V
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->setSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$SoundModel;)V
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->setStarted()V
PLcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;->setStopped()V
PLcom/android/server/soundtrigger/SoundTriggerHelper$MyCallStateListener;->onCallStateChanged(ILjava/lang/String;)V
PLcom/android/server/soundtrigger/SoundTriggerHelper;->computeRecognitionRunningLocked()Z
PLcom/android/server/soundtrigger/SoundTriggerHelper;->createKeyphraseModelDataLocked(Ljava/util/UUID;I)Lcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;
PLcom/android/server/soundtrigger/SoundTriggerHelper;->forceStopAndUnloadModelLocked(Lcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;Ljava/lang/Exception;Ljava/util/Iterator;)V
PLcom/android/server/soundtrigger/SoundTriggerHelper;->getModuleProperties()Landroid/hardware/soundtrigger/SoundTrigger$ModuleProperties;
PLcom/android/server/soundtrigger/SoundTriggerHelper;->getOrCreateGenericModelDataLocked(Ljava/util/UUID;)Lcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;
PLcom/android/server/soundtrigger/SoundTriggerHelper;->initializeTelephonyAndPowerStateListeners()V
PLcom/android/server/soundtrigger/SoundTriggerHelper;->internalClearGlobalStateLocked()V
PLcom/android/server/soundtrigger/SoundTriggerHelper;->isRecognitionRequested(Ljava/util/UUID;)Z
PLcom/android/server/soundtrigger/SoundTriggerHelper;->onGenericRecognitionSuccessLocked(Landroid/hardware/soundtrigger/SoundTrigger$GenericRecognitionEvent;)V
PLcom/android/server/soundtrigger/SoundTriggerHelper;->onKeyphraseRecognitionSuccessLocked(Landroid/hardware/soundtrigger/SoundTrigger$KeyphraseRecognitionEvent;)V
PLcom/android/server/soundtrigger/SoundTriggerHelper;->onRecognition(Landroid/hardware/soundtrigger/SoundTrigger$RecognitionEvent;)V
PLcom/android/server/soundtrigger/SoundTriggerHelper;->onRecognitionAbortLocked(Landroid/hardware/soundtrigger/SoundTrigger$RecognitionEvent;)V
PLcom/android/server/soundtrigger/SoundTriggerHelper;->onServiceStateChange(I)V
PLcom/android/server/soundtrigger/SoundTriggerHelper;->startGenericRecognition(Ljava/util/UUID;Landroid/hardware/soundtrigger/SoundTrigger$GenericSoundModel;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)I
PLcom/android/server/soundtrigger/SoundTriggerHelper;->startKeyphraseRecognition(ILandroid/hardware/soundtrigger/SoundTrigger$KeyphraseSoundModel;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)I
PLcom/android/server/soundtrigger/SoundTriggerHelper;->startRecognition(Landroid/hardware/soundtrigger/SoundTrigger$SoundModel;Lcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;I)I
PLcom/android/server/soundtrigger/SoundTriggerHelper;->startRecognitionLocked(Lcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;Z)I
PLcom/android/server/soundtrigger/SoundTriggerHelper;->stopAndUnloadDeadModelsLocked()V
PLcom/android/server/soundtrigger/SoundTriggerHelper;->stopKeyphraseRecognition(ILandroid/hardware/soundtrigger/IRecognitionStatusCallback;)I
PLcom/android/server/soundtrigger/SoundTriggerHelper;->stopRecognition(Lcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;)I
PLcom/android/server/soundtrigger/SoundTriggerHelper;->stopRecognitionLocked(Lcom/android/server/soundtrigger/SoundTriggerHelper$ModelData;Z)I
PLcom/android/server/soundtrigger/SoundTriggerHelper;->unloadGenericSoundModel(Ljava/util/UUID;)I
PLcom/android/server/soundtrigger/SoundTriggerHelper;->unloadKeyphraseSoundModel(I)I
PLcom/android/server/soundtrigger/SoundTriggerHelper;->updateAllRecognitionsLocked(Z)V
PLcom/android/server/soundtrigger/SoundTriggerService$LocalSoundTriggerService;->getModuleProperties()Landroid/hardware/soundtrigger/SoundTrigger$ModuleProperties;
PLcom/android/server/soundtrigger/SoundTriggerService$LocalSoundTriggerService;->isInitialized()Z
PLcom/android/server/soundtrigger/SoundTriggerService$LocalSoundTriggerService;->startRecognition(ILandroid/hardware/soundtrigger/SoundTrigger$KeyphraseSoundModel;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)I
PLcom/android/server/soundtrigger/SoundTriggerService$LocalSoundTriggerService;->stopRecognition(ILandroid/hardware/soundtrigger/IRecognitionStatusCallback;)I
PLcom/android/server/soundtrigger/SoundTriggerService$LocalSoundTriggerService;->unloadKeyphraseModel(I)I
PLcom/android/server/soundtrigger/SoundTriggerService$NumOps;->addOp(J)V
PLcom/android/server/soundtrigger/SoundTriggerService$NumOps;->clearOldOps(J)V
PLcom/android/server/soundtrigger/SoundTriggerService$NumOps;->getOpsAdded()I
PLcom/android/server/soundtrigger/SoundTriggerService$Operation;->drop()V
PLcom/android/server/soundtrigger/SoundTriggerService$Operation;->run(ILandroid/media/soundtrigger/ISoundTriggerDetectionService;)V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService$1;->onOpFinished(I)V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;-><init>(Lcom/android/server/soundtrigger/SoundTriggerService;Ljava/util/UUID;Landroid/os/Bundle;Landroid/content/ComponentName;Landroid/os/UserHandle;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;->bind()V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;->destroy()V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;->disconnectLocked()V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;->lambda$onError$3$SoundTriggerService$RemoteSoundTriggerDetectionService()V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;->lambda$onGenericSoundTriggerDetected$0$SoundTriggerService$RemoteSoundTriggerDetectionService()V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;->lambda$onGenericSoundTriggerDetected$1$SoundTriggerService$RemoteSoundTriggerDetectionService(Landroid/hardware/soundtrigger/SoundTrigger$GenericRecognitionEvent;ILandroid/media/soundtrigger/ISoundTriggerDetectionService;)V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;->onError(I)V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;->onGenericSoundTriggerDetected(Landroid/hardware/soundtrigger/SoundTrigger$GenericRecognitionEvent;)V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;->onRecognitionPaused()V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;->onRecognitionResumed()V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;->pingBinder()Z
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;->runOrAddOperation(Lcom/android/server/soundtrigger/SoundTriggerService$Operation;)V
PLcom/android/server/soundtrigger/SoundTriggerService$RemoteSoundTriggerDetectionService;->stopAllPendingOperations()V
PLcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->deleteSoundModel(Landroid/os/ParcelUuid;)V
PLcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->isRecognitionActive(Landroid/os/ParcelUuid;)Z
PLcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->loadGenericSoundModel(Landroid/hardware/soundtrigger/SoundTrigger$GenericSoundModel;)I
PLcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
PLcom/android/server/soundtrigger/SoundTriggerService$SoundTriggerServiceStub;->startRecognitionForService(Landroid/os/ParcelUuid;Landroid/os/Bundle;Landroid/content/ComponentName;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)I
PLcom/android/server/soundtrigger/SoundTriggerService;->isInitialized()Z
PLcom/android/server/stats/-$$Lambda$StatsCompanionService$NHd5PvhbQidUUj9jg6uXxw6FMs0;->onUidCpuTime(ILjava/lang/Object;)V
PLcom/android/server/stats/StatsCompanionService$AppUpdateReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/stats/StatsCompanionService$ConnectivityStatsCallback;->onAvailable(Landroid/net/Network;)V
PLcom/android/server/stats/StatsCompanionService$ConnectivityStatsCallback;->onLost(Landroid/net/Network;)V
PLcom/android/server/stats/StatsCompanionService$PeriodicAlarmListener;->onAlarm()V
PLcom/android/server/stats/StatsCompanionService$PullingAlarmListener;->onAlarm()V
PLcom/android/server/stats/StatsCompanionService$ShutdownEventReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/stats/StatsCompanionService;->addNetworkStats(ILjava/util/List;Landroid/net/NetworkStats;Z)V
PLcom/android/server/stats/StatsCompanionService;->cancelAlarmForSubscriberTriggering()V
PLcom/android/server/stats/StatsCompanionService;->cancelAnomalyAlarm()V
PLcom/android/server/stats/StatsCompanionService;->pullBinderCallsStats(IJJLjava/util/List;)V
PLcom/android/server/stats/StatsCompanionService;->pullCpuTimePerThreadFreq(IJJLjava/util/List;)V
PLcom/android/server/stats/StatsCompanionService;->pullData(I)[Landroid/os/StatsLogEventWrapper;
PLcom/android/server/stats/StatsCompanionService;->pullDebugElapsedClock(IJJLjava/util/List;)V
PLcom/android/server/stats/StatsCompanionService;->pullDebugFailingElapsedClock(IJJLjava/util/List;)V
PLcom/android/server/stats/StatsCompanionService;->pullLooperStats(IJJLjava/util/List;)V
PLcom/android/server/stats/StatsCompanionService;->pullMobileBytesTransferByFgBg(IJJLjava/util/List;)V
PLcom/android/server/stats/StatsCompanionService;->pullNativeProcessMemoryState(IJJLjava/util/List;)V
PLcom/android/server/stats/StatsCompanionService;->pullProcessMemoryHighWaterMark(IJJLjava/util/List;)V
PLcom/android/server/stats/StatsCompanionService;->pullProcessMemoryState(IJJLjava/util/List;)V
PLcom/android/server/stats/StatsCompanionService;->pullTemperature(IJJLjava/util/List;)V
PLcom/android/server/stats/StatsCompanionService;->rollupNetworkStatsByFGBG(Landroid/net/NetworkStats;)Landroid/net/NetworkStats;
PLcom/android/server/stats/StatsCompanionService;->sendDataBroadcast(Landroid/os/IBinder;J)V
PLcom/android/server/statusbar/-$$Lambda$StatusBarManagerService$hFIYx92VN4dEb4589FKdmNsCofc;->run()V
PLcom/android/server/statusbar/StatusBarManagerService$1;->appTransitionCancelled(I)V
PLcom/android/server/statusbar/StatusBarManagerService$1;->appTransitionPending(I)V
PLcom/android/server/statusbar/StatusBarManagerService$1;->appTransitionStarting(IJJ)V
PLcom/android/server/statusbar/StatusBarManagerService$1;->onCameraLaunchGestureDetected(I)V
PLcom/android/server/statusbar/StatusBarManagerService$1;->onDisplayReady(I)V
PLcom/android/server/statusbar/StatusBarManagerService$1;->onProposedRotationChanged(IZ)V
PLcom/android/server/statusbar/StatusBarManagerService$1;->setWindowState(III)V
PLcom/android/server/statusbar/StatusBarManagerService$1;->showChargingAnimation(I)V
PLcom/android/server/statusbar/StatusBarManagerService$2;->isGlobalActionsDisabled()Z
PLcom/android/server/statusbar/StatusBarManagerService$2;->setGlobalActionsListener(Lcom/android/server/policy/GlobalActionsProvider$GlobalActionsListener;)V
PLcom/android/server/statusbar/StatusBarManagerService$2;->showGlobalActions()V
PLcom/android/server/statusbar/StatusBarManagerService;->clearNotificationEffects()V
PLcom/android/server/statusbar/StatusBarManagerService;->handleSystemKey(I)V
PLcom/android/server/statusbar/StatusBarManagerService;->lambda$setImeWindowStatus$2$StatusBarManagerService(Landroid/os/IBinder;IIZ)V
PLcom/android/server/statusbar/StatusBarManagerService;->lambda$setImeWindowStatus$2(Lcom/android/server/statusbar/StatusBarManagerService;Landroid/os/IBinder;IIZ)V
PLcom/android/server/statusbar/StatusBarManagerService;->onBiometricAuthenticated(Z)V
PLcom/android/server/statusbar/StatusBarManagerService;->onBiometricError(Ljava/lang/String;)V
PLcom/android/server/statusbar/StatusBarManagerService;->onBiometricHelp(Ljava/lang/String;)V
PLcom/android/server/statusbar/StatusBarManagerService;->onDisplayAdded(I)V
PLcom/android/server/statusbar/StatusBarManagerService;->onDisplayRemoved(I)V
PLcom/android/server/statusbar/StatusBarManagerService;->onGlobalActionsHidden()V
PLcom/android/server/statusbar/StatusBarManagerService;->onGlobalActionsShown()V
PLcom/android/server/statusbar/StatusBarManagerService;->onNotificationActionClick(Ljava/lang/String;ILandroid/app/Notification$Action;Lcom/android/internal/statusbar/NotificationVisibility;Z)V
PLcom/android/server/statusbar/StatusBarManagerService;->onNotificationClear(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;IILcom/android/internal/statusbar/NotificationVisibility;)V
PLcom/android/server/statusbar/StatusBarManagerService;->onNotificationClick(Ljava/lang/String;Lcom/android/internal/statusbar/NotificationVisibility;)V
PLcom/android/server/statusbar/StatusBarManagerService;->onNotificationDirectReplied(Ljava/lang/String;)V
PLcom/android/server/statusbar/StatusBarManagerService;->onNotificationExpansionChanged(Ljava/lang/String;ZZI)V
PLcom/android/server/statusbar/StatusBarManagerService;->onNotificationSmartSuggestionsAdded(Ljava/lang/String;IIZZ)V
PLcom/android/server/statusbar/StatusBarManagerService;->onNotificationVisibilityChanged([Lcom/android/internal/statusbar/NotificationVisibility;[Lcom/android/internal/statusbar/NotificationVisibility;)V
PLcom/android/server/statusbar/StatusBarManagerService;->onPanelHidden()V
PLcom/android/server/statusbar/StatusBarManagerService;->onPanelRevealed(ZI)V
PLcom/android/server/statusbar/StatusBarManagerService;->remTile(Landroid/content/ComponentName;)V
PLcom/android/server/statusbar/StatusBarManagerService;->removeIcon(Ljava/lang/String;)V
PLcom/android/server/statusbar/StatusBarManagerService;->setIcon(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V
PLcom/android/server/statusbar/StatusBarManagerService;->setImeWindowStatus(Landroid/os/IBinder;IIZ)V
PLcom/android/server/statusbar/StatusBarManagerService;->showBiometricDialog(Landroid/os/Bundle;Landroid/hardware/biometrics/IBiometricServiceReceiverInternal;IZI)V
PLcom/android/server/storage/AppCollector$BackgroundHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/storage/AppCollector;-><init>(Landroid/content/Context;Landroid/os/storage/VolumeInfo;)V
PLcom/android/server/storage/AppCollector;->getPackageStats(J)Ljava/util/List;
PLcom/android/server/storage/AppFuseBridge$MountScope;->setMountResultLocked(Z)V
PLcom/android/server/storage/AppFuseBridge$MountScope;->waitForMount()Z
PLcom/android/server/storage/AppFuseBridge;->addBridge(Lcom/android/server/storage/AppFuseBridge$MountScope;)Landroid/os/ParcelFileDescriptor;
PLcom/android/server/storage/AppFuseBridge;->onClosed(I)V
PLcom/android/server/storage/AppFuseBridge;->onMount(I)V
PLcom/android/server/storage/AppFuseBridge;->openFile(III)Landroid/os/ParcelFileDescriptor;
PLcom/android/server/storage/AppFuseBridge;->run()V
PLcom/android/server/storage/CacheQuotaStrategy$1$1;->run()V
PLcom/android/server/storage/CacheQuotaStrategy$1;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/storage/CacheQuotaStrategy;->getServiceComponentName()Landroid/content/ComponentName;
PLcom/android/server/storage/CacheQuotaStrategy;->getUnfulfilledRequests()Ljava/util/List;
PLcom/android/server/storage/CacheQuotaStrategy;->onResult(Landroid/os/Bundle;)V
PLcom/android/server/storage/CacheQuotaStrategy;->saveToXml(Lorg/xmlpull/v1/XmlSerializer;Ljava/util/List;J)V
PLcom/android/server/storage/CacheQuotaStrategy;->writeXmlToFile(Ljava/util/List;)V
PLcom/android/server/storage/DeviceStorageMonitorService$2;->getMemoryLowThreshold()J
PLcom/android/server/storage/DeviceStorageMonitorService$2;->isMemoryLow()Z
PLcom/android/server/storage/DiskStatsFileLogger;->addAppsToJson(Lorg/json/JSONObject;)V
PLcom/android/server/storage/DiskStatsFileLogger;->filterOnlyPrimaryUser()Landroid/util/ArrayMap;
PLcom/android/server/storage/DiskStatsFileLogger;->getJsonRepresentation()Lorg/json/JSONObject;
PLcom/android/server/storage/DiskStatsLoggingService$LogRunnable;->logToFile(Lcom/android/server/storage/FileCollector$MeasurementResult;Lcom/android/server/storage/FileCollector$MeasurementResult;Ljava/util/List;J)V
PLcom/android/server/storage/DiskStatsLoggingService$LogRunnable;->run()V
PLcom/android/server/storage/DiskStatsLoggingService;-><init>()V
PLcom/android/server/storage/DiskStatsLoggingService;->onStartJob(Landroid/app/job/JobParameters;)Z
PLcom/android/server/storage/FileCollector$MeasurementResult;->totalAccountedSize()J
PLcom/android/server/storage/FileCollector;->collectFiles(Ljava/io/File;Lcom/android/server/storage/FileCollector$MeasurementResult;)Lcom/android/server/storage/FileCollector$MeasurementResult;
PLcom/android/server/storage/FileCollector;->getMeasurementResult(Landroid/content/Context;)Lcom/android/server/storage/FileCollector$MeasurementResult;
PLcom/android/server/storage/FileCollector;->getSystemSize(Landroid/content/Context;)J
PLcom/android/server/telecom/-$$Lambda$TelecomLoaderService$-gelHWcVU9jWWZhCeN99A3Sudtw;->getPackages(I)[Ljava/lang/String;
PLcom/android/server/telecom/-$$Lambda$TelecomLoaderService$VVmvEgI0M6umDuBUYKUoUMO7-l0;->getPackages(I)[Ljava/lang/String;
PLcom/android/server/telecom/-$$Lambda$TelecomLoaderService$lBXoYxesURvEmfzumX9uIBbg66M;->getPackages(I)[Ljava/lang/String;
PLcom/android/server/telecom/TelecomLoaderService$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/telecom/TelecomLoaderService;->lambda$registerDefaultAppProviders$0$TelecomLoaderService(I)[Ljava/lang/String;
PLcom/android/server/telecom/TelecomLoaderService;->lambda$registerDefaultAppProviders$0(Lcom/android/server/telecom/TelecomLoaderService;I)[Ljava/lang/String;
PLcom/android/server/telecom/TelecomLoaderService;->lambda$registerDefaultAppProviders$1$TelecomLoaderService(I)[Ljava/lang/String;
PLcom/android/server/telecom/TelecomLoaderService;->lambda$registerDefaultAppProviders$1(Lcom/android/server/telecom/TelecomLoaderService;I)[Ljava/lang/String;
PLcom/android/server/telecom/TelecomLoaderService;->lambda$registerDefaultAppProviders$2$TelecomLoaderService(I)[Ljava/lang/String;
PLcom/android/server/telecom/TelecomLoaderService;->lambda$registerDefaultAppProviders$2(Lcom/android/server/telecom/TelecomLoaderService;I)[Ljava/lang/String;
PLcom/android/server/telecom/TelecomLoaderService;->updateSimCallManagerPermissions(Lcom/android/server/pm/permission/DefaultPermissionGrantPolicy;I)V
PLcom/android/server/testharness/TestHarnessModeService;->configureSettings()V
PLcom/android/server/textclassifier/-$$Lambda$TextClassificationManagerService$-O5SqJ3O93lhUbxb9PI9hMy-SaM;->runOrThrow()V
PLcom/android/server/textclassifier/-$$Lambda$TextClassificationManagerService$R4aPVSf5_OfouCzD96pPpSsbUOs;->accept(Ljava/lang/Object;)V
PLcom/android/server/textclassifier/-$$Lambda$TextClassificationManagerService$VJv3uBIZCqmZIvsx-lAI2iNIBz0;->runOrThrow()V
PLcom/android/server/textclassifier/-$$Lambda$TextClassificationManagerService$sMLFGuslbXgLyLQJD4NeR5KkZn0;->runOrThrow()V
PLcom/android/server/textclassifier/TextClassificationManagerService$Lifecycle;->onStopUser(I)V
PLcom/android/server/textclassifier/TextClassificationManagerService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/textclassifier/TextClassificationManagerService$PendingRequest;-><init>(Lcom/android/internal/util/FunctionalUtils$ThrowingRunnable;Lcom/android/internal/util/FunctionalUtils$ThrowingRunnable;Landroid/os/IBinder;Lcom/android/server/textclassifier/TextClassificationManagerService;Lcom/android/server/textclassifier/TextClassificationManagerService$UserState;)V
PLcom/android/server/textclassifier/TextClassificationManagerService$UserState$TextClassifierServiceConnection;->init(Landroid/service/textclassifier/ITextClassifierService;)V
PLcom/android/server/textclassifier/TextClassificationManagerService$UserState$TextClassifierServiceConnection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/textclassifier/TextClassificationManagerService$UserState;->bindLocked()Z
PLcom/android/server/textclassifier/TextClassificationManagerService$UserState;->handlePendingRequestsLocked()V
PLcom/android/server/textclassifier/TextClassificationManagerService;->lambda$logOnFailure$9(Ljava/lang/String;Ljava/lang/Throwable;)V
PLcom/android/server/textclassifier/TextClassificationManagerService;->onClassifyText(Landroid/view/textclassifier/TextClassificationSessionId;Landroid/view/textclassifier/TextClassification$Request;Landroid/service/textclassifier/ITextClassificationCallback;)V
PLcom/android/server/textclassifier/TextClassificationManagerService;->onCreateTextClassificationSession(Landroid/view/textclassifier/TextClassificationContext;Landroid/view/textclassifier/TextClassificationSessionId;)V
PLcom/android/server/textclassifier/TextClassificationManagerService;->onDestroyTextClassificationSession(Landroid/view/textclassifier/TextClassificationSessionId;)V
PLcom/android/server/textclassifier/TextClassificationManagerService;->onGenerateLinks(Landroid/view/textclassifier/TextClassificationSessionId;Landroid/view/textclassifier/TextLinks$Request;Landroid/service/textclassifier/ITextLinksCallback;)V
PLcom/android/server/textclassifier/TextClassificationManagerService;->onSelectionEvent(Landroid/view/textclassifier/TextClassificationSessionId;Landroid/view/textclassifier/SelectionEvent;)V
PLcom/android/server/textclassifier/TextClassificationManagerService;->onSuggestConversationActions(Landroid/view/textclassifier/TextClassificationSessionId;Landroid/view/textclassifier/ConversationActions$Request;Landroid/service/textclassifier/IConversationActionsCallback;)V
PLcom/android/server/textclassifier/TextClassificationManagerService;->onSuggestSelection(Landroid/view/textclassifier/TextClassificationSessionId;Landroid/view/textclassifier/TextSelection$Request;Landroid/service/textclassifier/ITextSelectionCallback;)V
PLcom/android/server/textclassifier/TextClassificationManagerService;->onTextClassifierEvent(Landroid/view/textclassifier/TextClassificationSessionId;Landroid/view/textclassifier/TextClassifierEvent;)V
PLcom/android/server/textclassifier/TextClassificationManagerService;->validateInput(Landroid/content/Context;Ljava/lang/String;)V
PLcom/android/server/textservices/TextServicesManagerService$ISpellCheckerServiceCallbackBinder;-><init>(Lcom/android/server/textservices/TextServicesManagerService$SpellCheckerBindGroup;Lcom/android/server/textservices/TextServicesManagerService$SessionRequest;)V
PLcom/android/server/textservices/TextServicesManagerService$ISpellCheckerServiceCallbackBinder;->onSessionCreated(Lcom/android/internal/textservice/ISpellCheckerSession;)V
PLcom/android/server/textservices/TextServicesManagerService$InternalDeathRecipients;->onCallbackDied(Landroid/os/IInterface;)V
PLcom/android/server/textservices/TextServicesManagerService$InternalServiceConnection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/textservices/TextServicesManagerService$Lifecycle;->onStopUser(I)V
PLcom/android/server/textservices/TextServicesManagerService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/textservices/TextServicesManagerService$SpellCheckerBindGroup;-><init>(Lcom/android/server/textservices/TextServicesManagerService;Lcom/android/server/textservices/TextServicesManagerService$InternalServiceConnection;)V
PLcom/android/server/textservices/TextServicesManagerService$SpellCheckerBindGroup;->cleanLocked()V
PLcom/android/server/textservices/TextServicesManagerService$SpellCheckerBindGroup;->getISpellCheckerSessionOrQueueLocked(Lcom/android/server/textservices/TextServicesManagerService$SessionRequest;)V
PLcom/android/server/textservices/TextServicesManagerService$SpellCheckerBindGroup;->onServiceConnectedLocked(Lcom/android/internal/textservice/ISpellCheckerService;)V
PLcom/android/server/textservices/TextServicesManagerService$SpellCheckerBindGroup;->onSessionCreated(Lcom/android/internal/textservice/ISpellCheckerSession;Lcom/android/server/textservices/TextServicesManagerService$SessionRequest;)V
PLcom/android/server/textservices/TextServicesManagerService$SpellCheckerBindGroup;->removeListener(Lcom/android/internal/textservice/ISpellCheckerSessionListener;)V
PLcom/android/server/textservices/TextServicesManagerService$TextServicesData;-><init>(ILandroid/content/Context;)V
PLcom/android/server/textservices/TextServicesManagerService$TextServicesData;->getCurrentSpellChecker()Landroid/view/textservice/SpellCheckerInfo;
PLcom/android/server/textservices/TextServicesManagerService$TextServicesData;->getSelectedSpellCheckerSubtype(I)I
PLcom/android/server/textservices/TextServicesManagerService$TextServicesData;->initializeTextServicesData()V
PLcom/android/server/textservices/TextServicesManagerService$TextServicesData;->isSpellCheckerEnabled()Z
PLcom/android/server/textservices/TextServicesManagerService;->bindCurrentSpellCheckerService(Landroid/content/Intent;Landroid/content/ServiceConnection;II)Z
PLcom/android/server/textservices/TextServicesManagerService;->finishSpellCheckerService(ILcom/android/internal/textservice/ISpellCheckerSessionListener;)V
PLcom/android/server/textservices/TextServicesManagerService;->getCurrentSpellChecker(ILjava/lang/String;)Landroid/view/textservice/SpellCheckerInfo;
PLcom/android/server/textservices/TextServicesManagerService;->getCurrentSpellCheckerSubtype(IZ)Landroid/view/textservice/SpellCheckerSubtype;
PLcom/android/server/textservices/TextServicesManagerService;->getDataFromCallingUserIdLocked(I)Lcom/android/server/textservices/TextServicesManagerService$TextServicesData;
PLcom/android/server/textservices/TextServicesManagerService;->getSpellCheckerService(ILjava/lang/String;Ljava/lang/String;Lcom/android/internal/textservice/ITextServicesSessionListener;Lcom/android/internal/textservice/ISpellCheckerSessionListener;Landroid/os/Bundle;)V
PLcom/android/server/textservices/TextServicesManagerService;->initializeInternalStateLocked(I)V
PLcom/android/server/textservices/TextServicesManagerService;->isSpellCheckerEnabled(I)Z
PLcom/android/server/textservices/TextServicesManagerService;->onStopUser(I)V
PLcom/android/server/textservices/TextServicesManagerService;->onUnlockUser(I)V
PLcom/android/server/textservices/TextServicesManagerService;->startSpellCheckerServiceInnerLocked(Landroid/view/textservice/SpellCheckerInfo;Lcom/android/server/textservices/TextServicesManagerService$TextServicesData;)Lcom/android/server/textservices/TextServicesManagerService$SpellCheckerBindGroup;
PLcom/android/server/textservices/TextServicesManagerService;->verifyUser(I)V
PLcom/android/server/trust/TrustAgentWrapper$2;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/trust/TrustAgentWrapper$3;->grantTrust(Ljava/lang/CharSequence;JI)V
PLcom/android/server/trust/TrustAgentWrapper$3;->revokeTrust()V
PLcom/android/server/trust/TrustAgentWrapper$3;->setManagingTrust(Z)V
PLcom/android/server/trust/TrustAgentWrapper$4;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/trust/TrustAgentWrapper$4;->onServiceDisconnected(Landroid/content/ComponentName;)V
PLcom/android/server/trust/TrustAgentWrapper;-><init>(Landroid/content/Context;Lcom/android/server/trust/TrustManagerService;Landroid/content/Intent;Landroid/os/UserHandle;)V
PLcom/android/server/trust/TrustAgentWrapper;->destroy()V
PLcom/android/server/trust/TrustAgentWrapper;->isConnected()Z
PLcom/android/server/trust/TrustAgentWrapper;->isManagingTrust()Z
PLcom/android/server/trust/TrustAgentWrapper;->isTrusted()Z
PLcom/android/server/trust/TrustAgentWrapper;->onDeviceLocked()V
PLcom/android/server/trust/TrustAgentWrapper;->onDeviceUnlocked()V
PLcom/android/server/trust/TrustAgentWrapper;->onUnlockAttempt(Z)V
PLcom/android/server/trust/TrustAgentWrapper;->onUnlockLockout(I)V
PLcom/android/server/trust/TrustAgentWrapper;->setCallback(Landroid/service/trust/ITrustAgentServiceCallback;)V
PLcom/android/server/trust/TrustAgentWrapper;->updateDevicePolicyFeatures()Z
PLcom/android/server/trust/TrustArchive;->logAgentConnected(ILandroid/content/ComponentName;)V
PLcom/android/server/trust/TrustArchive;->logAgentDied(ILandroid/content/ComponentName;)V
PLcom/android/server/trust/TrustArchive;->logAgentStopped(ILandroid/content/ComponentName;)V
PLcom/android/server/trust/TrustArchive;->logDevicePolicyChanged()V
PLcom/android/server/trust/TrustArchive;->logGrantTrust(ILandroid/content/ComponentName;Ljava/lang/String;JI)V
PLcom/android/server/trust/TrustArchive;->logManagingTrust(ILandroid/content/ComponentName;Z)V
PLcom/android/server/trust/TrustArchive;->logRevokeTrust(ILandroid/content/ComponentName;)V
PLcom/android/server/trust/TrustManagerService$1;->clearAllBiometricRecognized(Landroid/hardware/biometrics/BiometricSourceType;)V
PLcom/android/server/trust/TrustManagerService$1;->isDeviceLocked(I)Z
PLcom/android/server/trust/TrustManagerService$1;->isTrustUsuallyManaged(I)Z
PLcom/android/server/trust/TrustManagerService$1;->reportUnlockAttempt(ZI)V
PLcom/android/server/trust/TrustManagerService$1;->reportUnlockLockout(II)V
PLcom/android/server/trust/TrustManagerService$1;->setDeviceLockedForUser(IZ)V
PLcom/android/server/trust/TrustManagerService$1;->unlockedByBiometricForUser(ILandroid/hardware/biometrics/BiometricSourceType;)V
PLcom/android/server/trust/TrustManagerService$3;->onPackageChanged(Ljava/lang/String;I[Ljava/lang/String;)Z
PLcom/android/server/trust/TrustManagerService$3;->onPackageDisappeared(Ljava/lang/String;I)V
PLcom/android/server/trust/TrustManagerService$3;->onSomePackagesChanged()V
PLcom/android/server/trust/TrustManagerService$AgentInfo;->equals(Ljava/lang/Object;)Z
PLcom/android/server/trust/TrustManagerService$Receiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/trust/TrustManagerService$StrongAuthTracker;->allowTrustFromUnlock(I)V
PLcom/android/server/trust/TrustManagerService$StrongAuthTracker;->canAgentsRunForUser(I)Z
PLcom/android/server/trust/TrustManagerService$StrongAuthTracker;->onStrongAuthRequiredChanged(I)V
PLcom/android/server/trust/TrustManagerService$TrustTimeoutAlarmListener;->isQueued()Z
PLcom/android/server/trust/TrustManagerService$TrustTimeoutAlarmListener;->onAlarm()V
PLcom/android/server/trust/TrustManagerService$TrustTimeoutAlarmListener;->setQueued(Z)V
PLcom/android/server/trust/TrustManagerService;->dispatchDeviceLocked(IZ)V
PLcom/android/server/trust/TrustManagerService;->dispatchUnlockAttempt(ZI)V
PLcom/android/server/trust/TrustManagerService;->handleScheduleTrustTimeout(II)V
PLcom/android/server/trust/TrustManagerService;->isTrustUsuallyManagedInternal(I)Z
PLcom/android/server/trust/TrustManagerService;->maybeEnableFactoryTrustAgents(Lcom/android/internal/widget/LockPatternUtils;I)V
PLcom/android/server/trust/TrustManagerService;->maybeLockScreen(I)V
PLcom/android/server/trust/TrustManagerService;->onCleanupUser(I)V
PLcom/android/server/trust/TrustManagerService;->onStopUser(I)V
PLcom/android/server/trust/TrustManagerService;->onUnlockUser(I)V
PLcom/android/server/trust/TrustManagerService;->removeAgentsOfPackage(Ljava/lang/String;)V
PLcom/android/server/trust/TrustManagerService;->updateDevicePolicyFeatures()V
PLcom/android/server/trust/TrustManagerService;->updateTrustUsuallyManaged(IZ)V
PLcom/android/server/uri/GrantUri;->equals(Ljava/lang/Object;)Z
PLcom/android/server/uri/GrantUri;->hashCode()I
PLcom/android/server/uri/GrantUri;->resolve(ILandroid/net/Uri;)Lcom/android/server/uri/GrantUri;
PLcom/android/server/uri/UriGrantsManagerService$LocalService;->checkGrantUriPermission(ILjava/lang/String;Landroid/net/Uri;II)I
PLcom/android/server/uri/UriGrantsManagerService$LocalService;->grantUriPermission(ILjava/lang/String;Lcom/android/server/uri/GrantUri;ILcom/android/server/uri/UriPermissionOwner;I)V
PLcom/android/server/uri/UriGrantsManagerService$LocalService;->grantUriPermissionFromIntent(ILjava/lang/String;Landroid/content/Intent;I)V
PLcom/android/server/uri/UriGrantsManagerService$LocalService;->removeUriPermissionIfNeeded(Lcom/android/server/uri/UriPermission;)V
PLcom/android/server/uri/UriGrantsManagerService$LocalService;->revokeUriPermission(Ljava/lang/String;ILcom/android/server/uri/GrantUri;I)V
PLcom/android/server/uri/UriGrantsManagerService$LocalService;->revokeUriPermissionFromOwner(Landroid/os/IBinder;Landroid/net/Uri;II)V
PLcom/android/server/uri/UriGrantsManagerService;->checkGrantUriPermission(ILjava/lang/String;Landroid/net/Uri;II)I
PLcom/android/server/uri/UriGrantsManagerService;->checkGrantUriPermission(ILjava/lang/String;Lcom/android/server/uri/GrantUri;II)I
PLcom/android/server/uri/UriGrantsManagerService;->checkHoldingPermissionsInternal(Landroid/content/pm/IPackageManager;Landroid/content/pm/ProviderInfo;Lcom/android/server/uri/GrantUri;IIZ)Z
PLcom/android/server/uri/UriGrantsManagerService;->findOrCreateUriPermission(Ljava/lang/String;Ljava/lang/String;ILcom/android/server/uri/GrantUri;)Lcom/android/server/uri/UriPermission;
PLcom/android/server/uri/UriGrantsManagerService;->getGrantedUriPermissions(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/uri/UriGrantsManagerService;->getPersistedUriPermissions(Ljava/lang/String;Z)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/uri/UriGrantsManagerService;->getProviderInfo(Ljava/lang/String;II)Landroid/content/pm/ProviderInfo;
PLcom/android/server/uri/UriGrantsManagerService;->grantUriPermission(ILjava/lang/String;Lcom/android/server/uri/GrantUri;ILcom/android/server/uri/UriPermissionOwner;I)V
PLcom/android/server/uri/UriGrantsManagerService;->grantUriPermissionFromOwner(Landroid/os/IBinder;ILjava/lang/String;Landroid/net/Uri;III)V
PLcom/android/server/uri/UriGrantsManagerService;->grantUriPermissionUnchecked(ILjava/lang/String;Lcom/android/server/uri/GrantUri;ILcom/android/server/uri/UriPermissionOwner;)V
PLcom/android/server/uri/UriGrantsManagerService;->grantUriPermissionUncheckedFromIntent(Lcom/android/server/uri/NeededUriGrants;Lcom/android/server/uri/UriPermissionOwner;)V
PLcom/android/server/uri/UriGrantsManagerService;->matchesProvider(Landroid/net/Uri;Landroid/content/pm/ProviderInfo;)Z
PLcom/android/server/uri/UriGrantsManagerService;->removeUriPermissionIfNeeded(Lcom/android/server/uri/UriPermission;)V
PLcom/android/server/uri/UriGrantsManagerService;->revokeUriPermission(Ljava/lang/String;ILcom/android/server/uri/GrantUri;I)V
PLcom/android/server/uri/UriPermission;-><init>(Ljava/lang/String;Ljava/lang/String;ILcom/android/server/uri/GrantUri;)V
PLcom/android/server/uri/UriPermission;->grantModes(ILcom/android/server/uri/UriPermissionOwner;)V
PLcom/android/server/uri/UriPermission;->removeReadOwner(Lcom/android/server/uri/UriPermissionOwner;)V
PLcom/android/server/uri/UriPermission;->removeWriteOwner(Lcom/android/server/uri/UriPermissionOwner;)V
PLcom/android/server/uri/UriPermission;->revokeModes(IZ)Z
PLcom/android/server/uri/UriPermission;->updateModeFlags()V
PLcom/android/server/uri/UriPermissionOwner$ExternalToken;->getOwner()Lcom/android/server/uri/UriPermissionOwner;
PLcom/android/server/uri/UriPermissionOwner;->addReadPermission(Lcom/android/server/uri/UriPermission;)V
PLcom/android/server/uri/UriPermissionOwner;->addWritePermission(Lcom/android/server/uri/UriPermission;)V
PLcom/android/server/uri/UriPermissionOwner;->removeReadPermission(Lcom/android/server/uri/UriPermission;)V
PLcom/android/server/uri/UriPermissionOwner;->removeUriPermission(Lcom/android/server/uri/GrantUri;I)V
PLcom/android/server/uri/UriPermissionOwner;->removeUriPermissions()V
PLcom/android/server/uri/UriPermissionOwner;->removeUriPermissions(I)V
PLcom/android/server/usage/-$$Lambda$UserUsageStatsService$wWX7s9XZT5O4B7JcG_IB_VcPI9s;->combine(Lcom/android/server/usage/IntervalStats;ZLjava/util/List;)V
PLcom/android/server/usage/AppIdleHistory;->dump(Lcom/android/internal/util/IndentingPrintWriter;ILjava/lang/String;)V
PLcom/android/server/usage/AppIdleHistory;->getAppStandbyBuckets(IZ)Ljava/util/ArrayList;
PLcom/android/server/usage/AppIdleHistory;->reportUsage(Ljava/lang/String;IIIJJ)Lcom/android/server/usage/AppIdleHistory$AppUsageHistory;
PLcom/android/server/usage/AppIdleHistory;->setLastJobRunTime(Ljava/lang/String;IJ)V
PLcom/android/server/usage/AppIdleHistory;->updateLastPrediction(Lcom/android/server/usage/AppIdleHistory$AppUsageHistory;JI)V
PLcom/android/server/usage/AppIdleHistory;->writeAppIdleDurations()V
PLcom/android/server/usage/AppIdleHistory;->writeAppIdleTimes(I)V
PLcom/android/server/usage/AppIdleHistory;->writeScreenOnTime()V
PLcom/android/server/usage/AppStandbyController$2;->onDisplayAdded(I)V
PLcom/android/server/usage/AppStandbyController$2;->onDisplayRemoved(I)V
PLcom/android/server/usage/AppStandbyController$Injector;->currentTimeMillis()J
PLcom/android/server/usage/AppStandbyController$Injector;->isCharging()Z
PLcom/android/server/usage/AppStandbyController$Injector;->isDeviceIdleMode()Z
PLcom/android/server/usage/AppStandbyController$Injector;->isPackageEphemeral(ILjava/lang/String;)Z
PLcom/android/server/usage/AppStandbyController$Injector;->isPackageInstalled(Ljava/lang/String;II)Z
PLcom/android/server/usage/AppStandbyController;->checkParoleTimeout()V
PLcom/android/server/usage/AppStandbyController;->clearCarrierPrivilegedApps()V
PLcom/android/server/usage/AppStandbyController;->dumpUser(Lcom/android/internal/util/IndentingPrintWriter;ILjava/lang/String;)V
PLcom/android/server/usage/AppStandbyController;->flushDurationsToDisk()V
PLcom/android/server/usage/AppStandbyController;->flushToDisk(I)V
PLcom/android/server/usage/AppStandbyController;->getAppId(Ljava/lang/String;)I
PLcom/android/server/usage/AppStandbyController;->getAppStandbyBuckets(I)Ljava/util/List;
PLcom/android/server/usage/AppStandbyController;->initializeDefaultsForSystemApps(I)V
PLcom/android/server/usage/AppStandbyController;->isAppIdleFilteredOrParoled(Ljava/lang/String;IJZ)Z
PLcom/android/server/usage/AppStandbyController;->onDeviceIdleModeChanged()V
PLcom/android/server/usage/AppStandbyController;->postReportExemptedSyncScheduled(Ljava/lang/String;I)V
PLcom/android/server/usage/AppStandbyController;->postReportExemptedSyncStart(Ljava/lang/String;I)V
PLcom/android/server/usage/AppStandbyController;->reportExemptedSyncScheduled(Ljava/lang/String;I)V
PLcom/android/server/usage/AppStandbyController;->reportExemptedSyncStart(Ljava/lang/String;I)V
PLcom/android/server/usage/AppStandbyController;->setAppIdleParoled(Z)V
PLcom/android/server/usage/AppStandbyController;->setAppStandbyBucket(Ljava/lang/String;IIIJZ)V
PLcom/android/server/usage/AppStandbyController;->setLastJobRunTime(Ljava/lang/String;IJ)V
PLcom/android/server/usage/AppStandbyController;->updateChargingStableState()V
PLcom/android/server/usage/AppTimeLimitController$UserData;->dump(Ljava/io/PrintWriter;)V
PLcom/android/server/usage/AppTimeLimitController;->dump([Ljava/lang/String;Ljava/io/PrintWriter;)V
PLcom/android/server/usage/AppTimeLimitController;->getAppUsageLimit(Ljava/lang/String;Landroid/os/UserHandle;)Landroid/app/usage/UsageStatsManagerInternal$AppUsageLimitData;
PLcom/android/server/usage/IntervalStats;->commitTime(J)V
PLcom/android/server/usage/IntervalStats;->updateChooserCounts(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/usage/IntervalStats;->updateKeyguardHidden(J)V
PLcom/android/server/usage/IntervalStats;->updateScreenNonInteractive(J)V
PLcom/android/server/usage/StorageStatsService;->enforcePermission(ILjava/lang/String;)V
PLcom/android/server/usage/StorageStatsService;->getAppIds(I)[I
PLcom/android/server/usage/StorageStatsService;->getCacheBytes(Ljava/lang/String;Ljava/lang/String;)J
PLcom/android/server/usage/StorageStatsService;->getCacheQuotaBytes(Ljava/lang/String;ILjava/lang/String;)J
PLcom/android/server/usage/StorageStatsService;->getFreeBytes(Ljava/lang/String;Ljava/lang/String;)J
PLcom/android/server/usage/StorageStatsService;->getTotalBytes(Ljava/lang/String;Ljava/lang/String;)J
PLcom/android/server/usage/StorageStatsService;->isQuotaSupported(Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/usage/StorageStatsService;->notifySignificantDelta()V
PLcom/android/server/usage/StorageStatsService;->queryExternalStatsForUser(Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/ExternalStorageStats;
PLcom/android/server/usage/StorageStatsService;->queryStatsForPackage(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats;
PLcom/android/server/usage/StorageStatsService;->queryStatsForUid(Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats;
PLcom/android/server/usage/StorageStatsService;->queryStatsForUser(Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats;
PLcom/android/server/usage/UnixCalendar;->addMonths(I)V
PLcom/android/server/usage/UnixCalendar;->addWeeks(I)V
PLcom/android/server/usage/UnixCalendar;->addYears(I)V
PLcom/android/server/usage/UsageStatsDatabase;->checkinDailyFiles(Lcom/android/server/usage/UsageStatsDatabase$CheckinAction;)Z
PLcom/android/server/usage/UsageStatsDatabase;->findBestFitBucket(JJ)I
PLcom/android/server/usage/UsageStatsDatabase;->getBackupPayload(Ljava/lang/String;)[B
PLcom/android/server/usage/UsageStatsDatabase;->getBackupPayload(Ljava/lang/String;I)[B
PLcom/android/server/usage/UsageStatsDatabase;->prune(J)V
PLcom/android/server/usage/UsageStatsDatabase;->pruneChooserCountsOlderThan(Ljava/io/File;J)V
PLcom/android/server/usage/UsageStatsDatabase;->pruneFilesOlderThan(Ljava/io/File;J)V
PLcom/android/server/usage/UsageStatsDatabase;->queryUsageStats(IJJLcom/android/server/usage/UsageStatsDatabase$StatCombiner;)Ljava/util/List;
PLcom/android/server/usage/UsageStatsDatabase;->serializeIntervalStats(Lcom/android/server/usage/IntervalStats;I)[B
PLcom/android/server/usage/UsageStatsDatabase;->writeIntervalStatsToStream(Ljava/io/DataOutputStream;Landroid/util/AtomicFile;I)V
PLcom/android/server/usage/UsageStatsService$BinderService;->checkCallerIsSameApp(Ljava/lang/String;)V
PLcom/android/server/usage/UsageStatsService$BinderService;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/usage/UsageStatsService$BinderService;->getAppStandbyBucket(Ljava/lang/String;Ljava/lang/String;I)I
PLcom/android/server/usage/UsageStatsService$BinderService;->getAppStandbyBuckets(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/usage/UsageStatsService$BinderService;->hasPermission(Ljava/lang/String;)Z
PLcom/android/server/usage/UsageStatsService$BinderService;->isAppInactive(Ljava/lang/String;I)Z
PLcom/android/server/usage/UsageStatsService$BinderService;->onCarrierPrivilegedAppsChanged()V
PLcom/android/server/usage/UsageStatsService$BinderService;->queryEvents(JJLjava/lang/String;)Landroid/app/usage/UsageEvents;
PLcom/android/server/usage/UsageStatsService$BinderService;->queryEventsForPackage(JJLjava/lang/String;)Landroid/app/usage/UsageEvents;
PLcom/android/server/usage/UsageStatsService$BinderService;->queryEventsForPackageForUser(JJILjava/lang/String;Ljava/lang/String;)Landroid/app/usage/UsageEvents;
PLcom/android/server/usage/UsageStatsService$BinderService;->queryUsageStats(IJJLjava/lang/String;)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/usage/UsageStatsService$BinderService;->reportChooserSelection(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/usage/UsageStatsService$BinderService;->setAppStandbyBuckets(Landroid/content/pm/ParceledListSlice;I)V
PLcom/android/server/usage/UsageStatsService$BinderService;->whitelistAppTemporarily(Ljava/lang/String;JI)V
PLcom/android/server/usage/UsageStatsService$LocalService;->getAppUsageLimit(Ljava/lang/String;Landroid/os/UserHandle;)Landroid/app/usage/UsageStatsManagerInternal$AppUsageLimitData;
PLcom/android/server/usage/UsageStatsService$LocalService;->getBackupPayload(ILjava/lang/String;)[B
PLcom/android/server/usage/UsageStatsService$LocalService;->queryUsageStatsForUser(IIJJZ)Ljava/util/List;
PLcom/android/server/usage/UsageStatsService$LocalService;->reportExemptedSyncScheduled(Ljava/lang/String;I)V
PLcom/android/server/usage/UsageStatsService$LocalService;->reportExemptedSyncStart(Ljava/lang/String;I)V
PLcom/android/server/usage/UsageStatsService$LocalService;->reportInterruptiveNotification(Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/usage/UsageStatsService$LocalService;->reportShortcutUsage(Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/usage/UsageStatsService$LocalService;->setLastJobRunTime(Ljava/lang/String;IJ)V
PLcom/android/server/usage/UsageStatsService;->dump([Ljava/lang/String;Ljava/io/PrintWriter;)V
PLcom/android/server/usage/UsageStatsService;->flushToDisk()V
PLcom/android/server/usage/UsageStatsService;->flushToDiskLocked()V
PLcom/android/server/usage/UsageStatsService;->onNewUpdate(I)V
PLcom/android/server/usage/UsageStatsService;->queryEvents(IJJZ)Landroid/app/usage/UsageEvents;
PLcom/android/server/usage/UsageStatsService;->queryEventsForPackage(IJJLjava/lang/String;Z)Landroid/app/usage/UsageEvents;
PLcom/android/server/usage/UsageStatsService;->queryUsageStats(IIJJZ)Ljava/util/List;
PLcom/android/server/usage/UsageStatsService;->reportEventToAllUserId(Landroid/app/usage/UsageEvents$Event;)V
PLcom/android/server/usage/UserUsageStatsService$1;->combine(Lcom/android/server/usage/IntervalStats;ZLjava/util/List;)V
PLcom/android/server/usage/UserUsageStatsService$4;->combine(Lcom/android/server/usage/IntervalStats;ZLjava/util/List;)V
PLcom/android/server/usage/UserUsageStatsService$5;->checkin(Lcom/android/server/usage/IntervalStats;)Z
PLcom/android/server/usage/UserUsageStatsService;->checkin(Lcom/android/internal/util/IndentingPrintWriter;)V
PLcom/android/server/usage/UserUsageStatsService;->eventToString(I)Ljava/lang/String;
PLcom/android/server/usage/UserUsageStatsService;->formatDateTime(JZ)Ljava/lang/String;
PLcom/android/server/usage/UserUsageStatsService;->formatElapsedTime(JZ)Ljava/lang/String;
PLcom/android/server/usage/UserUsageStatsService;->getBackupPayload(Ljava/lang/String;)[B
PLcom/android/server/usage/UserUsageStatsService;->lambda$queryEventsForPackage$0(JJLjava/lang/String;Landroid/util/ArraySet;ZLcom/android/server/usage/IntervalStats;ZLjava/util/List;)V
PLcom/android/server/usage/UserUsageStatsService;->notifyStatsChanged()V
PLcom/android/server/usage/UserUsageStatsService;->printEvent(Lcom/android/internal/util/IndentingPrintWriter;Landroid/app/usage/UsageEvents$Event;Z)V
PLcom/android/server/usage/UserUsageStatsService;->printEventAggregation(Lcom/android/internal/util/IndentingPrintWriter;Ljava/lang/String;Lcom/android/server/usage/IntervalStats$EventTracker;Z)V
PLcom/android/server/usage/UserUsageStatsService;->printIntervalStats(Lcom/android/internal/util/IndentingPrintWriter;Lcom/android/server/usage/IntervalStats;ZZLjava/lang/String;)V
PLcom/android/server/usage/UserUsageStatsService;->queryEvents(JJZ)Landroid/app/usage/UsageEvents;
PLcom/android/server/usage/UserUsageStatsService;->queryEventsForPackage(JJLjava/lang/String;Z)Landroid/app/usage/UsageEvents;
PLcom/android/server/usage/UserUsageStatsService;->queryStats(IJJLcom/android/server/usage/UsageStatsDatabase$StatCombiner;)Ljava/util/List;
PLcom/android/server/usage/UserUsageStatsService;->queryUsageStats(IJJ)Ljava/util/List;
PLcom/android/server/usage/UserUsageStatsService;->rolloverStats(J)V
PLcom/android/server/usb/MtpNotificationManager;->hideNotification(I)V
PLcom/android/server/usb/MtpNotificationManager;->isMtpDevice(Landroid/hardware/usb/UsbDevice;)Z
PLcom/android/server/usb/UsbAlsaDevice;->getAlsaCardDeviceString()Ljava/lang/String;
PLcom/android/server/usb/UsbAlsaDevice;->isInputJackConnected()Z
PLcom/android/server/usb/UsbAlsaDevice;->isOutputJackConnected()Z
PLcom/android/server/usb/UsbAlsaDevice;->setDeviceNameAndDescription(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/usb/UsbAlsaDevice;->start()V
PLcom/android/server/usb/UsbAlsaDevice;->startJackDetect()V
PLcom/android/server/usb/UsbAlsaDevice;->stop()V
PLcom/android/server/usb/UsbAlsaDevice;->stopJackDetect()V
PLcom/android/server/usb/UsbAlsaDevice;->toString()Ljava/lang/String;
PLcom/android/server/usb/UsbAlsaDevice;->updateWiredDeviceConnectionState(Z)V
PLcom/android/server/usb/UsbAlsaManager;->deselectAlsaDevice()V
PLcom/android/server/usb/UsbAlsaManager;->getAlsaDeviceListIndexFor(Ljava/lang/String;)I
PLcom/android/server/usb/UsbAlsaManager;->selectAlsaDevice(Lcom/android/server/usb/UsbAlsaDevice;)V
PLcom/android/server/usb/UsbAlsaManager;->setPeripheralMidiState(ZII)V
PLcom/android/server/usb/UsbAlsaManager;->usbDeviceAdded(Ljava/lang/String;Landroid/hardware/usb/UsbDevice;Lcom/android/server/usb/descriptors/UsbDescriptorParser;)V
PLcom/android/server/usb/UsbAlsaManager;->usbDeviceRemoved(Ljava/lang/String;)V
PLcom/android/server/usb/UsbDeviceManager$3;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/usb/UsbDeviceManager$UsbHandler;->getAppliedFunctions(J)J
PLcom/android/server/usb/UsbDeviceManager$UsbHandler;->getChargingFunctions()J
PLcom/android/server/usb/UsbDeviceManager$UsbHandler;->getCurrentAccessory()Landroid/hardware/usb/UsbAccessory;
PLcom/android/server/usb/UsbDeviceManager$UsbHandler;->getEnabledFunctions()J
PLcom/android/server/usb/UsbDeviceManager$UsbHandler;->isUsbDataTransferActive(J)Z
PLcom/android/server/usb/UsbDeviceManager$UsbHandler;->isUsbStateChanged(Landroid/content/Intent;)Z
PLcom/android/server/usb/UsbDeviceManager$UsbHandler;->isUsbTransferAllowed()Z
PLcom/android/server/usb/UsbDeviceManager$UsbHandler;->sendMessage(ILjava/lang/Object;)V
PLcom/android/server/usb/UsbDeviceManager$UsbHandler;->sendMessage(ILjava/lang/Object;Z)V
PLcom/android/server/usb/UsbDeviceManager$UsbHandler;->sendStickyBroadcast(Landroid/content/Intent;)V
PLcom/android/server/usb/UsbDeviceManager$UsbHandler;->updateCurrentAccessory()V
PLcom/android/server/usb/UsbDeviceManager$UsbHandler;->updateMidiFunction()V
PLcom/android/server/usb/UsbDeviceManager$UsbHandler;->updateUsbStateBroadcastIfNeeded(J)V
PLcom/android/server/usb/UsbDeviceManager$UsbHandlerHal$UsbGadgetCallback;->setCurrentUsbFunctionsCb(JI)V
PLcom/android/server/usb/UsbDeviceManager$UsbHandlerHal;->setEnabledFunctions(JZ)V
PLcom/android/server/usb/UsbDeviceManager$UsbHandlerHal;->setUsbConfig(JZ)V
PLcom/android/server/usb/UsbDeviceManager$UsbUEventObserver;->onUEvent(Landroid/os/UEventObserver$UEvent;)V
PLcom/android/server/usb/UsbDeviceManager;->bootCompleted()V
PLcom/android/server/usb/UsbDeviceManager;->getAccessoryStrings()[Ljava/lang/String;
PLcom/android/server/usb/UsbDeviceManager;->getCurrentAccessory()Landroid/hardware/usb/UsbAccessory;
PLcom/android/server/usb/UsbDeviceManager;->getCurrentFunctions()J
PLcom/android/server/usb/UsbDeviceManager;->getCurrentSettings()Lcom/android/server/usb/UsbProfileGroupSettingsManager;
PLcom/android/server/usb/UsbDeviceManager;->onAwakeStateChanged(Z)V
PLcom/android/server/usb/UsbDeviceManager;->onUnlockUser(I)V
PLcom/android/server/usb/UsbDeviceManager;->openAccessory(Landroid/hardware/usb/UsbAccessory;Lcom/android/server/usb/UsbUserSettingsManager;I)Landroid/os/ParcelFileDescriptor;
PLcom/android/server/usb/UsbDeviceManager;->setCurrentFunctions(J)V
PLcom/android/server/usb/UsbDeviceManager;->startAccessoryMode()V
PLcom/android/server/usb/UsbDeviceManager;->updateUserRestrictions()V
PLcom/android/server/usb/UsbHostManager;->addConnectionRecord(Ljava/lang/String;I[B)V
PLcom/android/server/usb/UsbHostManager;->checkUsbInterfacesBlackListed(Lcom/android/server/usb/descriptors/UsbDescriptorParser;)Z
PLcom/android/server/usb/UsbHostManager;->getCurrentUserSettings()Lcom/android/server/usb/UsbProfileGroupSettingsManager;
PLcom/android/server/usb/UsbHostManager;->getDeviceList(Landroid/os/Bundle;)V
PLcom/android/server/usb/UsbHostManager;->getUsbDeviceConnectionHandler()Landroid/content/ComponentName;
PLcom/android/server/usb/UsbHostManager;->logUsbDevice(Lcom/android/server/usb/descriptors/UsbDescriptorParser;)V
PLcom/android/server/usb/UsbHostManager;->usbDeviceAdded(Ljava/lang/String;II[B)Z
PLcom/android/server/usb/UsbHostManager;->usbDeviceRemoved(Ljava/lang/String;)V
PLcom/android/server/usb/UsbPermissionManager;-><init>(Landroid/content/Context;Landroid/os/UserHandle;)V
PLcom/android/server/usb/UsbPermissionManager;->grantAccessoryPermission(Landroid/hardware/usb/UsbAccessory;I)V
PLcom/android/server/usb/UsbPermissionManager;->hasPermission(Landroid/hardware/usb/UsbAccessory;I)Z
PLcom/android/server/usb/UsbPermissionManager;->removeAccessoryPermissions(Landroid/hardware/usb/UsbAccessory;)V
PLcom/android/server/usb/UsbPermissionManager;->removeDevicePermissions(Landroid/hardware/usb/UsbDevice;)V
PLcom/android/server/usb/UsbPortManager;->getPortStatus(Ljava/lang/String;)Landroid/hardware/usb/UsbPortStatus;
PLcom/android/server/usb/UsbPortManager;->getPorts()[Landroid/hardware/usb/UsbPort;
PLcom/android/server/usb/UsbProfileGroupSettingsManager$MyPackageMonitor;->onPackageAdded(Ljava/lang/String;I)V
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->accessoryAttached(Landroid/hardware/usb/UsbAccessory;)V
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->deviceAttached(Landroid/hardware/usb/UsbDevice;)V
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->getAccessoryFilters(Landroid/content/pm/PackageManager;Landroid/content/pm/ResolveInfo;)Ljava/util/ArrayList;
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->getAccessoryMatchesLocked(Landroid/hardware/usb/UsbAccessory;Landroid/content/Intent;)Ljava/util/ArrayList;
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->getDefaultActivityLocked(Ljava/util/ArrayList;Lcom/android/server/usb/UsbProfileGroupSettingsManager$UserPackage;)Landroid/content/pm/ActivityInfo;
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->getDeviceFilters(Landroid/content/pm/PackageManager;Landroid/content/pm/ResolveInfo;)Ljava/util/ArrayList;
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->getDeviceMatchesLocked(Landroid/hardware/usb/UsbDevice;Landroid/content/Intent;)Ljava/util/ArrayList;
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->handlePackageAdded(Lcom/android/server/usb/UsbProfileGroupSettingsManager$UserPackage;)V
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->handlePackageAddedLocked(Lcom/android/server/usb/UsbProfileGroupSettingsManager$UserPackage;Landroid/content/pm/ActivityInfo;Ljava/lang/String;)Z
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->hasDefaults(Ljava/lang/String;Landroid/os/UserHandle;)Z
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->packageMatchesLocked(Landroid/content/pm/ResolveInfo;Landroid/hardware/usb/UsbDevice;Landroid/hardware/usb/UsbAccessory;)Z
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->preferHighPriority(Ljava/util/ArrayList;)Ljava/util/ArrayList;
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->queryIntentActivitiesForAllProfiles(Landroid/content/Intent;)Ljava/util/ArrayList;
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->removeAllDefaultsForUser(Landroid/os/UserHandle;)V
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->removeForwardIntentIfNotNeeded(Ljava/util/ArrayList;)Ljava/util/ArrayList;
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->resolveActivity(Landroid/content/Intent;Landroid/hardware/usb/UsbDevice;Z)V
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->resolveActivity(Landroid/content/Intent;Ljava/util/ArrayList;Landroid/content/pm/ActivityInfo;Landroid/hardware/usb/UsbDevice;Landroid/hardware/usb/UsbAccessory;)V
PLcom/android/server/usb/UsbProfileGroupSettingsManager;->usbDeviceRemoved(Landroid/hardware/usb/UsbDevice;)V
PLcom/android/server/usb/UsbSerialReader;->enforcePackageBelongsToUid(ILjava/lang/String;)V
PLcom/android/server/usb/UsbSerialReader;->getSerial(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/usb/UsbService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/usb/UsbService$Lifecycle;->onStopUser(I)V
PLcom/android/server/usb/UsbService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/usb/UsbService;->bootCompleted()V
PLcom/android/server/usb/UsbService;->getCurrentAccessory()Landroid/hardware/usb/UsbAccessory;
PLcom/android/server/usb/UsbService;->getCurrentFunctions()J
PLcom/android/server/usb/UsbService;->getDeviceList(Landroid/os/Bundle;)V
PLcom/android/server/usb/UsbService;->getPortStatus(Ljava/lang/String;)Landroid/hardware/usb/UsbPortStatus;
PLcom/android/server/usb/UsbService;->getPorts()Ljava/util/List;
PLcom/android/server/usb/UsbService;->hasAccessoryPermission(Landroid/hardware/usb/UsbAccessory;)Z
PLcom/android/server/usb/UsbService;->hasDefaults(Ljava/lang/String;I)Z
PLcom/android/server/usb/UsbService;->onUnlockUser(I)V
PLcom/android/server/usb/UsbService;->openAccessory(Landroid/hardware/usb/UsbAccessory;)Landroid/os/ParcelFileDescriptor;
PLcom/android/server/usb/UsbSettingsManager;->getSettingsForUser(I)Lcom/android/server/usb/UsbUserSettingsManager;
PLcom/android/server/usb/UsbSettingsManager;->remove(Landroid/os/UserHandle;)V
PLcom/android/server/usb/UsbSettingsManager;->usbAccessoryRemoved(Landroid/hardware/usb/UsbAccessory;)V
PLcom/android/server/usb/UsbSettingsManager;->usbDeviceRemoved(Landroid/hardware/usb/UsbDevice;)V
PLcom/android/server/usb/UsbUserSettingsManager;-><init>(Landroid/content/Context;Landroid/os/UserHandle;Lcom/android/server/usb/UsbPermissionManager;)V
PLcom/android/server/usb/UsbUserSettingsManager;->checkPermission(Landroid/hardware/usb/UsbAccessory;I)V
PLcom/android/server/usb/UsbUserSettingsManager;->grantAccessoryPermission(Landroid/hardware/usb/UsbAccessory;I)V
PLcom/android/server/usb/UsbUserSettingsManager;->hasPermission(Landroid/hardware/usb/UsbAccessory;I)Z
PLcom/android/server/usb/UsbUserSettingsManager;->queryIntentActivities(Landroid/content/Intent;)Ljava/util/List;
PLcom/android/server/usb/UsbUserSettingsManager;->removeAccessoryPermissions(Landroid/hardware/usb/UsbAccessory;)V
PLcom/android/server/usb/UsbUserSettingsManager;->removeDevicePermissions(Landroid/hardware/usb/UsbDevice;)V
PLcom/android/server/usb/descriptors/ByteStream;->advance(I)V
PLcom/android/server/usb/descriptors/Usb10ACHeader;->parseRawDescriptors(Lcom/android/server/usb/descriptors/ByteStream;)I
PLcom/android/server/usb/descriptors/Usb10ACInputTerminal;->parseRawDescriptors(Lcom/android/server/usb/descriptors/ByteStream;)I
PLcom/android/server/usb/descriptors/Usb10ACMixerUnit;->parseRawDescriptors(Lcom/android/server/usb/descriptors/ByteStream;)I
PLcom/android/server/usb/descriptors/Usb10ACOutputTerminal;->parseRawDescriptors(Lcom/android/server/usb/descriptors/ByteStream;)I
PLcom/android/server/usb/descriptors/Usb10ASFormatI;->parseRawDescriptors(Lcom/android/server/usb/descriptors/ByteStream;)I
PLcom/android/server/usb/descriptors/Usb10ASGeneral;->parseRawDescriptors(Lcom/android/server/usb/descriptors/ByteStream;)I
PLcom/android/server/usb/descriptors/UsbACAudioStreamEndpoint;->parseRawDescriptors(Lcom/android/server/usb/descriptors/ByteStream;)I
PLcom/android/server/usb/descriptors/UsbACEndpoint;->allocDescriptor(Lcom/android/server/usb/descriptors/UsbDescriptorParser;IB)Lcom/android/server/usb/descriptors/UsbDescriptor;
PLcom/android/server/usb/descriptors/UsbACInterface;->allocAudioControlDescriptor(Lcom/android/server/usb/descriptors/UsbDescriptorParser;Lcom/android/server/usb/descriptors/ByteStream;IBBI)Lcom/android/server/usb/descriptors/UsbDescriptor;
PLcom/android/server/usb/descriptors/UsbACInterface;->allocAudioStreamingDescriptor(Lcom/android/server/usb/descriptors/UsbDescriptorParser;Lcom/android/server/usb/descriptors/ByteStream;IBBI)Lcom/android/server/usb/descriptors/UsbDescriptor;
PLcom/android/server/usb/descriptors/UsbACInterface;->allocDescriptor(Lcom/android/server/usb/descriptors/UsbDescriptorParser;Lcom/android/server/usb/descriptors/ByteStream;IB)Lcom/android/server/usb/descriptors/UsbDescriptor;
PLcom/android/server/usb/descriptors/UsbACInterface;->getSubclass()I
PLcom/android/server/usb/descriptors/UsbACInterface;->getSubtype()B
PLcom/android/server/usb/descriptors/UsbACMixerUnit;->parseRawDescriptors(Lcom/android/server/usb/descriptors/ByteStream;)I
PLcom/android/server/usb/descriptors/UsbACTerminal;->getTerminalType()I
PLcom/android/server/usb/descriptors/UsbASFormat;->allocDescriptor(Lcom/android/server/usb/descriptors/UsbDescriptorParser;Lcom/android/server/usb/descriptors/ByteStream;IBBI)Lcom/android/server/usb/descriptors/UsbDescriptor;
PLcom/android/server/usb/descriptors/UsbConfigDescriptor;->parseRawDescriptors(Lcom/android/server/usb/descriptors/ByteStream;)I
PLcom/android/server/usb/descriptors/UsbConfigDescriptor;->toAndroid(Lcom/android/server/usb/descriptors/UsbDescriptorParser;)Landroid/hardware/usb/UsbConfiguration;
PLcom/android/server/usb/descriptors/UsbDescriptor;-><init>(IB)V
PLcom/android/server/usb/descriptors/UsbDescriptor;->getType()B
PLcom/android/server/usb/descriptors/UsbDescriptor;->parseRawDescriptors(Lcom/android/server/usb/descriptors/ByteStream;)I
PLcom/android/server/usb/descriptors/UsbDescriptor;->postParse(Lcom/android/server/usb/descriptors/ByteStream;)V
PLcom/android/server/usb/descriptors/UsbDescriptorParser;->allocDescriptor(Lcom/android/server/usb/descriptors/ByteStream;)Lcom/android/server/usb/descriptors/UsbDescriptor;
PLcom/android/server/usb/descriptors/UsbDescriptorParser;->getACInterfaceDescriptors(BI)Ljava/util/ArrayList;
PLcom/android/server/usb/descriptors/UsbDescriptorParser;->getInputHeadsetProbability()F
PLcom/android/server/usb/descriptors/UsbDescriptorParser;->getInterfaceDescriptorsForClass(I)Ljava/util/ArrayList;
PLcom/android/server/usb/descriptors/UsbDescriptorParser;->getOutputHeadsetProbability()F
PLcom/android/server/usb/descriptors/UsbDescriptorParser;->hasInput()Z
PLcom/android/server/usb/descriptors/UsbDescriptorParser;->hasMIDIInterface()Z
PLcom/android/server/usb/descriptors/UsbDescriptorParser;->hasMic()Z
PLcom/android/server/usb/descriptors/UsbDescriptorParser;->hasOutput()Z
PLcom/android/server/usb/descriptors/UsbDescriptorParser;->hasSpeaker()Z
PLcom/android/server/usb/descriptors/UsbDescriptorParser;->parseDescriptors([B)V
PLcom/android/server/usb/descriptors/UsbDeviceDescriptor;->getDeviceReleaseString()Ljava/lang/String;
PLcom/android/server/usb/descriptors/UsbDeviceDescriptor;->parseRawDescriptors(Lcom/android/server/usb/descriptors/ByteStream;)I
PLcom/android/server/usb/descriptors/UsbDeviceDescriptor;->toAndroid(Lcom/android/server/usb/descriptors/UsbDescriptorParser;)Landroid/hardware/usb/UsbDevice$Builder;
PLcom/android/server/usb/descriptors/UsbEndpointDescriptor;->parseRawDescriptors(Lcom/android/server/usb/descriptors/ByteStream;)I
PLcom/android/server/usb/descriptors/UsbEndpointDescriptor;->toAndroid(Lcom/android/server/usb/descriptors/UsbDescriptorParser;)Landroid/hardware/usb/UsbEndpoint;
PLcom/android/server/usb/descriptors/UsbHIDDescriptor;->parseRawDescriptors(Lcom/android/server/usb/descriptors/ByteStream;)I
PLcom/android/server/usb/descriptors/UsbInterfaceDescriptor;->addEndpointDescriptor(Lcom/android/server/usb/descriptors/UsbEndpointDescriptor;)V
PLcom/android/server/usb/descriptors/UsbInterfaceDescriptor;->getUsbClass()I
PLcom/android/server/usb/descriptors/UsbInterfaceDescriptor;->getUsbSubclass()I
PLcom/android/server/usb/descriptors/UsbInterfaceDescriptor;->parseRawDescriptors(Lcom/android/server/usb/descriptors/ByteStream;)I
PLcom/android/server/usb/descriptors/UsbInterfaceDescriptor;->toAndroid(Lcom/android/server/usb/descriptors/UsbDescriptorParser;)Landroid/hardware/usb/UsbInterface;
PLcom/android/server/utils/PriorityDump;->dump(Lcom/android/server/utils/PriorityDump$PriorityDumper;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/voiceinteraction/DatabaseHelper;->getArrayForCommaSeparatedString(Ljava/lang/String;)[I
PLcom/android/server/voiceinteraction/DatabaseHelper;->getKeyphraseSoundModel(IILjava/lang/String;)Landroid/hardware/soundtrigger/SoundTrigger$KeyphraseSoundModel;
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$1;->getPackages(I)[Ljava/lang/String;
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$2;->onHandleUserStop(Landroid/content/Intent;I)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$2;->onPackageModified(Ljava/lang/String;)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$2;->onSomePackagesChanged()V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$RoleObserver;->getDefaultRecognizer(Landroid/os/UserHandle;)Ljava/lang/String;
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$RoleObserver;->onRoleHoldersChanged(Ljava/lang/String;Landroid/os/UserHandle;)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$SettingsObserver;->onChange(Z)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->closeSystemDialogs(Landroid/os/IBinder;)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->deliverNewSession(Landroid/os/IBinder;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;)Z
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->enforceIsCurrentVoiceInteractionService(Landroid/service/voice/IVoiceInteractionService;)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->findAvailInteractor(ILjava/lang/String;)Landroid/service/voice/VoiceInteractionServiceInfo;
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->findAvailRecognizer(Ljava/lang/String;I)Landroid/content/ComponentName;
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->getCurAssistant(I)Landroid/content/ComponentName;
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->getCurInteractor(I)Landroid/content/ComponentName;
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->getDspModuleProperties(Landroid/service/voice/IVoiceInteractionService;)Landroid/hardware/soundtrigger/SoundTrigger$ModuleProperties;
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->getUserDisabledShowContext()I
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->hideCurrentSession()V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->hideSessionFromSession(Landroid/os/IBinder;)Z
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->isEnrolledForKeyphrase(Landroid/service/voice/IVoiceInteractionService;ILjava/lang/String;)Z
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->isSessionRunning()Z
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->onLockscreenShown()V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->onSessionHidden()V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->onSessionShown()V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->setCurInteractor(Landroid/content/ComponentName;I)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->setCurRecognizer(Landroid/content/ComponentName;I)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->setDisabledShowContext(I)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->showSession(Landroid/service/voice/IVoiceInteractionService;Landroid/os/Bundle;I)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->showSessionForActiveService(Landroid/os/Bundle;ILcom/android/internal/app/IVoiceInteractionSessionShowCallback;Landroid/os/IBinder;)Z
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->showSessionFromSession(Landroid/os/IBinder;Landroid/os/Bundle;I)Z
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->startAssistantActivity(Landroid/os/IBinder;Landroid/content/Intent;Ljava/lang/String;)I
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->startRecognition(Landroid/service/voice/IVoiceInteractionService;ILjava/lang/String;Landroid/hardware/soundtrigger/IRecognitionStatusCallback;Landroid/hardware/soundtrigger/SoundTrigger$RecognitionConfig;)I
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->stopRecognition(Landroid/service/voice/IVoiceInteractionService;ILandroid/hardware/soundtrigger/IRecognitionStatusCallback;)I
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->switchImplementationIfNeeded(Z)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerService;->onUnlockUser(I)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl$2;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl$2;->onServiceDisconnected(Landroid/content/ComponentName;)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl;-><init>(Landroid/content/Context;Landroid/os/Handler;Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;ILandroid/content/ComponentName;)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl;->closeSystemDialogsLocked(Landroid/os/IBinder;)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl;->deliverNewSessionLocked(Landroid/os/IBinder;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;)Z
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl;->finishLocked(Landroid/os/IBinder;Z)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl;->getUserDisabledShowContextLocked(I)I
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl;->hideSessionLocked()Z
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl;->onSessionHidden(Lcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl;->onSessionShown(Lcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl;->sessionConnectionGone(Lcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl;->setDisabledShowContextLocked(II)V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl;->showSessionLocked(Landroid/os/Bundle;ILcom/android/internal/app/IVoiceInteractionSessionShowCallback;Landroid/os/IBinder;)Z
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl;->shutdownLocked()V
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl;->startAssistantActivityLocked(IILandroid/os/IBinder;Landroid/content/Intent;Ljava/lang/String;)I
PLcom/android/server/voiceinteraction/VoiceInteractionManagerServiceImpl;->startLocked()V
PLcom/android/server/voiceinteraction/VoiceInteractionSessionConnection$1;->onShown()V
PLcom/android/server/voiceinteraction/VoiceInteractionSessionConnection$2;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;-><init>(Ljava/lang/Object;Landroid/content/ComponentName;ILandroid/content/Context;Lcom/android/server/voiceinteraction/VoiceInteractionSessionConnection$Callback;ILandroid/os/Handler;)V
PLcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;->canHandleReceivedAssistDataLocked()Z
PLcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;->cancelLocked(Z)V
PLcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;->deliverNewSessionLocked(Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;)Z
PLcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;->getUserDisabledShowContextLocked()I
PLcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;->hideLocked()Z
PLcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;->notifyPendingShowCallbacksShownLocked()V
PLcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;->onAssistDataReceivedLocked(Landroid/os/Bundle;II)V
PLcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;->onAssistScreenshotReceivedLocked(Landroid/graphics/Bitmap;)V
PLcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
PLcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;->onServiceDisconnected(Landroid/content/ComponentName;)V
PLcom/android/server/voiceinteraction/VoiceInteractionSessionConnection;->showLocked(Landroid/os/Bundle;IILcom/android/internal/app/IVoiceInteractionSessionShowCallback;Ljava/util/List;)Z
PLcom/android/server/vr/EnabledComponentsObserver$1;->onPackageDisappeared(Ljava/lang/String;I)V
PLcom/android/server/vr/EnabledComponentsObserver$1;->onPackageModified(Ljava/lang/String;)V
PLcom/android/server/vr/EnabledComponentsObserver$1;->onSomePackagesChanged()V
PLcom/android/server/vr/EnabledComponentsObserver;->isValid(Landroid/content/ComponentName;I)I
PLcom/android/server/vr/EnabledComponentsObserver;->onPackagesChanged()V
PLcom/android/server/vr/VrManagerService$4;->unregisterListener(Landroid/service/vr/IVrStateCallbacks;)V
PLcom/android/server/vr/VrManagerService$5;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/vr/VrManagerService$LocalService;->isCurrentVrListener(Ljava/lang/String;I)Z
PLcom/android/server/vr/VrManagerService;->consumeAndApplyPendingStateLocked(Z)V
PLcom/android/server/vr/VrManagerService;->isCurrentVrListener(Ljava/lang/String;I)Z
PLcom/android/server/vr/VrManagerService;->onAwakeStateChanged(Z)V
PLcom/android/server/vr/VrManagerService;->onCleanupUser(I)V
PLcom/android/server/vr/VrManagerService;->onStopUser(I)V
PLcom/android/server/vr/VrManagerService;->setPersistentModeAndNotifyListenersLocked(Z)V
PLcom/android/server/vr/VrManagerService;->setUserUnlocked()V
PLcom/android/server/vr/VrManagerService;->updateCurrentVrServiceLocked(ZZLandroid/content/ComponentName;IILandroid/content/ComponentName;)Z
PLcom/android/server/wallpaper/WallpaperManagerService$1;->onDisplayAdded(I)V
PLcom/android/server/wallpaper/WallpaperManagerService$1;->onDisplayRemoved(I)V
PLcom/android/server/wallpaper/WallpaperManagerService$5;->run()V
PLcom/android/server/wallpaper/WallpaperManagerService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/wallpaper/WallpaperManagerService$MyPackageMonitor;->doPackagesChangedLocked(ZLcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;)Z
PLcom/android/server/wallpaper/WallpaperManagerService$MyPackageMonitor;->onPackageModified(Ljava/lang/String;)V
PLcom/android/server/wallpaper/WallpaperManagerService$MyPackageMonitor;->onPackageUpdateFinished(Ljava/lang/String;I)V
PLcom/android/server/wallpaper/WallpaperManagerService$MyPackageMonitor;->onPackageUpdateStarted(Ljava/lang/String;I)V
PLcom/android/server/wallpaper/WallpaperManagerService$MyPackageMonitor;->onSomePackagesChanged()V
PLcom/android/server/wallpaper/WallpaperManagerService;->getHeightHint(I)I
PLcom/android/server/wallpaper/WallpaperManagerService;->getWallpaperIdForUser(II)I
PLcom/android/server/wallpaper/WallpaperManagerService;->getWidthHint(I)I
PLcom/android/server/wallpaper/WallpaperManagerService;->isSetWallpaperAllowed(Ljava/lang/String;)Z
PLcom/android/server/wallpaper/WallpaperManagerService;->isWallpaperBackupEligible(II)Z
PLcom/android/server/wallpaper/WallpaperManagerService;->onUnlockUser(I)V
PLcom/android/server/webkit/WebViewUpdateService$BinderService;->getCurrentWebViewPackage()Landroid/content/pm/PackageInfo;
PLcom/android/server/webkit/WebViewUpdateService$BinderService;->getCurrentWebViewPackageName()Ljava/lang/String;
PLcom/android/server/webkit/WebViewUpdateService$BinderService;->isFallbackPackage(Ljava/lang/String;)Z
PLcom/android/server/webkit/WebViewUpdateService$BinderService;->isMultiProcessEnabled()Z
PLcom/android/server/webkit/WebViewUpdateService$BinderService;->waitForAndGetProvider()Landroid/webkit/WebViewProviderResponse;
PLcom/android/server/webkit/WebViewUpdateServiceImpl;->getCurrentWebViewPackage()Landroid/content/pm/PackageInfo;
PLcom/android/server/webkit/WebViewUpdateServiceImpl;->isFallbackPackage(Ljava/lang/String;)Z
PLcom/android/server/webkit/WebViewUpdateServiceImpl;->waitForAndGetProvider()Landroid/webkit/WebViewProviderResponse;
PLcom/android/server/webkit/WebViewUpdater;->getCurrentWebViewPackage()Landroid/content/pm/PackageInfo;
PLcom/android/server/webkit/WebViewUpdater;->updateCurrentWebViewPackage(Ljava/lang/String;)Landroid/content/pm/PackageInfo;
PLcom/android/server/webkit/WebViewUpdater;->waitForAndGetProvider()Landroid/webkit/WebViewProviderResponse;
PLcom/android/server/wifi/-$$Lambda$NetworkSuggestionEvaluator$LZTxM-Flcd76CD0Nscp2Cz914sQ;-><init>()V
PLcom/android/server/wifi/-$$Lambda$SarManager$VrXGaN2lCt0CybxxEfgneaY4FvY;->run()V
PLcom/android/server/wifi/-$$Lambda$Sgsg9Ml_dxoj_SCBslbH-6YHea8;-><init>()V
PLcom/android/server/wifi/-$$Lambda$Sgsg9Ml_dxoj_SCBslbH-6YHea8;->apply(Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$3BgnlkDDdIw0PJrJmWjhjGZmtCg;->onValues(Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;Landroid/hardware/wifi/supplicant/V1_0/ISupplicantNetwork;)V
PLcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$MZb8lbLDfmk9dJzRNOzLSOYC9_Y;->onValues(Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;Ljava/util/ArrayList;)V
PLcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$MsPuzKcT4xAfuigKAAOs1rYm9CU;->serviceDied(J)V
PLcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$RN5yy1Bc5d6E1Z6k9lqZIMdLATc;->onValues(Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;[B)V
PLcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$Tm7D8fgqduAQdeOyODnUSwEesVo;->onValues(Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;Landroid/hardware/wifi/supplicant/V1_0/ISupplicantNetwork;)V
PLcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$VAcJuhn-A2EvvfEuRumjrowBtmo;->onValues(Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;[B)V
PLcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$YDQh6cDTkoX-9I2n83JHX76YpAA;->onValues(Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;I)V
PLcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$hjOhCW02yzYNlDwHJaely2IS-v0;->onValues(Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;I)V
PLcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$oY40I1ZV1zNoEKNITjSxjIr7WaE;->onValues(Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;Ljava/util/ArrayList;)V
PLcom/android/server/wifi/-$$Lambda$UV1wDVoVlbcxpr8zevj_aMFtUGw;-><init>()V
PLcom/android/server/wifi/-$$Lambda$UV1wDVoVlbcxpr8zevj_aMFtUGw;->applyAsInt(Ljava/lang/Object;)I
PLcom/android/server/wifi/-$$Lambda$WakeupController$sB8N4NPbyfefFu6fc4L75U1Md4E;->test(Ljava/lang/Object;)Z
PLcom/android/server/wifi/-$$Lambda$WifiConfigManager$IQAd8DT29bH7BRNkSq57y94BdXA;-><init>()V
PLcom/android/server/wifi/-$$Lambda$WifiConfigManager$IQAd8DT29bH7BRNkSq57y94BdXA;->apply(Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/wifi/-$$Lambda$WifiConfigStore$E5gj7z5ed5kRI6vVgdfi0Qq87ak;-><init>()V
PLcom/android/server/wifi/-$$Lambda$WifiConfigStore$E5gj7z5ed5kRI6vVgdfi0Qq87ak;->test(Ljava/lang/Object;)Z
PLcom/android/server/wifi/-$$Lambda$WifiConfigStore$Vf3hpICqGHc8cqcggYv9pHhYS2Y;->test(Ljava/lang/Object;)Z
PLcom/android/server/wifi/-$$Lambda$WifiConfigStore$az8-WaXTZV3Kp3BFgTqqEllqrK4;->test(Ljava/lang/Object;)Z
PLcom/android/server/wifi/-$$Lambda$WifiMetrics$2FAdjVJtGK2Wuyu18kKp1OyQsI4;-><init>()V
PLcom/android/server/wifi/-$$Lambda$WifiMetrics$xuFtl6lTSKy2pONVP5XZbMG4HfI;-><init>()V
PLcom/android/server/wifi/-$$Lambda$WifiMetrics$xuFtl6lTSKy2pONVP5XZbMG4HfI;->apply(Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/wifi/-$$Lambda$WifiNetworkSelector$2LNJuIlSgZn0lMDNIYDg-JEcyuI;-><init>(Lcom/android/server/wifi/WifiNetworkSelector;ILcom/android/server/wifi/WifiCandidates;ID)V
PLcom/android/server/wifi/-$$Lambda$WifiNetworkSelector$2LNJuIlSgZn0lMDNIYDg-JEcyuI;->onConnectable(Lcom/android/server/wifi/ScanDetail;Landroid/net/wifi/WifiConfiguration;I)V
PLcom/android/server/wifi/-$$Lambda$WifiNetworkSelector$nuTRv-fYkXyN1p7ZXX1Cy8tpg3k;->onConnectable(Lcom/android/server/wifi/ScanDetail;Landroid/net/wifi/WifiConfiguration;I)V
PLcom/android/server/wifi/-$$Lambda$WifiServiceImpl$19ydix3_o6lajIurHzZGcME4IE8;-><init>()V
PLcom/android/server/wifi/-$$Lambda$WifiServiceImpl$19ydix3_o6lajIurHzZGcME4IE8;->apply(I)Ljava/lang/Object;
PLcom/android/server/wifi/-$$Lambda$WifiServiceImpl$2ZawY3HKMGxYuJvvAb04rbHcj8k;->run()V
PLcom/android/server/wifi/-$$Lambda$WifiServiceImpl$71KWGZ9o3U1lf_2vP7tmY9cz4qQ;->run()V
PLcom/android/server/wifi/-$$Lambda$WifiServiceImpl$Ksp_yxMbYljcYt7029zmD3zpksc;->run()V
PLcom/android/server/wifi/-$$Lambda$WifiServiceImpl$Tk4v3H_jLeO4POzFwYzi9LRyPtE;->run()V
PLcom/android/server/wifi/-$$Lambda$WifiServiceImpl$W4P-xarfb3gYRA7uctWs90nU6nM;->run()V
PLcom/android/server/wifi/-$$Lambda$WifiServiceImpl$YyW97EISRuEDFxd28e1BPgstanY;->run()V
PLcom/android/server/wifi/-$$Lambda$WifiVendorHal$3w2QU6DXdNsy4eC63faTYVcIcMs;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_3/StaLinkLayerStats;)V
PLcom/android/server/wifi/-$$Lambda$WifiVendorHal$ChipEventCallback$opFP1g0mCa0rIEtg63LvzlqySHc;->run()V
PLcom/android/server/wifi/-$$Lambda$WifiVendorHal$NcA8MRxoMqZf5Oz8FvFvnNoRQoE;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;[B)V
PLcom/android/server/wifi/-$$Lambda$WifiVendorHal$XHfBJ_SOylRs_Rl4-IjUDiKOzAY;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
PLcom/android/server/wifi/-$$Lambda$WifiVendorHal$aq7T-76I9D1SC6d_j6P5zk6VHlw;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
PLcom/android/server/wifi/-$$Lambda$WifiVendorHal$bMF1PMemHkEQ2iatQh0WVPpTYGY;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
PLcom/android/server/wifi/-$$Lambda$WifiVendorHal$gGT-eGu2_MxK453qjY1pSxSOP3I;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;I)V
PLcom/android/server/wifi/-$$Lambda$WifiVendorHal$rxCjKAj6M7R-0PzNwiuTAmPm5RQ;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/StaRoamingCapabilities;)V
PLcom/android/server/wifi/-$$Lambda$WifiVendorHal$teXyvL0oUnCS1kQEBqnEheMifN8;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/StaApfPacketFilterCapabilities;)V
PLcom/android/server/wifi/-$$Lambda$WifiVendorHal$xtIgBZOv8ZXsi2hWuntD3i52tkY;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/IWifiChip$ChipDebugInfo;)V
PLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ClientModeActiveState;->exit()V
PLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ClientModeActiveState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/wifi/AggressiveConnectedScore;->generateScore()I
PLcom/android/server/wifi/AggressiveConnectedScore;->reset()V
PLcom/android/server/wifi/AggressiveConnectedScore;->updateUsingWifiInfo(Landroid/net/wifi/WifiInfo;J)V
PLcom/android/server/wifi/AvailableNetworkNotifier$AvailableNetworkNotifierStoreData;->getSsids()Ljava/util/Set;
PLcom/android/server/wifi/AvailableNetworkNotifier$AvailableNetworkNotifierStoreData;->setSsids(Ljava/util/Set;)V
PLcom/android/server/wifi/AvailableNetworkNotifier;->clearPendingNotification(Z)V
PLcom/android/server/wifi/AvailableNetworkNotifier;->handleConnectionFailure()V
PLcom/android/server/wifi/AvailableNetworkNotifier;->handleScanResults(Ljava/util/List;)V
PLcom/android/server/wifi/AvailableNetworkNotifier;->handleWifiConnected(Ljava/lang/String;)V
PLcom/android/server/wifi/AvailableNetworkNotifier;->postInitialNotification(Landroid/net/wifi/ScanResult;)V
PLcom/android/server/wifi/AvailableNetworkNotifier;->recommendNetwork(Ljava/util/List;)Landroid/net/wifi/ScanResult;
PLcom/android/server/wifi/AvailableNetworkNotifier;->removeNetworkFromBlacklist(Ljava/lang/String;)V
PLcom/android/server/wifi/ByteBufferReader;->readInteger(Ljava/nio/ByteBuffer;Ljava/nio/ByteOrder;I)J
PLcom/android/server/wifi/CarrierNetworkConfig$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/wifi/CarrierNetworkConfig;->isCarrierEncryptionInfoAvailable()Z
PLcom/android/server/wifi/CarrierNetworkConfig;->isCarrierNetwork(Ljava/lang/String;)Z
PLcom/android/server/wifi/CarrierNetworkConfig;->processNetworkConfig(Landroid/os/PersistableBundle;Ljava/lang/String;)V
PLcom/android/server/wifi/CarrierNetworkEvaluator;->evaluateNetworks(Ljava/util/List;Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;ZZLcom/android/server/wifi/WifiNetworkSelector$NetworkEvaluator$OnConnectableListener;)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/CarrierNetworkEvaluator;->getName()Ljava/lang/String;
PLcom/android/server/wifi/CarrierNetworkEvaluator;->update(Ljava/util/List;)V
PLcom/android/server/wifi/ClientModeImpl$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/wifi/ClientModeImpl$3;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/wifi/ClientModeImpl$ConnectModeState;->exit()V
PLcom/android/server/wifi/ClientModeImpl$ConnectModeState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/wifi/ClientModeImpl$ConnectedState;->enter()V
PLcom/android/server/wifi/ClientModeImpl$ConnectedState;->exit()V
PLcom/android/server/wifi/ClientModeImpl$ConnectedState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/wifi/ClientModeImpl$DisconnectedState;->enter()V
PLcom/android/server/wifi/ClientModeImpl$DisconnectedState;->exit()V
PLcom/android/server/wifi/ClientModeImpl$DisconnectedState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/wifi/ClientModeImpl$DisconnectingState;->enter()V
PLcom/android/server/wifi/ClientModeImpl$DisconnectingState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;->awaitShutdown()Z
PLcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;->installPacketFilter([B)V
PLcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;->onIpClientCreated(Landroid/net/ip/IIpClient;)V
PLcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;->onLinkPropertiesChange(Landroid/net/LinkProperties;)V
PLcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;->onNewDhcpResults(Landroid/net/DhcpResults;)V
PLcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;->onPostDhcpAction()V
PLcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;->onPreDhcpAction()V
PLcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;->onProvisioningFailure(Landroid/net/LinkProperties;)V
PLcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;->onProvisioningSuccess(Landroid/net/LinkProperties;)V
PLcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;->onQuit()V
PLcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;->onReachabilityLost(Ljava/lang/String;)V
PLcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;->setNeighborDiscoveryOffload(Z)V
PLcom/android/server/wifi/ClientModeImpl$L2ConnectedState;->enter()V
PLcom/android/server/wifi/ClientModeImpl$L2ConnectedState;->exit()V
PLcom/android/server/wifi/ClientModeImpl$L2ConnectedState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/wifi/ClientModeImpl$McastLockManagerFilterController;->startFilteringMulticastPackets()V
PLcom/android/server/wifi/ClientModeImpl$McastLockManagerFilterController;->stopFilteringMulticastPackets()V
PLcom/android/server/wifi/ClientModeImpl$ObtainingIpState;->enter()V
PLcom/android/server/wifi/ClientModeImpl$ObtainingIpState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/wifi/ClientModeImpl$WifiNetworkAgent;->networkStatus(ILjava/lang/String;)V
PLcom/android/server/wifi/ClientModeImpl$WifiNetworkAgent;->setSignalStrengthThresholds([I)V
PLcom/android/server/wifi/ClientModeImpl$WifiNetworkAgent;->startSocketKeepalive(Landroid/os/Message;)V
PLcom/android/server/wifi/ClientModeImpl$WifiNetworkAgent;->stopSocketKeepalive(Landroid/os/Message;)V
PLcom/android/server/wifi/ClientModeImpl$WifiNetworkAgent;->unwanted()V
PLcom/android/server/wifi/ClientModeImpl;->access$1000(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/WifiConfigManager;
PLcom/android/server/wifi/ClientModeImpl;->access$10002(Lcom/android/server/wifi/ClientModeImpl;Lcom/android/server/wifi/WifiLinkLayerStats;)Lcom/android/server/wifi/WifiLinkLayerStats;
PLcom/android/server/wifi/ClientModeImpl;->access$10200(I)I
PLcom/android/server/wifi/ClientModeImpl;->access$10300(Lcom/android/server/wifi/ClientModeImpl;)V
PLcom/android/server/wifi/ClientModeImpl;->access$10500(Lcom/android/server/wifi/ClientModeImpl;)I
PLcom/android/server/wifi/ClientModeImpl;->access$10700(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/WifiTrafficPoller;
PLcom/android/server/wifi/ClientModeImpl;->access$1102(Lcom/android/server/wifi/ClientModeImpl;I)I
PLcom/android/server/wifi/ClientModeImpl;->access$1400(Lcom/android/server/wifi/ClientModeImpl;Landroid/os/Message;ILjava/lang/Object;)V
PLcom/android/server/wifi/ClientModeImpl;->access$2000(Lcom/android/server/wifi/ClientModeImpl;)V
PLcom/android/server/wifi/ClientModeImpl;->access$2100(Lcom/android/server/wifi/ClientModeImpl;Z)V
PLcom/android/server/wifi/ClientModeImpl;->access$2200(Lcom/android/server/wifi/ClientModeImpl;)Landroid/os/PowerManager$WakeLock;
PLcom/android/server/wifi/ClientModeImpl;->access$2400(Lcom/android/server/wifi/ClientModeImpl;)Ljava/lang/String;
PLcom/android/server/wifi/ClientModeImpl;->access$2800(Lcom/android/server/wifi/ClientModeImpl;Landroid/net/LinkProperties;)V
PLcom/android/server/wifi/ClientModeImpl;->access$2900(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/ClientModeImpl$WifiNetworkAgent;
PLcom/android/server/wifi/ClientModeImpl;->access$3000(Lcom/android/server/wifi/ClientModeImpl;)I
PLcom/android/server/wifi/ClientModeImpl;->access$3002(Lcom/android/server/wifi/ClientModeImpl;I)I
PLcom/android/server/wifi/ClientModeImpl;->access$3100(Lcom/android/server/wifi/ClientModeImpl;)I
PLcom/android/server/wifi/ClientModeImpl;->access$3102(Lcom/android/server/wifi/ClientModeImpl;I)I
PLcom/android/server/wifi/ClientModeImpl;->access$3300(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/BaseWifiDiagnostics;
PLcom/android/server/wifi/ClientModeImpl;->access$3600(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/ExtendedWifiInfo;
PLcom/android/server/wifi/ClientModeImpl;->access$3700(Lcom/android/server/wifi/ClientModeImpl;)Landroid/net/NetworkInfo;
PLcom/android/server/wifi/ClientModeImpl;->access$3900(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/WifiConnectivityManager;
PLcom/android/server/wifi/ClientModeImpl;->access$400(Lcom/android/server/wifi/ClientModeImpl;)Landroid/net/ip/IIpClient;
PLcom/android/server/wifi/ClientModeImpl;->access$402(Lcom/android/server/wifi/ClientModeImpl;Landroid/net/ip/IIpClient;)Landroid/net/ip/IIpClient;
PLcom/android/server/wifi/ClientModeImpl;->access$4200(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/WifiScoreCard;
PLcom/android/server/wifi/ClientModeImpl;->access$4402(Lcom/android/server/wifi/ClientModeImpl;Z)Z
PLcom/android/server/wifi/ClientModeImpl;->access$4500(Lcom/android/server/wifi/ClientModeImpl;)Ljava/lang/String;
PLcom/android/server/wifi/ClientModeImpl;->access$4600(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/SupplicantStateTracker;
PLcom/android/server/wifi/ClientModeImpl;->access$4700(Lcom/android/server/wifi/ClientModeImpl;II)V
PLcom/android/server/wifi/ClientModeImpl;->access$4800(Lcom/android/server/wifi/ClientModeImpl;)Ljava/lang/String;
PLcom/android/server/wifi/ClientModeImpl;->access$500(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/WifiMetrics;
PLcom/android/server/wifi/ClientModeImpl;->access$5200(Lcom/android/server/wifi/ClientModeImpl;Landroid/os/Message;)Landroid/net/wifi/SupplicantState;
PLcom/android/server/wifi/ClientModeImpl;->access$5300(Lcom/android/server/wifi/ClientModeImpl;)Z
PLcom/android/server/wifi/ClientModeImpl;->access$5400(Lcom/android/server/wifi/ClientModeImpl;)V
PLcom/android/server/wifi/ClientModeImpl;->access$5500(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/internal/util/State;
PLcom/android/server/wifi/ClientModeImpl;->access$5700(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/WifiScoreReport;
PLcom/android/server/wifi/ClientModeImpl;->access$5902(Lcom/android/server/wifi/ClientModeImpl;Landroid/net/wifi/WifiConfiguration;)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/ClientModeImpl;->access$600(Lcom/android/server/wifi/ClientModeImpl;Landroid/os/Message;Lcom/android/internal/util/State;)V
PLcom/android/server/wifi/ClientModeImpl;->access$6102(Lcom/android/server/wifi/ClientModeImpl;J)J
PLcom/android/server/wifi/ClientModeImpl;->access$6200(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/Clock;
PLcom/android/server/wifi/ClientModeImpl;->access$6300(Lcom/android/server/wifi/ClientModeImpl;)Z
PLcom/android/server/wifi/ClientModeImpl;->access$6500(Lcom/android/server/wifi/ClientModeImpl;)Z
PLcom/android/server/wifi/ClientModeImpl;->access$6502(Lcom/android/server/wifi/ClientModeImpl;Z)Z
PLcom/android/server/wifi/ClientModeImpl;->access$6600(Lcom/android/server/wifi/ClientModeImpl;Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;)Z
PLcom/android/server/wifi/ClientModeImpl;->access$6700(Lcom/android/server/wifi/ClientModeImpl;)Z
PLcom/android/server/wifi/ClientModeImpl;->access$6800(Lcom/android/server/wifi/ClientModeImpl;Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/ClientModeImpl;->access$6900(Lcom/android/server/wifi/ClientModeImpl;Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/ClientModeImpl;->access$7000(Lcom/android/server/wifi/ClientModeImpl;Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;I)V
PLcom/android/server/wifi/ClientModeImpl;->access$7100(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/internal/util/State;
PLcom/android/server/wifi/ClientModeImpl;->access$7500(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/internal/util/State;
PLcom/android/server/wifi/ClientModeImpl;->access$7600(Lcom/android/server/wifi/ClientModeImpl;)Ljava/lang/String;
PLcom/android/server/wifi/ClientModeImpl;->access$7602(Lcom/android/server/wifi/ClientModeImpl;Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/wifi/ClientModeImpl;->access$7700(Lcom/android/server/wifi/ClientModeImpl;Ljava/lang/String;)V
PLcom/android/server/wifi/ClientModeImpl;->access$8000(Lcom/android/server/wifi/ClientModeImpl;IZ)V
PLcom/android/server/wifi/ClientModeImpl;->access$8200(Lcom/android/server/wifi/ClientModeImpl;)I
PLcom/android/server/wifi/ClientModeImpl;->access$8300(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/LinkProbeManager;
PLcom/android/server/wifi/ClientModeImpl;->access$900(Lcom/android/server/wifi/ClientModeImpl;)Z
PLcom/android/server/wifi/ClientModeImpl;->access$902(Lcom/android/server/wifi/ClientModeImpl;Z)Z
PLcom/android/server/wifi/ClientModeImpl;->access$9200(Lcom/android/server/wifi/ClientModeImpl;Landroid/net/DhcpResults;)V
PLcom/android/server/wifi/ClientModeImpl;->access$9400(Lcom/android/server/wifi/ClientModeImpl;)V
PLcom/android/server/wifi/ClientModeImpl;->access$9500(Lcom/android/server/wifi/ClientModeImpl;)V
PLcom/android/server/wifi/ClientModeImpl;->access$9600(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/internal/util/State;
PLcom/android/server/wifi/ClientModeImpl;->access$9700(Lcom/android/server/wifi/ClientModeImpl;)V
PLcom/android/server/wifi/ClientModeImpl;->access$9800(Lcom/android/server/wifi/ClientModeImpl;)Z
PLcom/android/server/wifi/ClientModeImpl;->access$9900(Lcom/android/server/wifi/ClientModeImpl;)V
PLcom/android/server/wifi/ClientModeImpl;->clearLinkProperties()V
PLcom/android/server/wifi/ClientModeImpl;->clearTargetBssid(Ljava/lang/String;)Z
PLcom/android/server/wifi/ClientModeImpl;->configureRandomizedMacAddress(Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/ClientModeImpl;->convertToUsabilityStatsTriggerType(I)I
PLcom/android/server/wifi/ClientModeImpl;->doNetworkStatus(I)V
PLcom/android/server/wifi/ClientModeImpl;->fetchRssiLinkSpeedAndFrequencyNative()V
PLcom/android/server/wifi/ClientModeImpl;->getAdditionalWifiServiceInterfaces()V
PLcom/android/server/wifi/ClientModeImpl;->getCapabilities(Landroid/net/wifi/WifiConfiguration;)Landroid/net/NetworkCapabilities;
PLcom/android/server/wifi/ClientModeImpl;->getCurrentBSSID()Ljava/lang/String;
PLcom/android/server/wifi/ClientModeImpl;->getCurrentNetwork()Landroid/net/Network;
PLcom/android/server/wifi/ClientModeImpl;->getCurrentWifiConfiguration()Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/ClientModeImpl;->getDstMacForKeepalive(Landroid/net/KeepalivePacketData;)[B
PLcom/android/server/wifi/ClientModeImpl;->getEtherProtoForKeepalive(Landroid/net/KeepalivePacketData;)I
PLcom/android/server/wifi/ClientModeImpl;->getFactoryMacAddress()Ljava/lang/String;
PLcom/android/server/wifi/ClientModeImpl;->getLinkPropertiesSummary(Landroid/net/LinkProperties;)Ljava/lang/String;
PLcom/android/server/wifi/ClientModeImpl;->handleIPv4Success(Landroid/net/DhcpResults;)V
PLcom/android/server/wifi/ClientModeImpl;->handleIfaceDestroyed()V
PLcom/android/server/wifi/ClientModeImpl;->handleNetworkDisconnect()V
PLcom/android/server/wifi/ClientModeImpl;->handlePostDhcpSetup()V
PLcom/android/server/wifi/ClientModeImpl;->handlePreDhcpSetup()V
PLcom/android/server/wifi/ClientModeImpl;->handleSupplicantStateChange(Landroid/os/Message;)Landroid/net/wifi/SupplicantState;
PLcom/android/server/wifi/ClientModeImpl;->handleUserStop(I)V
PLcom/android/server/wifi/ClientModeImpl;->handleUserUnlock(I)V
PLcom/android/server/wifi/ClientModeImpl;->isConnected()Z
PLcom/android/server/wifi/ClientModeImpl;->isDisconnected()Z
PLcom/android/server/wifi/ClientModeImpl;->isSupplicantTransientState()Z
PLcom/android/server/wifi/ClientModeImpl;->log(Ljava/lang/String;)V
PLcom/android/server/wifi/ClientModeImpl;->logd(Ljava/lang/String;)V
PLcom/android/server/wifi/ClientModeImpl;->macAddressFromRoute(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/wifi/ClientModeImpl;->reconnectCommand(Landroid/os/WorkSource;)V
PLcom/android/server/wifi/ClientModeImpl;->registerConnected()V
PLcom/android/server/wifi/ClientModeImpl;->registerDisconnected()V
PLcom/android/server/wifi/ClientModeImpl;->registerForWifiMonitorEvents()V
PLcom/android/server/wifi/ClientModeImpl;->registerNetworkFactory()V
PLcom/android/server/wifi/ClientModeImpl;->reportConnectionAttemptEnd(II)V
PLcom/android/server/wifi/ClientModeImpl;->reportOnTime()Ljava/lang/String;
PLcom/android/server/wifi/ClientModeImpl;->resetSimAuthNetworks(Z)V
PLcom/android/server/wifi/ClientModeImpl;->sendBluetoothAdapterStateChange(I)V
PLcom/android/server/wifi/ClientModeImpl;->sendConnectedState()V
PLcom/android/server/wifi/ClientModeImpl;->sendNetworkStateChangeBroadcast(Ljava/lang/String;)V
PLcom/android/server/wifi/ClientModeImpl;->sendRssiChangeBroadcast(I)V
PLcom/android/server/wifi/ClientModeImpl;->setCurrentMacToFactoryMac(Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/ClientModeImpl;->setMulticastFilter(Z)V
PLcom/android/server/wifi/ClientModeImpl;->setNetworkDetailedState(Landroid/net/NetworkInfo$DetailedState;)Z
PLcom/android/server/wifi/ClientModeImpl;->setPowerSave(Z)Z
PLcom/android/server/wifi/ClientModeImpl;->setRandomMacOui()Z
PLcom/android/server/wifi/ClientModeImpl;->setSuspendOptimizationsNative(IZ)V
PLcom/android/server/wifi/ClientModeImpl;->setTargetBssid(Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;)Z
PLcom/android/server/wifi/ClientModeImpl;->shouldEvaluateWhetherToSendExplicitlySelected(Landroid/net/wifi/WifiConfiguration;)Z
PLcom/android/server/wifi/ClientModeImpl;->startConnectToNetwork(IILjava/lang/String;)V
PLcom/android/server/wifi/ClientModeImpl;->startWifiIPPacketOffload(ILandroid/net/KeepalivePacketData;I)I
PLcom/android/server/wifi/ClientModeImpl;->stopClientMode()V
PLcom/android/server/wifi/ClientModeImpl;->stopIpClient()V
PLcom/android/server/wifi/ClientModeImpl;->stopRssiMonitoringOffload()I
PLcom/android/server/wifi/ClientModeImpl;->stopWifiIPPacketOffload(I)I
PLcom/android/server/wifi/ClientModeImpl;->syncGetAllMatchingFqdnsForScanResults(Ljava/util/List;Lcom/android/internal/util/AsyncChannel;)Ljava/util/Map;
PLcom/android/server/wifi/ClientModeImpl;->syncGetConfiguredNetworks(ILcom/android/internal/util/AsyncChannel;I)Ljava/util/List;
PLcom/android/server/wifi/ClientModeImpl;->syncGetDhcpResults()Landroid/net/DhcpResults;
PLcom/android/server/wifi/ClientModeImpl;->syncGetLinkLayerStats(Lcom/android/internal/util/AsyncChannel;)Lcom/android/server/wifi/WifiLinkLayerStats;
PLcom/android/server/wifi/ClientModeImpl;->syncGetMatchingOsuProviders(Ljava/util/List;Lcom/android/internal/util/AsyncChannel;)Ljava/util/Map;
PLcom/android/server/wifi/ClientModeImpl;->syncGetMatchingPasspointConfigsForOsuProviders(Ljava/util/List;Lcom/android/internal/util/AsyncChannel;)Ljava/util/Map;
PLcom/android/server/wifi/ClientModeImpl;->syncGetPasspointConfigs(Lcom/android/internal/util/AsyncChannel;)Ljava/util/List;
PLcom/android/server/wifi/ClientModeImpl;->syncGetPrivilegedConfiguredNetwork(Lcom/android/internal/util/AsyncChannel;)Ljava/util/List;
PLcom/android/server/wifi/ClientModeImpl;->syncRequestConnectionInfo()Landroid/net/wifi/WifiInfo;
PLcom/android/server/wifi/ClientModeImpl;->unexpectedDisconnectedReason(I)Z
PLcom/android/server/wifi/ClientModeImpl;->unwantedNetwork(I)V
PLcom/android/server/wifi/ClientModeImpl;->updateBatteryWorkSource(Landroid/os/WorkSource;)V
PLcom/android/server/wifi/ClientModeImpl;->updateCapabilities()V
PLcom/android/server/wifi/ClientModeImpl;->updateLinkProperties(Landroid/net/LinkProperties;)V
PLcom/android/server/wifi/ClientModeImpl;->updateWifiMetrics()V
PLcom/android/server/wifi/ClientModeManager$ClientModeStateMachine$1;->onDestroyed(Ljava/lang/String;)V
PLcom/android/server/wifi/ClientModeManager$ClientModeStateMachine$StartedState;->exit()V
PLcom/android/server/wifi/ClientModeManager;->stop()V
PLcom/android/server/wifi/Clock;->getWallClockMillis()J
PLcom/android/server/wifi/CompatibiltyScorer;->scoreCandidate(Lcom/android/server/wifi/WifiCandidates$Candidate;)Lcom/android/server/wifi/WifiCandidates$ScoredCandidate;
PLcom/android/server/wifi/CompatibiltyScorer;->scoreCandidates(Ljava/util/Collection;)Lcom/android/server/wifi/WifiCandidates$ScoredCandidate;
PLcom/android/server/wifi/ConfigurationMap;->clear()V
PLcom/android/server/wifi/ConfigurationMap;->getByConfigKeyForCurrentUser(Ljava/lang/String;)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/ConfigurationMap;->getByScanResultForCurrentUser(Landroid/net/wifi/ScanResult;)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/ConfigurationMap;->getForCurrentUser(I)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/ConfigurationMap;->put(Landroid/net/wifi/WifiConfiguration;)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/ConfigurationMap;->sizeForAllUsers()I
PLcom/android/server/wifi/ConfigurationMap;->valuesForAllUsers()Ljava/util/Collection;
PLcom/android/server/wifi/ConfigurationMap;->valuesForCurrentUser()Ljava/util/Collection;
PLcom/android/server/wifi/ConnectToNetworkNotificationBuilder;->createConnectToAvailableNetworkNotification(Ljava/lang/String;Landroid/net/wifi/ScanResult;)Landroid/app/Notification;
PLcom/android/server/wifi/ConnectToNetworkNotificationBuilder;->createNotificationBuilder(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/String;)Landroid/app/Notification$Builder;
PLcom/android/server/wifi/ConnectToNetworkNotificationBuilder;->getNotifierRequestCode(Ljava/lang/String;)I
PLcom/android/server/wifi/ConnectToNetworkNotificationBuilder;->getPrivateBroadcast(Ljava/lang/String;Ljava/lang/String;)Landroid/app/PendingIntent;
PLcom/android/server/wifi/DeletedEphemeralSsidsStoreData;->deserializeData(Lorg/xmlpull/v1/XmlPullParser;I)V
PLcom/android/server/wifi/DeletedEphemeralSsidsStoreData;->getName()Ljava/lang/String;
PLcom/android/server/wifi/DeletedEphemeralSsidsStoreData;->getSsidList()Ljava/util/Set;
PLcom/android/server/wifi/DeletedEphemeralSsidsStoreData;->getSsidToTimeMap()Ljava/util/Map;
PLcom/android/server/wifi/DeletedEphemeralSsidsStoreData;->serializeData(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/wifi/DeletedEphemeralSsidsStoreData;->setSsidList(Ljava/util/Set;)V
PLcom/android/server/wifi/DeletedEphemeralSsidsStoreData;->setSsidToTimeMap(Ljava/util/Map;)V
PLcom/android/server/wifi/DppMetrics;->clear()V
PLcom/android/server/wifi/DppMetrics;->consolidateDppFailure(Landroid/util/SparseIntArray;)[Lcom/android/server/wifi/nano/WifiMetricsProto$WifiDppLog$DppFailureStatusHistogramBucket;
PLcom/android/server/wifi/DppMetrics;->consolidateDppOperationTime(Landroid/util/SparseIntArray;)[Lcom/android/server/wifi/nano/WifiMetricsProto$WifiDppLog$HistogramBucket;
PLcom/android/server/wifi/DppMetrics;->consolidateDppSuccess(Landroid/util/SparseIntArray;)[Lcom/android/server/wifi/nano/WifiMetricsProto$WifiDppLog$DppConfiguratorSuccessStatusHistogramBucket;
PLcom/android/server/wifi/DppMetrics;->consolidateProto()Lcom/android/server/wifi/nano/WifiMetricsProto$WifiDppLog;
PLcom/android/server/wifi/DummyLogMessage;->c(Z)Lcom/android/server/wifi/WifiLog$LogMessage;
PLcom/android/server/wifi/ExtendedWifiInfo;->reset()V
PLcom/android/server/wifi/ExtendedWifiInfo;->update(IJJJJJ)V
PLcom/android/server/wifi/ExtendedWifiInfo;->updatePacketRates(JJJ)V
PLcom/android/server/wifi/ExtendedWifiInfo;->updatePacketRates(Lcom/android/server/wifi/WifiLinkLayerStats;J)V
PLcom/android/server/wifi/FrameworkFacade;->getBroadcast(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;
PLcom/android/server/wifi/FrameworkFacade;->getRxPackets(Ljava/lang/String;)J
PLcom/android/server/wifi/FrameworkFacade;->getTxPackets(Ljava/lang/String;)J
PLcom/android/server/wifi/FrameworkFacade;->makeNotificationBuilder(Landroid/content/Context;Ljava/lang/String;)Landroid/app/Notification$Builder;
PLcom/android/server/wifi/LastMileLogger;->disableTracing()V
PLcom/android/server/wifi/LastMileLogger;->enableTracing()V
PLcom/android/server/wifi/LastMileLogger;->ensureFailSafeIsArmed()Z
PLcom/android/server/wifi/LastMileLogger;->readTrace()[B
PLcom/android/server/wifi/LastMileLogger;->reportConnectionEvent(B)V
PLcom/android/server/wifi/LinkProbeManager;->updateConnectionStats(Landroid/net/wifi/WifiInfo;Ljava/lang/String;)V
PLcom/android/server/wifi/LogcatLog;->err(Ljava/lang/String;)Lcom/android/server/wifi/WifiLog$LogMessage;
PLcom/android/server/wifi/LogcatLog;->w(Ljava/lang/String;)V
PLcom/android/server/wifi/NetworkListStoreData;->deserializeData(Lorg/xmlpull/v1/XmlPullParser;I)V
PLcom/android/server/wifi/NetworkListStoreData;->getConfigurations()Ljava/util/List;
PLcom/android/server/wifi/NetworkListStoreData;->getName()Ljava/lang/String;
PLcom/android/server/wifi/NetworkListStoreData;->hasNewDataToSerialize()Z
PLcom/android/server/wifi/NetworkListStoreData;->parseNetwork(Lorg/xmlpull/v1/XmlPullParser;I)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/NetworkListStoreData;->parseNetworkList(Lorg/xmlpull/v1/XmlPullParser;I)Ljava/util/List;
PLcom/android/server/wifi/NetworkListStoreData;->resetData()V
PLcom/android/server/wifi/NetworkListStoreData;->serializeData(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/wifi/NetworkListStoreData;->serializeNetwork(Lorg/xmlpull/v1/XmlSerializer;Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/NetworkListStoreData;->setConfigurations(Ljava/util/List;)V
PLcom/android/server/wifi/NetworkRequestStoreData;->deserializeData(Lorg/xmlpull/v1/XmlPullParser;I)V
PLcom/android/server/wifi/NetworkRequestStoreData;->getName()Ljava/lang/String;
PLcom/android/server/wifi/NetworkRequestStoreData;->parseApprovedAccessPointsMap(Lorg/xmlpull/v1/XmlPullParser;I)Ljava/util/Map;
PLcom/android/server/wifi/NetworkRequestStoreData;->serializeApprovedAccessPointsMap(Lorg/xmlpull/v1/XmlSerializer;Ljava/util/Map;)V
PLcom/android/server/wifi/NetworkRequestStoreData;->serializeData(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/wifi/NetworkSuggestionEvaluator;->evaluateNetworks(Ljava/util/List;Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;ZZLcom/android/server/wifi/WifiNetworkSelector$NetworkEvaluator$OnConnectableListener;)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/NetworkSuggestionEvaluator;->getName()Ljava/lang/String;
PLcom/android/server/wifi/NetworkSuggestionEvaluator;->update(Ljava/util/List;)V
PLcom/android/server/wifi/NetworkSuggestionStoreData;->deserializeData(Lorg/xmlpull/v1/XmlPullParser;I)V
PLcom/android/server/wifi/NetworkSuggestionStoreData;->hasNewDataToSerialize()Z
PLcom/android/server/wifi/RandomizedMacStoreData;->deserializeData(Lorg/xmlpull/v1/XmlPullParser;I)V
PLcom/android/server/wifi/RandomizedMacStoreData;->getMacMapping()Ljava/util/Map;
PLcom/android/server/wifi/RandomizedMacStoreData;->getName()Ljava/lang/String;
PLcom/android/server/wifi/RandomizedMacStoreData;->resetData()V
PLcom/android/server/wifi/RandomizedMacStoreData;->serializeData(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/wifi/RandomizedMacStoreData;->setMacMapping(Ljava/util/Map;)V
PLcom/android/server/wifi/SarManager$WifiPhoneStateListener;->onCallStateChanged(ILjava/lang/String;)V
PLcom/android/server/wifi/SarManager;->lambda$checkAudioDevice$1$SarManager()V
PLcom/android/server/wifi/SarManager;->onCellStateChangeEvent(I)V
PLcom/android/server/wifi/SarManager;->setClientWifiState(I)V
PLcom/android/server/wifi/SavedNetworkEvaluator;->calculateBssidScore(Landroid/net/wifi/ScanResult;Landroid/net/wifi/WifiConfiguration;Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;Ljava/lang/StringBuffer;)I
PLcom/android/server/wifi/SavedNetworkEvaluator;->evaluateNetworks(Ljava/util/List;Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;ZZLcom/android/server/wifi/WifiNetworkSelector$NetworkEvaluator$OnConnectableListener;)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/SavedNetworkEvaluator;->getName()Ljava/lang/String;
PLcom/android/server/wifi/SavedNetworkEvaluator;->update(Ljava/util/List;)V
PLcom/android/server/wifi/SavedNetworkEvaluator;->updateSavedNetworkSelectionStatus()V
PLcom/android/server/wifi/ScanDetail;-><init>(Lcom/android/server/wifi/hotspot2/NetworkDetail;Landroid/net/wifi/WifiSsid;Ljava/lang/String;Ljava/lang/String;IIJ[Landroid/net/wifi/ScanResult$InformationElement;Ljava/util/List;)V
PLcom/android/server/wifi/ScanDetail;->getBSSIDString()Ljava/lang/String;
PLcom/android/server/wifi/ScanDetail;->getNetworkDetail()Lcom/android/server/wifi/hotspot2/NetworkDetail;
PLcom/android/server/wifi/ScanDetail;->getSSID()Ljava/lang/String;
PLcom/android/server/wifi/ScanDetail;->getScanResult()Landroid/net/wifi/ScanResult;
PLcom/android/server/wifi/ScanDetail;->setSeen()J
PLcom/android/server/wifi/ScanDetailCache;->getScanDetail(Ljava/lang/String;)Lcom/android/server/wifi/ScanDetail;
PLcom/android/server/wifi/ScanDetailCache;->getScanResult(Ljava/lang/String;)Landroid/net/wifi/ScanResult;
PLcom/android/server/wifi/ScanDetailCache;->keySet()Ljava/util/Collection;
PLcom/android/server/wifi/ScanDetailCache;->put(Lcom/android/server/wifi/ScanDetail;)V
PLcom/android/server/wifi/ScanDetailCache;->size()I
PLcom/android/server/wifi/ScanDetailCache;->values()Ljava/util/Collection;
PLcom/android/server/wifi/ScanRequestProxy$GlobalScanListener;->onFullResult(Landroid/net/wifi/ScanResult;)V
PLcom/android/server/wifi/ScanRequestProxy$GlobalScanListener;->onResults([Landroid/net/wifi/WifiScanner$ScanData;)V
PLcom/android/server/wifi/ScanRequestProxy$ScanRequestProxyScanListener;->onFailure(ILjava/lang/String;)V
PLcom/android/server/wifi/ScanRequestProxy$ScanRequestProxyScanListener;->onFullResult(Landroid/net/wifi/ScanResult;)V
PLcom/android/server/wifi/ScanRequestProxy$ScanRequestProxyScanListener;->onResults([Landroid/net/wifi/WifiScanner$ScanData;)V
PLcom/android/server/wifi/ScanRequestProxy$ScanRequestProxyScanListener;->onSuccess()V
PLcom/android/server/wifi/ScanRequestProxy$ThrottleEnabledSettingObserver;->isEnabled()Z
PLcom/android/server/wifi/ScanRequestProxy;->getScanResults()Ljava/util/List;
PLcom/android/server/wifi/ScanRequestProxy;->isRequestFromBackground(ILjava/lang/String;)Z
PLcom/android/server/wifi/ScanRequestProxy;->sendScanResultBroadcast(Z)V
PLcom/android/server/wifi/ScanRequestProxy;->sendScanResultFailureBroadcastToPackage(Ljava/lang/String;)V
PLcom/android/server/wifi/ScanRequestProxy;->shouldScanRequestBeThrottledForApp(ILjava/lang/String;)Z
PLcom/android/server/wifi/ScanRequestProxy;->startScan(ILjava/lang/String;)Z
PLcom/android/server/wifi/ScanRequestProxy;->trimPastScanRequestTimesForForegroundApp(Ljava/util/List;J)V
PLcom/android/server/wifi/ScanResultMatchInfo;-><init>()V
PLcom/android/server/wifi/ScanResultMatchInfo;->equals(Ljava/lang/Object;)Z
PLcom/android/server/wifi/ScanResultMatchInfo;->fromScanResult(Landroid/net/wifi/ScanResult;)Lcom/android/server/wifi/ScanResultMatchInfo;
PLcom/android/server/wifi/ScanResultMatchInfo;->getNetworkType(Landroid/net/wifi/ScanResult;)I
PLcom/android/server/wifi/ScanResultMatchInfo;->getNetworkType(Landroid/net/wifi/WifiConfiguration;)I
PLcom/android/server/wifi/ScanResultMatchInfo;->hashCode()I
PLcom/android/server/wifi/ScoreCardBasedScorer;->estimatedCutoff(Lcom/android/server/wifi/WifiCandidates$Candidate;)I
PLcom/android/server/wifi/ScoreCardBasedScorer;->scoreCandidate(Lcom/android/server/wifi/WifiCandidates$Candidate;)Lcom/android/server/wifi/WifiCandidates$ScoredCandidate;
PLcom/android/server/wifi/ScoreCardBasedScorer;->scoreCandidates(Ljava/util/Collection;)Lcom/android/server/wifi/WifiCandidates$ScoredCandidate;
PLcom/android/server/wifi/ScoredNetworkEvaluator$ScoreTracker;->getCandidateConfiguration()Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/ScoredNetworkEvaluator;->activeScorerAllowedtoSeeScanResults()Z
PLcom/android/server/wifi/ScoredNetworkEvaluator;->evaluateNetworks(Ljava/util/List;Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;ZZLcom/android/server/wifi/WifiNetworkSelector$NetworkEvaluator$OnConnectableListener;)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/ScoredNetworkEvaluator;->getName()Ljava/lang/String;
PLcom/android/server/wifi/ScoredNetworkEvaluator;->update(Ljava/util/List;)V
PLcom/android/server/wifi/ScoredNetworkEvaluator;->updateNetworkScoreCache(Ljava/util/List;)V
PLcom/android/server/wifi/ScoringParams;->getExitRssi(I)I
PLcom/android/server/wifi/ScoringParams;->getExperimentIdentifier()I
PLcom/android/server/wifi/ScoringParams;->getHorizonSeconds()I
PLcom/android/server/wifi/ScoringParams;->getNudKnob()I
PLcom/android/server/wifi/ScoringParams;->getSufficientRssi(I)I
PLcom/android/server/wifi/ScoringParams;->getYippeeSkippyPacketsPerSecond()I
PLcom/android/server/wifi/SsidSetStoreData;->deserializeData(Lorg/xmlpull/v1/XmlPullParser;I)V
PLcom/android/server/wifi/SsidSetStoreData;->getName()Ljava/lang/String;
PLcom/android/server/wifi/SsidSetStoreData;->serializeData(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/wifi/StateChangeResult;->toString()Ljava/lang/String;
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallback;->addAnqpElementToMap(Ljava/util/Map;Lcom/android/server/wifi/hotspot2/anqp/Constants$ANQPElementType;Ljava/util/ArrayList;)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallback;->onAnqpQueryDone([BLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIfaceCallback$AnqpData;Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIfaceCallback$Hs20AnqpData;)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallback;->onAssociationRejected([BIZ)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallback;->onBssidChanged(B[B)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallback;->onDisconnected([BZI)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallback;->onNetworkAdded(I)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallback;->onNetworkRemoved(I)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallback;->onStateChanged(I[BILjava/util/ArrayList;)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallback;->parseAnqpElement(Lcom/android/server/wifi/hotspot2/anqp/Constants$ANQPElementType;Ljava/util/ArrayList;)Lcom/android/server/wifi/hotspot2/anqp/ANQPElement;
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_1;->onAnqpQueryDone([BLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIfaceCallback$AnqpData;Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIfaceCallback$Hs20AnqpData;)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_1;->onAssociationRejected([BIZ)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_1;->onBssidChanged(B[B)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_1;->onDisconnected([BZI)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_1;->onNetworkAdded(I)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_1;->onNetworkRemoved(I)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_1;->onStateChanged(I[BILjava/util/ArrayList;)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_2;->onAnqpQueryDone([BLandroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIfaceCallback$AnqpData;Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIfaceCallback$Hs20AnqpData;)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_2;->onAssociationRejected([BIZ)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_2;->onBssidChanged(B[B)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_2;->onDisconnected([BZI)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_2;->onNetworkAdded(I)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_2;->onNetworkRemoved(I)V
PLcom/android/server/wifi/SupplicantStaIfaceHal$SupplicantStaIfaceHalCallbackV1_2;->onStateChanged(I[BILjava/util/ArrayList;)V
PLcom/android/server/wifi/SupplicantStaIfaceHal;->addNetwork(Ljava/lang/String;)Lcom/android/server/wifi/SupplicantStaNetworkHal;
PLcom/android/server/wifi/SupplicantStaIfaceHal;->addNetworkAndSaveConfig(Ljava/lang/String;Landroid/net/wifi/WifiConfiguration;)Landroid/util/Pair;
PLcom/android/server/wifi/SupplicantStaIfaceHal;->addRxFilter(Ljava/lang/String;B)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->addRxFilter(Ljava/lang/String;I)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->checkSupplicantStaNetworkAndLogFailure(Ljava/lang/String;Ljava/lang/String;)Lcom/android/server/wifi/SupplicantStaNetworkHal;
PLcom/android/server/wifi/SupplicantStaIfaceHal;->clearState()V
PLcom/android/server/wifi/SupplicantStaIfaceHal;->connectToNetwork(Ljava/lang/String;Landroid/net/wifi/WifiConfiguration;)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->deregisterDeathHandler()Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->disconnect(Ljava/lang/String;)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->enableAutoReconnect(Ljava/lang/String;Z)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->getCurrentNetworkId(Ljava/lang/String;)I
PLcom/android/server/wifi/SupplicantStaIfaceHal;->getMacAddress(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/wifi/SupplicantStaIfaceHal;->getStaNetworkMockable(Ljava/lang/String;Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork;)Lcom/android/server/wifi/SupplicantStaNetworkHal;
PLcom/android/server/wifi/SupplicantStaIfaceHal;->initiateAnqpQuery(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->initiateAnqpQuery(Ljava/lang/String;[BLjava/util/ArrayList;Ljava/util/ArrayList;)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->lambda$addNetwork$3$SupplicantStaIfaceHal(Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;Landroid/hardware/wifi/supplicant/V1_0/ISupplicantNetwork;)V
PLcom/android/server/wifi/SupplicantStaIfaceHal;->lambda$addNetwork$5$SupplicantStaIfaceHal(Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;Landroid/hardware/wifi/supplicant/V1_0/ISupplicantNetwork;)V
PLcom/android/server/wifi/SupplicantStaIfaceHal;->lambda$getKeyMgmtCapabilities$10$SupplicantStaIfaceHal(Landroid/util/MutableBoolean;Landroid/util/MutableInt;Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;I)V
PLcom/android/server/wifi/SupplicantStaIfaceHal;->lambda$getKeyMgmtCapabilities$8$SupplicantStaIfaceHal(Landroid/util/MutableBoolean;Landroid/util/MutableInt;Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;I)V
PLcom/android/server/wifi/SupplicantStaIfaceHal;->lambda$getMacAddress$6$SupplicantStaIfaceHal(Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;[B)V
PLcom/android/server/wifi/SupplicantStaIfaceHal;->lambda$getMacAddress$8$SupplicantStaIfaceHal(Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;[B)V
PLcom/android/server/wifi/SupplicantStaIfaceHal;->lambda$listNetworks$5$SupplicantStaIfaceHal(Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;Ljava/util/ArrayList;)V
PLcom/android/server/wifi/SupplicantStaIfaceHal;->lambda$listNetworks$7$SupplicantStaIfaceHal(Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;Ljava/util/ArrayList;)V
PLcom/android/server/wifi/SupplicantStaIfaceHal;->lambda$new$1(Lcom/android/server/wifi/SupplicantStaIfaceHal;J)V
PLcom/android/server/wifi/SupplicantStaIfaceHal;->listNetworks(Ljava/lang/String;)Ljava/util/ArrayList;
PLcom/android/server/wifi/SupplicantStaIfaceHal;->logCallback(Ljava/lang/String;)V
PLcom/android/server/wifi/SupplicantStaIfaceHal;->removeAllNetworks(Ljava/lang/String;)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->removeIfaceV1_1(Ljava/lang/String;)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->removeNetwork(Ljava/lang/String;I)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->setBtCoexistenceMode(Ljava/lang/String;B)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->setBtCoexistenceMode(Ljava/lang/String;I)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->setBtCoexistenceScanModeEnabled(Ljava/lang/String;Z)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->setConcurrencyPriority(I)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->setConcurrencyPriority(Z)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->setCountryCode(Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->setCountryCode(Ljava/lang/String;[B)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->setCurrentNetworkBssid(Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->setExternalSim(Ljava/lang/String;Z)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->setPowerSave(Ljava/lang/String;Z)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->setSuspendModeEnabled(Ljava/lang/String;Z)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->startRxFilter(Ljava/lang/String;)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->stopRxFilter(Ljava/lang/String;)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->supplicantHidlStateToFrameworkState(I)Landroid/net/wifi/SupplicantState;
PLcom/android/server/wifi/SupplicantStaIfaceHal;->supplicantServiceDiedHandler()V
PLcom/android/server/wifi/SupplicantStaIfaceHal;->teardownIface(Ljava/lang/String;)Z
PLcom/android/server/wifi/SupplicantStaIfaceHal;->terminate()V
PLcom/android/server/wifi/SupplicantStaIfaceHal;->terminate_V1_1()V
PLcom/android/server/wifi/SupplicantStaNetworkHal;-><init>(Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetwork;Ljava/lang/String;Landroid/content/Context;Lcom/android/server/wifi/WifiMonitor;)V
PLcom/android/server/wifi/SupplicantStaNetworkHal;->addFastTransitionFlags(Ljava/util/BitSet;)Ljava/util/BitSet;
PLcom/android/server/wifi/SupplicantStaNetworkHal;->addSha256KeyMgmtFlags(Ljava/util/BitSet;)Ljava/util/BitSet;
PLcom/android/server/wifi/SupplicantStaNetworkHal;->checkISupplicantStaNetworkAndLogFailure(Ljava/lang/String;)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->checkStatusAndLogFailure(Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;Ljava/lang/String;)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->createNetworkExtra(Ljava/util/Map;)Ljava/lang/String;
PLcom/android/server/wifi/SupplicantStaNetworkHal;->enableVerboseLogging(Z)V
PLcom/android/server/wifi/SupplicantStaNetworkHal;->getSupplicantStaNetworkForV1_2Mockable()Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaNetwork;
PLcom/android/server/wifi/SupplicantStaNetworkHal;->getV1_2StaNetwork()Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaNetwork;
PLcom/android/server/wifi/SupplicantStaNetworkHal;->registerCallback(Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaNetworkCallback;)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->saveWifiConfiguration(Landroid/net/wifi/WifiConfiguration;)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->saveWifiEnterpriseConfig(Ljava/lang/String;Landroid/net/wifi/WifiEnterpriseConfig;)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->select()Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setAuthAlg(I)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setBssid(Ljava/lang/String;)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setBssid([B)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setEapEngine(Z)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setEapIdentity(Ljava/util/ArrayList;)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setEapMethod(I)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setEapPassword(Ljava/util/ArrayList;)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setEapPhase2Method(I)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setEapProactiveKeyCaching(Z)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setGroupCipher(I)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setIdStr(Ljava/lang/String;)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setKeyMgmt(I)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setPairwiseCipher(I)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setProto(I)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setPskPassphrase(Ljava/lang/String;)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setRequirePmf(Z)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setScanSsid(Z)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->setSsid(Ljava/util/ArrayList;)Z
PLcom/android/server/wifi/SupplicantStaNetworkHal;->wifiConfigurationToSupplicantAuthAlgMask(Ljava/util/BitSet;)I
PLcom/android/server/wifi/SupplicantStaNetworkHal;->wifiConfigurationToSupplicantEapMethod(I)I
PLcom/android/server/wifi/SupplicantStaNetworkHal;->wifiConfigurationToSupplicantEapPhase2Method(I)I
PLcom/android/server/wifi/SupplicantStaNetworkHal;->wifiConfigurationToSupplicantGroupCipherMask(Ljava/util/BitSet;)I
PLcom/android/server/wifi/SupplicantStaNetworkHal;->wifiConfigurationToSupplicantKeyMgmtMask(Ljava/util/BitSet;)I
PLcom/android/server/wifi/SupplicantStaNetworkHal;->wifiConfigurationToSupplicantPairwiseCipherMask(Ljava/util/BitSet;)I
PLcom/android/server/wifi/SupplicantStaNetworkHal;->wifiConfigurationToSupplicantProtoMask(Ljava/util/BitSet;)I
PLcom/android/server/wifi/SupplicantStateTracker$CompletedState;->enter()V
PLcom/android/server/wifi/SupplicantStateTracker$CompletedState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/wifi/SupplicantStateTracker$ConnectionActiveState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/wifi/SupplicantStateTracker$DefaultState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/wifi/SupplicantStateTracker$DisconnectedState;->enter()V
PLcom/android/server/wifi/SupplicantStateTracker$HandshakeState;->enter()V
PLcom/android/server/wifi/SupplicantStateTracker$HandshakeState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/wifi/SupplicantStateTracker$InactiveState;->enter()V
PLcom/android/server/wifi/SupplicantStateTracker$ScanState;->enter()V
PLcom/android/server/wifi/SupplicantStateTracker;->getSupplicantStateName()Ljava/lang/String;
PLcom/android/server/wifi/SupplicantStateTracker;->sendSupplicantStateChangedBroadcast(Landroid/net/wifi/SupplicantState;ZI)V
PLcom/android/server/wifi/SupplicantStateTracker;->transitionOnSupplicantStateChange(Lcom/android/server/wifi/StateChangeResult;)V
PLcom/android/server/wifi/UntrustedWifiNetworkFactory;->needNetworkFor(Landroid/net/NetworkRequest;I)V
PLcom/android/server/wifi/UntrustedWifiNetworkFactory;->releaseNetworkFor(Landroid/net/NetworkRequest;)V
PLcom/android/server/wifi/VelocityBasedConnectedScore;->adjustThreshold(Landroid/net/wifi/WifiInfo;)V
PLcom/android/server/wifi/VelocityBasedConnectedScore;->generateScore()I
PLcom/android/server/wifi/VelocityBasedConnectedScore;->getAdjustedRssiThreshold()D
PLcom/android/server/wifi/VelocityBasedConnectedScore;->getFilteredRssi()D
PLcom/android/server/wifi/VelocityBasedConnectedScore;->reset()V
PLcom/android/server/wifi/VelocityBasedConnectedScore;->setDeltaTimeSeconds(D)V
PLcom/android/server/wifi/VelocityBasedConnectedScore;->updateUsingRssi(IJD)V
PLcom/android/server/wifi/VelocityBasedConnectedScore;->updateUsingWifiInfo(Landroid/net/wifi/WifiInfo;J)V
PLcom/android/server/wifi/WakeupConfigStoreData;->deserializeData(Lorg/xmlpull/v1/XmlPullParser;I)V
PLcom/android/server/wifi/WakeupConfigStoreData;->getName()Ljava/lang/String;
PLcom/android/server/wifi/WakeupConfigStoreData;->parseFeatureState(Lorg/xmlpull/v1/XmlPullParser;I)V
PLcom/android/server/wifi/WakeupConfigStoreData;->parseNetwork(Lorg/xmlpull/v1/XmlPullParser;I)Lcom/android/server/wifi/ScanResultMatchInfo;
PLcom/android/server/wifi/WakeupConfigStoreData;->serializeData(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/wifi/WakeupConfigStoreData;->writeFeatureState(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/wifi/WakeupController$1;->onFullResult(Landroid/net/wifi/ScanResult;)V
PLcom/android/server/wifi/WakeupController$1;->onResults([Landroid/net/wifi/WifiScanner$ScanData;)V
PLcom/android/server/wifi/WakeupController$IsActiveDataSource;->getData()Ljava/lang/Boolean;
PLcom/android/server/wifi/WakeupController$IsActiveDataSource;->getData()Ljava/lang/Object;
PLcom/android/server/wifi/WakeupController$IsActiveDataSource;->setData(Ljava/lang/Boolean;)V
PLcom/android/server/wifi/WakeupController$IsActiveDataSource;->setData(Ljava/lang/Object;)V
PLcom/android/server/wifi/WakeupController;->enableWifi()V
PLcom/android/server/wifi/WakeupController;->filterDfsScanResults(Ljava/util/Collection;)Ljava/util/List;
PLcom/android/server/wifi/WakeupController;->getGoodSavedNetworks()Ljava/util/Set;
PLcom/android/server/wifi/WakeupController;->handleScanResults(Ljava/util/Collection;)V
PLcom/android/server/wifi/WakeupController;->reset()V
PLcom/android/server/wifi/WakeupController;->setLastDisconnectInfo(Lcom/android/server/wifi/ScanResultMatchInfo;)V
PLcom/android/server/wifi/WakeupEvaluator;->findViableNetwork(Ljava/util/Collection;Ljava/util/Collection;)Landroid/net/wifi/ScanResult;
PLcom/android/server/wifi/WakeupEvaluator;->isBelowThreshold(Landroid/net/wifi/ScanResult;)Z
PLcom/android/server/wifi/WakeupLock$WakeupLockDataSource;->getData()Ljava/lang/Object;
PLcom/android/server/wifi/WakeupLock$WakeupLockDataSource;->getData()Ljava/util/Set;
PLcom/android/server/wifi/WakeupLock$WakeupLockDataSource;->setData(Ljava/lang/Object;)V
PLcom/android/server/wifi/WakeupLock$WakeupLockDataSource;->setData(Ljava/util/Set;)V
PLcom/android/server/wifi/WakeupLock;->addToLock(Ljava/util/Collection;)V
PLcom/android/server/wifi/WakeupLock;->isUnlocked()Z
PLcom/android/server/wifi/WakeupLock;->maybeSetInitializedByScans(I)V
PLcom/android/server/wifi/WakeupLock;->maybeSetInitializedByTimeout(J)V
PLcom/android/server/wifi/WakeupLock;->removeFromLock(Ljava/util/Collection;)V
PLcom/android/server/wifi/WakeupLock;->setLock(Ljava/util/Collection;)V
PLcom/android/server/wifi/WakeupLock;->update(Ljava/util/Collection;)V
PLcom/android/server/wifi/WakeupOnboarding$IsOnboardedDataSource;->getData()Ljava/lang/Boolean;
PLcom/android/server/wifi/WakeupOnboarding$IsOnboardedDataSource;->getData()Ljava/lang/Object;
PLcom/android/server/wifi/WakeupOnboarding$IsOnboardedDataSource;->setData(Ljava/lang/Boolean;)V
PLcom/android/server/wifi/WakeupOnboarding$IsOnboardedDataSource;->setData(Ljava/lang/Object;)V
PLcom/android/server/wifi/WakeupOnboarding$NotificationsDataSource;->getData()Ljava/lang/Integer;
PLcom/android/server/wifi/WakeupOnboarding$NotificationsDataSource;->getData()Ljava/lang/Object;
PLcom/android/server/wifi/WakeupOnboarding$NotificationsDataSource;->setData(Ljava/lang/Integer;)V
PLcom/android/server/wifi/WakeupOnboarding$NotificationsDataSource;->setData(Ljava/lang/Object;)V
PLcom/android/server/wifi/WakeupOnboarding;->isOnboarded()Z
PLcom/android/server/wifi/WakeupOnboarding;->maybeShowNotification()V
PLcom/android/server/wifi/WakeupOnboarding;->maybeShowNotification(J)V
PLcom/android/server/wifi/WifiApConfigStore;->apBandCheckConvert(Landroid/net/wifi/WifiConfiguration;)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/WifiApConfigStore;->getApConfiguration()Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/WifiBackupRestore;->retrieveBackupDataFromConfigurations(Ljava/util/List;)[B
PLcom/android/server/wifi/WifiBackupRestore;->writeNetworkConfigurationsToXml(Lorg/xmlpull/v1/XmlSerializer;Ljava/util/List;)V
PLcom/android/server/wifi/WifiCandidates$Candidate;->getEventStatistics(Lcom/android/server/wifi/WifiScoreCardProto$Event;)Lcom/android/server/wifi/WifiScoreCardProto$Signal;
PLcom/android/server/wifi/WifiCandidates$Candidate;->getFrequency()I
PLcom/android/server/wifi/WifiCandidates$Candidate;->getScanRssi()I
PLcom/android/server/wifi/WifiCandidates$CandidateImpl;->getEvaluatorIndex()I
PLcom/android/server/wifi/WifiCandidates$CandidateImpl;->getEvaluatorScore()I
PLcom/android/server/wifi/WifiCandidates$CandidateImpl;->getEventStatistics(Lcom/android/server/wifi/WifiScoreCardProto$Event;)Lcom/android/server/wifi/WifiScoreCardProto$Signal;
PLcom/android/server/wifi/WifiCandidates$CandidateImpl;->getFrequency()I
PLcom/android/server/wifi/WifiCandidates$CandidateImpl;->getKey()Lcom/android/server/wifi/WifiCandidates$Key;
PLcom/android/server/wifi/WifiCandidates$CandidateImpl;->getLastSelectionWeight()D
PLcom/android/server/wifi/WifiCandidates$CandidateImpl;->getNetworkConfigId()I
PLcom/android/server/wifi/WifiCandidates$CandidateImpl;->getScanDetail()Lcom/android/server/wifi/ScanDetail;
PLcom/android/server/wifi/WifiCandidates$CandidateImpl;->getScanRssi()I
PLcom/android/server/wifi/WifiCandidates$CandidateImpl;->isOpenNetwork()Z
PLcom/android/server/wifi/WifiCandidates$Key;->hashCode()I
PLcom/android/server/wifi/WifiCandidates$ScoredCandidate;-><init>(DDLcom/android/server/wifi/WifiCandidates$Candidate;)V
PLcom/android/server/wifi/WifiCandidates;-><init>(Lcom/android/server/wifi/WifiScoreCard;)V
PLcom/android/server/wifi/WifiCandidates;->add(Lcom/android/server/wifi/ScanDetail;Landroid/net/wifi/WifiConfiguration;II)Z
PLcom/android/server/wifi/WifiCandidates;->add(Lcom/android/server/wifi/ScanDetail;Landroid/net/wifi/WifiConfiguration;IID)Z
PLcom/android/server/wifi/WifiCandidates;->choose(Lcom/android/server/wifi/WifiCandidates$CandidateScorer;)Lcom/android/server/wifi/WifiCandidates$ScoredCandidate;
PLcom/android/server/wifi/WifiCandidates;->getGroupedCandidates()Ljava/util/Collection;
PLcom/android/server/wifi/WifiCandidates;->size()I
PLcom/android/server/wifi/WifiConfigManager$1;->compareNetworksWithSameStatus(Landroid/net/wifi/WifiConfiguration;Landroid/net/wifi/WifiConfiguration;)I
PLcom/android/server/wifi/WifiConfigManager;->addToChannelSetForNetworkFromScanDetailCache(Ljava/util/Set;Lcom/android/server/wifi/ScanDetailCache;JJI)Z
PLcom/android/server/wifi/WifiConfigManager;->attemptNetworkLinking(Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/WifiConfigManager;->clearNetworkCandidateScanResult(I)Z
PLcom/android/server/wifi/WifiConfigManager;->clearRecentFailureReason(I)V
PLcom/android/server/wifi/WifiConfigManager;->createDebugTimeStampString(J)Ljava/lang/String;
PLcom/android/server/wifi/WifiConfigManager;->fetchChannelSetForNetworkForPnoScan(IJ)Ljava/util/Set;
PLcom/android/server/wifi/WifiConfigManager;->generateRandomizedMacAddresses()V
PLcom/android/server/wifi/WifiConfigManager;->getConfiguredNetwork(I)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/WifiConfigManager;->getConfiguredNetwork(Ljava/lang/String;)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/WifiConfigManager;->getConfiguredNetworkForScanDetail(Lcom/android/server/wifi/ScanDetail;)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/WifiConfigManager;->getConfiguredNetworkForScanDetailAndCache(Lcom/android/server/wifi/ScanDetail;)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/WifiConfigManager;->getConfiguredNetworkWithoutMasking(I)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/WifiConfigManager;->getConfiguredNetworks()Ljava/util/List;
PLcom/android/server/wifi/WifiConfigManager;->getConfiguredNetworks(ZZI)Ljava/util/List;
PLcom/android/server/wifi/WifiConfigManager;->getConfiguredNetworksWithPasswords()Ljava/util/List;
PLcom/android/server/wifi/WifiConfigManager;->getInternalConfiguredNetwork(I)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/WifiConfigManager;->getLastSelectedNetwork()I
PLcom/android/server/wifi/WifiConfigManager;->getLastSelectedNetworkConfigKey()Ljava/lang/String;
PLcom/android/server/wifi/WifiConfigManager;->getOrCreateScanDetailCacheForNetwork(Landroid/net/wifi/WifiConfiguration;)Lcom/android/server/wifi/ScanDetailCache;
PLcom/android/server/wifi/WifiConfigManager;->getSavedNetworks(I)Ljava/util/List;
PLcom/android/server/wifi/WifiConfigManager;->getScanDetailCacheForNetwork(I)Lcom/android/server/wifi/ScanDetailCache;
PLcom/android/server/wifi/WifiConfigManager;->handleUserStop(I)V
PLcom/android/server/wifi/WifiConfigManager;->handleUserUnlock(I)V
PLcom/android/server/wifi/WifiConfigManager;->handleUserUnlockOrSwitch(I)V
PLcom/android/server/wifi/WifiConfigManager;->incrementNetworkNoInternetAccessReports(I)Z
PLcom/android/server/wifi/WifiConfigManager;->isSimPresent()Z
PLcom/android/server/wifi/WifiConfigManager;->linkNetworks(Landroid/net/wifi/WifiConfiguration;Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/WifiConfigManager;->loadFromStore()Z
PLcom/android/server/wifi/WifiConfigManager;->loadFromUserStoreAfterUnlockOrSwitch(I)Z
PLcom/android/server/wifi/WifiConfigManager;->loadInternalData(Ljava/util/List;Ljava/util/List;Ljava/util/Map;Ljava/util/Map;)V
PLcom/android/server/wifi/WifiConfigManager;->loadInternalData(Ljava/util/List;Ljava/util/List;Ljava/util/Set;Ljava/util/Map;)V
PLcom/android/server/wifi/WifiConfigManager;->loadInternalDataFromSharedStore(Ljava/util/List;Ljava/util/Map;)V
PLcom/android/server/wifi/WifiConfigManager;->loadInternalDataFromUserStore(Ljava/util/List;Ljava/util/Map;)V
PLcom/android/server/wifi/WifiConfigManager;->loadInternalDataFromUserStore(Ljava/util/List;Ljava/util/Set;)V
PLcom/android/server/wifi/WifiConfigManager;->maskPasswordsInWifiConfiguration(Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/WifiConfigManager;->migrateFromLegacyStore()Z
PLcom/android/server/wifi/WifiConfigManager;->removeAllEphemeralOrPasspointConfiguredNetworks()Z
PLcom/android/server/wifi/WifiConfigManager;->resetSimNetworks(Z)V
PLcom/android/server/wifi/WifiConfigManager;->retrieveHiddenNetworkList()Ljava/util/List;
PLcom/android/server/wifi/WifiConfigManager;->retrievePnoNetworkList()Ljava/util/List;
PLcom/android/server/wifi/WifiConfigManager;->saveToScanDetailCacheForNetwork(Landroid/net/wifi/WifiConfiguration;Lcom/android/server/wifi/ScanDetail;)V
PLcom/android/server/wifi/WifiConfigManager;->sendConfiguredNetworkChangedBroadcast(Landroid/net/wifi/WifiConfiguration;I)V
PLcom/android/server/wifi/WifiConfigManager;->setNetworkCandidateScanResult(ILandroid/net/wifi/ScanResult;I)Z
PLcom/android/server/wifi/WifiConfigManager;->setNetworkRandomizedMacAddress(ILandroid/net/MacAddress;)Z
PLcom/android/server/wifi/WifiConfigManager;->setNetworkSelectionStatus(Landroid/net/wifi/WifiConfiguration;I)Z
PLcom/android/server/wifi/WifiConfigManager;->setNetworkValidatedInternetAccess(IZ)Z
PLcom/android/server/wifi/WifiConfigManager;->setRecentFailureAssociationStatus(II)V
PLcom/android/server/wifi/WifiConfigManager;->shouldNetworksBeLinked(Landroid/net/wifi/WifiConfiguration;Landroid/net/wifi/WifiConfiguration;Lcom/android/server/wifi/ScanDetailCache;Lcom/android/server/wifi/ScanDetailCache;)Z
PLcom/android/server/wifi/WifiConfigManager;->tryEnableNetwork(I)Z
PLcom/android/server/wifi/WifiConfigManager;->tryEnableNetwork(Landroid/net/wifi/WifiConfiguration;)Z
PLcom/android/server/wifi/WifiConfigManager;->unlinkNetworks(Landroid/net/wifi/WifiConfiguration;Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/WifiConfigManager;->updateNetworkAfterConnect(I)Z
PLcom/android/server/wifi/WifiConfigManager;->updateNetworkAfterDisconnect(I)Z
PLcom/android/server/wifi/WifiConfigManager;->updateNetworkSelectionStatus(II)Z
PLcom/android/server/wifi/WifiConfigManager;->updateNetworkSelectionStatus(Landroid/net/wifi/WifiConfiguration;I)Z
PLcom/android/server/wifi/WifiConfigManager;->updateScanDetailCacheFromWifiInfo(Landroid/net/wifi/WifiInfo;)V
PLcom/android/server/wifi/WifiConfigManager;->wasEphemeralNetworkDeleted(Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiConfigStore$2;->onAlarm()V
PLcom/android/server/wifi/WifiConfigStore$StoreFile;->readRawData()[B
PLcom/android/server/wifi/WifiConfigStore$StoreFile;->storeRawDataToWrite([B)V
PLcom/android/server/wifi/WifiConfigStore$StoreFile;->writeBufferedRawData()V
PLcom/android/server/wifi/WifiConfigStore;->deserializeData([BLcom/android/server/wifi/WifiConfigStore$StoreFile;)V
PLcom/android/server/wifi/WifiConfigStore;->parseDocumentStartAndVersionFromXml(Lorg/xmlpull/v1/XmlPullParser;)I
PLcom/android/server/wifi/WifiConfigStore;->read()V
PLcom/android/server/wifi/WifiConfigStore;->serializeData(Lcom/android/server/wifi/WifiConfigStore$StoreFile;)[B
PLcom/android/server/wifi/WifiConfigStore;->switchUserStoresAndRead(Ljava/util/List;)V
PLcom/android/server/wifi/WifiConfigStore;->write(Z)V
PLcom/android/server/wifi/WifiConfigStore;->writeBufferedData()V
PLcom/android/server/wifi/WifiConfigStoreLegacy;->areStoresPresent()Z
PLcom/android/server/wifi/WifiConfigurationUtil$WifiConfigurationComparator;->compare(Landroid/net/wifi/WifiConfiguration;Landroid/net/wifi/WifiConfiguration;)I
PLcom/android/server/wifi/WifiConfigurationUtil$WifiConfigurationComparator;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
PLcom/android/server/wifi/WifiConfigurationUtil;->createPnoNetwork(Landroid/net/wifi/WifiConfiguration;)Landroid/net/wifi/WifiScanner$PnoSettings$PnoNetwork;
PLcom/android/server/wifi/WifiConfigurationUtil;->hasCredentialChanged(Landroid/net/wifi/WifiConfiguration;Landroid/net/wifi/WifiConfiguration;)Z
PLcom/android/server/wifi/WifiConfigurationUtil;->hasEnterpriseConfigChanged(Landroid/net/wifi/WifiEnterpriseConfig;Landroid/net/wifi/WifiEnterpriseConfig;)Z
PLcom/android/server/wifi/WifiConfigurationUtil;->isConfigForOpenNetwork(Landroid/net/wifi/WifiConfiguration;)Z
PLcom/android/server/wifi/WifiConfigurationUtil;->isSameNetwork(Landroid/net/wifi/WifiConfiguration;Landroid/net/wifi/WifiConfiguration;)Z
PLcom/android/server/wifi/WifiConnectivityHelper;->getFirmwareRoamingInfo()Z
PLcom/android/server/wifi/WifiConnectivityHelper;->getMaxNumBlacklistBssid()I
PLcom/android/server/wifi/WifiConnectivityHelper;->isFirmwareRoamingSupported()Z
PLcom/android/server/wifi/WifiConnectivityHelper;->setFirmwareRoamingConfiguration(Ljava/util/ArrayList;Ljava/util/ArrayList;)Z
PLcom/android/server/wifi/WifiConnectivityManager$1;->onAlarm()V
PLcom/android/server/wifi/WifiConnectivityManager$2;->onAlarm()V
PLcom/android/server/wifi/WifiConnectivityManager$3;->onAlarm()V
PLcom/android/server/wifi/WifiConnectivityManager$AllSingleScanListener;->clearScanDetails()V
PLcom/android/server/wifi/WifiConnectivityManager$AllSingleScanListener;->onFullResult(Landroid/net/wifi/ScanResult;)V
PLcom/android/server/wifi/WifiConnectivityManager$AllSingleScanListener;->onResults([Landroid/net/wifi/WifiScanner$ScanData;)V
PLcom/android/server/wifi/WifiConnectivityManager$AllSingleScanListener;->onSuccess()V
PLcom/android/server/wifi/WifiConnectivityManager$OnSavedNetworkUpdateListener;->onSavedNetworkEnabled(I)V
PLcom/android/server/wifi/WifiConnectivityManager$OnSavedNetworkUpdateListener;->onSavedNetworkTemporarilyDisabled(II)V
PLcom/android/server/wifi/WifiConnectivityManager$PnoScanListener;->clearScanDetails()V
PLcom/android/server/wifi/WifiConnectivityManager$PnoScanListener;->onPnoNetworkFound([Landroid/net/wifi/ScanResult;)V
PLcom/android/server/wifi/WifiConnectivityManager$PnoScanListener;->onSuccess()V
PLcom/android/server/wifi/WifiConnectivityManager$PnoScanListener;->resetLowRssiNetworkRetryDelay()V
PLcom/android/server/wifi/WifiConnectivityManager$RestartSingleScanListener;->onAlarm()V
PLcom/android/server/wifi/WifiConnectivityManager$SingleScanListener;->onFailure(ILjava/lang/String;)V
PLcom/android/server/wifi/WifiConnectivityManager$SingleScanListener;->onFullResult(Landroid/net/wifi/ScanResult;)V
PLcom/android/server/wifi/WifiConnectivityManager$SingleScanListener;->onResults([Landroid/net/wifi/WifiScanner$ScanData;)V
PLcom/android/server/wifi/WifiConnectivityManager$SingleScanListener;->onSuccess()V
PLcom/android/server/wifi/WifiConnectivityManager;->buildBssidBlacklist()Ljava/util/HashSet;
PLcom/android/server/wifi/WifiConnectivityManager;->connectToNetwork(Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/WifiConnectivityManager;->enable(Z)V
PLcom/android/server/wifi/WifiConnectivityManager;->forceConnectivityScan(Landroid/os/WorkSource;)V
PLcom/android/server/wifi/WifiConnectivityManager;->handleConnectionAttemptEnded(I)V
PLcom/android/server/wifi/WifiConnectivityManager;->handleConnectionStateChanged(I)V
PLcom/android/server/wifi/WifiConnectivityManager;->handleScanResults(Ljava/util/List;Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiConnectivityManager;->isBssidDisabled(Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiConnectivityManager;->refreshBssidBlacklist()V
PLcom/android/server/wifi/WifiConnectivityManager;->setTrustedConnectionAllowed(Z)V
PLcom/android/server/wifi/WifiConnectivityManager;->setWifiEnabled(Z)V
PLcom/android/server/wifi/WifiConnectivityManager;->shouldSkipConnectionAttempt(Ljava/lang/Long;)Z
PLcom/android/server/wifi/WifiConnectivityManager;->startDisconnectedPnoScan()V
PLcom/android/server/wifi/WifiConnectivityManager;->startPeriodicSingleScan()V
PLcom/android/server/wifi/WifiConnectivityManager;->startSingleScan(ZLandroid/os/WorkSource;)V
PLcom/android/server/wifi/WifiConnectivityManager;->stop()V
PLcom/android/server/wifi/WifiConnectivityManager;->trackBssid(Ljava/lang/String;ZI)Z
PLcom/android/server/wifi/WifiConnectivityManager;->updateBssidBlacklist(Ljava/lang/String;ZI)Z
PLcom/android/server/wifi/WifiConnectivityManager;->updateFirmwareRoamingConfiguration()V
PLcom/android/server/wifi/WifiCountryCode;->setCountryCode(Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiCountryCode;->setCountryCodeNative(Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiCountryCode;->setReadyForChange(Z)V
PLcom/android/server/wifi/WifiDataStall;->checkForDataStall(Lcom/android/server/wifi/WifiLinkLayerStats;Lcom/android/server/wifi/WifiLinkLayerStats;)I
PLcom/android/server/wifi/WifiDiagnostics$1;->onWifiAlert(I[B)V
PLcom/android/server/wifi/WifiDiagnostics$2;->compare(Lcom/android/server/wifi/WifiNative$FateReport;Lcom/android/server/wifi/WifiNative$FateReport;)I
PLcom/android/server/wifi/WifiDiagnostics$2;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
PLcom/android/server/wifi/WifiDiagnostics$BugReport;->clearVerboseLogs()V
PLcom/android/server/wifi/WifiDiagnostics;->captureAlertData(I[B)V
PLcom/android/server/wifi/WifiDiagnostics;->captureBugReportData(I)V
PLcom/android/server/wifi/WifiDiagnostics;->captureBugreport(IZ)Lcom/android/server/wifi/WifiDiagnostics$BugReport;
PLcom/android/server/wifi/WifiDiagnostics;->fetchPacketFates()Ljava/util/ArrayList;
PLcom/android/server/wifi/WifiDiagnostics;->flushDump(I)Z
PLcom/android/server/wifi/WifiDiagnostics;->getLogcat(I)Ljava/util/ArrayList;
PLcom/android/server/wifi/WifiDiagnostics;->onWifiAlert(I[B)V
PLcom/android/server/wifi/WifiDiagnostics;->reportConnectionEvent(B)V
PLcom/android/server/wifi/WifiDiagnostics;->stopLogging()V
PLcom/android/server/wifi/WifiInjector;->getWakeupController()Lcom/android/server/wifi/WakeupController;
PLcom/android/server/wifi/WifiInjector;->getWifiLastResortWatchdog()Lcom/android/server/wifi/WifiLastResortWatchdog;
PLcom/android/server/wifi/WifiLastResortWatchdog$AvailableNetworkFailureCount;->incrementFailureCount(I)V
PLcom/android/server/wifi/WifiLastResortWatchdog$AvailableNetworkFailureCount;->resetCounts()V
PLcom/android/server/wifi/WifiLastResortWatchdog;->checkTriggerCondition()Z
PLcom/android/server/wifi/WifiLastResortWatchdog;->clearAllFailureCounts()V
PLcom/android/server/wifi/WifiLastResortWatchdog;->connectedStateTransition(Z)V
PLcom/android/server/wifi/WifiLastResortWatchdog;->getFailureCount(Ljava/lang/String;I)I
PLcom/android/server/wifi/WifiLastResortWatchdog;->incrementBssidFailureCount(Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/wifi/WifiLastResortWatchdog;->incrementSsidFailureCount(Ljava/lang/String;I)V
PLcom/android/server/wifi/WifiLastResortWatchdog;->isOverFailureThreshold(Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiLastResortWatchdog;->noteConnectionFailureAndTriggerIfNeeded(Ljava/lang/String;Ljava/lang/String;I)Z
PLcom/android/server/wifi/WifiLastResortWatchdog;->updateAvailableNetworks(Ljava/util/List;)V
PLcom/android/server/wifi/WifiLastResortWatchdog;->updateFailureCountForNetwork(Ljava/lang/String;Ljava/lang/String;I)V
PLcom/android/server/wifi/WifiLockManager$WifiLock;-><init>(Lcom/android/server/wifi/WifiLockManager;ILjava/lang/String;Landroid/os/IBinder;Landroid/os/WorkSource;)V
PLcom/android/server/wifi/WifiLockManager$WifiLock;->binderDied()V
PLcom/android/server/wifi/WifiLockManager$WifiLock;->getBinder()Landroid/os/IBinder;
PLcom/android/server/wifi/WifiLockManager$WifiLock;->unlinkDeathRecipient()V
PLcom/android/server/wifi/WifiLockManager;->acquireWifiLock(ILjava/lang/String;Landroid/os/IBinder;Landroid/os/WorkSource;)Z
PLcom/android/server/wifi/WifiLockManager;->addLock(Lcom/android/server/wifi/WifiLockManager$WifiLock;)Z
PLcom/android/server/wifi/WifiLockManager;->findLockByBinder(Landroid/os/IBinder;)Lcom/android/server/wifi/WifiLockManager$WifiLock;
PLcom/android/server/wifi/WifiLockManager;->getStrongestLockMode()I
PLcom/android/server/wifi/WifiLockManager;->handleScreenStateChanged(Z)V
PLcom/android/server/wifi/WifiLockManager;->releaseLock(Landroid/os/IBinder;)Z
PLcom/android/server/wifi/WifiLockManager;->releaseWifiLock(Landroid/os/IBinder;)Z
PLcom/android/server/wifi/WifiLockManager;->removeLock(Landroid/os/IBinder;)Lcom/android/server/wifi/WifiLockManager$WifiLock;
PLcom/android/server/wifi/WifiLockManager;->setBlameHiPerfWs(Landroid/os/WorkSource;Z)V
PLcom/android/server/wifi/WifiLockManager;->updateOpMode()Z
PLcom/android/server/wifi/WifiMetrics$1;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/wifi/WifiMetrics$ConnectionEvent;-><init>(Lcom/android/server/wifi/WifiMetrics;)V
PLcom/android/server/wifi/WifiMetrics$RouterFingerPrint;->updateFromWifiConfiguration(Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/WifiMetrics;->addStaEvent(Lcom/android/server/wifi/nano/WifiMetricsProto$StaEvent;)V
PLcom/android/server/wifi/WifiMetrics;->addToWifiUsabilityStatsList(II)V
PLcom/android/server/wifi/WifiMetrics;->clear()V
PLcom/android/server/wifi/WifiMetrics;->consolidateProto()V
PLcom/android/server/wifi/WifiMetrics;->consolidateScoringParams()V
PLcom/android/server/wifi/WifiMetrics;->countScanResults(Ljava/util/List;)V
PLcom/android/server/wifi/WifiMetrics;->createConfigInfo(Landroid/net/wifi/WifiConfiguration;)Lcom/android/server/wifi/nano/WifiMetricsProto$StaEvent$ConfigInfo;
PLcom/android/server/wifi/WifiMetrics;->createNewWifiUsabilityStatsEntry(Lcom/android/server/wifi/nano/WifiMetricsProto$WifiUsabilityStatsEntry;)Lcom/android/server/wifi/nano/WifiMetricsProto$WifiUsabilityStatsEntry;
PLcom/android/server/wifi/WifiMetrics;->createNewWifiUsabilityStatsEntryParcelable(Lcom/android/server/wifi/nano/WifiMetricsProto$WifiUsabilityStatsEntry;)Landroid/net/wifi/WifiUsabilityStatsEntry;
PLcom/android/server/wifi/WifiMetrics;->createWifiUsabilityStatsWithLabel(II)Lcom/android/server/wifi/nano/WifiMetricsProto$WifiUsabilityStats;
PLcom/android/server/wifi/WifiMetrics;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/wifi/WifiMetrics;->endConnectionEvent(II)V
PLcom/android/server/wifi/WifiMetrics;->getHandler()Landroid/os/Handler;
PLcom/android/server/wifi/WifiMetrics;->getOrCreateDeviceMobilityStatePnoScanStats(I)Lcom/android/server/wifi/nano/WifiMetricsProto$DeviceMobilityStatePnoScanStats;
PLcom/android/server/wifi/WifiMetrics;->handlePollResult(Landroid/net/wifi/WifiInfo;)V
PLcom/android/server/wifi/WifiMetrics;->increment80211mcAps(Landroid/util/SparseIntArray;I)V
PLcom/android/server/wifi/WifiMetrics;->incrementAlertReasonCount(I)V
PLcom/android/server/wifi/WifiMetrics;->incrementAvailableNetworksHistograms(Ljava/util/List;Z)V
PLcom/android/server/wifi/WifiMetrics;->incrementBssid(Landroid/util/SparseIntArray;I)V
PLcom/android/server/wifi/WifiMetrics;->incrementConnectToNetworkNotification(Ljava/lang/String;I)V
PLcom/android/server/wifi/WifiMetrics;->incrementConnectivityOneshotScanCount()V
PLcom/android/server/wifi/WifiMetrics;->incrementEmptyScanResultCount()V
PLcom/android/server/wifi/WifiMetrics;->incrementExternalAppOneshotScanRequestsCount()V
PLcom/android/server/wifi/WifiMetrics;->incrementExternalForegroundAppOneshotScanRequestsThrottledCount()V
PLcom/android/server/wifi/WifiMetrics;->incrementLinkSpeedCount(II)V
PLcom/android/server/wifi/WifiMetrics;->incrementNonEmptyScanResultCount()V
PLcom/android/server/wifi/WifiMetrics;->incrementNumConnectivityWatchdogPnoBad()V
PLcom/android/server/wifi/WifiMetrics;->incrementNumConnectivityWatchdogPnoGood()V
PLcom/android/server/wifi/WifiMetrics;->incrementNumNetworkRecommendationUpdates(Ljava/lang/String;)V
PLcom/android/server/wifi/WifiMetrics;->incrementOneshotScanCount()V
PLcom/android/server/wifi/WifiMetrics;->incrementOneshotScanWithDfsCount()V
PLcom/android/server/wifi/WifiMetrics;->incrementPasspointPerUniqueEss(Landroid/util/SparseIntArray;I)V
PLcom/android/server/wifi/WifiMetrics;->incrementPnoFoundNetworkEventCount()V
PLcom/android/server/wifi/WifiMetrics;->incrementPnoScanFailedCount()V
PLcom/android/server/wifi/WifiMetrics;->incrementPnoScanStartAttempCount()V
PLcom/android/server/wifi/WifiMetrics;->incrementRssiPollRssiCount(II)V
PLcom/android/server/wifi/WifiMetrics;->incrementSsid(Landroid/util/SparseIntArray;I)V
PLcom/android/server/wifi/WifiMetrics;->incrementTotalPasspointAps(Landroid/util/SparseIntArray;I)V
PLcom/android/server/wifi/WifiMetrics;->incrementTotalScanResults(Landroid/util/SparseIntArray;I)V
PLcom/android/server/wifi/WifiMetrics;->incrementTotalScanSsids(Landroid/util/SparseIntArray;I)V
PLcom/android/server/wifi/WifiMetrics;->incrementTotalUniquePasspointEss(Landroid/util/SparseIntArray;I)V
PLcom/android/server/wifi/WifiMetrics;->incrementWifiLinkLayerUsageStats(Lcom/android/server/wifi/WifiLinkLayerStats;)V
PLcom/android/server/wifi/WifiMetrics;->incrementWifiScoreCount(I)V
PLcom/android/server/wifi/WifiMetrics;->incrementWifiSystemScanStateCount(IZ)V
PLcom/android/server/wifi/WifiMetrics;->logFirmwareAlert(I)V
PLcom/android/server/wifi/WifiMetrics;->logNetworkSelectionDecision(IIZI)V
PLcom/android/server/wifi/WifiMetrics;->logPnoScanStart()V
PLcom/android/server/wifi/WifiMetrics;->logPnoScanStop()V
PLcom/android/server/wifi/WifiMetrics;->logStaEvent(I)V
PLcom/android/server/wifi/WifiMetrics;->logStaEvent(II)V
PLcom/android/server/wifi/WifiMetrics;->logStaEvent(IILandroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/WifiMetrics;->logStaEvent(ILandroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/WifiMetrics;->logWifiIsUnusableEvent(I)V
PLcom/android/server/wifi/WifiMetrics;->logWifiIsUnusableEvent(II)V
PLcom/android/server/wifi/WifiMetrics;->makeNetworkSelectionExperimentDecisionsList()[Lcom/android/server/wifi/nano/WifiMetricsProto$NetworkSelectionExperimentDecisions;
PLcom/android/server/wifi/WifiMetrics;->makeNumConnectableNetworksBucketArray(Landroid/util/SparseIntArray;)[Lcom/android/server/wifi/nano/WifiMetricsProto$NumConnectableNetworksBucket;
PLcom/android/server/wifi/WifiMetrics;->makeWifiConfigStoreIODurationBucketArray(Landroid/util/SparseIntArray;)[Lcom/android/server/wifi/nano/WifiMetricsProto$WifiConfigStoreIO$DurationBucket;
PLcom/android/server/wifi/WifiMetrics;->maybeIncrementRssiDeltaCount(I)V
PLcom/android/server/wifi/WifiMetrics;->noteWifiConfigStoreReadDuration(I)V
PLcom/android/server/wifi/WifiMetrics;->noteWifiConfigStoreWriteDuration(I)V
PLcom/android/server/wifi/WifiMetrics;->processMessage(Landroid/os/Message;)V
PLcom/android/server/wifi/WifiMetrics;->resetWifiIsUnusableLinkLayerStats()V
PLcom/android/server/wifi/WifiMetrics;->sendWifiUsabilityStats(IZLandroid/net/wifi/WifiUsabilityStatsEntry;)V
PLcom/android/server/wifi/WifiMetrics;->setConnectionScanDetail(Lcom/android/server/wifi/ScanDetail;)V
PLcom/android/server/wifi/WifiMetrics;->setNetworkRecommenderBlacklistSize(Ljava/lang/String;I)V
PLcom/android/server/wifi/WifiMetrics;->setWifiState(I)V
PLcom/android/server/wifi/WifiMetrics;->startConnectionEvent(Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;I)V
PLcom/android/server/wifi/WifiMetrics;->supplicantStateToBit(Landroid/net/wifi/SupplicantState;)I
PLcom/android/server/wifi/WifiMetrics;->updateMetricsFromNetworkDetail(Lcom/android/server/wifi/hotspot2/NetworkDetail;)V
PLcom/android/server/wifi/WifiMetrics;->updateMetricsFromScanResult(Landroid/net/wifi/ScanResult;)V
PLcom/android/server/wifi/WifiMetrics;->updateSavedNetworks(Ljava/util/List;)V
PLcom/android/server/wifi/WifiMetrics;->updateSavedPasspointProfiles(II)V
PLcom/android/server/wifi/WifiMetrics;->updateSavedPasspointProfilesInfo(Ljava/util/Map;)V
PLcom/android/server/wifi/WifiMetrics;->updateWifiIsUnusableLinkLayerStats(JJJJJ)V
PLcom/android/server/wifi/WifiMetrics;->updateWifiUsabilityStatsEntries(Landroid/net/wifi/WifiInfo;Lcom/android/server/wifi/WifiLinkLayerStats;)V
PLcom/android/server/wifi/WifiMonitor;->broadcastAnqpDoneEvent(Ljava/lang/String;Lcom/android/server/wifi/hotspot2/AnqpEvent;)V
PLcom/android/server/wifi/WifiMonitor;->broadcastAssociatedBssidEvent(Ljava/lang/String;Ljava/lang/String;)V
PLcom/android/server/wifi/WifiMonitor;->broadcastAssociationRejectionEvent(Ljava/lang/String;IZLjava/lang/String;)V
PLcom/android/server/wifi/WifiMonitor;->broadcastNetworkConnectionEvent(Ljava/lang/String;ILjava/lang/String;)V
PLcom/android/server/wifi/WifiMonitor;->broadcastNetworkDisconnectionEvent(Ljava/lang/String;IILjava/lang/String;)V
PLcom/android/server/wifi/WifiMonitor;->broadcastPnoScanResultEvent(Ljava/lang/String;)V
PLcom/android/server/wifi/WifiMonitor;->broadcastScanFailedEvent(Ljava/lang/String;)V
PLcom/android/server/wifi/WifiMonitor;->broadcastScanResultEvent(Ljava/lang/String;)V
PLcom/android/server/wifi/WifiMonitor;->broadcastSupplicantStateChangeEvent(Ljava/lang/String;ILandroid/net/wifi/WifiSsid;Ljava/lang/String;Landroid/net/wifi/SupplicantState;)V
PLcom/android/server/wifi/WifiMulticastLockManager$Multicaster;-><init>(Lcom/android/server/wifi/WifiMulticastLockManager;Ljava/lang/String;Landroid/os/IBinder;)V
PLcom/android/server/wifi/WifiMulticastLockManager$Multicaster;->binderDied()V
PLcom/android/server/wifi/WifiMulticastLockManager$Multicaster;->getTag()Ljava/lang/String;
PLcom/android/server/wifi/WifiMulticastLockManager$Multicaster;->getUid()I
PLcom/android/server/wifi/WifiMulticastLockManager$Multicaster;->unlinkDeathRecipient()V
PLcom/android/server/wifi/WifiMulticastLockManager;->acquireLock(Landroid/os/IBinder;Ljava/lang/String;)V
PLcom/android/server/wifi/WifiMulticastLockManager;->releaseLock(Ljava/lang/String;)V
PLcom/android/server/wifi/WifiMulticastLockManager;->removeMulticasterLocked(IILjava/lang/String;)V
PLcom/android/server/wifi/WifiNative$FateReport;->convertDriverTimestampUSecToWallclockMSec(J)J
PLcom/android/server/wifi/WifiNative$HiddenNetwork;->equals(Ljava/lang/Object;)Z
PLcom/android/server/wifi/WifiNative;->configureNeighborDiscoveryOffload(Ljava/lang/String;Z)Z
PLcom/android/server/wifi/WifiNative;->configureRoaming(Ljava/lang/String;Lcom/android/server/wifi/WifiNative$RoamingConfig;)Z
PLcom/android/server/wifi/WifiNative;->connectToNetwork(Ljava/lang/String;Landroid/net/wifi/WifiConfiguration;)Z
PLcom/android/server/wifi/WifiNative;->disconnect(Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiNative;->enableStaAutoReconnect(Ljava/lang/String;Z)Z
PLcom/android/server/wifi/WifiNative;->flushRingBufferData()Z
PLcom/android/server/wifi/WifiNative;->getApfCapabilities(Ljava/lang/String;)Landroid/net/apf/ApfCapabilities;
PLcom/android/server/wifi/WifiNative;->getFactoryMacAddress(Ljava/lang/String;)Landroid/net/MacAddress;
PLcom/android/server/wifi/WifiNative;->getMacAddress(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/wifi/WifiNative;->getPnoScanResults(Ljava/lang/String;)Ljava/util/ArrayList;
PLcom/android/server/wifi/WifiNative;->getRingBufferData(Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiNative;->getRoamingCapabilities(Ljava/lang/String;Lcom/android/server/wifi/WifiNative$RoamingCapabilities;)Z
PLcom/android/server/wifi/WifiNative;->getRxPktFates(Ljava/lang/String;[Lcom/android/server/wifi/WifiNative$RxFateReport;)Z
PLcom/android/server/wifi/WifiNative;->getScanResults(Ljava/lang/String;)Ljava/util/ArrayList;
PLcom/android/server/wifi/WifiNative;->getTxPktFates(Ljava/lang/String;[Lcom/android/server/wifi/WifiNative$TxFateReport;)Z
PLcom/android/server/wifi/WifiNative;->getWifiLinkLayerStats(Ljava/lang/String;)Lcom/android/server/wifi/WifiLinkLayerStats;
PLcom/android/server/wifi/WifiNative;->installPacketFilter(Ljava/lang/String;[B)Z
PLcom/android/server/wifi/WifiNative;->onClientInterfaceForConnectivityDestroyed(Lcom/android/server/wifi/WifiNative$Iface;)V
PLcom/android/server/wifi/WifiNative;->readKernelLog()Ljava/lang/String;
PLcom/android/server/wifi/WifiNative;->removeAllNetworks(Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiNative;->requestAnqp(Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;Ljava/util/Set;)Z
PLcom/android/server/wifi/WifiNative;->resetLogHandler()Z
PLcom/android/server/wifi/WifiNative;->scan(Ljava/lang/String;ILjava/util/Set;Ljava/util/Set;)Z
PLcom/android/server/wifi/WifiNative;->setBluetoothCoexistenceMode(Ljava/lang/String;I)Z
PLcom/android/server/wifi/WifiNative;->setBluetoothCoexistenceScanMode(Ljava/lang/String;Z)Z
PLcom/android/server/wifi/WifiNative;->setConcurrencyPriority(Z)Z
PLcom/android/server/wifi/WifiNative;->setConfiguredNetworkBSSID(Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiNative;->setCountryCode(Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiNative;->setExternalSim(Ljava/lang/String;Z)Z
PLcom/android/server/wifi/WifiNative;->setMacAddress(Ljava/lang/String;Landroid/net/MacAddress;)Z
PLcom/android/server/wifi/WifiNative;->setPowerSave(Ljava/lang/String;Z)V
PLcom/android/server/wifi/WifiNative;->setScanningMacOui(Ljava/lang/String;[B)Z
PLcom/android/server/wifi/WifiNative;->setSuspendOptimizations(Ljava/lang/String;Z)Z
PLcom/android/server/wifi/WifiNative;->signalPoll(Ljava/lang/String;)Lcom/android/server/wifi/WifiNative$SignalPollResult;
PLcom/android/server/wifi/WifiNative;->startLoggingRingBuffer(IIIILjava/lang/String;)Z
PLcom/android/server/wifi/WifiNative;->startPnoScan(Ljava/lang/String;Lcom/android/server/wifi/WifiNative$PnoSettings;)Z
PLcom/android/server/wifi/WifiNative;->startSendingOffloadedPacket(Ljava/lang/String;I[B[BII)I
PLcom/android/server/wifi/WifiNative;->stopBgScan(Ljava/lang/String;)V
PLcom/android/server/wifi/WifiNative;->stopFilteringMulticastV4Packets(Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiNative;->stopFilteringMulticastV6Packets(Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiNative;->stopRssiMonitoring(Ljava/lang/String;)I
PLcom/android/server/wifi/WifiNative;->stopSendingOffloadedPacket(Ljava/lang/String;I)I
PLcom/android/server/wifi/WifiNative;->stopSupplicantIfNecessary()V
PLcom/android/server/wifi/WifiNetworkFactory$NetworkRequestDataSource;->fromDeserialized(Ljava/util/Map;)V
PLcom/android/server/wifi/WifiNetworkFactory$NetworkRequestDataSource;->toSerialize()Ljava/util/Map;
PLcom/android/server/wifi/WifiNetworkFactory;->acceptRequest(Landroid/net/NetworkRequest;I)Z
PLcom/android/server/wifi/WifiNetworkFactory;->getSpecificNetworkRequestUidAndPackageName(Landroid/net/wifi/WifiConfiguration;)Landroid/util/Pair;
PLcom/android/server/wifi/WifiNetworkFactory;->handleConnectionAttemptEnded(ILandroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/WifiNetworkFactory;->handleNetworkConnectionFailure(Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/WifiNetworkFactory;->handleNetworkConnectionSuccess(Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/WifiNetworkFactory;->hasConnectionRequests()Z
PLcom/android/server/wifi/WifiNetworkFactory;->needNetworkFor(Landroid/net/NetworkRequest;I)V
PLcom/android/server/wifi/WifiNetworkFactory;->releaseNetworkFor(Landroid/net/NetworkRequest;)V
PLcom/android/server/wifi/WifiNetworkFactory;->setWifiState(Z)V
PLcom/android/server/wifi/WifiNetworkSelector;->calculateLastSelectionWeight()D
PLcom/android/server/wifi/WifiNetworkSelector;->experimentIdFromIdentifier(Ljava/lang/String;)I
PLcom/android/server/wifi/WifiNetworkSelector;->filterScanResults(Ljava/util/List;Ljava/util/HashSet;ZLjava/lang/String;)Ljava/util/List;
PLcom/android/server/wifi/WifiNetworkSelector;->getConnectableScanDetails()Ljava/util/List;
PLcom/android/server/wifi/WifiNetworkSelector;->getFilteredScanDetailsForCarrierUnsavedNetworks(Lcom/android/server/wifi/CarrierNetworkConfig;)Ljava/util/List;
PLcom/android/server/wifi/WifiNetworkSelector;->getFilteredScanDetailsForOpenUnsavedNetworks()Ljava/util/List;
PLcom/android/server/wifi/WifiNetworkSelector;->isCurrentNetworkSufficient(Landroid/net/wifi/WifiInfo;Ljava/util/List;)Z
PLcom/android/server/wifi/WifiNetworkSelector;->isNetworkSelectionNeeded(Ljava/util/List;Landroid/net/wifi/WifiInfo;ZZ)Z
PLcom/android/server/wifi/WifiNetworkSelector;->isSameNetworkSelection(Landroid/net/wifi/WifiConfiguration;Landroid/net/wifi/WifiConfiguration;)Z
PLcom/android/server/wifi/WifiNetworkSelector;->isSignalTooWeak(Landroid/net/wifi/ScanResult;)Z
PLcom/android/server/wifi/WifiNetworkSelector;->lambda$selectNetwork$0$WifiNetworkSelector(ILcom/android/server/wifi/WifiCandidates;IDLcom/android/server/wifi/ScanDetail;Landroid/net/wifi/WifiConfiguration;I)V
PLcom/android/server/wifi/WifiNetworkSelector;->localLog(Ljava/lang/String;)V
PLcom/android/server/wifi/WifiNetworkSelector;->overrideCandidateWithUserConnectChoice(Landroid/net/wifi/WifiConfiguration;)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/WifiNetworkSelector;->selectNetwork(Ljava/util/List;Ljava/util/HashSet;Landroid/net/wifi/WifiInfo;ZZZ)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/WifiNetworkSelector;->toNetworkString(Landroid/net/wifi/WifiConfiguration;)Ljava/lang/String;
PLcom/android/server/wifi/WifiNetworkSuggestionsManager$NetworkSuggestionDataSource;->hasNewDataToSerialize()Z
PLcom/android/server/wifi/WifiNetworkSuggestionsManager;->getNetworkSuggestionsForScanDetail(Lcom/android/server/wifi/ScanDetail;)Ljava/util/Set;
PLcom/android/server/wifi/WifiNetworkSuggestionsManager;->getNetworkSuggestionsForScanResultMatchInfo(Lcom/android/server/wifi/ScanResultMatchInfo;Landroid/net/MacAddress;)Ljava/util/Set;
PLcom/android/server/wifi/WifiNetworkSuggestionsManager;->getNetworkSuggestionsForWifiConfiguration(Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;)Ljava/util/Set;
PLcom/android/server/wifi/WifiNetworkSuggestionsManager;->handleConnectionAttemptEnded(ILandroid/net/wifi/WifiConfiguration;Ljava/lang/String;)V
PLcom/android/server/wifi/WifiNetworkSuggestionsManager;->handleConnectionSuccess(Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;)V
PLcom/android/server/wifi/WifiNetworkSuggestionsManager;->handleDisconnect(Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;)V
PLcom/android/server/wifi/WifiPowerMetrics;->buildProto()Lcom/android/server/wifi/nano/WifiMetricsProto$WifiPowerStats;
PLcom/android/server/wifi/WifiPowerMetrics;->buildWifiRadioUsageProto()Lcom/android/server/wifi/nano/WifiMetricsProto$WifiRadioUsage;
PLcom/android/server/wifi/WifiPowerMetrics;->getStats()Landroid/os/connectivity/WifiBatteryStats;
PLcom/android/server/wifi/WifiScoreCard$PerBssid;->finishPendingRead()V
PLcom/android/server/wifi/WifiScoreCard$PerBssid;->lookupSignal(Lcom/android/server/wifi/WifiScoreCardProto$Event;I)Lcom/android/server/wifi/WifiScoreCard$PerSignal;
PLcom/android/server/wifi/WifiScoreCard$PerBssid;->updateEventStats(Lcom/android/server/wifi/WifiScoreCardProto$Event;III)V
PLcom/android/server/wifi/WifiScoreCard$PerSignal;-><init>(Lcom/android/server/wifi/WifiScoreCard;Lcom/android/server/wifi/WifiScoreCardProto$Event;I)V
PLcom/android/server/wifi/WifiScoreCard$PerSignal;->toSignal()Lcom/android/server/wifi/WifiScoreCardProto$Signal;
PLcom/android/server/wifi/WifiScoreCard$PerUnivariateStatistic;->toUnivariateStatistic()Lcom/android/server/wifi/WifiScoreCardProto$UnivariateStatistic;
PLcom/android/server/wifi/WifiScoreCard$PerUnivariateStatistic;->update(D)V
PLcom/android/server/wifi/WifiScoreCard;->lookupBssid(Ljava/lang/String;Ljava/lang/String;)Lcom/android/server/wifi/WifiScoreCard$PerBssid;
PLcom/android/server/wifi/WifiScoreCard;->noteConnectionAttempt(Lcom/android/server/wifi/ExtendedWifiInfo;)V
PLcom/android/server/wifi/WifiScoreCard;->noteConnectionFailure(Lcom/android/server/wifi/ExtendedWifiInfo;II)V
PLcom/android/server/wifi/WifiScoreCard;->noteIpConfiguration(Lcom/android/server/wifi/ExtendedWifiInfo;)V
PLcom/android/server/wifi/WifiScoreCard;->noteIpReachabilityLost(Lcom/android/server/wifi/ExtendedWifiInfo;)V
PLcom/android/server/wifi/WifiScoreCard;->noteNetworkAgentCreated(Lcom/android/server/wifi/ExtendedWifiInfo;I)V
PLcom/android/server/wifi/WifiScoreCard;->noteSignalPoll(Lcom/android/server/wifi/ExtendedWifiInfo;)V
PLcom/android/server/wifi/WifiScoreCard;->noteSupplicantStateChanged(Lcom/android/server/wifi/ExtendedWifiInfo;)V
PLcom/android/server/wifi/WifiScoreCard;->noteSupplicantStateChanging(Lcom/android/server/wifi/ExtendedWifiInfo;Landroid/net/wifi/SupplicantState;)V
PLcom/android/server/wifi/WifiScoreCard;->noteWifiDisabled(Lcom/android/server/wifi/ExtendedWifiInfo;)V
PLcom/android/server/wifi/WifiScoreCard;->resetConnectionState()V
PLcom/android/server/wifi/WifiScoreCard;->update(Lcom/android/server/wifi/WifiScoreCardProto$Event;Lcom/android/server/wifi/ExtendedWifiInfo;)V
PLcom/android/server/wifi/WifiScoreCardProto$Event$1;-><init>()V
PLcom/android/server/wifi/WifiScoreCardProto$Event;-><init>(Ljava/lang/String;II)V
PLcom/android/server/wifi/WifiScoreCardProto$Event;->values()[Lcom/android/server/wifi/WifiScoreCardProto$Event;
PLcom/android/server/wifi/WifiScoreCardProto$SecurityType$1;-><init>()V
PLcom/android/server/wifi/WifiScoreCardProto$SecurityType;-><init>(Ljava/lang/String;II)V
PLcom/android/server/wifi/WifiScoreCardProto$SecurityType;->forNumber(I)Lcom/android/server/wifi/WifiScoreCardProto$SecurityType;
PLcom/android/server/wifi/WifiScoreCardProto$Signal;-><init>()V
PLcom/android/server/wifi/WifiScoreCardProto$Signal;->dynamicMethod(Lcom/google/protobuf/GeneratedMessageLite$MethodToInvoke;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/wifi/WifiScoreCardProto$UnivariateStatistic;-><init>()V
PLcom/android/server/wifi/WifiScoreCardProto$UnivariateStatistic;->dynamicMethod(Lcom/google/protobuf/GeneratedMessageLite$MethodToInvoke;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
PLcom/android/server/wifi/WifiScoreReport;->calculateAndReportScore(Landroid/net/wifi/WifiInfo;Landroid/net/NetworkAgent;Lcom/android/server/wifi/WifiMetrics;)V
PLcom/android/server/wifi/WifiScoreReport;->logLinkMetrics(Landroid/net/wifi/WifiInfo;JIIII)V
PLcom/android/server/wifi/WifiScoreReport;->noteIpCheck()V
PLcom/android/server/wifi/WifiScoreReport;->reset()V
PLcom/android/server/wifi/WifiScoreReport;->shouldCheckIpLayer()Z
PLcom/android/server/wifi/WifiService;->onStopUser(I)V
PLcom/android/server/wifi/WifiService;->onUnlockUser(I)V
PLcom/android/server/wifi/WifiServiceImpl$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/wifi/WifiServiceImpl$4;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/wifi/WifiServiceImpl;->acquireMulticastLock(Landroid/os/IBinder;Ljava/lang/String;)V
PLcom/android/server/wifi/WifiServiceImpl;->acquireWifiLock(Landroid/os/IBinder;ILjava/lang/String;Landroid/os/WorkSource;)Z
PLcom/android/server/wifi/WifiServiceImpl;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
PLcom/android/server/wifi/WifiServiceImpl;->enforceAccessPermission()V
PLcom/android/server/wifi/WifiServiceImpl;->enforceChangePermission(Ljava/lang/String;)I
PLcom/android/server/wifi/WifiServiceImpl;->getAllMatchingFqdnsForScanResults(Ljava/util/List;)Ljava/util/Map;
PLcom/android/server/wifi/WifiServiceImpl;->getConfiguredNetworks(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/wifi/WifiServiceImpl;->getConnectionInfo(Ljava/lang/String;)Landroid/net/wifi/WifiInfo;
PLcom/android/server/wifi/WifiServiceImpl;->getCurrentNetwork()Landroid/net/Network;
PLcom/android/server/wifi/WifiServiceImpl;->getDhcpInfo()Landroid/net/DhcpInfo;
PLcom/android/server/wifi/WifiServiceImpl;->getFactoryMacAddresses()[Ljava/lang/String;
PLcom/android/server/wifi/WifiServiceImpl;->getMatchingOsuProviders(Ljava/util/List;)Ljava/util/Map;
PLcom/android/server/wifi/WifiServiceImpl;->getMatchingPasspointConfigsForOsuProviders(Ljava/util/List;)Ljava/util/Map;
PLcom/android/server/wifi/WifiServiceImpl;->getPasspointConfigurations()Ljava/util/List;
PLcom/android/server/wifi/WifiServiceImpl;->getPrivilegedConfiguredNetworks(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/wifi/WifiServiceImpl;->getScanResults(Ljava/lang/String;)Ljava/util/List;
PLcom/android/server/wifi/WifiServiceImpl;->getWifiApConfiguration()Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/WifiServiceImpl;->getWifiApEnabledState()I
PLcom/android/server/wifi/WifiServiceImpl;->handleIdleModeChanged()V
PLcom/android/server/wifi/WifiServiceImpl;->handleUserStop(I)V
PLcom/android/server/wifi/WifiServiceImpl;->handleUserUnlock(I)V
PLcom/android/server/wifi/WifiServiceImpl;->isScanAlwaysAvailable()Z
PLcom/android/server/wifi/WifiServiceImpl;->isSystem(Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiServiceImpl;->isTargetSdkLessThanQOrPrivileged(Ljava/lang/String;II)Z
PLcom/android/server/wifi/WifiServiceImpl;->lambda$getScanResults$7$WifiServiceImpl(Ljava/util/List;)V
PLcom/android/server/wifi/WifiServiceImpl;->lambda$getWifiApConfiguration$5$WifiServiceImpl(Lcom/android/server/wifi/util/GeneralUtil$Mutable;)V
PLcom/android/server/wifi/WifiServiceImpl;->lambda$getWifiApEnabledState$1$WifiServiceImpl(Landroid/util/MutableInt;)V
PLcom/android/server/wifi/WifiServiceImpl;->lambda$registerSoftApCallback$3(Lcom/android/server/wifi/WifiServiceImpl;Landroid/os/IBinder;Landroid/net/wifi/ISoftApCallback;I)V
PLcom/android/server/wifi/WifiServiceImpl;->lambda$startScan$0$WifiServiceImpl(Lcom/android/server/wifi/util/GeneralUtil$Mutable;ILjava/lang/String;)V
PLcom/android/server/wifi/WifiServiceImpl;->needs5GHzToAnyApBandConversion()Z
PLcom/android/server/wifi/WifiServiceImpl;->reconnect(Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiServiceImpl;->releaseMulticastLock(Ljava/lang/String;)V
PLcom/android/server/wifi/WifiServiceImpl;->releaseWifiLock(Landroid/os/IBinder;)Z
PLcom/android/server/wifi/WifiServiceImpl;->reportActivityInfo()Landroid/net/wifi/WifiActivityEnergyInfo;
PLcom/android/server/wifi/WifiServiceImpl;->requestActivityInfo(Landroid/os/ResultReceiver;)V
PLcom/android/server/wifi/WifiServiceImpl;->retrieveBackupData()[B
PLcom/android/server/wifi/WifiServiceImpl;->setCountryCode(Ljava/lang/String;)V
PLcom/android/server/wifi/WifiServiceImpl;->startScan(Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiStateTracker;->informWifiStateBatteryStats(I)V
PLcom/android/server/wifi/WifiTrafficPoller;->notifyOnDataActivity(JJ)V
PLcom/android/server/wifi/WifiVendorHal$ChipEventCallback;->lambda$onDebugErrorAlert$1$WifiVendorHal$ChipEventCallback(Ljava/util/ArrayList;I)V
PLcom/android/server/wifi/WifiVendorHal$ChipEventCallback;->lambda$onDebugErrorAlert$1(Lcom/android/server/wifi/WifiVendorHal$ChipEventCallback;Ljava/util/ArrayList;I)V
PLcom/android/server/wifi/WifiVendorHal$ChipEventCallback;->onDebugErrorAlert(ILjava/util/ArrayList;)V
PLcom/android/server/wifi/WifiVendorHal$ChipEventCallbackV12;->onDebugErrorAlert(ILjava/util/ArrayList;)V
PLcom/android/server/wifi/WifiVendorHal$ChipEventCallbackV12;->onRadioModeChange(Ljava/util/ArrayList;)V
PLcom/android/server/wifi/WifiVendorHal;->configureNeighborDiscoveryOffload(Ljava/lang/String;Z)Z
PLcom/android/server/wifi/WifiVendorHal;->configureRoaming(Ljava/lang/String;Lcom/android/server/wifi/WifiNative$RoamingConfig;)Z
PLcom/android/server/wifi/WifiVendorHal;->flushRingBufferData()Z
PLcom/android/server/wifi/WifiVendorHal;->frameworkRingBufferFlagsFromHal(I)I
PLcom/android/server/wifi/WifiVendorHal;->frameworkToHalTxPowerScenario_1_2(Lcom/android/server/wifi/SarInfo;)I
PLcom/android/server/wifi/WifiVendorHal;->getApfCapabilities(Ljava/lang/String;)Landroid/net/apf/ApfCapabilities;
PLcom/android/server/wifi/WifiVendorHal;->getFactoryMacAddress(Ljava/lang/String;)Landroid/net/MacAddress;
PLcom/android/server/wifi/WifiVendorHal;->getRingBufferData(Ljava/lang/String;)Z
PLcom/android/server/wifi/WifiVendorHal;->getRoamingCapabilities(Ljava/lang/String;Lcom/android/server/wifi/WifiNative$RoamingCapabilities;)Z
PLcom/android/server/wifi/WifiVendorHal;->getRxPktFates(Ljava/lang/String;[Lcom/android/server/wifi/WifiNative$RxFateReport;)Z
PLcom/android/server/wifi/WifiVendorHal;->getTxPktFates(Ljava/lang/String;[Lcom/android/server/wifi/WifiNative$TxFateReport;)Z
PLcom/android/server/wifi/WifiVendorHal;->getWifiLinkLayerStats(Ljava/lang/String;)Lcom/android/server/wifi/WifiLinkLayerStats;
PLcom/android/server/wifi/WifiVendorHal;->getWifiLinkLayerStats_1_3_Internal(Ljava/lang/String;)Lcom/android/server/wifi/WifiLinkLayerStats;
PLcom/android/server/wifi/WifiVendorHal;->getWifiStaIfaceForV1_2Mockable(Ljava/lang/String;)Landroid/hardware/wifi/V1_2/IWifiStaIface;
PLcom/android/server/wifi/WifiVendorHal;->getWifiStaIfaceForV1_3Mockable(Ljava/lang/String;)Landroid/hardware/wifi/V1_3/IWifiStaIface;
PLcom/android/server/wifi/WifiVendorHal;->halToFrameworkPktFateFrameType(I)B
PLcom/android/server/wifi/WifiVendorHal;->halToFrameworkRxPktFate(I)B
PLcom/android/server/wifi/WifiVendorHal;->halToFrameworkTxPktFate(I)B
PLcom/android/server/wifi/WifiVendorHal;->installPacketFilter(Ljava/lang/String;[B)Z
PLcom/android/server/wifi/WifiVendorHal;->lambda$getApfCapabilities$7$WifiVendorHal(Lcom/android/server/wifi/WifiVendorHal$4AnswerBox;Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/StaApfPacketFilterCapabilities;)V
PLcom/android/server/wifi/WifiVendorHal;->lambda$getFactoryMacAddress$6$WifiVendorHal(Lcom/android/server/wifi/WifiVendorHal$3AnswerBox;Landroid/hardware/wifi/V1_0/WifiStatus;[B)V
PLcom/android/server/wifi/WifiVendorHal;->lambda$getRingBufferStatus$10$WifiVendorHal(Lcom/android/server/wifi/WifiVendorHal$6AnswerBox;Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
PLcom/android/server/wifi/WifiVendorHal;->lambda$getRoamingCapabilities$16$WifiVendorHal(Lcom/android/server/wifi/WifiNative$RoamingCapabilities;Landroid/util/MutableBoolean;Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/StaRoamingCapabilities;)V
PLcom/android/server/wifi/WifiVendorHal;->lambda$getRxPktFates$14$WifiVendorHal([Lcom/android/server/wifi/WifiNative$RxFateReport;Landroid/util/MutableBoolean;Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
PLcom/android/server/wifi/WifiVendorHal;->lambda$getRxPktFates$14(Lcom/android/server/wifi/WifiVendorHal;[Lcom/android/server/wifi/WifiNative$RxFateReport;Landroid/util/MutableBoolean;Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
PLcom/android/server/wifi/WifiVendorHal;->lambda$getSupportedFeatureSet$5$WifiVendorHal(Landroid/util/MutableLong;Landroid/hardware/wifi/V1_0/WifiStatus;I)V
PLcom/android/server/wifi/WifiVendorHal;->lambda$getTxPktFates$13$WifiVendorHal([Lcom/android/server/wifi/WifiNative$TxFateReport;Landroid/util/MutableBoolean;Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
PLcom/android/server/wifi/WifiVendorHal;->lambda$getTxPktFates$13(Lcom/android/server/wifi/WifiVendorHal;[Lcom/android/server/wifi/WifiNative$TxFateReport;Landroid/util/MutableBoolean;Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
PLcom/android/server/wifi/WifiVendorHal;->lambda$getWifiLinkLayerStats_1_3_Internal$2$WifiVendorHal(Lcom/android/server/wifi/WifiVendorHal$2AnswerBox;Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_3/StaLinkLayerStats;)V
PLcom/android/server/wifi/WifiVendorHal;->lambda$requestChipDebugInfo$9$WifiVendorHal(Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/IWifiChip$ChipDebugInfo;)V
PLcom/android/server/wifi/WifiVendorHal;->makeRingBufferStatusArray(Ljava/util/ArrayList;)[Lcom/android/server/wifi/WifiNative$RingBufferStatus;
PLcom/android/server/wifi/WifiVendorHal;->niceMethodName([Ljava/lang/StackTraceElement;I)Ljava/lang/String;
PLcom/android/server/wifi/WifiVendorHal;->resetLogHandler()Z
PLcom/android/server/wifi/WifiVendorHal;->setIfaceStats(Lcom/android/server/wifi/WifiLinkLayerStats;Landroid/hardware/wifi/V1_0/StaLinkLayerIfaceStats;)V
PLcom/android/server/wifi/WifiVendorHal;->setMacAddress(Ljava/lang/String;Landroid/net/MacAddress;)Z
PLcom/android/server/wifi/WifiVendorHal;->setRadioStats_1_3(Lcom/android/server/wifi/WifiLinkLayerStats;Ljava/util/List;)V
PLcom/android/server/wifi/WifiVendorHal;->setScanningMacOui(Ljava/lang/String;[B)Z
PLcom/android/server/wifi/WifiVendorHal;->startLoggingRingBuffer(IIIILjava/lang/String;)Z
PLcom/android/server/wifi/WifiVendorHal;->startSendingOffloadedPacket(Ljava/lang/String;I[B[B[BII)I
PLcom/android/server/wifi/WifiVendorHal;->stopBgScan(Ljava/lang/String;)V
PLcom/android/server/wifi/WifiVendorHal;->stopRssiMonitoring(Ljava/lang/String;)I
PLcom/android/server/wifi/WifiVendorHal;->stopSendingOffloadedPacket(Ljava/lang/String;I)I
PLcom/android/server/wifi/WifiVendorHal;->wifiFeatureMaskFromStaCapabilities(I)I
PLcom/android/server/wifi/WifiWakeMetrics$Event;->buildProto()Lcom/android/server/wifi/nano/WifiMetricsProto$WifiWakeStats$Session$Event;
PLcom/android/server/wifi/WifiWakeMetrics$Session;->buildProto()Lcom/android/server/wifi/nano/WifiMetricsProto$WifiWakeStats$Session;
PLcom/android/server/wifi/WifiWakeMetrics$Session;->hasWakeupTriggered()Z
PLcom/android/server/wifi/WifiWakeMetrics$Session;->recordInitializeEvent(IIJ)V
PLcom/android/server/wifi/WifiWakeMetrics$Session;->recordResetEvent(IJ)V
PLcom/android/server/wifi/WifiWakeMetrics$Session;->recordUnlockEvent(IJ)V
PLcom/android/server/wifi/WifiWakeMetrics$Session;->recordWakeupEvent(IJ)V
PLcom/android/server/wifi/WifiWakeMetrics;->buildProto()Lcom/android/server/wifi/nano/WifiMetricsProto$WifiWakeStats;
PLcom/android/server/wifi/WifiWakeMetrics;->clear()V
PLcom/android/server/wifi/WifiWakeMetrics;->recordInitializeEvent(II)V
PLcom/android/server/wifi/WifiWakeMetrics;->recordResetEvent(I)V
PLcom/android/server/wifi/WifiWakeMetrics;->recordStartEvent(I)V
PLcom/android/server/wifi/WifiWakeMetrics;->recordUnlockEvent(I)V
PLcom/android/server/wifi/WifiWakeMetrics;->recordWakeupEvent(I)V
PLcom/android/server/wifi/WificondControl$PnoScanEventHandler;->OnPnoNetworkFound()V
PLcom/android/server/wifi/WificondControl$PnoScanEventHandler;->OnPnoScanFailed()V
PLcom/android/server/wifi/WificondControl$ScanEventHandler;->OnScanFailed()V
PLcom/android/server/wifi/WificondControl$ScanEventHandler;->OnScanResultReady()V
PLcom/android/server/wifi/WificondControl;->abortScan(Ljava/lang/String;)V
PLcom/android/server/wifi/WificondControl;->getScanResults(Ljava/lang/String;I)Ljava/util/ArrayList;
PLcom/android/server/wifi/WificondControl;->getScanType(I)I
PLcom/android/server/wifi/WificondControl;->scan(Ljava/lang/String;ILjava/util/Set;Ljava/util/Set;)Z
PLcom/android/server/wifi/WificondControl;->signalPoll(Ljava/lang/String;)Lcom/android/server/wifi/WifiNative$SignalPollResult;
PLcom/android/server/wifi/WificondControl;->startPnoScan(Ljava/lang/String;Lcom/android/server/wifi/WifiNative$PnoSettings;)Z
PLcom/android/server/wifi/WrongPasswordNotifier;->onNewConnectionAttempt()V
PLcom/android/server/wifi/aware/WifiAwareMetrics;->clear()V
PLcom/android/server/wifi/aware/WifiAwareMetrics;->consolidateProto()Lcom/android/server/wifi/nano/WifiMetricsProto$WifiAwareLog;
PLcom/android/server/wifi/aware/WifiAwareMetrics;->histogramToProtoArray(Landroid/util/SparseIntArray;)[Lcom/android/server/wifi/nano/WifiMetricsProto$WifiAwareLog$NanStatusHistogramBucket;
PLcom/android/server/wifi/aware/WifiAwareMetrics;->histogramToProtoArray([Lcom/android/server/wifi/util/MetricsUtils$GenericBucket;)[Lcom/android/server/wifi/nano/WifiMetricsProto$WifiAwareLog$HistogramBucket;
PLcom/android/server/wifi/aware/WifiAwareNativeManager$1;->onStatusChanged()V
PLcom/android/server/wifi/aware/WifiAwareNativeManager$InterfaceAvailableForRequestListener;->onAvailabilityChanged(Z)V
PLcom/android/server/wifi/aware/WifiAwareNativeManager;->awareIsDown()V
PLcom/android/server/wifi/aware/WifiAwareNativeManager;->start(Landroid/os/Handler;)V
PLcom/android/server/wifi/aware/WifiAwareServiceImpl;->startLate()V
PLcom/android/server/wifi/aware/WifiAwareStateManager$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/wifi/aware/WifiAwareStateManager;->delayedInitialization()V
PLcom/android/server/wifi/aware/WifiAwareStateManager;->reconfigure()V
PLcom/android/server/wifi/aware/WifiAwareStateManager;->reconfigureLocal(S)Z
PLcom/android/server/wifi/aware/WifiAwareStateManager;->startLate()V
PLcom/android/server/wifi/hotspot2/ANQPData;->expired(J)Z
PLcom/android/server/wifi/hotspot2/ANQPData;->getElements()Ljava/util/Map;
PLcom/android/server/wifi/hotspot2/ANQPMatcher;->getCarrierEapMethodFromMatchingNAIRealm(Ljava/lang/String;Lcom/android/server/wifi/hotspot2/anqp/NAIRealmElement;)I
PLcom/android/server/wifi/hotspot2/ANQPMatcher;->getEapMethodForNAIRealmWithCarrier(Ljava/lang/String;Lcom/android/server/wifi/hotspot2/anqp/NAIRealmData;)I
PLcom/android/server/wifi/hotspot2/ANQPNetworkKey;->buildKey(Ljava/lang/String;JJI)Lcom/android/server/wifi/hotspot2/ANQPNetworkKey;
PLcom/android/server/wifi/hotspot2/ANQPNetworkKey;->equals(Ljava/lang/Object;)Z
PLcom/android/server/wifi/hotspot2/ANQPNetworkKey;->hashCode()I
PLcom/android/server/wifi/hotspot2/ANQPNetworkKey;->toString()Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/ANQPRequestManager;->canSendRequestNow(J)Z
PLcom/android/server/wifi/hotspot2/ANQPRequestManager;->onRequestCompleted(JZ)Lcom/android/server/wifi/hotspot2/ANQPNetworkKey;
PLcom/android/server/wifi/hotspot2/ANQPRequestManager;->requestANQPElements(JLcom/android/server/wifi/hotspot2/ANQPNetworkKey;ZZ)Z
PLcom/android/server/wifi/hotspot2/ANQPRequestManager;->updateHoldOffInfo(J)V
PLcom/android/server/wifi/hotspot2/AnqpCache;->addEntry(Lcom/android/server/wifi/hotspot2/ANQPNetworkKey;Ljava/util/Map;)V
PLcom/android/server/wifi/hotspot2/AnqpCache;->getEntry(Lcom/android/server/wifi/hotspot2/ANQPNetworkKey;)Lcom/android/server/wifi/hotspot2/ANQPData;
PLcom/android/server/wifi/hotspot2/AnqpCache;->sweep()V
PLcom/android/server/wifi/hotspot2/AnqpEvent;->getBssid()J
PLcom/android/server/wifi/hotspot2/AnqpEvent;->getElements()Ljava/util/Map;
PLcom/android/server/wifi/hotspot2/DomainMatcher;->arg2SubdomainOfArg1(Ljava/lang/String;Ljava/lang/String;)Z
PLcom/android/server/wifi/hotspot2/NetworkDetail$Ant;-><init>(Ljava/lang/String;I)V
PLcom/android/server/wifi/hotspot2/NetworkDetail$HSRelease;-><init>(Ljava/lang/String;I)V
PLcom/android/server/wifi/hotspot2/NetworkDetail;-><init>(Ljava/lang/String;[Landroid/net/wifi/ScanResult$InformationElement;Ljava/util/List;I)V
PLcom/android/server/wifi/hotspot2/NetworkDetail;->getAnqpDomainID()I
PLcom/android/server/wifi/hotspot2/NetworkDetail;->getAnt()Lcom/android/server/wifi/hotspot2/NetworkDetail$Ant;
PLcom/android/server/wifi/hotspot2/NetworkDetail;->getBSSIDString()Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/NetworkDetail;->getCenterfreq0()I
PLcom/android/server/wifi/hotspot2/NetworkDetail;->getCenterfreq1()I
PLcom/android/server/wifi/hotspot2/NetworkDetail;->getChannelWidth()I
PLcom/android/server/wifi/hotspot2/NetworkDetail;->getDtimInterval()I
PLcom/android/server/wifi/hotspot2/NetworkDetail;->getHESSID()J
PLcom/android/server/wifi/hotspot2/NetworkDetail;->getHSRelease()Lcom/android/server/wifi/hotspot2/NetworkDetail$HSRelease;
PLcom/android/server/wifi/hotspot2/NetworkDetail;->getOsuProviders()[B
PLcom/android/server/wifi/hotspot2/NetworkDetail;->getSSID()Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/NetworkDetail;->getWifiMode()I
PLcom/android/server/wifi/hotspot2/NetworkDetail;->is80211McResponderSupport()Z
PLcom/android/server/wifi/hotspot2/NetworkDetail;->isBeaconFrame()Z
PLcom/android/server/wifi/hotspot2/NetworkDetail;->isHiddenBeaconFrame()Z
PLcom/android/server/wifi/hotspot2/NetworkDetail;->isInterworking()Z
PLcom/android/server/wifi/hotspot2/NetworkDetail;->toMACString(J)Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/PasspointConfigSharedStoreData;->deserializeData(Lorg/xmlpull/v1/XmlPullParser;I)V
PLcom/android/server/wifi/hotspot2/PasspointConfigSharedStoreData;->deserializeShareData(Lorg/xmlpull/v1/XmlPullParser;I)V
PLcom/android/server/wifi/hotspot2/PasspointConfigSharedStoreData;->getName()Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/PasspointConfigSharedStoreData;->resetData()V
PLcom/android/server/wifi/hotspot2/PasspointConfigSharedStoreData;->serializeData(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/wifi/hotspot2/PasspointConfigUserStoreData;->deserializeData(Lorg/xmlpull/v1/XmlPullParser;I)V
PLcom/android/server/wifi/hotspot2/PasspointConfigUserStoreData;->deserializeUserData(Lorg/xmlpull/v1/XmlPullParser;I)V
PLcom/android/server/wifi/hotspot2/PasspointConfigUserStoreData;->getName()Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/PasspointConfigUserStoreData;->serializeData(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/wifi/hotspot2/PasspointConfigUserStoreData;->serializeProviderList(Lorg/xmlpull/v1/XmlSerializer;Ljava/util/List;)V
PLcom/android/server/wifi/hotspot2/PasspointEventHandler;->buildAnqpIdSet(Ljava/util/List;)Landroid/util/Pair;
PLcom/android/server/wifi/hotspot2/PasspointEventHandler;->notifyANQPDone(Lcom/android/server/wifi/hotspot2/AnqpEvent;)V
PLcom/android/server/wifi/hotspot2/PasspointEventHandler;->requestANQP(JLjava/util/List;)Z
PLcom/android/server/wifi/hotspot2/PasspointManager$CallbackHandler;->onANQPResponse(JLjava/util/Map;)V
PLcom/android/server/wifi/hotspot2/PasspointManager$SharedDataSourceHandler;->getProviderIndex()J
PLcom/android/server/wifi/hotspot2/PasspointManager$SharedDataSourceHandler;->setProviderIndex(J)V
PLcom/android/server/wifi/hotspot2/PasspointManager$UserDataSourceHandler;->getProviders()Ljava/util/List;
PLcom/android/server/wifi/hotspot2/PasspointManager$UserDataSourceHandler;->setProviders(Ljava/util/List;)V
PLcom/android/server/wifi/hotspot2/PasspointManager;->findEapMethodFromNAIRealmMatchedWithCarrier(Ljava/util/List;)I
PLcom/android/server/wifi/hotspot2/PasspointManager;->getANQPElements(Landroid/net/wifi/ScanResult;)Ljava/util/Map;
PLcom/android/server/wifi/hotspot2/PasspointManager;->getAllMatchedProviders(Landroid/net/wifi/ScanResult;)Ljava/util/List;
PLcom/android/server/wifi/hotspot2/PasspointManager;->getAllMatchingFqdnsForScanResults(Ljava/util/List;)Ljava/util/Map;
PLcom/android/server/wifi/hotspot2/PasspointManager;->getMatchingOsuProviders(Ljava/util/List;)Ljava/util/Map;
PLcom/android/server/wifi/hotspot2/PasspointManager;->getMatchingPasspointConfigsForOsuProviders(Ljava/util/List;)Ljava/util/Map;
PLcom/android/server/wifi/hotspot2/PasspointManager;->getProviderConfigs()Ljava/util/List;
PLcom/android/server/wifi/hotspot2/PasspointManager;->hasCarrierProvider(Ljava/lang/String;)Z
PLcom/android/server/wifi/hotspot2/PasspointManager;->matchProvider(Landroid/net/wifi/ScanResult;)Landroid/util/Pair;
PLcom/android/server/wifi/hotspot2/PasspointManager;->notifyANQPDone(Lcom/android/server/wifi/hotspot2/AnqpEvent;)V
PLcom/android/server/wifi/hotspot2/PasspointManager;->removeEphemeralProviders()V
PLcom/android/server/wifi/hotspot2/PasspointManager;->sweepCache()V
PLcom/android/server/wifi/hotspot2/PasspointManager;->updateMetrics()V
PLcom/android/server/wifi/hotspot2/PasspointNetworkEvaluator;->evaluateNetworks(Ljava/util/List;Landroid/net/wifi/WifiConfiguration;Ljava/lang/String;ZZLcom/android/server/wifi/WifiNetworkSelector$NetworkEvaluator$OnConnectableListener;)Landroid/net/wifi/WifiConfiguration;
PLcom/android/server/wifi/hotspot2/PasspointNetworkEvaluator;->getName()Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/PasspointNetworkEvaluator;->update(Ljava/util/List;)V
PLcom/android/server/wifi/hotspot2/Utils;->fromHex(CZ)I
PLcom/android/server/wifi/hotspot2/Utils;->getRealmForMccMnc(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/Utils;->macToString(J)Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/Utils;->parseMac(Ljava/lang/String;)J
PLcom/android/server/wifi/hotspot2/Utils;->splitDomain(Ljava/lang/String;)Ljava/util/List;
PLcom/android/server/wifi/hotspot2/anqp/-$$Lambda$OsuProviderInfo$CikQnZalVd3RFGF5pHDiwtVeVkg;-><init>(Lcom/android/server/wifi/hotspot2/anqp/OsuProviderInfo;)V
PLcom/android/server/wifi/hotspot2/anqp/-$$Lambda$OsuProviderInfo$CikQnZalVd3RFGF5pHDiwtVeVkg;->accept(Ljava/lang/Object;)V
PLcom/android/server/wifi/hotspot2/anqp/ANQPElement;-><init>(Lcom/android/server/wifi/hotspot2/anqp/Constants$ANQPElementType;)V
PLcom/android/server/wifi/hotspot2/anqp/ANQPParser;->parseElement(Lcom/android/server/wifi/hotspot2/anqp/Constants$ANQPElementType;Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/ANQPElement;
PLcom/android/server/wifi/hotspot2/anqp/ANQPParser;->parseHS20Element(Lcom/android/server/wifi/hotspot2/anqp/Constants$ANQPElementType;Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/ANQPElement;
PLcom/android/server/wifi/hotspot2/anqp/CellularNetwork;->parse(Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/CellularNetwork;
PLcom/android/server/wifi/hotspot2/anqp/CellularNetwork;->parsePlmn(Ljava/nio/ByteBuffer;)Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/anqp/Constants$ANQPElementType;->values()[Lcom/android/server/wifi/hotspot2/anqp/Constants$ANQPElementType;
PLcom/android/server/wifi/hotspot2/anqp/HSFriendlyNameElement;->parse(Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/HSFriendlyNameElement;
PLcom/android/server/wifi/hotspot2/anqp/HSOsuProvidersElement;->getProviders()Ljava/util/List;
PLcom/android/server/wifi/hotspot2/anqp/HSOsuProvidersElement;->parse(Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/HSOsuProvidersElement;
PLcom/android/server/wifi/hotspot2/anqp/HSWanMetricsElement;->parse(Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/HSWanMetricsElement;
PLcom/android/server/wifi/hotspot2/anqp/I18Name;->getLanguage()Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/anqp/I18Name;->getLocale()Ljava/util/Locale;
PLcom/android/server/wifi/hotspot2/anqp/I18Name;->getText()Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/anqp/I18Name;->parse(Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/I18Name;
PLcom/android/server/wifi/hotspot2/anqp/IPAddressTypeAvailabilityElement;->parse(Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/IPAddressTypeAvailabilityElement;
PLcom/android/server/wifi/hotspot2/anqp/IconInfo;->parse(Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/IconInfo;
PLcom/android/server/wifi/hotspot2/anqp/NAIRealmData;->getRealms()Ljava/util/List;
PLcom/android/server/wifi/hotspot2/anqp/NAIRealmData;->parse(Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/NAIRealmData;
PLcom/android/server/wifi/hotspot2/anqp/NAIRealmElement;->getRealmDataList()Ljava/util/List;
PLcom/android/server/wifi/hotspot2/anqp/NAIRealmElement;->parse(Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/NAIRealmElement;
PLcom/android/server/wifi/hotspot2/anqp/OsuProviderInfo;->getFriendlyNames()Ljava/util/Map;
PLcom/android/server/wifi/hotspot2/anqp/OsuProviderInfo;->getI18String(Ljava/util/List;)Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/anqp/OsuProviderInfo;->getMethodList()Ljava/util/List;
PLcom/android/server/wifi/hotspot2/anqp/OsuProviderInfo;->getNetworkAccessIdentifier()Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/anqp/OsuProviderInfo;->getServerUri()Landroid/net/Uri;
PLcom/android/server/wifi/hotspot2/anqp/OsuProviderInfo;->getServiceDescription()Ljava/lang/String;
PLcom/android/server/wifi/hotspot2/anqp/OsuProviderInfo;->lambda$new$0$OsuProviderInfo(Lcom/android/server/wifi/hotspot2/anqp/I18Name;)V
PLcom/android/server/wifi/hotspot2/anqp/OsuProviderInfo;->parse(Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/OsuProviderInfo;
PLcom/android/server/wifi/hotspot2/anqp/OsuProviderInfo;->parseI18Names(Ljava/nio/ByteBuffer;)Ljava/util/List;
PLcom/android/server/wifi/hotspot2/anqp/ThreeGPPNetworkElement;->parse(Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/ThreeGPPNetworkElement;
PLcom/android/server/wifi/hotspot2/anqp/VenueNameElement;->parse(Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/VenueNameElement;
PLcom/android/server/wifi/hotspot2/anqp/eap/AuthParam;->getAuthTypeID()I
PLcom/android/server/wifi/hotspot2/anqp/eap/EAPMethod;->addAuthParam(Ljava/util/Map;Lcom/android/server/wifi/hotspot2/anqp/eap/AuthParam;)V
PLcom/android/server/wifi/hotspot2/anqp/eap/EAPMethod;->parse(Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/eap/EAPMethod;
PLcom/android/server/wifi/hotspot2/anqp/eap/EAPMethod;->parseAuthParam(Ljava/nio/ByteBuffer;)Lcom/android/server/wifi/hotspot2/anqp/eap/AuthParam;
PLcom/android/server/wifi/hotspot2/anqp/eap/NonEAPInnerAuth;->hashCode()I
PLcom/android/server/wifi/hotspot2/anqp/eap/NonEAPInnerAuth;->parse(Ljava/nio/ByteBuffer;I)Lcom/android/server/wifi/hotspot2/anqp/eap/NonEAPInnerAuth;
PLcom/android/server/wifi/p2p/WifiP2pMetrics;->clear()V
PLcom/android/server/wifi/p2p/WifiP2pMetrics;->consolidateProto()Lcom/android/server/wifi/nano/WifiMetricsProto$WifiP2pStats;
PLcom/android/server/wifi/p2p/WifiP2pServiceImpl;->access$1400(Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;)Z
PLcom/android/server/wifi/p2p/WifiP2pServiceImpl;->access$1402(Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;Z)Z
PLcom/android/server/wifi/p2p/WifiP2pServiceImpl;->access$1502(Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;Z)Z
PLcom/android/server/wifi/p2p/WifiP2pServiceImpl;->access$1700(Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;)Z
PLcom/android/server/wifi/p2p/WifiP2pServiceImpl;->access$1702(Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;Z)Z
PLcom/android/server/wifi/p2p/WifiP2pServiceImpl;->access$1802(Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;Z)Z
PLcom/android/server/wifi/p2p/WifiP2pServiceImpl;->getP2pStateMachineMessenger()Landroid/os/Messenger;
PLcom/android/server/wifi/rtt/-$$Lambda$RttServiceImpl$3Addfr11wJKJqRbBre_6uYT6vT0;->run()V
PLcom/android/server/wifi/rtt/-$$Lambda$RttServiceImpl$tujYHkgiwM9Q0G7bKGi1Mj7KnVg;->run()V
PLcom/android/server/wifi/rtt/RttMetrics;->clear()V
PLcom/android/server/wifi/rtt/RttMetrics;->consolidateIndividualStatus(Landroid/util/SparseIntArray;)[Lcom/android/server/wifi/nano/WifiMetricsProto$WifiRttLog$RttIndividualStatusHistogramBucket;
PLcom/android/server/wifi/rtt/RttMetrics;->consolidateNumPeersPerRequest(Landroid/util/SparseIntArray;)[Lcom/android/server/wifi/nano/WifiMetricsProto$WifiRttLog$HistogramBucket;
PLcom/android/server/wifi/rtt/RttMetrics;->consolidateNumRequestsPerApp(Landroid/util/SparseArray;)[Lcom/android/server/wifi/nano/WifiMetricsProto$WifiRttLog$HistogramBucket;
PLcom/android/server/wifi/rtt/RttMetrics;->consolidateOverallStatus(Landroid/util/SparseIntArray;)[Lcom/android/server/wifi/nano/WifiMetricsProto$WifiRttLog$RttOverallStatusHistogramBucket;
PLcom/android/server/wifi/rtt/RttMetrics;->consolidatePeerType(Lcom/android/server/wifi/nano/WifiMetricsProto$WifiRttLog$RttToPeerLog;Lcom/android/server/wifi/rtt/RttMetrics$PerPeerTypeInfo;)V
PLcom/android/server/wifi/rtt/RttMetrics;->consolidateProto()Lcom/android/server/wifi/nano/WifiMetricsProto$WifiRttLog;
PLcom/android/server/wifi/rtt/RttMetrics;->convertRttStatusTypeToProtoEnum(I)I
PLcom/android/server/wifi/rtt/RttMetrics;->genericBucketsToRttBuckets([Lcom/android/server/wifi/util/MetricsUtils$GenericBucket;)[Lcom/android/server/wifi/nano/WifiMetricsProto$WifiRttLog$HistogramBucket;
PLcom/android/server/wifi/rtt/RttMetrics;->recordOverallStatus(I)V
PLcom/android/server/wifi/rtt/RttMetrics;->recordRequest(Landroid/os/WorkSource;Landroid/net/wifi/rtt/RangingRequest;)V
PLcom/android/server/wifi/rtt/RttMetrics;->recordResult(Landroid/net/wifi/rtt/RangingRequest;Ljava/util/List;)V
PLcom/android/server/wifi/rtt/RttMetrics;->updatePeerInfoWithRequestInfo(Lcom/android/server/wifi/rtt/RttMetrics$PerPeerTypeInfo;Landroid/os/WorkSource;I)V
PLcom/android/server/wifi/rtt/RttNative;->convertRangingRequestToRttConfigs(Landroid/net/wifi/rtt/RangingRequest;ZLandroid/hardware/wifi/V1_0/RttCapabilities;)Ljava/util/ArrayList;
PLcom/android/server/wifi/rtt/RttNative;->halChannelWidthFromResponderChannelWidth(I)I
PLcom/android/server/wifi/rtt/RttNative;->halRttChannelBandwidthCapabilityLimiter(ILandroid/hardware/wifi/V1_0/RttCapabilities;)I
PLcom/android/server/wifi/rtt/RttNative;->halRttChannelBandwidthFromResponderChannelWidth(I)I
PLcom/android/server/wifi/rtt/RttNative;->halRttPeerTypeFromResponderType(I)I
PLcom/android/server/wifi/rtt/RttNative;->halRttPreambleCapabilityLimiter(ILandroid/hardware/wifi/V1_0/RttCapabilities;)I
PLcom/android/server/wifi/rtt/RttNative;->halRttPreambleFromResponderPreamble(I)I
PLcom/android/server/wifi/rtt/RttNative;->onResults(ILjava/util/ArrayList;)V
PLcom/android/server/wifi/rtt/RttNative;->rangeRequest(ILandroid/net/wifi/rtt/RangingRequest;Z)Z
PLcom/android/server/wifi/rtt/RttServiceImpl$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/wifi/rtt/RttServiceImpl$RttServiceSynchronized;->isRequestorSpamming(Landroid/os/WorkSource;)Z
PLcom/android/server/wifi/rtt/RttServiceImpl$RttServiceSynchronized;->onRangingResults(ILjava/util/List;)V
PLcom/android/server/wifi/rtt/RttServiceImpl$RttServiceSynchronized;->postProcessResults(Landroid/net/wifi/rtt/RangingRequest;Ljava/util/List;Z)Ljava/util/List;
PLcom/android/server/wifi/rtt/RttServiceImpl$RttServiceSynchronized;->preExecThrottleCheck(Landroid/os/WorkSource;)Z
PLcom/android/server/wifi/rtt/RttServiceImpl$RttServiceSynchronized;->processAwarePeerHandles(Lcom/android/server/wifi/rtt/RttServiceImpl$RttRequestInfo;)Z
PLcom/android/server/wifi/rtt/RttServiceImpl$RttServiceSynchronized;->queueRangingRequest(ILandroid/os/WorkSource;Landroid/os/IBinder;Landroid/os/IBinder$DeathRecipient;Ljava/lang/String;Landroid/net/wifi/rtt/RangingRequest;Landroid/net/wifi/rtt/IRttCallback;Z)V
PLcom/android/server/wifi/rtt/RttServiceImpl$RttServiceSynchronized;->startRanging(Lcom/android/server/wifi/rtt/RttServiceImpl$RttRequestInfo;)V
PLcom/android/server/wifi/rtt/RttServiceImpl$RttShellCommand;->getControlParam(Ljava/lang/String;)I
PLcom/android/server/wifi/rtt/RttServiceImpl;->getMockableCallingUid()I
PLcom/android/server/wifi/rtt/RttServiceImpl;->lambda$onRangingResults$5$RttServiceImpl(ILjava/util/List;)V
PLcom/android/server/wifi/rtt/RttServiceImpl;->lambda$startRanging$3$RttServiceImpl(Landroid/os/WorkSource;ILandroid/os/IBinder;Landroid/os/IBinder$DeathRecipient;Ljava/lang/String;Landroid/net/wifi/rtt/RangingRequest;Landroid/net/wifi/rtt/IRttCallback;Z)V
PLcom/android/server/wifi/rtt/RttServiceImpl;->lambda$startRanging$3(Lcom/android/server/wifi/rtt/RttServiceImpl;Landroid/os/WorkSource;ILandroid/os/IBinder;Landroid/os/IBinder$DeathRecipient;Ljava/lang/String;Landroid/net/wifi/rtt/RangingRequest;Landroid/net/wifi/rtt/IRttCallback;Z)V
PLcom/android/server/wifi/rtt/RttServiceImpl;->onRangingResults(ILjava/util/List;)V
PLcom/android/server/wifi/rtt/RttServiceImpl;->startRanging(Landroid/os/IBinder;Ljava/lang/String;Landroid/os/WorkSource;Landroid/net/wifi/rtt/RangingRequest;Landroid/net/wifi/rtt/IRttCallback;)V
PLcom/android/server/wifi/scanner/-$$Lambda$WifiScanningServiceImpl$WifiSingleScanStateMachine$DefaultState$IadGqqQgFfoD3kqhYRHB92f1PGI;-><init>()V
PLcom/android/server/wifi/scanner/-$$Lambda$WifiScanningServiceImpl$WifiSingleScanStateMachine$DefaultState$IadGqqQgFfoD3kqhYRHB92f1PGI;->apply(I)Ljava/lang/Object;
PLcom/android/server/wifi/scanner/-$$Lambda$WifiScanningServiceImpl$WifiSingleScanStateMachine$DefaultState$InbNEkwBcgp-s8u0tfPo_eYbuRI;->test(Ljava/lang/Object;)Z
PLcom/android/server/wifi/scanner/BackgroundScanScheduler$BucketList;->clearAll()V
PLcom/android/server/wifi/scanner/BackgroundScanScheduler$BucketList;->getActiveRegularBucketCount()I
PLcom/android/server/wifi/scanner/BackgroundScanScheduler$BucketList;->getSortedActiveRegularBucketList()Ljava/util/List;
PLcom/android/server/wifi/scanner/BackgroundScanScheduler$BucketList;->isActive(I)Z
PLcom/android/server/wifi/scanner/BackgroundScanScheduler;->compactBuckets(I)V
PLcom/android/server/wifi/scanner/BackgroundScanScheduler;->fixBuckets(Ljava/util/List;II)Ljava/util/List;
PLcom/android/server/wifi/scanner/BackgroundScanScheduler;->getMaxBuckets()I
PLcom/android/server/wifi/scanner/BackgroundScanScheduler;->getSchedule()Lcom/android/server/wifi/WifiNative$ScanSettings;
PLcom/android/server/wifi/scanner/BackgroundScanScheduler;->optimizeBuckets()Ljava/util/List;
PLcom/android/server/wifi/scanner/BackgroundScanScheduler;->updateSchedule(Ljava/util/Collection;)V
PLcom/android/server/wifi/scanner/ChannelHelper$ChannelCollection;->addChannels(Landroid/net/wifi/WifiScanner$ScanSettings;)V
PLcom/android/server/wifi/scanner/ChannelHelper$ChannelCollection;->addChannels(Lcom/android/server/wifi/WifiNative$BucketSettings;)V
PLcom/android/server/wifi/scanner/ChannelHelper$ChannelCollection;->containsSettings(Landroid/net/wifi/WifiScanner$ScanSettings;)Z
PLcom/android/server/wifi/scanner/ChannelHelper;->bandToString(I)Ljava/lang/String;
PLcom/android/server/wifi/scanner/HalWifiScannerImpl;->getLatestSingleScanResults()Landroid/net/wifi/WifiScanner$ScanData;
PLcom/android/server/wifi/scanner/HalWifiScannerImpl;->isHwPnoSupported(Z)Z
PLcom/android/server/wifi/scanner/HalWifiScannerImpl;->resetHwPnoList()Z
PLcom/android/server/wifi/scanner/HalWifiScannerImpl;->setHwPnoList(Lcom/android/server/wifi/WifiNative$PnoSettings;Lcom/android/server/wifi/WifiNative$PnoEventHandler;)Z
PLcom/android/server/wifi/scanner/HalWifiScannerImpl;->startSingleScan(Lcom/android/server/wifi/WifiNative$ScanSettings;Lcom/android/server/wifi/WifiNative$ScanEventHandler;)Z
PLcom/android/server/wifi/scanner/HalWifiScannerImpl;->stopBatchedScan()V
PLcom/android/server/wifi/scanner/KnownBandsChannelHelper$KnownBandsChannelCollection;->addBand(I)V
PLcom/android/server/wifi/scanner/KnownBandsChannelHelper$KnownBandsChannelCollection;->containsBand(I)Z
PLcom/android/server/wifi/scanner/KnownBandsChannelHelper$KnownBandsChannelCollection;->containsChannel(I)Z
PLcom/android/server/wifi/scanner/KnownBandsChannelHelper$KnownBandsChannelCollection;->fillBucketSettings(Lcom/android/server/wifi/WifiNative$BucketSettings;I)V
PLcom/android/server/wifi/scanner/KnownBandsChannelHelper$KnownBandsChannelCollection;->getScanFreqs()Ljava/util/Set;
PLcom/android/server/wifi/scanner/KnownBandsChannelHelper$KnownBandsChannelCollection;->isEmpty()Z
PLcom/android/server/wifi/scanner/KnownBandsChannelHelper;->createChannelCollection()Lcom/android/server/wifi/scanner/ChannelHelper$ChannelCollection;
PLcom/android/server/wifi/scanner/KnownBandsChannelHelper;->createChannelCollection()Lcom/android/server/wifi/scanner/KnownBandsChannelHelper$KnownBandsChannelCollection;
PLcom/android/server/wifi/scanner/KnownBandsChannelHelper;->getAvailableScanChannels(I)[Landroid/net/wifi/WifiScanner$ChannelSpec;
PLcom/android/server/wifi/scanner/KnownBandsChannelHelper;->settingsContainChannel(Landroid/net/wifi/WifiScanner$ScanSettings;I)Z
PLcom/android/server/wifi/scanner/ScanScheduleUtil;->filterResultsForSettings(Lcom/android/server/wifi/scanner/ChannelHelper;[Landroid/net/wifi/WifiScanner$ScanData;Landroid/net/wifi/WifiScanner$ScanSettings;I)[Landroid/net/wifi/WifiScanner$ScanData;
PLcom/android/server/wifi/scanner/ScanScheduleUtil;->scheduleEquals(Lcom/android/server/wifi/WifiNative$ScanSettings;Lcom/android/server/wifi/WifiNative$ScanSettings;)Z
PLcom/android/server/wifi/scanner/WifiScannerImpl$2;->compare(Landroid/net/wifi/ScanResult;Landroid/net/wifi/ScanResult;)I
PLcom/android/server/wifi/scanner/WifiScannerImpl$2;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;->cleanup()V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;->register()V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$ExternalClientInfo;->reportEvent(IIILjava/lang/Object;)V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$InternalClientInfo;->toString()Ljava/lang/String;
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$RequestInfo;->reportEvent(IILjava/lang/Object;)V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$RequestList;->createMergedWorkSource()Landroid/os/WorkSource;
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$RequestList;->getAllSettings()Ljava/util/Collection;
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$RequestList;->removeAllForClient(Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;)V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiBackgroundScanStateMachine;->removeBackgroundScanSettings(Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;)V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiBackgroundScanStateMachine;->updateSchedule()Z
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine$HwPnoScanState;->enter()V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine$HwPnoScanState;->exit()V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine$HwPnoScanState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine;->addHwPnoScanRequest(Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;ILandroid/net/wifi/WifiScanner$ScanSettings;Landroid/net/wifi/WifiScanner$PnoSettings;)Z
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine;->addInternalClient(Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;)V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine;->convertSettingsToPnoNative(Landroid/net/wifi/WifiScanner$ScanSettings;Landroid/net/wifi/WifiScanner$PnoSettings;)Lcom/android/server/wifi/WifiNative$PnoSettings;
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine;->onPnoNetworkFound([Landroid/net/wifi/ScanResult;)V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine;->reportPnoNetworkFound([Landroid/net/wifi/ScanResult;)V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine$DefaultState;->filterCachedScanResultsByAge()[Landroid/net/wifi/ScanResult;
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine$ScanningState;->enter()V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine$ScanningState;->exit()V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine$ScanningState;->processMessage(Landroid/os/Message;)Z
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;->activeScanSatisfies(Landroid/net/wifi/WifiScanner$ScanSettings;)Z
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;->activeScanTypeSatisfies(I)Z
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;->getNativeScanType(I)I
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;->mergeScanTypes(II)I
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;->onFullScanResult(Landroid/net/wifi/ScanResult;I)V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;->onScanStatus(I)V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;->removeSingleScanRequests(Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;)V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;->reportFullScanResult(Landroid/net/wifi/ScanResult;I)V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;->reportScanResults(Landroid/net/wifi/WifiScanner$ScanData;)V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;->validateScanRequest(Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;ILandroid/net/wifi/WifiScanner$ScanSettings;)Z
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;->validateScanType(I)Z
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl;->describeForLog([Landroid/net/wifi/WifiScanner$ScanData;)Ljava/lang/String;
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl;->describeTo(Ljava/lang/StringBuilder;Landroid/net/wifi/WifiScanner$PnoSettings;)Ljava/lang/String;
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl;->describeTo(Ljava/lang/StringBuilder;Landroid/net/wifi/WifiScanner$ScanSettings;)Ljava/lang/String;
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl;->getScanTypeString(I)Ljava/lang/String;
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl;->logCallback(Ljava/lang/String;Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;ILjava/lang/String;)V
PLcom/android/server/wifi/scanner/WifiScanningServiceImpl;->replyFailed(Landroid/os/Message;ILjava/lang/String;)V
PLcom/android/server/wifi/scanner/WificondScannerImpl$2;->run()V
PLcom/android/server/wifi/scanner/WificondScannerImpl;->cancelScanTimeout()V
PLcom/android/server/wifi/scanner/WificondScannerImpl;->getBandScanned(Lcom/android/server/wifi/scanner/ChannelHelper$ChannelCollection;)I
PLcom/android/server/wifi/scanner/WificondScannerImpl;->getLatestSingleScanResults()Landroid/net/wifi/WifiScanner$ScanData;
PLcom/android/server/wifi/scanner/WificondScannerImpl;->handleMessage(Landroid/os/Message;)Z
PLcom/android/server/wifi/scanner/WificondScannerImpl;->isHwPnoSupported(Z)Z
PLcom/android/server/wifi/scanner/WificondScannerImpl;->pollLatestScanData()V
PLcom/android/server/wifi/scanner/WificondScannerImpl;->pollLatestScanDataForPno()V
PLcom/android/server/wifi/scanner/WificondScannerImpl;->reportPnoScanFailure()V
PLcom/android/server/wifi/scanner/WificondScannerImpl;->reportScanFailure()V
PLcom/android/server/wifi/scanner/WificondScannerImpl;->resetHwPnoList()Z
PLcom/android/server/wifi/scanner/WificondScannerImpl;->setHwPnoList(Lcom/android/server/wifi/WifiNative$PnoSettings;Lcom/android/server/wifi/WifiNative$PnoEventHandler;)Z
PLcom/android/server/wifi/scanner/WificondScannerImpl;->startSingleScan(Lcom/android/server/wifi/WifiNative$ScanSettings;Lcom/android/server/wifi/WifiNative$ScanEventHandler;)Z
PLcom/android/server/wifi/util/-$$Lambda$IntCounter$2QMREjq8u6qvHj3Qc8X5bsI7f3Y;-><init>()V
PLcom/android/server/wifi/util/-$$Lambda$IntCounter$2QMREjq8u6qvHj3Qc8X5bsI7f3Y;->convert(II)Ljava/lang/Object;
PLcom/android/server/wifi/util/-$$Lambda$IntHistogram$KipvBry86qMmCc412Y4yM-ch_ek;-><init>()V
PLcom/android/server/wifi/util/ByteArrayRingBuffer;->getNumBuffers()I
PLcom/android/server/wifi/util/ByteArrayRingBuffer;->pruneToSize(I)V
PLcom/android/server/wifi/util/ByteArrayRingBuffer;->resize(I)V
PLcom/android/server/wifi/util/DataIntegrityChecker;->constantTimeEquals([B[B)Z
PLcom/android/server/wifi/util/DataIntegrityChecker;->decrypt(Lcom/android/server/wifi/util/EncryptedData;)[B
PLcom/android/server/wifi/util/DataIntegrityChecker;->encrypt([BLjava/lang/String;)Lcom/android/server/wifi/util/EncryptedData;
PLcom/android/server/wifi/util/DataIntegrityChecker;->getDigest([B)[B
PLcom/android/server/wifi/util/DataIntegrityChecker;->getOrCreateSecretKey(Ljava/lang/String;)Ljavax/crypto/SecretKey;
PLcom/android/server/wifi/util/DataIntegrityChecker;->getSecretKey(Ljava/lang/String;)Ljavax/crypto/SecretKey;
PLcom/android/server/wifi/util/DataIntegrityChecker;->inKeyStore(Ljava/lang/String;)Z
PLcom/android/server/wifi/util/DataIntegrityChecker;->isOk([B)Z
PLcom/android/server/wifi/util/DataIntegrityChecker;->readIntegrityData(Ljava/io/File;)Lcom/android/server/wifi/util/EncryptedData;
PLcom/android/server/wifi/util/DataIntegrityChecker;->update([B)V
PLcom/android/server/wifi/util/DataIntegrityChecker;->writeIntegrityData(Lcom/android/server/wifi/util/EncryptedData;Ljava/io/File;)V
PLcom/android/server/wifi/util/EncryptedData;->getEncryptedData()[B
PLcom/android/server/wifi/util/EncryptedData;->getIv()[B
PLcom/android/server/wifi/util/EncryptedData;->getKeyAlias()Ljava/lang/String;
PLcom/android/server/wifi/util/ExternalCallbackTracker$ExternalCallbackHolder;->getCallback()Ljava/lang/Object;
PLcom/android/server/wifi/util/ExternalCallbackTracker$ExternalCallbackHolder;->reset()V
PLcom/android/server/wifi/util/ExternalCallbackTracker;->getCallbacks()Ljava/util/List;
PLcom/android/server/wifi/util/ExternalCallbackTracker;->remove(I)Z
PLcom/android/server/wifi/util/InformationElementUtil$BssLoad;->from(Landroid/net/wifi/ScanResult$InformationElement;)V
PLcom/android/server/wifi/util/InformationElementUtil$Capabilities;->from([Landroid/net/wifi/ScanResult$InformationElement;Ljava/util/BitSet;)V
PLcom/android/server/wifi/util/InformationElementUtil$Capabilities;->generateCapabilitiesString()Ljava/lang/String;
PLcom/android/server/wifi/util/InformationElementUtil$Capabilities;->isOweElement(Landroid/net/wifi/ScanResult$InformationElement;)Z
PLcom/android/server/wifi/util/InformationElementUtil$Capabilities;->isWpaOneElement(Landroid/net/wifi/ScanResult$InformationElement;)Z
PLcom/android/server/wifi/util/InformationElementUtil$Capabilities;->isWpsElement(Landroid/net/wifi/ScanResult$InformationElement;)Z
PLcom/android/server/wifi/util/InformationElementUtil$Capabilities;->keyManagementToString(I)Ljava/lang/String;
PLcom/android/server/wifi/util/InformationElementUtil$Capabilities;->parseRsnCipher(I)I
PLcom/android/server/wifi/util/InformationElementUtil$Capabilities;->parseRsnElement(Landroid/net/wifi/ScanResult$InformationElement;)V
PLcom/android/server/wifi/util/InformationElementUtil$Capabilities;->parseWpaCipher(I)I
PLcom/android/server/wifi/util/InformationElementUtil$Capabilities;->parseWpaOneElement(Landroid/net/wifi/ScanResult$InformationElement;)V
PLcom/android/server/wifi/util/InformationElementUtil$ExtendedCapabilities;->is80211McRTTResponder()Z
PLcom/android/server/wifi/util/InformationElementUtil$HtOperation;->from(Landroid/net/wifi/ScanResult$InformationElement;)V
PLcom/android/server/wifi/util/InformationElementUtil$HtOperation;->getCenterFreq0(I)I
PLcom/android/server/wifi/util/InformationElementUtil$Interworking;->from(Landroid/net/wifi/ScanResult$InformationElement;)V
PLcom/android/server/wifi/util/InformationElementUtil$SupportedRates;->from(Landroid/net/wifi/ScanResult$InformationElement;)V
PLcom/android/server/wifi/util/InformationElementUtil$SupportedRates;->getRateFromByte(I)I
PLcom/android/server/wifi/util/InformationElementUtil$TrafficIndicationMap;->from(Landroid/net/wifi/ScanResult$InformationElement;)V
PLcom/android/server/wifi/util/InformationElementUtil$VhtOperation;->from(Landroid/net/wifi/ScanResult$InformationElement;)V
PLcom/android/server/wifi/util/InformationElementUtil$Vsa;->from(Landroid/net/wifi/ScanResult$InformationElement;)V
PLcom/android/server/wifi/util/InformationElementUtil;->getHS2VendorSpecificIE([Landroid/net/wifi/ScanResult$InformationElement;)Lcom/android/server/wifi/util/InformationElementUtil$Vsa;
PLcom/android/server/wifi/util/InformationElementUtil;->getRoamingConsortiumIE([Landroid/net/wifi/ScanResult$InformationElement;)Lcom/android/server/wifi/util/InformationElementUtil$RoamingConsortium;
PLcom/android/server/wifi/util/InformationElementUtil;->parseInformationElements([B)[Landroid/net/wifi/ScanResult$InformationElement;
PLcom/android/server/wifi/util/IntCounter$1;->hasNext()Z
PLcom/android/server/wifi/util/IntCounter$1;->next()Lcom/android/server/wifi/util/IntCounter$KeyCount;
PLcom/android/server/wifi/util/IntCounter$1;->next()Ljava/lang/Object;
PLcom/android/server/wifi/util/IntCounter;->add(II)V
PLcom/android/server/wifi/util/IntCounter;->increment(I)V
PLcom/android/server/wifi/util/IntCounter;->iterator()Ljava/util/Iterator;
PLcom/android/server/wifi/util/IntCounter;->toProto()[Lcom/android/server/wifi/nano/WifiMetricsProto$MapEntryInt32Int32;
PLcom/android/server/wifi/util/IntCounter;->toProto(Ljava/lang/Class;Lcom/android/server/wifi/util/IntCounter$ProtobufConverter;)[Ljava/lang/Object;
PLcom/android/server/wifi/util/IntHistogram$1;->hasNext()Z
PLcom/android/server/wifi/util/IntHistogram;->clear()V
PLcom/android/server/wifi/util/IntHistogram;->iterator()Ljava/util/Iterator;
PLcom/android/server/wifi/util/IntHistogram;->toProto()[Lcom/android/server/wifi/nano/WifiMetricsProto$HistogramBucketInt32;
PLcom/android/server/wifi/util/IntHistogram;->toProto(Ljava/lang/Class;Lcom/android/server/wifi/util/IntHistogram$ProtobufConverter;)[Ljava/lang/Object;
PLcom/android/server/wifi/util/KalmanFilter;->predict()V
PLcom/android/server/wifi/util/KalmanFilter;->update(Lcom/android/server/wifi/util/Matrix;)V
PLcom/android/server/wifi/util/Matrix;-><init>(Lcom/android/server/wifi/util/Matrix;)V
PLcom/android/server/wifi/util/Matrix;->dot(Lcom/android/server/wifi/util/Matrix;)Lcom/android/server/wifi/util/Matrix;
PLcom/android/server/wifi/util/Matrix;->dot(Lcom/android/server/wifi/util/Matrix;Lcom/android/server/wifi/util/Matrix;)Lcom/android/server/wifi/util/Matrix;
PLcom/android/server/wifi/util/Matrix;->dotTranspose(Lcom/android/server/wifi/util/Matrix;)Lcom/android/server/wifi/util/Matrix;
PLcom/android/server/wifi/util/Matrix;->dotTranspose(Lcom/android/server/wifi/util/Matrix;Lcom/android/server/wifi/util/Matrix;)Lcom/android/server/wifi/util/Matrix;
PLcom/android/server/wifi/util/Matrix;->get(II)D
PLcom/android/server/wifi/util/Matrix;->inverse()Lcom/android/server/wifi/util/Matrix;
PLcom/android/server/wifi/util/Matrix;->inverse(Lcom/android/server/wifi/util/Matrix;Lcom/android/server/wifi/util/Matrix;)Lcom/android/server/wifi/util/Matrix;
PLcom/android/server/wifi/util/Matrix;->minus(Lcom/android/server/wifi/util/Matrix;)Lcom/android/server/wifi/util/Matrix;
PLcom/android/server/wifi/util/Matrix;->minus(Lcom/android/server/wifi/util/Matrix;Lcom/android/server/wifi/util/Matrix;)Lcom/android/server/wifi/util/Matrix;
PLcom/android/server/wifi/util/Matrix;->plus(Lcom/android/server/wifi/util/Matrix;)Lcom/android/server/wifi/util/Matrix;
PLcom/android/server/wifi/util/Matrix;->plus(Lcom/android/server/wifi/util/Matrix;Lcom/android/server/wifi/util/Matrix;)Lcom/android/server/wifi/util/Matrix;
PLcom/android/server/wifi/util/Matrix;->put(IID)V
PLcom/android/server/wifi/util/MetricsUtils;->linearHistogramToGenericBuckets(Landroid/util/SparseIntArray;[I)[Lcom/android/server/wifi/util/MetricsUtils$GenericBucket;
PLcom/android/server/wifi/util/MetricsUtils;->logHistogramToGenericBuckets(Landroid/util/SparseIntArray;Lcom/android/server/wifi/util/MetricsUtils$LogHistParms;)[Lcom/android/server/wifi/util/MetricsUtils$GenericBucket;
PLcom/android/server/wifi/util/NativeUtil;->macAddressFromByteArray([B)Ljava/lang/String;
PLcom/android/server/wifi/util/NativeUtil;->macAddressToByteArray(Ljava/lang/String;)[B
PLcom/android/server/wifi/util/NativeUtil;->macAddressToLong([B)Ljava/lang/Long;
PLcom/android/server/wifi/util/NativeUtil;->removeEnclosingQuotes(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/wifi/util/NativeUtil;->stringToByteArray(Ljava/lang/String;)[B
PLcom/android/server/wifi/util/NativeUtil;->stringToByteArrayList(Ljava/lang/String;)Ljava/util/ArrayList;
PLcom/android/server/wifi/util/ScanResultUtil;->createQuotedSSID(Ljava/lang/String;)Ljava/lang/String;
PLcom/android/server/wifi/util/ScanResultUtil;->isScanResultForOpenNetwork(Landroid/net/wifi/ScanResult;)Z
PLcom/android/server/wifi/util/TelephonyUtil;->getSimMethodForConfig(Landroid/net/wifi/WifiConfiguration;)I
PLcom/android/server/wifi/util/TelephonyUtil;->isSimConfig(Landroid/net/wifi/WifiConfiguration;)Z
PLcom/android/server/wifi/util/TelephonyUtil;->isSimEapMethod(I)Z
PLcom/android/server/wifi/util/WifiAsyncChannel;->sendMessage(Landroid/os/Message;)V
PLcom/android/server/wifi/util/WifiPermissionsUtil;->checkCallersFineLocationPermission(Ljava/lang/String;I)Z
PLcom/android/server/wifi/util/WifiPermissionsUtil;->checkCallersLocationPermission(Ljava/lang/String;IZ)Z
PLcom/android/server/wifi/util/WifiPermissionsUtil;->checkConfigOverridePermission(I)Z
PLcom/android/server/wifi/util/WifiPermissionsUtil;->checkNetworkManagedProvisioningPermission(I)Z
PLcom/android/server/wifi/util/WifiPermissionsUtil;->checkNetworkSettingsPermission(I)Z
PLcom/android/server/wifi/util/WifiPermissionsUtil;->checkNetworkSetupWizardPermission(I)Z
PLcom/android/server/wifi/util/WifiPermissionsUtil;->checkPackage(ILjava/lang/String;)V
PLcom/android/server/wifi/util/WifiPermissionsUtil;->enforceCanAccessScanResults(Ljava/lang/String;I)V
PLcom/android/server/wifi/util/WifiPermissionsUtil;->enforceCanAccessScanResultsForWifiScanner(Ljava/lang/String;IZ)V
PLcom/android/server/wifi/util/WifiPermissionsUtil;->enforceCanAccessScanResultsForWifiScanner(Ljava/lang/String;IZZ)V
PLcom/android/server/wifi/util/WifiPermissionsUtil;->enforceFineLocationPermission(Ljava/lang/String;I)V
PLcom/android/server/wifi/util/WifiPermissionsUtil;->isCurrentProfile(I)Z
PLcom/android/server/wifi/util/WifiPermissionsUtil;->isTargetSdkLessThan(Ljava/lang/String;I)Z
PLcom/android/server/wifi/util/WifiPermissionsWrapper;->getCallingUserId(I)I
PLcom/android/server/wifi/util/WifiPermissionsWrapper;->getDevicePolicyManagerInternal()Landroid/app/admin/DevicePolicyManagerInternal;
PLcom/android/server/wifi/util/WifiPermissionsWrapper;->getLocalMacAddressPermission(I)I
PLcom/android/server/wifi/util/WifiPermissionsWrapper;->getOverrideWifiConfigPermission(I)I
PLcom/android/server/wifi/util/WifiPermissionsWrapper;->getUidPermission(Ljava/lang/String;I)I
PLcom/android/server/wifi/util/XmlUtil$IpConfigurationXmlUtil;->parseFromXml(Lorg/xmlpull/v1/XmlPullParser;I)Landroid/net/IpConfiguration;
PLcom/android/server/wifi/util/XmlUtil$IpConfigurationXmlUtil;->writeToXml(Lorg/xmlpull/v1/XmlSerializer;Landroid/net/IpConfiguration;)V
PLcom/android/server/wifi/util/XmlUtil$NetworkSelectionStatusXmlUtil;->parseFromXml(Lorg/xmlpull/v1/XmlPullParser;I)Landroid/net/wifi/WifiConfiguration$NetworkSelectionStatus;
PLcom/android/server/wifi/util/XmlUtil$NetworkSelectionStatusXmlUtil;->writeToXml(Lorg/xmlpull/v1/XmlSerializer;Landroid/net/wifi/WifiConfiguration$NetworkSelectionStatus;)V
PLcom/android/server/wifi/util/XmlUtil$WifiConfigurationXmlUtil;->parseFromXml(Lorg/xmlpull/v1/XmlPullParser;I)Landroid/util/Pair;
PLcom/android/server/wifi/util/XmlUtil$WifiConfigurationXmlUtil;->populateWepKeysFromXmlValue(Ljava/lang/Object;[Ljava/lang/String;)V
PLcom/android/server/wifi/util/XmlUtil$WifiConfigurationXmlUtil;->writeCommonElementsToXml(Lorg/xmlpull/v1/XmlSerializer;Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/util/XmlUtil$WifiConfigurationXmlUtil;->writeToXmlForConfigStore(Lorg/xmlpull/v1/XmlSerializer;Landroid/net/wifi/WifiConfiguration;)V
PLcom/android/server/wifi/util/XmlUtil$WifiConfigurationXmlUtil;->writeWepKeysToXml(Lorg/xmlpull/v1/XmlSerializer;[Ljava/lang/String;)V
PLcom/android/server/wifi/util/XmlUtil$WifiEnterpriseConfigXmlUtil;->parseFromXml(Lorg/xmlpull/v1/XmlPullParser;I)Landroid/net/wifi/WifiEnterpriseConfig;
PLcom/android/server/wifi/util/XmlUtil$WifiEnterpriseConfigXmlUtil;->writeToXml(Lorg/xmlpull/v1/XmlSerializer;Landroid/net/wifi/WifiEnterpriseConfig;)V
PLcom/android/server/wifi/util/XmlUtil;->gotoNextSectionWithNameOrEnd(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;I)Z
PLcom/android/server/wifi/util/XmlUtil;->readNextValueWithName(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)Ljava/lang/Object;
PLcom/android/server/wifi/wificond/ChannelSettings$1;-><init>()V
PLcom/android/server/wifi/wificond/ChannelSettings;->writeToParcel(Landroid/os/Parcel;I)V
PLcom/android/server/wifi/wificond/HiddenNetwork$1;-><init>()V
PLcom/android/server/wifi/wificond/HiddenNetwork;->writeToParcel(Landroid/os/Parcel;I)V
PLcom/android/server/wifi/wificond/NativeScanResult$1;-><init>()V
PLcom/android/server/wifi/wificond/NativeScanResult$1;->createFromParcel(Landroid/os/Parcel;)Lcom/android/server/wifi/wificond/NativeScanResult;
PLcom/android/server/wifi/wificond/NativeScanResult$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;
PLcom/android/server/wifi/wificond/NativeScanResult$1;->newArray(I)[Lcom/android/server/wifi/wificond/NativeScanResult;
PLcom/android/server/wifi/wificond/NativeScanResult$1;->newArray(I)[Ljava/lang/Object;
PLcom/android/server/wifi/wificond/PnoNetwork$1;-><init>()V
PLcom/android/server/wifi/wificond/PnoNetwork;->writeToParcel(Landroid/os/Parcel;I)V
PLcom/android/server/wifi/wificond/PnoSettings$1;-><init>()V
PLcom/android/server/wifi/wificond/PnoSettings;->writeToParcel(Landroid/os/Parcel;I)V
PLcom/android/server/wifi/wificond/RadioChainInfo$1;-><init>()V
PLcom/android/server/wifi/wificond/RadioChainInfo$1;->createFromParcel(Landroid/os/Parcel;)Lcom/android/server/wifi/wificond/RadioChainInfo;
PLcom/android/server/wifi/wificond/RadioChainInfo$1;->createFromParcel(Landroid/os/Parcel;)Ljava/lang/Object;
PLcom/android/server/wifi/wificond/SingleScanSettings$1;-><init>()V
PLcom/android/server/wifi/wificond/SingleScanSettings;->writeToParcel(Landroid/os/Parcel;I)V
PLcom/android/server/wm/-$$Lambda$-OevXHSXgaSE351ZqRnMoA024MM;->run()V
PLcom/android/server/wm/-$$Lambda$2KrtdmjrY7Nagc4IRqzCk9gDuQU;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$6DEhn1zqxqV5_Ytb_NyzMW23Ano;->make()Landroid/view/Surface;
PLcom/android/server/wm/-$$Lambda$99XNq73vh8e4HVH9BuxFhbLxKVY;-><init>()V
PLcom/android/server/wm/-$$Lambda$99XNq73vh8e4HVH9BuxFhbLxKVY;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$AccessibilityController$WindowsForAccessibilityObserver$vRhBz0DqTZWNemKfoIyId7HacTk;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$ActivityMetricsLogger$0lYHhsj1ibZMP6eUAxlwT_URn-4;->run()V
PLcom/android/server/wm/-$$Lambda$ActivityMetricsLogger$DGh4oiUM74EvEwFf0Up59dk2u_I;->run()V
PLcom/android/server/wm/-$$Lambda$ActivityMetricsLogger$xxgDrxthXaC_M25gC-YvHOsQ6yE;->run()V
PLcom/android/server/wm/-$$Lambda$ActivityServiceConnectionsHolder$E9W1qwLXBAwoppLfYj6pecVF_x8;->run()V
PLcom/android/server/wm/-$$Lambda$ActivityStackSupervisor$PHIj4FpzoLIwUTmMRMOYA9us0rc;->run()V
PLcom/android/server/wm/-$$Lambda$ActivityStartController$6bTAPCVeDq_D4Y53Y5WNfMK4xBE;-><init>()V
PLcom/android/server/wm/-$$Lambda$ActivityStarter$Zh66L6L9t3q506-4rrDCffLoOU8;-><init>(Lcom/android/server/wm/ActivityStarter;Ljava/lang/String;)V
PLcom/android/server/wm/-$$Lambda$ActivityStarter$Zh66L6L9t3q506-4rrDCffLoOU8;->run()V
PLcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$3DTHgCAeEd5OOF7ACeXoCk8mmrQ;-><init>()V
PLcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$3DTHgCAeEd5OOF7ACeXoCk8mmrQ;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$7ieG0s-7Zp4H2bLiWdOgB6MqhcI;-><init>()V
PLcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$7ieG0s-7Zp4H2bLiWdOgB6MqhcI;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$Uli7s8UWTEj0IpBUtoST5bmgvKk;->run()V
PLcom/android/server/wm/-$$Lambda$AlertWindowNotification$ZuqSYML-X-nkNVTba_yeIT9hJ1s;->run()V
PLcom/android/server/wm/-$$Lambda$AlertWindowNotification$iVtcJMb6VtqtAgEtGUDCkGay0tM;->run()V
PLcom/android/server/wm/-$$Lambda$AppTransition$B95jxKE2FnT5RNLStTafenhEYj4;-><init>()V
PLcom/android/server/wm/-$$Lambda$AppTransition$B95jxKE2FnT5RNLStTafenhEYj4;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$AppTransition$xrq-Gwel_FcpfDvO2DrCfGN_3bk;->run()V
PLcom/android/server/wm/-$$Lambda$AppTransitionController$ESsBJ2royCDDfelW3z7cgYH5q2I;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$AppTransitionController$YfQg1m68hbvcHoXbvzomyslzuaU;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$AppTransitionController$j4jrKo6PKtYRjRfPVQMMiQB02jg;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$AppWindowToken$JR7Cr936i7DlrzcjMaXdnVHq3NU;->run()V
PLcom/android/server/wm/-$$Lambda$AppWindowToken$NwyjcPHhaxqkEKaJxeRVkzuWYXc;-><init>()V
PLcom/android/server/wm/-$$Lambda$AppWindowToken$NwyjcPHhaxqkEKaJxeRVkzuWYXc;->apply(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$AppWindowToken$nF85SgNnIhRmVDk5ZRCmd3hL2jU;->get()Ljava/lang/Object;
PLcom/android/server/wm/-$$Lambda$AppWindowToken$q4coBLJ_h6za5tXaFxh-mXEdx0M;-><init>()V
PLcom/android/server/wm/-$$Lambda$AppWindowToken$q4coBLJ_h6za5tXaFxh-mXEdx0M;->apply(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$BoundsAnimationController$MoVv_WhxoMrTVo-xz1qu2FMcYrM;->run()V
PLcom/android/server/wm/-$$Lambda$Dimmer$DimState$QYvwJex5H10MFMe0LEzEUs1b2G0;->run()V
PLcom/android/server/wm/-$$Lambda$DisplayContent$-XeeexVnAosqA0zfHVCT_Txqwl8;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$DisplayContent$05CtqlkxQvjLanO8D5BmaCdILKQ;-><init>()V
PLcom/android/server/wm/-$$Lambda$DisplayContent$05CtqlkxQvjLanO8D5BmaCdILKQ;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$DisplayContent$2VlyMN8z2sOPqE9-yf-z3-peRMI;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$DisplayContent$3g7y7M5XrDR3cz8tOp9f3pwWbyQ;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$DisplayContent$6JBeP1kHNEOYWOxrGZAL2uDFT0c;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$DisplayContent$7Z9gsguOLtfXssJUALjgEsOLZoE;-><init>()V
PLcom/android/server/wm/-$$Lambda$DisplayContent$7Z9gsguOLtfXssJUALjgEsOLZoE;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$DisplayContent$GdYfLI7hkBs2XfGJkN6DbdzEs8U;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$DisplayContent$TPj3OjTsuIg5GTLb5nMmFqIghA4;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$DisplayContent$TaskStackContainers$rQnI0Y8R9ptQ09cGHwbCHDiG2FY;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$DisplayContent$UpcoNmXQIJX_lHKnFIxs4t_Pu24;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$DisplayContent$bVYRnDjlw0SRKh7v85g3NfojU10;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$DisplayContent$loNgSXGpVJk0AI1CQnSnj_CUatI;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$DisplayContent$mRojqgB8byVtZRzyTl2qSRFPgIo;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$DisplayContent$msiHJB643d12CRkLvIJFD5IV-wc;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$DisplayContent$w9ep5dwa3CsKsu0rpKSQwF-60A4;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$DisplayPolicy$2k2wF7mmwjs9mN1gLPMFOf0lfXY;->run()V
PLcom/android/server/wm/-$$Lambda$DragState$-yUFIMrhYYccZ0gwd6eVcpAE93o;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$LI60v4Y5Me6khV12IZ-zEQtSx7A;-><init>()V
PLcom/android/server/wm/-$$Lambda$LI60v4Y5Me6khV12IZ-zEQtSx7A;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$LaunchObserverRegistryImpl$KukKmVpn5W_1xSV6Dnp8wW2H2Ks;-><init>()V
PLcom/android/server/wm/-$$Lambda$LaunchObserverRegistryImpl$KukKmVpn5W_1xSV6Dnp8wW2H2Ks;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$LaunchObserverRegistryImpl$UGY1OclnLIQLMEL9B55qjERFf4o;-><init>()V
PLcom/android/server/wm/-$$Lambda$LaunchObserverRegistryImpl$UGY1OclnLIQLMEL9B55qjERFf4o;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$LaunchObserverRegistryImpl$iVXZh14_jAo_Gegs5q3ygQDW-ow;-><init>()V
PLcom/android/server/wm/-$$Lambda$LaunchObserverRegistryImpl$iVXZh14_jAo_Gegs5q3ygQDW-ow;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$LaunchObserverRegistryImpl$kM3MnXbSpyNkUV4eUyr4OwWCqqA;-><init>()V
PLcom/android/server/wm/-$$Lambda$LaunchObserverRegistryImpl$kM3MnXbSpyNkUV4eUyr4OwWCqqA;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$LaunchObserverRegistryImpl$lAGPwfsXJvBWsyG2rbEfo3sTv34;-><init>()V
PLcom/android/server/wm/-$$Lambda$LaunchObserverRegistryImpl$lAGPwfsXJvBWsyG2rbEfo3sTv34;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$LocalAnimationAdapter$X--EomqUvw4qy89IeeTFTH7aCMo;->run()V
PLcom/android/server/wm/-$$Lambda$OPdXuZQLetMnocdH6XV32JbNQ3I;->getSystemDirectoryForUser(I)Ljava/io/File;
PLcom/android/server/wm/-$$Lambda$OuObUsm0bB9g5X0kIXYkBYHvodY;->apply(I)Ljava/lang/Object;
PLcom/android/server/wm/-$$Lambda$PendingRemoteAnimationRegistry$Entry$giivzkMgzIxukCXvO2EVzLb0oxo;->run()V
PLcom/android/server/wm/-$$Lambda$PersisterQueue$HOTPBvinkMOqT3zxV3gRm6Y9Wi4;->process()V
PLcom/android/server/wm/-$$Lambda$PinnedStackController$PinnedStackControllerCallback$MdGjZinCTxKrX3GJTl1CXkAuFro;->run()V
PLcom/android/server/wm/-$$Lambda$RecentsAnimation$-wmjRW3SbUL05VbZ7U49czED0C0;->run()V
PLcom/android/server/wm/-$$Lambda$RecentsAnimation$e3kosml-870P6Bh_K_Z_6yyLHZk;->run()V
PLcom/android/server/wm/-$$Lambda$RecentsAnimation$maWFdp-vN04gpjsVfJu49wyo8hQ;->run()V
PLcom/android/server/wm/-$$Lambda$RecentsAnimation$qEI7OxINlBaNSqvqvfFDwEY1uPA;->run()V
PLcom/android/server/wm/-$$Lambda$RemoteAnimationController$f_Hsu4PN7pGOiq9Nl8vxzEA3wa0;->run()V
PLcom/android/server/wm/-$$Lambda$RemoteAnimationController$uQS8vaPKQ-E3x_9G8NCxPQmw1fw;->run()V
PLcom/android/server/wm/-$$Lambda$RootWindowContainer$52o5lSf6FWvRXCAmDBM_O5nRSXM;-><init>()V
PLcom/android/server/wm/-$$Lambda$RootWindowContainer$52o5lSf6FWvRXCAmDBM_O5nRSXM;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$RootWindowContainer$IlD1lD49ui7gQmU2NkxgnXIhlOo;->apply(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$RootWindowContainer$auMc5HUrsvttHP3CYY9dttuuvi8;-><init>()V
PLcom/android/server/wm/-$$Lambda$RootWindowContainer$auMc5HUrsvttHP3CYY9dttuuvi8;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$RootWindowContainer$qT2ficAmvrvFcBdiJIGNKxJ8Z9Q;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$StatusBarController$1$CizMeoiz6ZVrkt6kAKpSV5htmyc;->run()V
PLcom/android/server/wm/-$$Lambda$SurfaceAnimationRunner$9Wa9MhcrSX12liOouHtYXEkDU60;->doFrame(J)V
PLcom/android/server/wm/-$$Lambda$SurfaceAnimationRunner$SGOilG6qRe0XTsTJRQqQKhta0pA;->run()V
PLcom/android/server/wm/-$$Lambda$SurfaceAnimationRunner$lSzwjoKEGADoEFOzdEnwriAk0T4;->run()V
PLcom/android/server/wm/-$$Lambda$SurfaceAnimationRunner$puhYAP5tF0mSSJva-eUz59HnrkA;->onAnimationUpdate(Landroid/animation/ValueAnimator;)V
PLcom/android/server/wm/-$$Lambda$SurfaceAnimationRunner$we7K92eAl3biB_bzyqbv5xCmasE;->makeAnimator()Landroid/animation/ValueAnimator;
PLcom/android/server/wm/-$$Lambda$SurfaceAnimator$SIBia0mND666K8lMCPsoid8pUTI;->run()V
PLcom/android/server/wm/-$$Lambda$SurfaceAnimator$vdRZk66hQVbQCvVXEaQCT1kVmFc;->onAnimationFinished(Lcom/android/server/wm/AnimationAdapter;)V
PLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$9ngbiJ2r3x2ASHwN59tUFO2-2BQ;->accept(Landroid/app/ITaskStackListener;Landroid/os/Message;)V
PLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$M2NSB3SSVJR2Tu4vihNfsIL31s4;->accept(Landroid/app/ITaskStackListener;Landroid/os/Message;)V
PLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$MS67FdGix7tWO0Od9imcaKVXL7I;->accept(Landroid/app/ITaskStackListener;Landroid/os/Message;)V
PLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$NLoKy9SbVr1EJpEjznsKi7yAlpg;->accept(Landroid/app/ITaskStackListener;Landroid/os/Message;)V
PLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$SByuGj5tpcCpjTH9lf5zHHv2gNM;->accept(Landroid/app/ITaskStackListener;Landroid/os/Message;)V
PLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$ZLPZtiEvD_F4WUgH7BD4KPpdAWM;->accept(Landroid/app/ITaskStackListener;Landroid/os/Message;)V
PLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$kss8MGli3T9b_Y-QDzR2cB843y8;->accept(Landroid/app/ITaskStackListener;Landroid/os/Message;)V
PLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$ncM_yje7-m7HuiJvorBIH_C8Ou4;->accept(Landroid/app/ITaskStackListener;Landroid/os/Message;)V
PLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$wuBjs4dj7gB_MI4dIdt2gV2Osus;->accept(Landroid/app/ITaskStackListener;Landroid/os/Message;)V
PLcom/android/server/wm/-$$Lambda$TaskPersister$8TcnoL7JFvpj8NzBRg91ns5JOBw;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$TaskPersister$mW0HULrR8EtZ9La-pL9kLTnHSzk;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$TaskPersister$xdLXwftXa6l84QTg1zpxMnmtQ0g;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$TaskPositioningController$u0oAwi82C-bAGo2JAsAc_9ZLi70;->run()V
PLcom/android/server/wm/-$$Lambda$TaskSnapshotController$b7mc92hqzbRpmpc99dYS4wKuL6Y;-><init>()V
PLcom/android/server/wm/-$$Lambda$TaskSnapshotController$b7mc92hqzbRpmpc99dYS4wKuL6Y;->apply(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$TaskSnapshotController$ewi-Dm2ws6pdTXd1elso7FtoLKw;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$TaskSnapshotController$q-BG2kMqHK9gvuY43J0TfS4aSVU;->run()V
PLcom/android/server/wm/-$$Lambda$TaskStack$JFAlC6OMp1fc_hlvoNIZagoMK1U;->run()V
PLcom/android/server/wm/-$$Lambda$TaskStack$n0sDe5GcitIQB-Orca4W45Hcc98;-><init>()V
PLcom/android/server/wm/-$$Lambda$TaskStack$n0sDe5GcitIQB-Orca4W45Hcc98;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$TaskTapPointerEventListener$Qq8YAj6yai3RMz5wJNKGVJNqsPM;->run()V
PLcom/android/server/wm/-$$Lambda$UnknownAppVisibilityController$FYhcjOhYWVp6HX5hr3GGaPg67Gc;->run()V
PLcom/android/server/wm/-$$Lambda$WallpaperController$Gy7houdzET4VmpY0QJ2v-NX1b7k;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$WindowAnimationSpec$jKE7Phq2DESkeBondpaNPBLn6Cs;-><init>()V
PLcom/android/server/wm/-$$Lambda$WindowAnimationSpec$jKE7Phq2DESkeBondpaNPBLn6Cs;->get()Ljava/lang/Object;
PLcom/android/server/wm/-$$Lambda$WindowManagerService$CbEzJbdxOpfZ-AMUAcOVQZxepOo;->run()V
PLcom/android/server/wm/-$$Lambda$WindowManagerService$WNGTdzsJPsW8aUuJwsBZFDJuOo0;->accept(Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$WindowToken$tFLHn4S6WuSXW1gp1kvT_sp7WC0;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
PLcom/android/server/wm/-$$Lambda$j9nJq2XXOKyN4f0dfDaTjqmQRvg;-><init>()V
PLcom/android/server/wm/-$$Lambda$j9nJq2XXOKyN4f0dfDaTjqmQRvg;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$l7wsAiYkcvlUYlIkk2IImQzEY8Q;-><init>()V
PLcom/android/server/wm/-$$Lambda$l7wsAiYkcvlUYlIkk2IImQzEY8Q;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$pAuPvwUqsKCejIrAPrx0ARZSqeY;->test(Ljava/lang/Object;)Z
PLcom/android/server/wm/-$$Lambda$yACUZqn1Ak-GL14-Nu3kHUSaLX0;->startAnimation(Lcom/android/server/wm/SurfaceAnimator;Landroid/view/SurfaceControl$Transaction;Lcom/android/server/wm/AnimationAdapter;Z)V
PLcom/android/server/wm/-$$Lambda$yVRF8YoeNdTa8GR1wDStVsHu8xM;->run()V
PLcom/android/server/wm/-$$Lambda$z5j5fiv3cZuY5AODkt3H3rhKimk;-><init>()V
PLcom/android/server/wm/-$$Lambda$z5j5fiv3cZuY5AODkt3H3rhKimk;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/wm/-$$Lambda$zP5AObb0-v-Zzwr-v8NXOg4Yt1c;-><init>()V
PLcom/android/server/wm/-$$Lambda$zP5AObb0-v-Zzwr-v8NXOg4Yt1c;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
PLcom/android/server/wm/AccessibilityController$WindowsForAccessibilityObserver$MyHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/wm/AccessibilityController$WindowsForAccessibilityObserver;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/WindowManagerInternal$WindowsForAccessibilityCallback;)V
PLcom/android/server/wm/AccessibilityController$WindowsForAccessibilityObserver;->cacheWindows(Ljava/util/List;)V
PLcom/android/server/wm/AccessibilityController$WindowsForAccessibilityObserver;->computeChangedWindows(Z)V
PLcom/android/server/wm/AccessibilityController$WindowsForAccessibilityObserver;->computeWindowBoundsInScreen(Lcom/android/server/wm/WindowState;Landroid/graphics/Rect;)V
PLcom/android/server/wm/AccessibilityController$WindowsForAccessibilityObserver;->isReportedWindowType(I)Z
PLcom/android/server/wm/AccessibilityController$WindowsForAccessibilityObserver;->updateUnaccountedSpace(Lcom/android/server/wm/WindowState;Landroid/graphics/Rect;Landroid/graphics/Region;Ljava/util/HashSet;)V
PLcom/android/server/wm/AccessibilityController$WindowsForAccessibilityObserver;->windowChangedNoLayer(Landroid/view/WindowInfo;Landroid/view/WindowInfo;)Z
PLcom/android/server/wm/AccessibilityController$WindowsForAccessibilityObserver;->windowMattersToAccessibility(Lcom/android/server/wm/WindowState;Landroid/graphics/Rect;Landroid/graphics/Region;Ljava/util/HashSet;)Z
PLcom/android/server/wm/AccessibilityController;->onSomeWindowResizedOrMovedLocked()V
PLcom/android/server/wm/AccessibilityController;->onWindowFocusChangedNotLocked()V
PLcom/android/server/wm/AccessibilityController;->performComputeChangedWindowsNotLocked(Z)V
PLcom/android/server/wm/AccessibilityController;->setWindowsForAccessibilityCallback(Lcom/android/server/wm/WindowManagerInternal$WindowsForAccessibilityCallback;)V
PLcom/android/server/wm/ActivityDisplay;->continueUpdateImeTarget()V
PLcom/android/server/wm/ActivityDisplay;->deferUpdateImeTarget()V
PLcom/android/server/wm/ActivityDisplay;->getHomeActivity()Lcom/android/server/wm/ActivityRecord;
PLcom/android/server/wm/ActivityDisplay;->getHomeActivityForUser(I)Lcom/android/server/wm/ActivityRecord;
PLcom/android/server/wm/ActivityDisplay;->getNextFocusableStack(Lcom/android/server/wm/ActivityStack;Z)Lcom/android/server/wm/ActivityStack;
PLcom/android/server/wm/ActivityDisplay;->getOrCreateStack(Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;Lcom/android/server/wm/TaskRecord;IZ)Lcom/android/server/wm/ActivityStack;
PLcom/android/server/wm/ActivityDisplay;->getPinnedStack()Lcom/android/server/wm/ActivityStack;
PLcom/android/server/wm/ActivityDisplay;->getPresentUIDs()Landroid/util/IntArray;
PLcom/android/server/wm/ActivityDisplay;->getStackAbove(Lcom/android/server/wm/ActivityStack;)Lcom/android/server/wm/ActivityStack;
PLcom/android/server/wm/ActivityDisplay;->hasPinnedStack()Z
PLcom/android/server/wm/ActivityDisplay;->moveHomeActivityToTop(Ljava/lang/String;)Z
PLcom/android/server/wm/ActivityDisplay;->moveHomeStackToFront(Ljava/lang/String;)V
PLcom/android/server/wm/ActivityDisplay;->moveStackBehindBottomMostVisibleStack(Lcom/android/server/wm/ActivityStack;)V
PLcom/android/server/wm/ActivityDisplay;->moveStackBehindStack(Lcom/android/server/wm/ActivityStack;Lcom/android/server/wm/ActivityStack;)V
PLcom/android/server/wm/ActivityDisplay;->positionChildAtBottom(Lcom/android/server/wm/ActivityStack;)V
PLcom/android/server/wm/ActivityDisplay;->positionChildAtBottom(Lcom/android/server/wm/ActivityStack;Ljava/lang/String;)V
PLcom/android/server/wm/ActivityDisplay;->positionChildAtTop(Lcom/android/server/wm/ActivityStack;Z)V
PLcom/android/server/wm/ActivityDisplay;->registerStackOrderChangedListener(Lcom/android/server/wm/ActivityDisplay$OnStackOrderChangedListener;)V
PLcom/android/server/wm/ActivityDisplay;->releaseSelfIfNeeded()V
PLcom/android/server/wm/ActivityDisplay;->remove()V
PLcom/android/server/wm/ActivityDisplay;->removeChild(Lcom/android/server/wm/ActivityStack;)V
PLcom/android/server/wm/ActivityDisplay;->resolveWindowingMode(Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;Lcom/android/server/wm/TaskRecord;I)I
PLcom/android/server/wm/ActivityDisplay;->shouldDestroyContentOnRemove()Z
PLcom/android/server/wm/ActivityDisplay;->supportsSystemDecorations()Z
PLcom/android/server/wm/ActivityDisplay;->unregisterStackOrderChangedListener(Lcom/android/server/wm/ActivityDisplay$OnStackOrderChangedListener;)V
PLcom/android/server/wm/ActivityMetricsLogger$H;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfoSnapshot;-><init>(Lcom/android/server/wm/ActivityMetricsLogger;Lcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfo;Lcom/android/server/wm/ActivityRecord;I)V
PLcom/android/server/wm/ActivityMetricsLogger;->checkVisibility(Lcom/android/server/wm/TaskRecord;Lcom/android/server/wm/ActivityRecord;)V
PLcom/android/server/wm/ActivityMetricsLogger;->getTransitionType(Lcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfo;)I
PLcom/android/server/wm/ActivityMetricsLogger;->lambda$logAppTransitionMultiEvents$0$ActivityMetricsLogger(IILcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfoSnapshot;)V
PLcom/android/server/wm/ActivityMetricsLogger;->lambda$logAppTransitionMultiEvents$1$ActivityMetricsLogger(Lcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfoSnapshot;)V
PLcom/android/server/wm/ActivityMetricsLogger;->lambda$logAppTransitionReportedDrawn$2$ActivityMetricsLogger(Lcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfoSnapshot;)V
PLcom/android/server/wm/ActivityMetricsLogger;->launchObserverNotifyActivityLaunched(Lcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfo;)V
PLcom/android/server/wm/ActivityMetricsLogger;->logAbortedBgActivityStart(Landroid/content/Intent;Lcom/android/server/wm/WindowProcessController;ILjava/lang/String;IZIIZZ)V
PLcom/android/server/wm/ActivityMetricsLogger;->logAppDisplayed(Lcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfoSnapshot;)V
PLcom/android/server/wm/ActivityMetricsLogger;->logAppFullyDrawn(Lcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfoSnapshot;)V
PLcom/android/server/wm/ActivityMetricsLogger;->logAppStartMemoryStateCapture(Lcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfoSnapshot;)V
PLcom/android/server/wm/ActivityMetricsLogger;->logAppTransition(IILcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfoSnapshot;)V
PLcom/android/server/wm/ActivityMetricsLogger;->logAppTransitionCancel(Lcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfo;)V
PLcom/android/server/wm/ActivityMetricsLogger;->logAppTransitionMultiEvents()V
PLcom/android/server/wm/ActivityMetricsLogger;->logAppTransitionReportedDrawn(Lcom/android/server/wm/ActivityRecord;Z)Lcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfoSnapshot;
PLcom/android/server/wm/ActivityMetricsLogger;->notifyActivityLaunched(ILcom/android/server/wm/ActivityRecord;)V
PLcom/android/server/wm/ActivityMetricsLogger;->notifyActivityLaunched(ILcom/android/server/wm/ActivityRecord;ZZ)V
PLcom/android/server/wm/ActivityMetricsLogger;->notifyActivityLaunching(Landroid/content/Intent;)V
PLcom/android/server/wm/ActivityMetricsLogger;->notifyStartingWindowDrawn(IJ)V
PLcom/android/server/wm/ActivityMetricsLogger;->reset(ZLcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfo;Ljava/lang/String;)V
PLcom/android/server/wm/ActivityMetricsLogger;->startTraces(Lcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfo;)V
PLcom/android/server/wm/ActivityMetricsLogger;->stopLaunchTrace(Lcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfo;)V
PLcom/android/server/wm/ActivityRecord;->canLaunchHomeActivity(ILcom/android/server/wm/ActivityRecord;)Z
PLcom/android/server/wm/ActivityRecord;->clearOptionsLocked()V
PLcom/android/server/wm/ActivityRecord;->computeConfigResourceOverrides(Landroid/content/res/Configuration;Landroid/content/res/Configuration;IZ)V
PLcom/android/server/wm/ActivityRecord;->deliverNewIntentLocked(ILandroid/content/Intent;Ljava/lang/String;)V
PLcom/android/server/wm/ActivityRecord;->finishLaunchTickingLocked()V
PLcom/android/server/wm/ActivityRecord;->isConfigurationCompatible(Landroid/content/res/Configuration;)Z
PLcom/android/server/wm/ActivityRecord;->isInStackLocked()Z
PLcom/android/server/wm/ActivityRecord;->isMainIntent(Landroid/content/Intent;)Z
PLcom/android/server/wm/ActivityRecord;->isResolverOrChildActivity()Z
PLcom/android/server/wm/ActivityRecord;->makeClientVisible()V
PLcom/android/server/wm/ActivityRecord;->makeVisibleIfNeeded(Lcom/android/server/wm/ActivityRecord;Z)V
PLcom/android/server/wm/ActivityRecord;->notifyAppResumed(Z)V
PLcom/android/server/wm/ActivityRecord;->notifyUnknownVisibilityLaunched()V
PLcom/android/server/wm/ActivityRecord;->onStartingWindowDrawn(J)V
PLcom/android/server/wm/ActivityRecord;->pauseKeyDispatchingLocked()V
PLcom/android/server/wm/ActivityRecord;->registerRemoteAnimations(Landroid/view/RemoteAnimationDefinition;)V
PLcom/android/server/wm/ActivityRecord;->relaunchActivityLocked(ZZ)V
PLcom/android/server/wm/ActivityRecord;->removeResultsLocked(Lcom/android/server/wm/ActivityRecord;Ljava/lang/String;I)V
PLcom/android/server/wm/ActivityRecord;->removeWindowContainer()V
PLcom/android/server/wm/ActivityRecord;->scheduleConfigurationChanged(Landroid/content/res/Configuration;)V
PLcom/android/server/wm/ActivityRecord;->scheduleMultiWindowModeChanged(Landroid/content/res/Configuration;)V
PLcom/android/server/wm/ActivityRecord;->schedulePictureInPictureModeChanged(Landroid/content/res/Configuration;)V
PLcom/android/server/wm/ActivityRecord;->scheduleTopResumedActivityChanged(Z)V
PLcom/android/server/wm/ActivityRecord;->setDisablePreviewScreenshots(Z)V
PLcom/android/server/wm/ActivityRecord;->setOrientation(IZ)V
PLcom/android/server/wm/ActivityRecord;->setTask(Lcom/android/server/wm/TaskRecord;)V
PLcom/android/server/wm/ActivityRecord;->setWillCloseOrEnterPip(Z)V
PLcom/android/server/wm/ActivityRecord;->shouldRelaunchLocked(ILandroid/content/res/Configuration;)Z
PLcom/android/server/wm/ActivityRecord;->updateMultiWindowMode()V
PLcom/android/server/wm/ActivityRecord;->updatePictureInPictureMode(Landroid/graphics/Rect;Z)V
PLcom/android/server/wm/ActivityRecord;->writeIdentifierToProto(Landroid/util/proto/ProtoOutputStream;J)V
PLcom/android/server/wm/ActivityRecord;->writeToProto(Landroid/util/proto/ProtoOutputStream;)V
PLcom/android/server/wm/ActivityServiceConnectionsHolder;->addConnection(Ljava/lang/Object;)V
PLcom/android/server/wm/ActivityServiceConnectionsHolder;->disconnectActivityFromServices()V
PLcom/android/server/wm/ActivityServiceConnectionsHolder;->forEachConnection(Ljava/util/function/Consumer;)V
PLcom/android/server/wm/ActivityServiceConnectionsHolder;->lambda$disconnectActivityFromServices$0$ActivityServiceConnectionsHolder()V
PLcom/android/server/wm/ActivityServiceConnectionsHolder;->removeConnection(Ljava/lang/Object;)V
PLcom/android/server/wm/ActivityStack$ActivityStackHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/wm/ActivityStack;->activityDestroyedLocked(Landroid/os/IBinder;Ljava/lang/String;)V
PLcom/android/server/wm/ActivityStack;->activityDestroyedLocked(Lcom/android/server/wm/ActivityRecord;Ljava/lang/String;)V
PLcom/android/server/wm/ActivityStack;->addStartingWindowsForVisibleActivities(Z)V
PLcom/android/server/wm/ActivityStack;->adjustFocusToNextFocusableStack(Ljava/lang/String;)Lcom/android/server/wm/ActivityStack;
PLcom/android/server/wm/ActivityStack;->adjustFocusToNextFocusableStack(Ljava/lang/String;Z)Lcom/android/server/wm/ActivityStack;
PLcom/android/server/wm/ActivityStack;->affectedBySplitScreenResize()Z
PLcom/android/server/wm/ActivityStack;->animateResizePinnedStack(Landroid/graphics/Rect;Landroid/graphics/Rect;IZ)V
PLcom/android/server/wm/ActivityStack;->awakeFromSleepingLocked()V
PLcom/android/server/wm/ActivityStack;->cleanUpActivityLocked(Lcom/android/server/wm/ActivityRecord;ZZ)V
PLcom/android/server/wm/ActivityStack;->closeSystemDialogsLocked()V
PLcom/android/server/wm/ActivityStack;->convertActivityToTranslucent(Lcom/android/server/wm/ActivityRecord;)V
PLcom/android/server/wm/ActivityStack;->deferScheduleMultiWindowModeChanged()Z
PLcom/android/server/wm/ActivityStack;->destroyActivityLocked(Lcom/android/server/wm/ActivityRecord;ZLjava/lang/String;)Z
PLcom/android/server/wm/ActivityStack;->ensureVisibleActivitiesConfigurationLocked(Lcom/android/server/wm/ActivityRecord;Z)V
PLcom/android/server/wm/ActivityStack;->executeAppTransition(Landroid/app/ActivityOptions;)V
PLcom/android/server/wm/ActivityStack;->findActivityLocked(Landroid/content/Intent;Landroid/content/pm/ActivityInfo;Z)Lcom/android/server/wm/ActivityRecord;
PLcom/android/server/wm/ActivityStack;->finishActivityAffinityLocked(Lcom/android/server/wm/ActivityRecord;)Z
PLcom/android/server/wm/ActivityStack;->finishActivityLocked(Lcom/android/server/wm/ActivityRecord;ILandroid/content/Intent;Ljava/lang/String;Z)Z
PLcom/android/server/wm/ActivityStack;->finishActivityLocked(Lcom/android/server/wm/ActivityRecord;ILandroid/content/Intent;Ljava/lang/String;ZZ)Z
PLcom/android/server/wm/ActivityStack;->finishActivityResultsLocked(Lcom/android/server/wm/ActivityRecord;ILandroid/content/Intent;)V
PLcom/android/server/wm/ActivityStack;->finishCurrentActivityLocked(Lcom/android/server/wm/ActivityRecord;IZLjava/lang/String;)Lcom/android/server/wm/ActivityRecord;
PLcom/android/server/wm/ActivityStack;->finishTopCrashedActivityLocked(Lcom/android/server/wm/WindowProcessController;Ljava/lang/String;)Lcom/android/server/wm/TaskRecord;
PLcom/android/server/wm/ActivityStack;->finishVoiceTask(Landroid/service/voice/IVoiceInteractionSession;)V
PLcom/android/server/wm/ActivityStack;->getDefaultPictureInPictureBounds(F)Landroid/graphics/Rect;
PLcom/android/server/wm/ActivityStack;->getStackId()I
PLcom/android/server/wm/ActivityStack;->isAnimatingBoundsToFullscreen()Z
PLcom/android/server/wm/ActivityStack;->moveTaskToBackLocked(I)Z
PLcom/android/server/wm/ActivityStack;->moveTaskToFrontLocked(Lcom/android/server/wm/TaskRecord;ZLandroid/app/ActivityOptions;Lcom/android/server/am/AppTimeTracker;Ljava/lang/String;)V
PLcom/android/server/wm/ActivityStack;->moveToBack(Ljava/lang/String;Lcom/android/server/wm/TaskRecord;)V
PLcom/android/server/wm/ActivityStack;->moveToFrontAndResumeStateIfNeeded(Lcom/android/server/wm/ActivityRecord;ZZZLjava/lang/String;)V
PLcom/android/server/wm/ActivityStack;->navigateUpToLocked(Lcom/android/server/wm/ActivityRecord;Landroid/content/Intent;ILandroid/content/Intent;)Z
PLcom/android/server/wm/ActivityStack;->onActivityRemovedFromStack(Lcom/android/server/wm/ActivityRecord;)V
PLcom/android/server/wm/ActivityStack;->onParentChanged()V
PLcom/android/server/wm/ActivityStack;->onPipAnimationEndResize()V
PLcom/android/server/wm/ActivityStack;->positionChildWindowContainerAtBottom(Lcom/android/server/wm/TaskRecord;)V
PLcom/android/server/wm/ActivityStack;->prepareActivityHideTransitionAnimation(Lcom/android/server/wm/ActivityRecord;I)V
PLcom/android/server/wm/ActivityStack;->prepareFreezingTaskBounds()V
PLcom/android/server/wm/ActivityStack;->remove()V
PLcom/android/server/wm/ActivityStack;->removeActivityFromHistoryLocked(Lcom/android/server/wm/ActivityRecord;Ljava/lang/String;)V
PLcom/android/server/wm/ActivityStack;->removeTask(Lcom/android/server/wm/TaskRecord;Ljava/lang/String;I)V
PLcom/android/server/wm/ActivityStack;->resetTargetTaskIfNeededLocked(Lcom/android/server/wm/TaskRecord;Z)Landroid/app/ActivityOptions;
PLcom/android/server/wm/ActivityStack;->resetTaskIfNeededLocked(Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityRecord;)Lcom/android/server/wm/ActivityRecord;
PLcom/android/server/wm/ActivityStack;->resize(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
PLcom/android/server/wm/ActivityStack;->resumeTopActivityInNextFocusableStack(Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;Ljava/lang/String;)Z
PLcom/android/server/wm/ActivityStack;->returnsToHomeStack()Z
PLcom/android/server/wm/ActivityStack;->sendActivityResultLocked(ILcom/android/server/wm/ActivityRecord;Ljava/lang/String;IILandroid/content/Intent;)V
PLcom/android/server/wm/ActivityStack;->setBounds(Landroid/graphics/Rect;)I
PLcom/android/server/wm/ActivityStack;->setPictureInPictureActions(Ljava/util/List;)V
PLcom/android/server/wm/ActivityStack;->setPictureInPictureAspectRatio(F)V
PLcom/android/server/wm/ActivityStack;->setWindowingMode(I)V
PLcom/android/server/wm/ActivityStack;->shouldUpRecreateTaskLocked(Lcom/android/server/wm/ActivityRecord;Ljava/lang/String;)Z
PLcom/android/server/wm/ActivityStack;->supportsSplitScreenWindowingMode()Z
PLcom/android/server/wm/ActivityStack;->topRunningNonOverlayTaskActivity()Lcom/android/server/wm/ActivityRecord;
PLcom/android/server/wm/ActivityStack;->updateActivityApplicationInfoLocked(Landroid/content/pm/ApplicationInfo;)V
PLcom/android/server/wm/ActivityStack;->updateBoundsAllowed(Landroid/graphics/Rect;)Z
PLcom/android/server/wm/ActivityStack;->updatePictureInPictureModeForPinnedStackAnimation(Landroid/graphics/Rect;Z)V
PLcom/android/server/wm/ActivityStack;->updateTransitLocked(ILandroid/app/ActivityOptions;)V
PLcom/android/server/wm/ActivityStack;->willActivityBeVisibleLocked(Landroid/os/IBinder;)Z
PLcom/android/server/wm/ActivityStackSupervisor$PendingActivityLaunch;-><init>(Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityRecord;ILcom/android/server/wm/ActivityStack;Lcom/android/server/wm/WindowProcessController;)V
PLcom/android/server/wm/ActivityStackSupervisor;->acquireLaunchWakelock()V
PLcom/android/server/wm/ActivityStackSupervisor;->activityRelaunchedLocked(Landroid/os/IBinder;)V
PLcom/android/server/wm/ActivityStackSupervisor;->activityRelaunchingLocked(Lcom/android/server/wm/ActivityRecord;)V
PLcom/android/server/wm/ActivityStackSupervisor;->cleanUpRemovedTaskLocked(Lcom/android/server/wm/TaskRecord;ZZ)V
PLcom/android/server/wm/ActivityStackSupervisor;->cleanupActivity(Lcom/android/server/wm/ActivityRecord;)V
PLcom/android/server/wm/ActivityStackSupervisor;->comeOutOfSleepIfNeededLocked()V
PLcom/android/server/wm/ActivityStackSupervisor;->findTaskToMoveToFront(Lcom/android/server/wm/TaskRecord;ILandroid/app/ActivityOptions;Ljava/lang/String;Z)V
PLcom/android/server/wm/ActivityStackSupervisor;->getActionRestrictionForCallingPackage(Ljava/lang/String;Ljava/lang/String;II)I
PLcom/android/server/wm/ActivityStackSupervisor;->getComponentRestrictionForCallingPackage(Landroid/content/pm/ActivityInfo;Ljava/lang/String;IIZ)I
PLcom/android/server/wm/ActivityStackSupervisor;->getReparentTargetStack(Lcom/android/server/wm/TaskRecord;Lcom/android/server/wm/ActivityStack;Z)Lcom/android/server/wm/ActivityStack;
PLcom/android/server/wm/ActivityStackSupervisor;->getUserInfo(I)Landroid/content/pm/UserInfo;
PLcom/android/server/wm/ActivityStackSupervisor;->moveTasksToFullscreenStackInSurfaceTransaction(Lcom/android/server/wm/ActivityStack;IZ)V
PLcom/android/server/wm/ActivityStackSupervisor;->moveTasksToFullscreenStackLocked(Lcom/android/server/wm/ActivityStack;IZ)V
PLcom/android/server/wm/ActivityStackSupervisor;->moveTasksToFullscreenStackLocked(Lcom/android/server/wm/ActivityStack;Z)V
PLcom/android/server/wm/ActivityStackSupervisor;->onRecentTaskRemoved(Lcom/android/server/wm/TaskRecord;ZZ)V
PLcom/android/server/wm/ActivityStackSupervisor;->removeTaskByIdLocked(IZZLjava/lang/String;)Z
PLcom/android/server/wm/ActivityStackSupervisor;->removeTaskByIdLocked(IZZZLjava/lang/String;)Z
PLcom/android/server/wm/ActivityStackSupervisor;->resizePinnedStackLocked(Landroid/graphics/Rect;Landroid/graphics/Rect;)V
PLcom/android/server/wm/ActivityStackSupervisor;->resolveActivity(Landroid/content/Intent;Landroid/content/pm/ResolveInfo;ILandroid/app/ProfilerInfo;)Landroid/content/pm/ActivityInfo;
PLcom/android/server/wm/ActivityStackSupervisor;->resolveActivity(Landroid/content/Intent;Ljava/lang/String;ILandroid/app/ProfilerInfo;II)Landroid/content/pm/ActivityInfo;
PLcom/android/server/wm/ActivityStackSupervisor;->resolveIntent(Landroid/content/Intent;Ljava/lang/String;III)Landroid/content/pm/ResolveInfo;
PLcom/android/server/wm/ActivityStackSupervisor;->restoreRecentTaskLocked(Lcom/android/server/wm/TaskRecord;Landroid/app/ActivityOptions;Z)Z
PLcom/android/server/wm/ActivityStackSupervisor;->scheduleUpdateMultiWindowMode(Lcom/android/server/wm/TaskRecord;)V
PLcom/android/server/wm/ActivityStackSupervisor;->scheduleUpdatePictureInPictureModeIfNeeded(Lcom/android/server/wm/TaskRecord;Landroid/graphics/Rect;)V
PLcom/android/server/wm/ActivityStackSupervisor;->scheduleUpdatePictureInPictureModeIfNeeded(Lcom/android/server/wm/TaskRecord;Lcom/android/server/wm/ActivityStack;)V
PLcom/android/server/wm/ActivityStackSupervisor;->setNextTaskIdForUserLocked(II)V
PLcom/android/server/wm/ActivityStackSupervisor;->startActivityFromRecents(IIILcom/android/server/wm/SafeActivityOptions;)I
PLcom/android/server/wm/ActivityStackSupervisor;->updatePictureInPictureMode(Lcom/android/server/wm/TaskRecord;Landroid/graphics/Rect;Z)V
PLcom/android/server/wm/ActivityStartController$StartHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/wm/ActivityStartController;->addPendingActivityLaunch(Lcom/android/server/wm/ActivityStackSupervisor$PendingActivityLaunch;)V
PLcom/android/server/wm/ActivityStartController;->checkTargetUser(IZIILjava/lang/String;)I
PLcom/android/server/wm/ActivityStartController;->postStartActivityProcessingForLastStarter(Lcom/android/server/wm/ActivityRecord;ILcom/android/server/wm/ActivityStack;)V
PLcom/android/server/wm/ActivityStartController;->registerRemoteAnimationForNextActivityStart(Ljava/lang/String;Landroid/view/RemoteAnimationAdapter;)V
PLcom/android/server/wm/ActivityStartController;->schedulePendingActivityLaunches(J)V
PLcom/android/server/wm/ActivityStartController;->startActivities(Landroid/app/IApplicationThread;IIILjava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Lcom/android/server/wm/SafeActivityOptions;ILjava/lang/String;Lcom/android/server/am/PendingIntentRecord;Z)I
PLcom/android/server/wm/ActivityStartController;->startActivitiesInPackage(IIILjava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Lcom/android/server/wm/SafeActivityOptions;IZLcom/android/server/am/PendingIntentRecord;Z)I
PLcom/android/server/wm/ActivityStartController;->startActivityInPackage(IIILjava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILcom/android/server/wm/SafeActivityOptions;ILcom/android/server/wm/TaskRecord;Ljava/lang/String;ZLcom/android/server/am/PendingIntentRecord;Z)I
PLcom/android/server/wm/ActivityStarter;->canLaunchIntoFocusedStack(Lcom/android/server/wm/ActivityRecord;Z)Z
PLcom/android/server/wm/ActivityStarter;->deliverNewIntent(Lcom/android/server/wm/ActivityRecord;)V
PLcom/android/server/wm/ActivityStarter;->lambda$startActivity$0$ActivityStarter(Ljava/lang/String;)V
PLcom/android/server/wm/ActivityStarter;->resumeTargetStackIfNeeded()V
PLcom/android/server/wm/ActivityStarter;->setAllowBackgroundActivityStart(Z)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setAllowPendingRemoteAnimationRegistryLookup(Z)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setCaller(Landroid/app/IApplicationThread;)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setCallingPackage(Ljava/lang/String;)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setCallingPid(I)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setComponentSpecified(Z)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setFilterCallingUid(I)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setGlobalConfiguration(Landroid/content/res/Configuration;)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setIgnoreTargetSecurity(Z)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setInTask(Lcom/android/server/wm/TaskRecord;)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setMayWait(I)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setOriginatingPendingIntent(Lcom/android/server/am/PendingIntentRecord;)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setProfilerInfo(Landroid/app/ProfilerInfo;)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setRealCallingPid(I)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setRealCallingUid(I)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setRequestCode(I)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setResolvedType(Ljava/lang/String;)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setResultTo(Landroid/os/IBinder;)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setResultWho(Ljava/lang/String;)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setStartFlags(I)Lcom/android/server/wm/ActivityStarter;
PLcom/android/server/wm/ActivityStarter;->setTargetStackAndMoveToFrontIfNeeded(Lcom/android/server/wm/ActivityRecord;)Lcom/android/server/wm/ActivityRecord;
PLcom/android/server/wm/ActivityStarter;->setTaskFromInTask()I
PLcom/android/server/wm/ActivityStarter;->setTaskFromIntentActivity(Lcom/android/server/wm/ActivityRecord;)V
PLcom/android/server/wm/ActivityStarter;->setTaskFromSourceRecord()I
PLcom/android/server/wm/ActivityStarter;->setTaskToCurrentTopOrCreateNewTask()V
PLcom/android/server/wm/ActivityStarter;->startActivityMayWait(Landroid/app/IApplicationThread;ILjava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/app/WaitResult;Landroid/content/res/Configuration;Lcom/android/server/wm/SafeActivityOptions;ZILcom/android/server/wm/TaskRecord;Ljava/lang/String;ZLcom/android/server/am/PendingIntentRecord;Z)I
PLcom/android/server/wm/ActivityStarter;->startResolvedActivity(Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityRecord;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;IZLandroid/app/ActivityOptions;Lcom/android/server/wm/TaskRecord;[Lcom/android/server/wm/ActivityRecord;)I
PLcom/android/server/wm/ActivityTaskManagerService$Lifecycle;->onCleanupUser(I)V
PLcom/android/server/wm/ActivityTaskManagerService$Lifecycle;->onUnlockUser(I)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->acquireSleepToken(Ljava/lang/String;I)Lcom/android/server/wm/ActivityTaskManagerInternal$SleepToken;
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->canGcNow()Z
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->canShowErrorDialogs()Z
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->cleanupDisabledPackageComponents(Ljava/lang/String;Ljava/util/Set;IZ)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->clearPendingResultForActivity(Landroid/os/IBinder;Ljava/lang/ref/WeakReference;)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->closeSystemDialogs(Ljava/lang/String;)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->finishTopCrashedActivities(Lcom/android/server/wm/WindowProcessController;Ljava/lang/String;)I
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->getIntentSender(ILjava/lang/String;IILandroid/os/IBinder;Ljava/lang/String;I[Landroid/content/Intent;[Ljava/lang/String;ILandroid/os/Bundle;)Landroid/content/IIntentSender;
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->getServiceConnectionsHolder(Landroid/os/IBinder;)Lcom/android/server/wm/ActivityServiceConnectionsHolder;
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->getTopVisibleActivities()Ljava/util/List;
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->handleAppCrashInActivityController(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;JLjava/lang/String;Ljava/lang/Runnable;)Z
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->isShuttingDown()Z
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->isUidForeground(I)Z
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->loadRecentTasksForUser(I)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->notifyAppTransitionCancelled()V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->notifyKeyguardFlagsChanged(Ljava/lang/Runnable;I)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onImeWindowSetOnDisplay(II)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onPackageAdded(Ljava/lang/String;Z)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onPackageReplaced(Landroid/content/pm/ApplicationInfo;)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onUidAddedToPendingTempWhitelist(ILjava/lang/String;)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onUidRemovedFromPendingTempWhitelist(I)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onUserStopped(I)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->removeUser(I)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->sendActivityResult(ILandroid/os/IBinder;Ljava/lang/String;IILandroid/content/Intent;)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->setAllowAppSwitches(Ljava/lang/String;II)V
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->startActivitiesAsPackage(Ljava/lang/String;I[Landroid/content/Intent;Landroid/os/Bundle;)I
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->startActivitiesInPackage(IIILjava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Lcom/android/server/wm/SafeActivityOptions;IZLcom/android/server/am/PendingIntentRecord;Z)I
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Landroid/os/Bundle;I)I
PLcom/android/server/wm/ActivityTaskManagerService$LocalService;->startActivityInPackage(IIILjava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILcom/android/server/wm/SafeActivityOptions;ILcom/android/server/wm/TaskRecord;Ljava/lang/String;ZLcom/android/server/am/PendingIntentRecord;Z)I
PLcom/android/server/wm/ActivityTaskManagerService$PendingAssistExtras;-><init>(Lcom/android/server/wm/ActivityTaskManagerService;Lcom/android/server/wm/ActivityRecord;Landroid/os/Bundle;Landroid/content/Intent;Ljava/lang/String;Landroid/app/IAssistDataReceiver;Landroid/os/Bundle;I)V
PLcom/android/server/wm/ActivityTaskManagerService$PendingAssistExtras;->run()V
PLcom/android/server/wm/ActivityTaskManagerService;->activityDestroyed(Landroid/os/IBinder;)V
PLcom/android/server/wm/ActivityTaskManagerService;->activityRelaunched(Landroid/os/IBinder;)V
PLcom/android/server/wm/ActivityTaskManagerService;->cancelRecentsAnimation(Z)V
PLcom/android/server/wm/ActivityTaskManagerService;->checkAllowAppSwitchUid(I)Z
PLcom/android/server/wm/ActivityTaskManagerService;->convertFromTranslucent(Landroid/os/IBinder;)Z
PLcom/android/server/wm/ActivityTaskManagerService;->convertToTranslucent(Landroid/os/IBinder;Landroid/os/Bundle;)Z
PLcom/android/server/wm/ActivityTaskManagerService;->dismissPip(ZI)V
PLcom/android/server/wm/ActivityTaskManagerService;->enforceNotIsolatedCaller(Ljava/lang/String;)V
PLcom/android/server/wm/ActivityTaskManagerService;->enqueueAssistContext(ILandroid/content/Intent;Ljava/lang/String;Landroid/app/IAssistDataReceiver;Landroid/os/Bundle;Landroid/os/IBinder;ZZILandroid/os/Bundle;JI)Lcom/android/server/wm/ActivityTaskManagerService$PendingAssistExtras;
PLcom/android/server/wm/ActivityTaskManagerService;->ensureValidPictureInPictureActivityParamsLocked(Ljava/lang/String;Landroid/os/IBinder;Landroid/app/PictureInPictureParams;)Lcom/android/server/wm/ActivityRecord;
PLcom/android/server/wm/ActivityTaskManagerService;->enterPictureInPictureMode(Landroid/os/IBinder;Landroid/app/PictureInPictureParams;)Z
PLcom/android/server/wm/ActivityTaskManagerService;->finishActivity(Landroid/os/IBinder;ILandroid/content/Intent;I)Z
PLcom/android/server/wm/ActivityTaskManagerService;->finishActivityAffinity(Landroid/os/IBinder;)Z
PLcom/android/server/wm/ActivityTaskManagerService;->finishVoiceTask(Landroid/service/voice/IVoiceInteractionSession;)V
PLcom/android/server/wm/ActivityTaskManagerService;->getActivityClassForToken(Landroid/os/IBinder;)Landroid/content/ComponentName;
PLcom/android/server/wm/ActivityTaskManagerService;->getAllStackInfos()Ljava/util/List;
PLcom/android/server/wm/ActivityTaskManagerService;->getAppOpsService()Lcom/android/server/appop/AppOpsService;
PLcom/android/server/wm/ActivityTaskManagerService;->getAppTasks(Ljava/lang/String;)Ljava/util/List;
PLcom/android/server/wm/ActivityTaskManagerService;->getCallingActivity(Landroid/os/IBinder;)Landroid/content/ComponentName;
PLcom/android/server/wm/ActivityTaskManagerService;->getCallingPackage(Landroid/os/IBinder;)Ljava/lang/String;
PLcom/android/server/wm/ActivityTaskManagerService;->getConfiguration()Landroid/content/res/Configuration;
PLcom/android/server/wm/ActivityTaskManagerService;->getCurrentUserId()I
PLcom/android/server/wm/ActivityTaskManagerService;->getDeviceConfigurationInfo()Landroid/content/pm/ConfigurationInfo;
PLcom/android/server/wm/ActivityTaskManagerService;->getDevicePolicyManager()Landroid/app/admin/DevicePolicyManager;
PLcom/android/server/wm/ActivityTaskManagerService;->getGlobalConfigurationForCallingPid()Landroid/content/res/Configuration;
PLcom/android/server/wm/ActivityTaskManagerService;->getIntentSenderLocked(ILjava/lang/String;IILandroid/os/IBinder;Ljava/lang/String;I[Landroid/content/Intent;[Ljava/lang/String;ILandroid/os/Bundle;)Landroid/content/IIntentSender;
PLcom/android/server/wm/ActivityTaskManagerService;->getLastResumedActivityUserId()I
PLcom/android/server/wm/ActivityTaskManagerService;->getLaunchedFromUid(Landroid/os/IBinder;)I
PLcom/android/server/wm/ActivityTaskManagerService;->getMaxNumPictureInPictureActions(Landroid/os/IBinder;)I
PLcom/android/server/wm/ActivityTaskManagerService;->getProcessController(II)Lcom/android/server/wm/WindowProcessController;
PLcom/android/server/wm/ActivityTaskManagerService;->getProcessController(Landroid/app/IApplicationThread;)Lcom/android/server/wm/WindowProcessController;
PLcom/android/server/wm/ActivityTaskManagerService;->getRecentTasks(III)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/wm/ActivityTaskManagerService;->getRequestedOrientation(Landroid/os/IBinder;)I
PLcom/android/server/wm/ActivityTaskManagerService;->getSecondaryHomeIntent(Ljava/lang/String;)Landroid/content/Intent;
PLcom/android/server/wm/ActivityTaskManagerService;->getTaskDescriptionIcon(Ljava/lang/String;I)Landroid/graphics/Bitmap;
PLcom/android/server/wm/ActivityTaskManagerService;->getTaskForActivity(Landroid/os/IBinder;Z)I
PLcom/android/server/wm/ActivityTaskManagerService;->getTaskSnapshot(IZ)Landroid/app/ActivityManager$TaskSnapshot;
PLcom/android/server/wm/ActivityTaskManagerService;->getUidState(I)I
PLcom/android/server/wm/ActivityTaskManagerService;->getUidStateLocked(I)I
PLcom/android/server/wm/ActivityTaskManagerService;->handleIncomingUser(IIILjava/lang/String;)I
PLcom/android/server/wm/ActivityTaskManagerService;->hasUserRestriction(Ljava/lang/String;I)Z
PLcom/android/server/wm/ActivityTaskManagerService;->isActivityStartsLoggingEnabled()Z
PLcom/android/server/wm/ActivityTaskManagerService;->isAssistDataAllowedOnCurrentActivity()Z
PLcom/android/server/wm/ActivityTaskManagerService;->isBackgroundActivityStartsEnabled()Z
PLcom/android/server/wm/ActivityTaskManagerService;->isControllerAMonkey()Z
PLcom/android/server/wm/ActivityTaskManagerService;->isDeviceOwner(Ljava/lang/String;)Z
PLcom/android/server/wm/ActivityTaskManagerService;->isInLockTaskMode()Z
PLcom/android/server/wm/ActivityTaskManagerService;->isInMultiWindowMode(Landroid/os/IBinder;)Z
PLcom/android/server/wm/ActivityTaskManagerService;->isInPictureInPictureMode(Landroid/os/IBinder;)Z
PLcom/android/server/wm/ActivityTaskManagerService;->isInPictureInPictureMode(Lcom/android/server/wm/ActivityRecord;)Z
PLcom/android/server/wm/ActivityTaskManagerService;->isKeyguardLocked()Z
PLcom/android/server/wm/ActivityTaskManagerService;->isTopOfTask(Landroid/os/IBinder;)Z
PLcom/android/server/wm/ActivityTaskManagerService;->isUidForeground(I)Z
PLcom/android/server/wm/ActivityTaskManagerService;->keyguardGoingAway(I)V
PLcom/android/server/wm/ActivityTaskManagerService;->lambda$enterPictureInPictureMode$4(Lcom/android/server/wm/ActivityTaskManagerService;Lcom/android/server/wm/ActivityRecord;Landroid/app/PictureInPictureParams;)V
PLcom/android/server/wm/ActivityTaskManagerService;->lambda$onScreenAwakeChanged$3$ActivityTaskManagerService(Z)V
PLcom/android/server/wm/ActivityTaskManagerService;->logAppTooSlow(Lcom/android/server/wm/WindowProcessController;JLjava/lang/String;)V
PLcom/android/server/wm/ActivityTaskManagerService;->logPictureInPictureArgs(Landroid/app/PictureInPictureParams;)V
PLcom/android/server/wm/ActivityTaskManagerService;->moveActivityTaskToBack(Landroid/os/IBinder;Z)Z
PLcom/android/server/wm/ActivityTaskManagerService;->moveTaskToFrontLocked(IILcom/android/server/wm/SafeActivityOptions;Z)V
PLcom/android/server/wm/ActivityTaskManagerService;->moveTasksToFullscreenStack(IZ)V
PLcom/android/server/wm/ActivityTaskManagerService;->navigateUpTo(Landroid/os/IBinder;Landroid/content/Intent;ILandroid/content/Intent;)Z
PLcom/android/server/wm/ActivityTaskManagerService;->notifyPinnedStackAnimationEnded()V
PLcom/android/server/wm/ActivityTaskManagerService;->notifyPinnedStackAnimationStarted()V
PLcom/android/server/wm/ActivityTaskManagerService;->notifyTaskPersisterLocked(Lcom/android/server/wm/TaskRecord;Z)V
PLcom/android/server/wm/ActivityTaskManagerService;->onScreenAwakeChanged(Z)V
PLcom/android/server/wm/ActivityTaskManagerService;->overridePendingTransition(Landroid/os/IBinder;Ljava/lang/String;II)V
PLcom/android/server/wm/ActivityTaskManagerService;->pendingAssistExtrasTimedOut(Lcom/android/server/wm/ActivityTaskManagerService$PendingAssistExtras;)V
PLcom/android/server/wm/ActivityTaskManagerService;->registerRemoteAnimationForNextActivityStart(Ljava/lang/String;Landroid/view/RemoteAnimationAdapter;)V
PLcom/android/server/wm/ActivityTaskManagerService;->registerRemoteAnimations(Landroid/os/IBinder;Landroid/view/RemoteAnimationDefinition;)V
PLcom/android/server/wm/ActivityTaskManagerService;->removeTask(I)Z
PLcom/android/server/wm/ActivityTaskManagerService;->reportActivityFullyDrawn(Landroid/os/IBinder;Z)V
PLcom/android/server/wm/ActivityTaskManagerService;->reportAssistContextExtras(Landroid/os/IBinder;Landroid/os/Bundle;Landroid/app/assist/AssistStructure;Landroid/app/assist/AssistContent;Landroid/net/Uri;)V
PLcom/android/server/wm/ActivityTaskManagerService;->requestAssistContextExtras(ILandroid/app/IAssistDataReceiver;Landroid/os/Bundle;Landroid/os/IBinder;ZZ)Z
PLcom/android/server/wm/ActivityTaskManagerService;->requestAutofillData(Landroid/app/IAssistDataReceiver;Landroid/os/Bundle;Landroid/os/IBinder;I)Z
PLcom/android/server/wm/ActivityTaskManagerService;->requestStartActivityPermissionToken(Landroid/os/IBinder;)Landroid/os/IBinder;
PLcom/android/server/wm/ActivityTaskManagerService;->resizePinnedStack(Landroid/graphics/Rect;Landroid/graphics/Rect;)V
PLcom/android/server/wm/ActivityTaskManagerService;->resizeStack(ILandroid/graphics/Rect;ZZZI)V
PLcom/android/server/wm/ActivityTaskManagerService;->resumeAppSwitches()V
PLcom/android/server/wm/ActivityTaskManagerService;->setDisablePreviewScreenshots(Landroid/os/IBinder;Z)V
PLcom/android/server/wm/ActivityTaskManagerService;->setFocusedTask(I)V
PLcom/android/server/wm/ActivityTaskManagerService;->setPictureInPictureParams(Landroid/os/IBinder;Landroid/app/PictureInPictureParams;)V
PLcom/android/server/wm/ActivityTaskManagerService;->setRequestedOrientation(Landroid/os/IBinder;I)V
PLcom/android/server/wm/ActivityTaskManagerService;->shouldDisableNonVrUiLocked()Z
PLcom/android/server/wm/ActivityTaskManagerService;->shouldUpRecreateTask(Landroid/os/IBinder;Ljava/lang/String;)Z
PLcom/android/server/wm/ActivityTaskManagerService;->startActivities(Landroid/app/IApplicationThread;Ljava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Landroid/os/Bundle;I)I
PLcom/android/server/wm/ActivityTaskManagerService;->startActivity(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;)I
PLcom/android/server/wm/ActivityTaskManagerService;->startActivityAsCaller(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;Landroid/os/IBinder;ZI)I
PLcom/android/server/wm/ActivityTaskManagerService;->startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I
PLcom/android/server/wm/ActivityTaskManagerService;->startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;IZ)I
PLcom/android/server/wm/ActivityTaskManagerService;->startActivityFromRecents(ILandroid/os/Bundle;)I
PLcom/android/server/wm/ActivityTaskManagerService;->startActivityIntentSender(Landroid/app/IApplicationThread;Landroid/content/IIntentSender;Landroid/os/IBinder;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IIILandroid/os/Bundle;)I
PLcom/android/server/wm/ActivityTaskManagerService;->startActivityWithConfig(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/content/res/Configuration;Landroid/os/Bundle;I)I
PLcom/android/server/wm/ActivityTaskManagerService;->startAssistantActivity(Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;I)I
PLcom/android/server/wm/ActivityTaskManagerService;->startRecentsActivity(Landroid/content/Intent;Landroid/app/IAssistDataReceiver;Landroid/view/IRecentsAnimationRunner;)V
PLcom/android/server/wm/ActivityTaskManagerService;->stopAppSwitches()V
PLcom/android/server/wm/ActivityTaskManagerService;->unregisterTaskStackListener(Landroid/app/ITaskStackListener;)V
PLcom/android/server/wm/ActivityTaskManagerService;->updateOomAdj()V
PLcom/android/server/wm/ActivityTaskManagerService;->willActivityBeVisible(Landroid/os/IBinder;)Z
PLcom/android/server/wm/AlertWindowNotification;-><init>(Lcom/android/server/wm/WindowManagerService;Ljava/lang/String;)V
PLcom/android/server/wm/AlertWindowNotification;->cancel(Z)V
PLcom/android/server/wm/AlertWindowNotification;->createNotificationChannel(Landroid/content/Context;Ljava/lang/String;)V
PLcom/android/server/wm/AlertWindowNotification;->getApplicationInfo(Landroid/content/pm/PackageManager;Ljava/lang/String;)Landroid/content/pm/ApplicationInfo;
PLcom/android/server/wm/AlertWindowNotification;->lambda$cancel$0$AlertWindowNotification(Z)V
PLcom/android/server/wm/AlertWindowNotification;->onPostNotification()V
PLcom/android/server/wm/AlertWindowNotification;->post()V
PLcom/android/server/wm/AnimatingAppWindowTokenRegistry;->endDeferringFinished()V
PLcom/android/server/wm/AnimatingAppWindowTokenRegistry;->notifyAboutToFinish(Lcom/android/server/wm/AppWindowToken;Ljava/lang/Runnable;)Z
PLcom/android/server/wm/AnimatingAppWindowTokenRegistry;->notifyFinished(Lcom/android/server/wm/AppWindowToken;)V
PLcom/android/server/wm/AnimatingAppWindowTokenRegistry;->notifyStarting(Lcom/android/server/wm/AppWindowToken;)V
PLcom/android/server/wm/AppTaskImpl;->checkCaller()V
PLcom/android/server/wm/AppTaskImpl;->finishAndRemoveTask()V
PLcom/android/server/wm/AppTaskImpl;->getTaskInfo()Landroid/app/ActivityManager$RecentTaskInfo;
PLcom/android/server/wm/AppTaskImpl;->setExcludeFromRecents(Z)V
PLcom/android/server/wm/AppTransition$2;->getInterpolation(F)F
PLcom/android/server/wm/AppTransition;->calculateClipRevealTransitionDuration(ZFFLandroid/graphics/Rect;)J
PLcom/android/server/wm/AppTransition;->canSkipFirstFrame()Z
PLcom/android/server/wm/AppTransition;->createClipRevealAnimationLocked(IZLandroid/graphics/Rect;Landroid/graphics/Rect;)Landroid/view/animation/Animation;
PLcom/android/server/wm/AppTransition;->createScaleUpAnimationLocked(IZLandroid/graphics/Rect;)Landroid/view/animation/Animation;
PLcom/android/server/wm/AppTransition;->doAnimationCallback(Landroid/os/IRemoteCallback;)V
PLcom/android/server/wm/AppTransition;->freeze()V
PLcom/android/server/wm/AppTransition;->getAppStackClipMode()I
PLcom/android/server/wm/AppTransition;->getCachedAnimations(Landroid/view/WindowManager$LayoutParams;)Lcom/android/server/AttributeCache$Entry;
PLcom/android/server/wm/AppTransition;->getDefaultNextAppTransitionStartRect(Landroid/graphics/Rect;)V
PLcom/android/server/wm/AppTransition;->getRemoteAnimationController()Lcom/android/server/wm/RemoteAnimationController;
PLcom/android/server/wm/AppTransition;->handleAppTransitionTimeout()V
PLcom/android/server/wm/AppTransition;->isNextAppTransitionOpenCrossProfileApps()Z
PLcom/android/server/wm/AppTransition;->isNextAppTransitionThumbnailDown()Z
PLcom/android/server/wm/AppTransition;->isNextAppTransitionThumbnailUp()Z
PLcom/android/server/wm/AppTransition;->loadAnimation(Landroid/view/WindowManager$LayoutParams;IZIILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;ZZI)Landroid/view/animation/Animation;
PLcom/android/server/wm/AppTransition;->loadAnimationAttr(Landroid/view/WindowManager$LayoutParams;II)Landroid/view/animation/Animation;
PLcom/android/server/wm/AppTransition;->loadAnimationRes(Landroid/view/WindowManager$LayoutParams;I)Landroid/view/animation/Animation;
PLcom/android/server/wm/AppTransition;->loadAnimationRes(Ljava/lang/String;I)Landroid/view/animation/Animation;
PLcom/android/server/wm/AppTransition;->loadKeyguardExitAnimation(I)Landroid/view/animation/Animation;
PLcom/android/server/wm/AppTransition;->overridePendingAppTransition(Ljava/lang/String;IILandroid/os/IRemoteCallback;)V
PLcom/android/server/wm/AppTransition;->overridePendingAppTransitionClipReveal(IIII)V
PLcom/android/server/wm/AppTransition;->overridePendingAppTransitionRemote(Landroid/view/RemoteAnimationAdapter;)V
PLcom/android/server/wm/AppTransition;->overridePendingAppTransitionScaleUp(IIII)V
PLcom/android/server/wm/AppTransition;->setTimeout()V
PLcom/android/server/wm/AppTransitionController;->getRemoteAnimationOverride(Lcom/android/server/wm/AppWindowToken;ILandroid/util/ArraySet;)Landroid/view/RemoteAnimationAdapter;
PLcom/android/server/wm/AppWarnings$ConfigHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/wm/AppWarnings;->onResumeActivity(Lcom/android/server/wm/ActivityRecord;)V
PLcom/android/server/wm/AppWarnings;->writeConfigToFileAmsThread()V
PLcom/android/server/wm/AppWindowToken$1;->run()V
PLcom/android/server/wm/AppWindowToken;->applyAnimationLocked(Landroid/view/WindowManager$LayoutParams;IZZ)Z
PLcom/android/server/wm/AppWindowToken;->calculateCompatBoundsTransformation(Landroid/content/res/Configuration;)V
PLcom/android/server/wm/AppWindowToken;->cancelAnimation()V
PLcom/android/server/wm/AppWindowToken;->cancelAnimationOnly()V
PLcom/android/server/wm/AppWindowToken;->clearAnimatingFlags()V
PLcom/android/server/wm/AppWindowToken;->clearChangeLeash(Landroid/view/SurfaceControl$Transaction;Z)V
PLcom/android/server/wm/AppWindowToken;->clearRelaunching()V
PLcom/android/server/wm/AppWindowToken;->createAnimationBoundsLayer(Landroid/view/SurfaceControl$Transaction;)Landroid/view/SurfaceControl;
PLcom/android/server/wm/AppWindowToken;->createSnapshot(Landroid/app/ActivityManager$TaskSnapshot;)Z
PLcom/android/server/wm/AppWindowToken;->detachChildren()V
PLcom/android/server/wm/AppWindowToken;->fillsParent()Z
PLcom/android/server/wm/AppWindowToken;->finishRelaunching()V
PLcom/android/server/wm/AppWindowToken;->getAnimationBounds(Landroid/graphics/Point;Landroid/graphics/Rect;)V
PLcom/android/server/wm/AppWindowToken;->getAnimationLeashParent()Landroid/view/SurfaceControl;
PLcom/android/server/wm/AppWindowToken;->getAppAnimationLayer()Landroid/view/SurfaceControl;
PLcom/android/server/wm/AppWindowToken;->getHighestAnimLayerWindow(Lcom/android/server/wm/WindowState;)Lcom/android/server/wm/WindowState;
PLcom/android/server/wm/AppWindowToken;->getImeTargetBelowWindow(Lcom/android/server/wm/WindowState;)Lcom/android/server/wm/WindowState;
PLcom/android/server/wm/AppWindowToken;->getLetterboxInsets()Landroid/graphics/Rect;
PLcom/android/server/wm/AppWindowToken;->getOrientation(I)I
PLcom/android/server/wm/AppWindowToken;->getRemoteAnimationDefinition()Landroid/view/RemoteAnimationDefinition;
PLcom/android/server/wm/AppWindowToken;->getStartingWindowType(ZZZZZZLandroid/app/ActivityManager$TaskSnapshot;)I
PLcom/android/server/wm/AppWindowToken;->getTopFullscreenWindow()Lcom/android/server/wm/WindowState;
PLcom/android/server/wm/AppWindowToken;->getTransit()I
PLcom/android/server/wm/AppWindowToken;->getTransitFlags()I
PLcom/android/server/wm/AppWindowToken;->hasWindowsAlive()Z
PLcom/android/server/wm/AppWindowToken;->isClosingOrEnteringPip()Z
PLcom/android/server/wm/AppWindowToken;->isFirstChildWindowGreaterThanSecond(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)Z
PLcom/android/server/wm/AppWindowToken;->isLastWindow(Lcom/android/server/wm/WindowState;)Z
PLcom/android/server/wm/AppWindowToken;->isSurfaceShowing()Z
PLcom/android/server/wm/AppWindowToken;->lambda$layoutLetterbox$2$AppWindowToken()Landroid/view/SurfaceControl$Builder;
PLcom/android/server/wm/AppWindowToken;->lambda$removeStartingWindow$3(Lcom/android/server/policy/WindowManagerPolicy$StartingSurface;)V
PLcom/android/server/wm/AppWindowToken;->loadAnimation(Landroid/view/WindowManager$LayoutParams;IZZ)Landroid/view/animation/Animation;
PLcom/android/server/wm/AppWindowToken;->notifyAppResumed(Z)V
PLcom/android/server/wm/AppWindowToken;->onAnimationLeashCreated(Landroid/view/SurfaceControl$Transaction;Landroid/view/SurfaceControl;)V
PLcom/android/server/wm/AppWindowToken;->onAnimationLeashDestroyed(Landroid/view/SurfaceControl$Transaction;)V
PLcom/android/server/wm/AppWindowToken;->onAppFreezeTimeout()V
PLcom/android/server/wm/AppWindowToken;->onRemovedFromDisplay()V
PLcom/android/server/wm/AppWindowToken;->postWindowRemoveStartingWindowCleanup(Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/AppWindowToken;->registerRemoteAnimations(Landroid/view/RemoteAnimationDefinition;)V
PLcom/android/server/wm/AppWindowToken;->removeChild(Lcom/android/server/wm/WindowContainer;)V
PLcom/android/server/wm/AppWindowToken;->removeChild(Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/AppWindowToken;->removeIfPossible()V
PLcom/android/server/wm/AppWindowToken;->removeImmediately()V
PLcom/android/server/wm/AppWindowToken;->scheduleAddStartingWindow()V
PLcom/android/server/wm/AppWindowToken;->setCanTurnScreenOn(Z)V
PLcom/android/server/wm/AppWindowToken;->setDisablePreviewScreenshots(Z)V
PLcom/android/server/wm/AppWindowToken;->setFillsParent(Z)V
PLcom/android/server/wm/AppWindowToken;->setLayer(Landroid/view/SurfaceControl$Transaction;I)V
PLcom/android/server/wm/AppWindowToken;->shouldDeferAnimationFinish(Ljava/lang/Runnable;)Z
PLcom/android/server/wm/AppWindowToken;->shouldFreezeBounds()Z
PLcom/android/server/wm/AppWindowToken;->shouldUseAppThemeSnapshot()Z
PLcom/android/server/wm/AppWindowToken;->startFreezingScreen()V
PLcom/android/server/wm/AppWindowToken;->startRelaunching()V
PLcom/android/server/wm/AppWindowToken;->transferStartingWindow(Landroid/os/IBinder;)Z
PLcom/android/server/wm/AppWindowToken;->unfreezeBounds()V
PLcom/android/server/wm/BarController$1;->run()V
PLcom/android/server/wm/BarController;->adjustSystemUiVisibilityLw(II)V
PLcom/android/server/wm/BarController;->checkShowTransientBarLw()Z
PLcom/android/server/wm/BarController;->showTransient()V
PLcom/android/server/wm/BlackFrame$BlackSurface;-><init>(Lcom/android/server/wm/BlackFrame;Landroid/view/SurfaceControl$Transaction;IIIIILcom/android/server/wm/DisplayContent;)V
PLcom/android/server/wm/BlackFrame$BlackSurface;->setMatrix(Landroid/view/SurfaceControl$Transaction;Landroid/graphics/Matrix;)V
PLcom/android/server/wm/BlackFrame;-><init>(Landroid/view/SurfaceControl$Transaction;Landroid/graphics/Rect;Landroid/graphics/Rect;ILcom/android/server/wm/DisplayContent;Z)V
PLcom/android/server/wm/BlackFrame;->kill()V
PLcom/android/server/wm/BlackFrame;->setAlpha(Landroid/view/SurfaceControl$Transaction;F)V
PLcom/android/server/wm/BlackFrame;->setMatrix(Landroid/view/SurfaceControl$Transaction;Landroid/graphics/Matrix;)V
PLcom/android/server/wm/BoundsAnimationController$AppTransitionNotifier;->run()V
PLcom/android/server/wm/BoundsAnimationController$BoundsAnimator;-><init>(Lcom/android/server/wm/BoundsAnimationController;Lcom/android/server/wm/BoundsAnimationTarget;Landroid/graphics/Rect;Landroid/graphics/Rect;IIZZLandroid/graphics/Rect;)V
PLcom/android/server/wm/BoundsAnimationController$BoundsAnimator;->getAnimationHandler()Landroid/animation/AnimationHandler;
PLcom/android/server/wm/BoundsAnimationController$BoundsAnimator;->onAnimationCancel(Landroid/animation/Animator;)V
PLcom/android/server/wm/BoundsAnimationController$BoundsAnimator;->onAnimationEnd(Landroid/animation/Animator;)V
PLcom/android/server/wm/BoundsAnimationController$BoundsAnimator;->onAnimationStart(Landroid/animation/Animator;)V
PLcom/android/server/wm/BoundsAnimationController$BoundsAnimator;->onAnimationUpdate(Landroid/animation/ValueAnimator;)V
PLcom/android/server/wm/BoundsAnimationController;->animateBounds(Lcom/android/server/wm/BoundsAnimationTarget;Landroid/graphics/Rect;Landroid/graphics/Rect;IIZZ)V
PLcom/android/server/wm/BoundsAnimationController;->animateBoundsImpl(Lcom/android/server/wm/BoundsAnimationTarget;Landroid/graphics/Rect;Landroid/graphics/Rect;IIZZ)Lcom/android/server/wm/BoundsAnimationController$BoundsAnimator;
PLcom/android/server/wm/BoundsAnimationController;->getHandler()Landroid/os/Handler;
PLcom/android/server/wm/BoundsAnimationController;->onAllWindowsDrawn()V
PLcom/android/server/wm/BoundsAnimationController;->updateBooster()V
PLcom/android/server/wm/ClientLifecycleManager;->scheduleTransaction(Landroid/app/IApplicationThread;Landroid/os/IBinder;Landroid/app/servertransaction/ClientTransactionItem;)V
PLcom/android/server/wm/CompatModePackages;->handlePackageAddedLocked(Ljava/lang/String;Z)V
PLcom/android/server/wm/ConfigurationContainer;->getPosition(Landroid/graphics/Point;)V
PLcom/android/server/wm/ConfigurationContainer;->hasOverrideBounds()Z
PLcom/android/server/wm/ConfigurationContainer;->unregisterConfigurationChangeListener(Lcom/android/server/wm/ConfigurationContainerListener;)V
PLcom/android/server/wm/ConfigurationContainer;->writeToProto(Landroid/util/proto/ProtoOutputStream;JI)V
PLcom/android/server/wm/Dimmer$AlphaAnimationSpec;->apply(Landroid/view/SurfaceControl$Transaction;Landroid/view/SurfaceControl;J)V
PLcom/android/server/wm/Dimmer$AlphaAnimationSpec;->getDuration()J
PLcom/android/server/wm/Dimmer$DimAnimatable;->getAnimationLeashParent()Landroid/view/SurfaceControl;
PLcom/android/server/wm/Dimmer$DimAnimatable;->getParentSurfaceControl()Landroid/view/SurfaceControl;
PLcom/android/server/wm/Dimmer$DimAnimatable;->getPendingTransaction()Landroid/view/SurfaceControl$Transaction;
PLcom/android/server/wm/Dimmer$DimAnimatable;->getSurfaceControl()Landroid/view/SurfaceControl;
PLcom/android/server/wm/Dimmer$DimAnimatable;->getSurfaceHeight()I
PLcom/android/server/wm/Dimmer$DimAnimatable;->getSurfaceWidth()I
PLcom/android/server/wm/Dimmer$DimAnimatable;->makeAnimationLeash()Landroid/view/SurfaceControl$Builder;
PLcom/android/server/wm/Dimmer$DimAnimatable;->onAnimationLeashCreated(Landroid/view/SurfaceControl$Transaction;Landroid/view/SurfaceControl;)V
PLcom/android/server/wm/Dimmer$DimAnimatable;->onAnimationLeashDestroyed(Landroid/view/SurfaceControl$Transaction;)V
PLcom/android/server/wm/Dimmer$DimState;-><init>(Lcom/android/server/wm/Dimmer;Landroid/view/SurfaceControl;)V
PLcom/android/server/wm/Dimmer$DimState;->lambda$new$0$Dimmer$DimState(Lcom/android/server/wm/Dimmer$DimAnimatable;)V
PLcom/android/server/wm/Dimmer;->dim(Landroid/view/SurfaceControl$Transaction;Lcom/android/server/wm/WindowContainer;IF)V
PLcom/android/server/wm/Dimmer;->dimBelow(Landroid/view/SurfaceControl$Transaction;Lcom/android/server/wm/WindowContainer;F)V
PLcom/android/server/wm/Dimmer;->dontAnimateExit()V
PLcom/android/server/wm/Dimmer;->getDimState(Lcom/android/server/wm/WindowContainer;)Lcom/android/server/wm/Dimmer$DimState;
PLcom/android/server/wm/Dimmer;->makeDimLayer()Landroid/view/SurfaceControl;
PLcom/android/server/wm/DisplayContent$DisplayChildWindowContainer;->fillsParent()Z
PLcom/android/server/wm/DisplayContent$TaskStackContainers;->getAppAnimationLayer(I)Landroid/view/SurfaceControl;
PLcom/android/server/wm/DisplayContent$TaskStackContainers;->getOrientation()I
PLcom/android/server/wm/DisplayContent$TaskStackContainers;->removeChild(Lcom/android/server/wm/WindowContainer;)V
PLcom/android/server/wm/DisplayContent$TaskStackContainers;->removeStackReferenceIfNeeded(Lcom/android/server/wm/TaskStack;)V
PLcom/android/server/wm/DisplayContent;->applyRotationLocked(II)V
PLcom/android/server/wm/DisplayContent;->assignStackOrdering()V
PLcom/android/server/wm/DisplayContent;->canAddToastWindowForUid(I)Z
PLcom/android/server/wm/DisplayContent;->checkWaitingForWindows()Z
PLcom/android/server/wm/DisplayContent;->computeImeParent()Landroid/view/SurfaceControl;
PLcom/android/server/wm/DisplayContent;->continueUpdateImeTarget()V
PLcom/android/server/wm/DisplayContent;->convertCropForSurfaceFlinger(Landroid/graphics/Rect;III)V
PLcom/android/server/wm/DisplayContent;->deferUpdateImeTarget()V
PLcom/android/server/wm/DisplayContent;->findTaskForResizePoint(II)Lcom/android/server/wm/Task;
PLcom/android/server/wm/DisplayContent;->forAllImeWindows(Lcom/android/internal/util/ToBooleanFunction;Z)Z
PLcom/android/server/wm/DisplayContent;->getLastOrientation()I
PLcom/android/server/wm/DisplayContent;->getTouchableWinAtPointLocked(FF)Lcom/android/server/wm/WindowState;
PLcom/android/server/wm/DisplayContent;->getVisibleTasks()Ljava/util/ArrayList;
PLcom/android/server/wm/DisplayContent;->hasSecureWindowOnScreen()Z
PLcom/android/server/wm/DisplayContent;->hasSplitScreenPrimaryStack()Z
PLcom/android/server/wm/DisplayContent;->isPrivate()Z
PLcom/android/server/wm/DisplayContent;->lambda$applyRotationLocked$10$DisplayContent(IIZLcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/DisplayContent;->lambda$applyRotationLocked$11$DisplayContent(ZLcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/DisplayContent;->lambda$checkWaitingForWindows$19$DisplayContent(Lcom/android/server/wm/WindowState;)Z
PLcom/android/server/wm/DisplayContent;->lambda$checkWaitingForWindows$19(Lcom/android/server/wm/DisplayContent;Lcom/android/server/wm/WindowState;)Z
PLcom/android/server/wm/DisplayContent;->lambda$getNeedsMenu$16$DisplayContent(Lcom/android/server/wm/WindowState;Lcom/android/server/policy/WindowManagerPolicy$WindowState;Lcom/android/server/wm/WindowState;)Z
PLcom/android/server/wm/DisplayContent;->lambda$getTouchableWinAtPointLocked$12(Lcom/android/server/wm/DisplayContent;IILcom/android/server/wm/WindowState;)Z
PLcom/android/server/wm/DisplayContent;->lambda$new$6$DisplayContent(Lcom/android/server/wm/WindowState;)Z
PLcom/android/server/wm/DisplayContent;->lambda$onWindowFreezeTimeout$22$DisplayContent(Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/DisplayContent;->lambda$updateSystemUiVisibility$21(IILcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/DisplayContent;->lambda$waitForAllWindowsDrawn$23$DisplayContent(Lcom/android/server/policy/WindowManagerPolicy;Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/DisplayContent;->lambda$waitForAllWindowsDrawn$23(Lcom/android/server/wm/DisplayContent;Lcom/android/server/policy/WindowManagerPolicy;Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/DisplayContent;->makeOverlay()Landroid/view/SurfaceControl$Builder;
PLcom/android/server/wm/DisplayContent;->onDescendantOrientationChanged(Landroid/os/IBinder;Lcom/android/server/wm/ConfigurationContainer;)Z
PLcom/android/server/wm/DisplayContent;->onStackWindowingModeChanged(Lcom/android/server/wm/TaskStack;)V
PLcom/android/server/wm/DisplayContent;->onWindowFreezeTimeout()V
PLcom/android/server/wm/DisplayContent;->pauseRotationLocked()V
PLcom/android/server/wm/DisplayContent;->reevaluateStatusBarVisibility()V
PLcom/android/server/wm/DisplayContent;->removeAppToken(Landroid/os/IBinder;)V
PLcom/android/server/wm/DisplayContent;->removeChild(Lcom/android/server/wm/DisplayContent$DisplayChildWindowContainer;)V
PLcom/android/server/wm/DisplayContent;->removeChild(Lcom/android/server/wm/WindowContainer;)V
PLcom/android/server/wm/DisplayContent;->removeIfPossible()V
PLcom/android/server/wm/DisplayContent;->removeImmediately()V
PLcom/android/server/wm/DisplayContent;->removeWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/WindowToken;
PLcom/android/server/wm/DisplayContent;->reparentToOverlay(Landroid/view/SurfaceControl$Transaction;Landroid/view/SurfaceControl;)V
PLcom/android/server/wm/DisplayContent;->resumeRotationLocked()V
PLcom/android/server/wm/DisplayContent;->rotationNeedsUpdate()Z
PLcom/android/server/wm/DisplayContent;->screenshotDisplayLocked(Landroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;
PLcom/android/server/wm/DisplayContent;->setInputMethodWindowLocked(Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/DisplayContent;->startKeyguardExitOnNonAppWindows(ZZ)V
PLcom/android/server/wm/DisplayContent;->statusBarVisibilityChanged(I)V
PLcom/android/server/wm/DisplayContent;->supportsSystemDecorations()Z
PLcom/android/server/wm/DisplayContent;->taskForTapOutside(II)I
PLcom/android/server/wm/DisplayContent;->unregisterPointerEventListener(Landroid/view/WindowManagerPolicyConstants$PointerEventListener;)V
PLcom/android/server/wm/DisplayContent;->updateRotationAndSendNewConfigIfNeeded()Z
PLcom/android/server/wm/DisplayContent;->updateSystemUiVisibility(II)V
PLcom/android/server/wm/DisplayContent;->waitForAllWindowsDrawn()V
PLcom/android/server/wm/DisplayPolicy$2;->onDebug()V
PLcom/android/server/wm/DisplayPolicy$2;->onDown()V
PLcom/android/server/wm/DisplayPolicy$2;->onFling(I)V
PLcom/android/server/wm/DisplayPolicy$2;->onSwipeFromBottom()V
PLcom/android/server/wm/DisplayPolicy$2;->onSwipeFromLeft()V
PLcom/android/server/wm/DisplayPolicy$2;->onSwipeFromRight()V
PLcom/android/server/wm/DisplayPolicy$2;->onSwipeFromTop()V
PLcom/android/server/wm/DisplayPolicy$2;->onUpOrCancel()V
PLcom/android/server/wm/DisplayPolicy$4;->run()V
PLcom/android/server/wm/DisplayPolicy;->adjustSystemUiVisibilityLw(I)I
PLcom/android/server/wm/DisplayPolicy;->clearClearableFlagsLw()V
PLcom/android/server/wm/DisplayPolicy;->finishKeyguardDrawn()Z
PLcom/android/server/wm/DisplayPolicy;->finishScreenTurningOn()Z
PLcom/android/server/wm/DisplayPolicy;->finishWindowsDrawn()Z
PLcom/android/server/wm/DisplayPolicy;->getDockMode()I
PLcom/android/server/wm/DisplayPolicy;->getLidState()I
PLcom/android/server/wm/DisplayPolicy;->getNavBarPosition()I
PLcom/android/server/wm/DisplayPolicy;->getScreenOnListener()Lcom/android/server/policy/WindowManagerPolicy$ScreenOnListener;
PLcom/android/server/wm/DisplayPolicy;->isCarDockEnablesAccelerometer()Z
PLcom/android/server/wm/DisplayPolicy;->isDeskDockEnablesAccelerometer()Z
PLcom/android/server/wm/DisplayPolicy;->isHdmiPlugged()Z
PLcom/android/server/wm/DisplayPolicy;->isPersistentVrModeEnabled()Z
PLcom/android/server/wm/DisplayPolicy;->isScreenOnFully()Z
PLcom/android/server/wm/DisplayPolicy;->lambda$notifyDisplayReady$4$DisplayPolicy()V
PLcom/android/server/wm/DisplayPolicy;->notifyDisplayReady()V
PLcom/android/server/wm/DisplayPolicy;->offsetInputMethodWindowLw(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/DisplayFrames;)V
PLcom/android/server/wm/DisplayPolicy;->onDisplayRemoved()V
PLcom/android/server/wm/DisplayPolicy;->onPowerKeyDown(Z)V
PLcom/android/server/wm/DisplayPolicy;->removeWindowLw(Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/DisplayPolicy;->requestTransientBars(Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/DisplayPolicy;->screenTurnedOff()V
PLcom/android/server/wm/DisplayPolicy;->selectAnimationLw(Lcom/android/server/wm/WindowState;I)I
PLcom/android/server/wm/DisplayPolicy;->setAttachedWindowFrames(Lcom/android/server/wm/WindowState;IILcom/android/server/wm/WindowState;ZLandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Lcom/android/server/wm/DisplayFrames;)V
PLcom/android/server/wm/DisplayPolicy;->shouldRotateSeamlessly(Lcom/android/server/wm/DisplayRotation;II)Z
PLcom/android/server/wm/DisplayPolicy;->takeScreenshot(I)V
PLcom/android/server/wm/DisplayPolicy;->validateRotationAnimationLw(IIZ)Z
PLcom/android/server/wm/DisplayRotation$OrientationListener$UpdateRunnable;->run()V
PLcom/android/server/wm/DisplayRotation$OrientationListener;->disable()V
PLcom/android/server/wm/DisplayRotation$OrientationListener;->enable(Z)V
PLcom/android/server/wm/DisplayRotation$OrientationListener;->onProposedRotationChanged(I)V
PLcom/android/server/wm/DisplayRotation;->freezeRotation(I)V
PLcom/android/server/wm/DisplayRotation;->getOrientationListener()Lcom/android/server/policy/WindowOrientationListener;
PLcom/android/server/wm/DisplayRotation;->isRotationChoicePossible(I)Z
PLcom/android/server/wm/DisplayRotation;->isValidRotationChoice(I)Z
PLcom/android/server/wm/DisplayRotation;->needSensorRunning()Z
PLcom/android/server/wm/DisplayRotation;->rotationForOrientation(II)I
PLcom/android/server/wm/DisplayRotation;->setRotation(I)V
PLcom/android/server/wm/DisplayRotation;->setUserRotation(II)V
PLcom/android/server/wm/DisplayRotation;->thawRotation()V
PLcom/android/server/wm/DockedStackDividerController;->getHomeStackBoundsInDockedMode(Landroid/content/res/Configuration;ILandroid/graphics/Rect;)V
PLcom/android/server/wm/DockedStackDividerController;->getImeHeightAdjustedFor()I
PLcom/android/server/wm/DockedStackDividerController;->isImeHideRequested()Z
PLcom/android/server/wm/DockedStackDividerController;->resetImeHideRequested()V
PLcom/android/server/wm/DragDropController$DragHandler;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/wm/DragDropController;->dragRecipientEntered(Landroid/view/IWindow;)V
PLcom/android/server/wm/DragDropController;->handleMotionEvent(ZFF)V
PLcom/android/server/wm/DragDropController;->onDragStateClosedLocked(Lcom/android/server/wm/DragState;)V
PLcom/android/server/wm/DragDropController;->performDrag(Landroid/view/SurfaceSession;IILandroid/view/IWindow;ILandroid/view/SurfaceControl;IFFFFLandroid/content/ClipData;)Landroid/os/IBinder;
PLcom/android/server/wm/DragDropController;->reportDropResult(Landroid/view/IWindow;Z)V
PLcom/android/server/wm/DragDropController;->sendDragStartedIfNeededLocked(Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/DragDropController;->sendHandlerMessage(ILjava/lang/Object;)V
PLcom/android/server/wm/DragDropController;->sendTimeoutMessage(ILjava/lang/Object;)V
PLcom/android/server/wm/DragDropController;->showInputSurface(Landroid/view/SurfaceControl$Transaction;I)V
PLcom/android/server/wm/DragInputEventReceiver;->onInputEvent(Landroid/view/InputEvent;)V
PLcom/android/server/wm/DragState$InputInterceptor;-><init>(Lcom/android/server/wm/DragState;Landroid/view/Display;)V
PLcom/android/server/wm/DragState$InputInterceptor;->tearDown()V
PLcom/android/server/wm/DragState;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/DragDropController;Landroid/os/IBinder;Landroid/view/SurfaceControl;ILandroid/os/IBinder;)V
PLcom/android/server/wm/DragState;->broadcastDragStartedLocked(FF)V
PLcom/android/server/wm/DragState;->closeLocked()V
PLcom/android/server/wm/DragState;->endDragLocked()V
PLcom/android/server/wm/DragState;->getDragLayerLocked()I
PLcom/android/server/wm/DragState;->getInputWindowHandle()Landroid/view/InputWindowHandle;
PLcom/android/server/wm/DragState;->isClosing()Z
PLcom/android/server/wm/DragState;->isInProgress()Z
PLcom/android/server/wm/DragState;->isValidDropTarget(Lcom/android/server/wm/WindowState;)Z
PLcom/android/server/wm/DragState;->notifyDropLocked(FF)V
PLcom/android/server/wm/DragState;->notifyLocationLocked(FF)V
PLcom/android/server/wm/DragState;->notifyMoveLocked(FF)V
PLcom/android/server/wm/DragState;->overridePointerIconLocked(I)V
PLcom/android/server/wm/DragState;->register(Landroid/view/Display;)V
PLcom/android/server/wm/DragState;->sendDragStartedIfNeededLocked(Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/DragState;->sendDragStartedLocked(Lcom/android/server/wm/WindowState;FFLandroid/content/ClipDescription;)V
PLcom/android/server/wm/DragState;->showInputSurface(Landroid/view/SurfaceControl$Transaction;I)V
PLcom/android/server/wm/ImmersiveModeConfirmation$H;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/wm/ImmersiveModeConfirmation;->confirmCurrentPrompt()V
PLcom/android/server/wm/ImmersiveModeConfirmation;->immersiveModeChangedLw(Ljava/lang/String;ZZZ)V
PLcom/android/server/wm/ImmersiveModeConfirmation;->onPowerKeyDown(ZJZZ)Z
PLcom/android/server/wm/InputConsumerImpl;->binderDied()V
PLcom/android/server/wm/InputConsumerImpl;->disposeChannelsLw()V
PLcom/android/server/wm/InputConsumerImpl;->layout(Landroid/view/SurfaceControl$Transaction;Landroid/graphics/Rect;)V
PLcom/android/server/wm/InputConsumerImpl;->show(Landroid/view/SurfaceControl$Transaction;Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/InputConsumerImpl;->unlinkFromDeathRecipient()V
PLcom/android/server/wm/InputManagerCallback;->dispatchUnhandledKey(Landroid/os/IBinder;Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;
PLcom/android/server/wm/InputManagerCallback;->interceptKeyBeforeDispatching(Landroid/os/IBinder;Landroid/view/KeyEvent;I)J
PLcom/android/server/wm/InputManagerCallback;->interceptKeyBeforeQueueing(Landroid/view/KeyEvent;I)I
PLcom/android/server/wm/InputManagerCallback;->interceptMotionBeforeQueueingNonInteractive(IJI)I
PLcom/android/server/wm/InputManagerCallback;->interceptMotionBeforeQueueingNonInteractive(JI)I
PLcom/android/server/wm/InputMonitor;->setInputFocusLw(Lcom/android/server/wm/WindowState;Z)V
PLcom/android/server/wm/InsetsStateController;->onImeTargetChanged(Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/KeyguardController$KeyguardDisplayState;->onRemoved()V
PLcom/android/server/wm/KeyguardController$KeyguardDisplayState;->releaseSleepToken()V
PLcom/android/server/wm/KeyguardController;->canDismissKeyguard()Z
PLcom/android/server/wm/KeyguardController;->canShowWhileOccluded(ZZ)Z
PLcom/android/server/wm/KeyguardController;->handleDismissKeyguard()V
PLcom/android/server/wm/KeyguardController;->handleOccludedChanged()V
PLcom/android/server/wm/KeyguardController;->keyguardGoingAway(I)V
PLcom/android/server/wm/KeyguardController;->onDisplayRemoved(I)V
PLcom/android/server/wm/KeyguardController;->resolveOccludeTransit()I
PLcom/android/server/wm/KeyguardDisableHandler$2;->dpmRequiresPassword(I)Z
PLcom/android/server/wm/KeyguardDisableHandler$2;->enableKeyguard(Z)V
PLcom/android/server/wm/KeyguardDisableHandler$2;->isKeyguardSecure(I)Z
PLcom/android/server/wm/KeyguardDisableHandler;->shouldKeyguardBeEnabled(I)Z
PLcom/android/server/wm/KeyguardDisableHandler;->updateKeyguardEnabled(I)V
PLcom/android/server/wm/LaunchObserverRegistryImpl;->onActivityLaunchCancelled([B)V
PLcom/android/server/wm/LaunchObserverRegistryImpl;->onActivityLaunchFinished([B)V
PLcom/android/server/wm/LaunchObserverRegistryImpl;->onActivityLaunched([BI)V
PLcom/android/server/wm/LaunchObserverRegistryImpl;->onIntentFailed()V
PLcom/android/server/wm/LaunchObserverRegistryImpl;->onIntentStarted(Landroid/content/Intent;)V
PLcom/android/server/wm/LaunchParamsPersister$CleanUpComponentQueueItem;->process()V
PLcom/android/server/wm/LaunchParamsPersister$LaunchParamsWriteQueueItem;->matches(Lcom/android/server/wm/LaunchParamsPersister$LaunchParamsWriteQueueItem;)Z
PLcom/android/server/wm/LaunchParamsPersister$LaunchParamsWriteQueueItem;->matches(Lcom/android/server/wm/PersisterQueue$WriteQueueItem;)Z
PLcom/android/server/wm/LaunchParamsPersister$LaunchParamsWriteQueueItem;->process()V
PLcom/android/server/wm/LaunchParamsPersister$LaunchParamsWriteQueueItem;->saveParamsToXml()Ljava/io/StringWriter;
PLcom/android/server/wm/LaunchParamsPersister$PackageListObserver;->onPackageAdded(Ljava/lang/String;)V
PLcom/android/server/wm/LaunchParamsPersister$PersistableLaunchParams;->restoreFromXml(Lorg/xmlpull/v1/XmlPullParser;)V
PLcom/android/server/wm/LaunchParamsPersister$PersistableLaunchParams;->saveToXml(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/wm/LaunchParamsPersister;->getParamFile(Ljava/io/File;Landroid/content/ComponentName;)Ljava/io/File;
PLcom/android/server/wm/LaunchParamsPersister;->loadLaunchParams(I)V
PLcom/android/server/wm/LaunchParamsPersister;->onCleanupUser(I)V
PLcom/android/server/wm/LaunchParamsPersister;->onUnlockUser(I)V
PLcom/android/server/wm/LaunchParamsPersister;->saveTask(Lcom/android/server/wm/TaskRecord;)V
PLcom/android/server/wm/LaunchParamsPersister;->saveTaskToLaunchParam(Lcom/android/server/wm/TaskRecord;Lcom/android/server/wm/LaunchParamsPersister$PersistableLaunchParams;)Z
PLcom/android/server/wm/Letterbox$InputInterceptor;-><init>(Ljava/lang/String;Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/Letterbox$InputInterceptor;->dispose()V
PLcom/android/server/wm/Letterbox$InputInterceptor;->updateTouchableRegion(Landroid/graphics/Rect;)V
PLcom/android/server/wm/Letterbox$LetterboxSurface;->applySurfaceChanges(Landroid/view/SurfaceControl$Transaction;)V
PLcom/android/server/wm/Letterbox$LetterboxSurface;->attachInput(Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/Letterbox$LetterboxSurface;->createSurface()V
PLcom/android/server/wm/Letterbox$LetterboxSurface;->getHeight()I
PLcom/android/server/wm/Letterbox$LetterboxSurface;->getWidth()I
PLcom/android/server/wm/Letterbox$LetterboxSurface;->isOverlappingWith(Landroid/graphics/Rect;)Z
PLcom/android/server/wm/Letterbox$LetterboxSurface;->layout(IIIILandroid/graphics/Point;)V
PLcom/android/server/wm/Letterbox$LetterboxSurface;->needsApplySurfaceChanges()Z
PLcom/android/server/wm/Letterbox$LetterboxSurface;->remove()V
PLcom/android/server/wm/Letterbox;-><init>(Ljava/util/function/Supplier;)V
PLcom/android/server/wm/Letterbox;->applySurfaceChanges(Landroid/view/SurfaceControl$Transaction;)V
PLcom/android/server/wm/Letterbox;->attachInput(Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/Letterbox;->destroy()V
PLcom/android/server/wm/Letterbox;->getInsets()Landroid/graphics/Rect;
PLcom/android/server/wm/Letterbox;->hide()V
PLcom/android/server/wm/Letterbox;->isOverlappingWith(Landroid/graphics/Rect;)Z
PLcom/android/server/wm/Letterbox;->layout(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Point;)V
PLcom/android/server/wm/Letterbox;->needsApplySurfaceChanges()Z
PLcom/android/server/wm/LocalAnimationAdapter$AnimationSpec;->canSkipFirstFrame()Z
PLcom/android/server/wm/LocalAnimationAdapter$AnimationSpec;->getBackgroundColor()I
PLcom/android/server/wm/LocalAnimationAdapter$AnimationSpec;->needsEarlyWakeup()Z
PLcom/android/server/wm/LocalAnimationAdapter;->getBackgroundColor()I
PLcom/android/server/wm/LocalAnimationAdapter;->getDurationHint()J
PLcom/android/server/wm/LocalAnimationAdapter;->getShowWallpaper()Z
PLcom/android/server/wm/LocalAnimationAdapter;->getStatusBarTransitionsStartTime()J
PLcom/android/server/wm/LocalAnimationAdapter;->lambda$startAnimation$0$LocalAnimationAdapter(Lcom/android/server/wm/SurfaceAnimator$OnAnimationFinishedCallback;)V
PLcom/android/server/wm/LocalAnimationAdapter;->onAnimationCancelled(Landroid/view/SurfaceControl;)V
PLcom/android/server/wm/LocalAnimationAdapter;->startAnimation(Landroid/view/SurfaceControl;Landroid/view/SurfaceControl$Transaction;Lcom/android/server/wm/SurfaceAnimator$OnAnimationFinishedCallback;)V
PLcom/android/server/wm/LockTaskController;->activityBlockedFromFinish(Lcom/android/server/wm/ActivityRecord;)Z
PLcom/android/server/wm/LockTaskController;->canMoveTaskToBack(Lcom/android/server/wm/TaskRecord;)Z
PLcom/android/server/wm/LockTaskController;->clearLockedTask(Lcom/android/server/wm/TaskRecord;)V
PLcom/android/server/wm/LockTaskController;->getRootTask()Lcom/android/server/wm/TaskRecord;
PLcom/android/server/wm/MirrorActiveUids;->getUidState(I)I
PLcom/android/server/wm/NavigationBarExperiments;->getNavigationBarFrameWidth()I
PLcom/android/server/wm/NavigationBarExperiments;->getNavigationBarWidth()I
PLcom/android/server/wm/PendingRemoteAnimationRegistry$Entry;->lambda$new$0$PendingRemoteAnimationRegistry$Entry(Ljava/lang/String;)V
PLcom/android/server/wm/PendingRemoteAnimationRegistry$Entry;->lambda$new$0(Lcom/android/server/wm/PendingRemoteAnimationRegistry$Entry;Ljava/lang/String;)V
PLcom/android/server/wm/PendingRemoteAnimationRegistry;->addPendingAnimation(Ljava/lang/String;Landroid/view/RemoteAnimationAdapter;)V
PLcom/android/server/wm/PersisterQueue;->addItem(Lcom/android/server/wm/PersisterQueue$WriteQueueItem;Z)V
PLcom/android/server/wm/PersisterQueue;->findLastItem(Ljava/util/function/Predicate;Ljava/lang/Class;)Lcom/android/server/wm/PersisterQueue$WriteQueueItem;
PLcom/android/server/wm/PersisterQueue;->removeItems(Ljava/util/function/Predicate;Ljava/lang/Class;)V
PLcom/android/server/wm/PersisterQueue;->updateLastOrAddItem(Lcom/android/server/wm/PersisterQueue$WriteQueueItem;Z)V
PLcom/android/server/wm/PersisterQueue;->yieldIfQueueTooDeep()V
PLcom/android/server/wm/PinnedStackController$PinnedStackControllerCallback;->lambda$setMinEdgeSize$1$PinnedStackController$PinnedStackControllerCallback(I)V
PLcom/android/server/wm/PinnedStackController$PinnedStackControllerCallback;->setMinEdgeSize(I)V
PLcom/android/server/wm/PinnedStackController;->getAspectRatio()F
PLcom/android/server/wm/PinnedStackController;->getDefaultOrLastSavedBounds()Landroid/graphics/Rect;
PLcom/android/server/wm/PinnedStackController;->onTaskStackBoundsChanged(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z
PLcom/android/server/wm/PinnedStackController;->saveReentrySnapFraction(Lcom/android/server/wm/AppWindowToken;Landroid/graphics/Rect;)V
PLcom/android/server/wm/PinnedStackController;->setActions(Ljava/util/List;)V
PLcom/android/server/wm/PinnedStackController;->setAdjustedForShelf(ZI)V
PLcom/android/server/wm/PinnedStackController;->setAspectRatio(F)V
PLcom/android/server/wm/PointerEventDispatcher;->onInputEvent(Landroid/view/InputEvent;)V
PLcom/android/server/wm/PointerEventDispatcher;->unregisterInputEventListener(Landroid/view/WindowManagerPolicyConstants$PointerEventListener;)V
PLcom/android/server/wm/RecentTasks;->cleanupDisabledPackageTasksLocked(Ljava/lang/String;Ljava/util/Set;I)V
PLcom/android/server/wm/RecentTasks;->cleanupLocked(I)V
PLcom/android/server/wm/RecentTasks;->createRecentTaskInfo(Lcom/android/server/wm/TaskRecord;)Landroid/app/ActivityManager$RecentTaskInfo;
PLcom/android/server/wm/RecentTasks;->getAppTasksList(ILjava/lang/String;)Ljava/util/ArrayList;
PLcom/android/server/wm/RecentTasks;->getProfileIds(I)Ljava/util/Set;
PLcom/android/server/wm/RecentTasks;->getRecentTaskIds()Landroid/util/SparseBooleanArray;
PLcom/android/server/wm/RecentTasks;->getRecentTasks(IIZZII)Landroid/content/pm/ParceledListSlice;
PLcom/android/server/wm/RecentTasks;->getRecentTasksImpl(IIZZII)Ljava/util/ArrayList;
PLcom/android/server/wm/RecentTasks;->getRecentsComponent()Landroid/content/ComponentName;
PLcom/android/server/wm/RecentTasks;->getRecentsComponentUid()I
PLcom/android/server/wm/RecentTasks;->getTaskDescriptionIcon(Ljava/lang/String;)Landroid/graphics/Bitmap;
PLcom/android/server/wm/RecentTasks;->getTaskIdsForUser(I)Landroid/util/SparseBooleanArray;
PLcom/android/server/wm/RecentTasks;->hasCompatibleActivityTypeAndWindowingMode(Lcom/android/server/wm/TaskRecord;Lcom/android/server/wm/TaskRecord;)Z
PLcom/android/server/wm/RecentTasks;->isInVisibleRange(Lcom/android/server/wm/TaskRecord;I)Z
PLcom/android/server/wm/RecentTasks;->isRecentsComponent(Landroid/content/ComponentName;I)Z
PLcom/android/server/wm/RecentTasks;->isTrimmable(Lcom/android/server/wm/TaskRecord;)Z
PLcom/android/server/wm/RecentTasks;->loadUserRecentsLocked(I)V
PLcom/android/server/wm/RecentTasks;->notifyTaskPersisterLocked(Lcom/android/server/wm/TaskRecord;Z)V
PLcom/android/server/wm/RecentTasks;->processNextAffiliateChainLocked(I)I
PLcom/android/server/wm/RecentTasks;->remove(Lcom/android/server/wm/TaskRecord;)V
PLcom/android/server/wm/RecentTasks;->removeTasksForUserLocked(I)V
PLcom/android/server/wm/RecentTasks;->saveImage(Landroid/graphics/Bitmap;Ljava/lang/String;)V
PLcom/android/server/wm/RecentTasks;->syncPersistentTaskIdsLocked()V
PLcom/android/server/wm/RecentTasks;->unloadUserDataFromMemoryLocked(I)V
PLcom/android/server/wm/RecentsAnimation$2;->canHandleReceivedAssistDataLocked()Z
PLcom/android/server/wm/RecentsAnimation$2;->onAssistDataReceivedLocked(Landroid/os/Bundle;II)V
PLcom/android/server/wm/RecentsAnimation;->finishAnimation(I)V
PLcom/android/server/wm/RecentsAnimation;->getTargetActivity(Lcom/android/server/wm/ActivityStack;Landroid/content/ComponentName;)Lcom/android/server/wm/ActivityRecord;
PLcom/android/server/wm/RecentsAnimation;->lambda$finishAnimation$1$RecentsAnimation()V
PLcom/android/server/wm/RecentsAnimation;->lambda$finishAnimation$2$RecentsAnimation(I)V
PLcom/android/server/wm/RecentsAnimation;->lambda$finishAnimation$2(Lcom/android/server/wm/RecentsAnimation;I)V
PLcom/android/server/wm/RecentsAnimation;->lambda$startRecentsActivity$0$RecentsAnimation()V
PLcom/android/server/wm/RecentsAnimation;->notifyAnimationCancelBeforeStart(Landroid/view/IRecentsAnimationRunner;)V
PLcom/android/server/wm/RecentsAnimation;->onAnimationFinished(IZ)V
PLcom/android/server/wm/RecentsAnimation;->onStackOrderChanged(Lcom/android/server/wm/ActivityStack;)V
PLcom/android/server/wm/RecentsAnimation;->requestAssistData(Landroid/content/ComponentName;ILandroid/app/IAssistDataReceiver;)V
PLcom/android/server/wm/RecentsAnimation;->startRecentsActivity(Landroid/content/Intent;Landroid/view/IRecentsAnimationRunner;Landroid/content/ComponentName;ILandroid/app/IAssistDataReceiver;)V
PLcom/android/server/wm/RecentsAnimationController$1;->finish(Z)V
PLcom/android/server/wm/RecentsAnimationController$1;->hideCurrentInputMethod()V
PLcom/android/server/wm/RecentsAnimationController$1;->screenshotTask(I)Landroid/app/ActivityManager$TaskSnapshot;
PLcom/android/server/wm/RecentsAnimationController$1;->setAnimationTargetsBehindSystemBars(Z)V
PLcom/android/server/wm/RecentsAnimationController$1;->setInputConsumerEnabled(Z)V
PLcom/android/server/wm/RecentsAnimationController$1;->setSplitScreenMinimized(Z)V
PLcom/android/server/wm/RecentsAnimationController$TaskAnimationAdapter;-><init>(Lcom/android/server/wm/RecentsAnimationController;Lcom/android/server/wm/Task;Z)V
PLcom/android/server/wm/RecentsAnimationController$TaskAnimationAdapter;->createRemoteAnimationApp()Landroid/view/RemoteAnimationTarget;
PLcom/android/server/wm/RecentsAnimationController$TaskAnimationAdapter;->startAnimation(Landroid/view/SurfaceControl;Landroid/view/SurfaceControl$Transaction;Lcom/android/server/wm/SurfaceAnimator$OnAnimationFinishedCallback;)V
PLcom/android/server/wm/RecentsAnimationController;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/view/IRecentsAnimationRunner;Lcom/android/server/wm/RecentsAnimationController$RecentsAnimationCallbacks;I)V
PLcom/android/server/wm/RecentsAnimationController;->addAnimation(Lcom/android/server/wm/Task;Z)Lcom/android/server/wm/AnimationAdapter;
PLcom/android/server/wm/RecentsAnimationController;->binderDied()V
PLcom/android/server/wm/RecentsAnimationController;->cancelAnimation(ILjava/lang/String;)V
PLcom/android/server/wm/RecentsAnimationController;->cancelAnimation(IZLjava/lang/String;)V
PLcom/android/server/wm/RecentsAnimationController;->cancelAnimationSynchronously(ILjava/lang/String;)V
PLcom/android/server/wm/RecentsAnimationController;->checkAnimationReady(Lcom/android/server/wm/WallpaperController;)V
PLcom/android/server/wm/RecentsAnimationController;->cleanupAnimation(I)V
PLcom/android/server/wm/RecentsAnimationController;->initialize(ILandroid/util/SparseBooleanArray;)V
PLcom/android/server/wm/RecentsAnimationController;->initialize(Lcom/android/server/wm/DisplayContent;ILandroid/util/SparseBooleanArray;)V
PLcom/android/server/wm/RecentsAnimationController;->isAnimatingApp(Lcom/android/server/wm/AppWindowToken;)Z
PLcom/android/server/wm/RecentsAnimationController;->isAnimatingTask(Lcom/android/server/wm/Task;)Z
PLcom/android/server/wm/RecentsAnimationController;->isTargetApp(Lcom/android/server/wm/AppWindowToken;)Z
PLcom/android/server/wm/RecentsAnimationController;->isWallpaperVisible(Lcom/android/server/wm/WindowState;)Z
PLcom/android/server/wm/RecentsAnimationController;->removeAnimation(Lcom/android/server/wm/RecentsAnimationController$TaskAnimationAdapter;)V
PLcom/android/server/wm/RecentsAnimationController;->scheduleFailsafe()V
PLcom/android/server/wm/RecentsAnimationController;->shouldApplyInputConsumer(Lcom/android/server/wm/AppWindowToken;)Z
PLcom/android/server/wm/RecentsAnimationController;->startAnimation()V
PLcom/android/server/wm/RecentsAnimationController;->updateInputConsumerForApp(Landroid/view/InputWindowHandle;Z)Z
PLcom/android/server/wm/RemoteAnimationController$FinishedCallback;->onAnimationFinished()V
PLcom/android/server/wm/RemoteAnimationController$RemoteAnimationAdapterWrapper;-><init>(Lcom/android/server/wm/RemoteAnimationController;Lcom/android/server/wm/RemoteAnimationController$RemoteAnimationRecord;Landroid/graphics/Point;Landroid/graphics/Rect;)V
PLcom/android/server/wm/RemoteAnimationController$RemoteAnimationAdapterWrapper;->getBackgroundColor()I
PLcom/android/server/wm/RemoteAnimationController$RemoteAnimationAdapterWrapper;->getDurationHint()J
PLcom/android/server/wm/RemoteAnimationController$RemoteAnimationAdapterWrapper;->getShowWallpaper()Z
PLcom/android/server/wm/RemoteAnimationController$RemoteAnimationAdapterWrapper;->getStatusBarTransitionsStartTime()J
PLcom/android/server/wm/RemoteAnimationController$RemoteAnimationAdapterWrapper;->onAnimationCancelled(Landroid/view/SurfaceControl;)V
PLcom/android/server/wm/RemoteAnimationController$RemoteAnimationAdapterWrapper;->startAnimation(Landroid/view/SurfaceControl;Landroid/view/SurfaceControl$Transaction;Lcom/android/server/wm/SurfaceAnimator$OnAnimationFinishedCallback;)V
PLcom/android/server/wm/RemoteAnimationController$RemoteAnimationRecord;-><init>(Lcom/android/server/wm/RemoteAnimationController;Lcom/android/server/wm/AppWindowToken;Landroid/graphics/Point;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
PLcom/android/server/wm/RemoteAnimationController$RemoteAnimationRecord;->createRemoteAnimationTarget()Landroid/view/RemoteAnimationTarget;
PLcom/android/server/wm/RemoteAnimationController;->cancelAnimation(Ljava/lang/String;)V
PLcom/android/server/wm/RemoteAnimationController;->createAnimations()[Landroid/view/RemoteAnimationTarget;
PLcom/android/server/wm/RemoteAnimationController;->createRemoteAnimationRecord(Lcom/android/server/wm/AppWindowToken;Landroid/graphics/Point;Landroid/graphics/Rect;Landroid/graphics/Rect;)Lcom/android/server/wm/RemoteAnimationController$RemoteAnimationRecord;
PLcom/android/server/wm/RemoteAnimationController;->goodToGo()V
PLcom/android/server/wm/RemoteAnimationController;->invokeAnimationCancelled()V
PLcom/android/server/wm/RemoteAnimationController;->lambda$goodToGo$1$RemoteAnimationController([Landroid/view/RemoteAnimationTarget;)V
PLcom/android/server/wm/RemoteAnimationController;->lambda$goodToGo$1(Lcom/android/server/wm/RemoteAnimationController;[Landroid/view/RemoteAnimationTarget;)V
PLcom/android/server/wm/RemoteAnimationController;->lambda$new$0$RemoteAnimationController()V
PLcom/android/server/wm/RemoteAnimationController;->onAnimationFinished()V
PLcom/android/server/wm/RootActivityContainer$FindTaskResult;->setTo(Lcom/android/server/wm/RootActivityContainer$FindTaskResult;)V
PLcom/android/server/wm/RootActivityContainer$SleepTokenImpl;->release()V
PLcom/android/server/wm/RootActivityContainer$SleepTokenImpl;->toString()Ljava/lang/String;
PLcom/android/server/wm/RootActivityContainer;->addStartingWindowsForVisibleActivities(Z)V
PLcom/android/server/wm/RootActivityContainer;->anyTaskForId(I)Lcom/android/server/wm/TaskRecord;
PLcom/android/server/wm/RootActivityContainer;->closeSystemDialogs()V
PLcom/android/server/wm/RootActivityContainer;->findActivity(Landroid/content/Intent;Landroid/content/pm/ActivityInfo;Z)Lcom/android/server/wm/ActivityRecord;
PLcom/android/server/wm/RootActivityContainer;->finishTopCrashedActivities(Lcom/android/server/wm/WindowProcessController;Ljava/lang/String;)I
PLcom/android/server/wm/RootActivityContainer;->finishVoiceTask(Landroid/service/voice/IVoiceInteractionSession;)V
PLcom/android/server/wm/RootActivityContainer;->getActivityDisplay(Ljava/lang/String;)Lcom/android/server/wm/ActivityDisplay;
PLcom/android/server/wm/RootActivityContainer;->getAllStackInfos()Ljava/util/ArrayList;
PLcom/android/server/wm/RootActivityContainer;->getLaunchStack(Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;Lcom/android/server/wm/TaskRecord;Z)Lcom/android/server/wm/ActivityStack;
PLcom/android/server/wm/RootActivityContainer;->getNextFocusableStack(Lcom/android/server/wm/ActivityStack;Z)Lcom/android/server/wm/ActivityStack;
PLcom/android/server/wm/RootActivityContainer;->getTopVisibleActivities()Ljava/util/List;
PLcom/android/server/wm/RootActivityContainer;->moveActivityToPinnedStack(Lcom/android/server/wm/ActivityRecord;Landroid/graphics/Rect;FLjava/lang/String;)V
PLcom/android/server/wm/RootActivityContainer;->onDisplayAdded(I)V
PLcom/android/server/wm/RootActivityContainer;->onDisplayRemoved(I)V
PLcom/android/server/wm/RootActivityContainer;->removeChild(Lcom/android/server/wm/ActivityDisplay;)V
PLcom/android/server/wm/RootActivityContainer;->removeSleepToken(Lcom/android/server/wm/RootActivityContainer$SleepTokenImpl;)V
PLcom/android/server/wm/RootActivityContainer;->removeUser(I)V
PLcom/android/server/wm/RootActivityContainer;->resizeStack(Lcom/android/server/wm/ActivityStack;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;ZZZ)V
PLcom/android/server/wm/RootActivityContainer;->resolveActivities(ILandroid/content/Intent;)Ljava/util/List;
PLcom/android/server/wm/RootActivityContainer;->resolveSecondaryHomeActivity(II)Landroid/util/Pair;
PLcom/android/server/wm/RootActivityContainer;->resumeHomeActivity(Lcom/android/server/wm/ActivityRecord;Ljava/lang/String;I)Z
PLcom/android/server/wm/RootActivityContainer;->updateActivityApplicationInfo(Landroid/content/pm/ApplicationInfo;)V
PLcom/android/server/wm/RootWindowContainer;->closeSystemDialogs(Ljava/lang/String;)V
PLcom/android/server/wm/RootWindowContainer;->getCurrentInputMethodWindow()Lcom/android/server/wm/WindowState;
PLcom/android/server/wm/RootWindowContainer;->isAnyNonToastWindowVisibleForUid(I)Z
PLcom/android/server/wm/RootWindowContainer;->lambda$new$0$RootWindowContainer(Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/RootWindowContainer;->lambda$new$0(Lcom/android/server/wm/RootWindowContainer;Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/RootWindowContainer;->updateAppOpsState()V
PLcom/android/server/wm/RootWindowContainer;->updateRotationUnchecked()Z
PLcom/android/server/wm/SafeActivityOptions;->abort(Lcom/android/server/wm/SafeActivityOptions;)V
PLcom/android/server/wm/SafeActivityOptions;->getOptions(Lcom/android/server/wm/ActivityStackSupervisor;)Landroid/app/ActivityOptions;
PLcom/android/server/wm/ScreenRotationAnimation;-><init>(Landroid/content/Context;Lcom/android/server/wm/DisplayContent;ZZLcom/android/server/wm/WindowManagerService;)V
PLcom/android/server/wm/ScreenRotationAnimation;->createRotationMatrix(IIILandroid/graphics/Matrix;)V
PLcom/android/server/wm/ScreenRotationAnimation;->dismiss(Landroid/view/SurfaceControl$Transaction;JFIIII)Z
PLcom/android/server/wm/ScreenRotationAnimation;->getEnterTransformation()Landroid/view/animation/Transformation;
PLcom/android/server/wm/ScreenRotationAnimation;->hasScreenshot()Z
PLcom/android/server/wm/ScreenRotationAnimation;->isAnimating()Z
PLcom/android/server/wm/ScreenRotationAnimation;->isRotating()Z
PLcom/android/server/wm/ScreenRotationAnimation;->kill()V
PLcom/android/server/wm/ScreenRotationAnimation;->setRotation(Landroid/view/SurfaceControl$Transaction;IJFII)Z
PLcom/android/server/wm/ScreenRotationAnimation;->setSnapshotTransform(Landroid/view/SurfaceControl$Transaction;Landroid/graphics/Matrix;F)V
PLcom/android/server/wm/ScreenRotationAnimation;->startAnimation(Landroid/view/SurfaceControl$Transaction;JFIIZII)Z
PLcom/android/server/wm/ScreenRotationAnimation;->stepAnimation(J)Z
PLcom/android/server/wm/ScreenRotationAnimation;->stepAnimationLocked(J)Z
PLcom/android/server/wm/ScreenRotationAnimation;->updateSurfaces(Landroid/view/SurfaceControl$Transaction;)V
PLcom/android/server/wm/SeamlessRotator;-><init>(IILandroid/view/DisplayInfo;)V
PLcom/android/server/wm/SeamlessRotator;->finish(Lcom/android/server/wm/WindowState;Z)V
PLcom/android/server/wm/SeamlessRotator;->unrotate(Landroid/view/SurfaceControl$Transaction;Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/Session;->binderDied()V
PLcom/android/server/wm/Session;->dragRecipientEntered(Landroid/view/IWindow;)V
PLcom/android/server/wm/Session;->getDisplayFrame(Landroid/view/IWindow;Landroid/graphics/Rect;)V
PLcom/android/server/wm/Session;->getWindowId(Landroid/os/IBinder;)Landroid/view/IWindowId;
PLcom/android/server/wm/Session;->hasAlertWindowSurfaces()Z
PLcom/android/server/wm/Session;->killSessionLocked()V
PLcom/android/server/wm/Session;->onRectangleOnScreenRequested(Landroid/os/IBinder;Landroid/graphics/Rect;)V
PLcom/android/server/wm/Session;->performDrag(Landroid/view/IWindow;ILandroid/view/SurfaceControl;IFFFFLandroid/content/ClipData;)Landroid/os/IBinder;
PLcom/android/server/wm/Session;->performHapticFeedback(IZ)Z
PLcom/android/server/wm/Session;->performHapticFeedback(Landroid/view/IWindow;IZ)Z
PLcom/android/server/wm/Session;->pokeDrawLock(Landroid/os/IBinder;)V
PLcom/android/server/wm/Session;->remove(Landroid/view/IWindow;)V
PLcom/android/server/wm/Session;->reportDropResult(Landroid/view/IWindow;Z)V
PLcom/android/server/wm/Session;->sendWallpaperCommand(Landroid/os/IBinder;Ljava/lang/String;IIILandroid/os/Bundle;Z)Landroid/os/Bundle;
PLcom/android/server/wm/Session;->setTransparentRegion(Landroid/view/IWindow;Landroid/graphics/Region;)V
PLcom/android/server/wm/Session;->setWallpaperPosition(Landroid/os/IBinder;FFFF)V
PLcom/android/server/wm/Session;->updatePointerIcon(Landroid/view/IWindow;)V
PLcom/android/server/wm/Session;->wallpaperOffsetsComplete(Landroid/os/IBinder;)V
PLcom/android/server/wm/Session;->windowRemovedLocked()V
PLcom/android/server/wm/SnapshotStartingData;->createStartingSurface(Lcom/android/server/wm/AppWindowToken;)Lcom/android/server/policy/WindowManagerPolicy$StartingSurface;
PLcom/android/server/wm/SplashScreenStartingData;-><init>(Lcom/android/server/wm/WindowManagerService;Ljava/lang/String;ILandroid/content/res/CompatibilityInfo;Ljava/lang/CharSequence;IIIILandroid/content/res/Configuration;)V
PLcom/android/server/wm/SplashScreenStartingData;->createStartingSurface(Lcom/android/server/wm/AppWindowToken;)Lcom/android/server/policy/WindowManagerPolicy$StartingSurface;
PLcom/android/server/wm/StatusBarController$1;->lambda$$1$StatusBarController$1()V
PLcom/android/server/wm/StatusBarController$1;->onAppTransitionCancelledLocked(I)V
PLcom/android/server/wm/SurfaceAnimationRunner$1;->onAnimationEnd(Landroid/animation/Animator;)V
PLcom/android/server/wm/SurfaceAnimationRunner$1;->onAnimationStart(Landroid/animation/Animator;)V
PLcom/android/server/wm/SurfaceAnimationRunner$SfValueAnimator;->getAnimationHandler()Landroid/animation/AnimationHandler;
PLcom/android/server/wm/SurfaceAnimationRunner;->lambda$new$1$SurfaceAnimationRunner()Landroid/animation/ValueAnimator;
PLcom/android/server/wm/SurfaceAnimationRunner;->lambda$onAnimationCancelled$2$SurfaceAnimationRunner(Lcom/android/server/wm/SurfaceAnimationRunner$RunningAnimation;)V
PLcom/android/server/wm/SurfaceAnimationRunner;->lambda$startAnimationLocked$3$SurfaceAnimationRunner(Lcom/android/server/wm/SurfaceAnimationRunner$RunningAnimation;Landroid/animation/ValueAnimator;Landroid/animation/ValueAnimator;)V
PLcom/android/server/wm/SurfaceAnimationRunner;->lambda$startAnimationLocked$3(Lcom/android/server/wm/SurfaceAnimationRunner;Lcom/android/server/wm/SurfaceAnimationRunner$RunningAnimation;Landroid/animation/ValueAnimator;Landroid/animation/ValueAnimator;)V
PLcom/android/server/wm/SurfaceAnimationRunner;->onAnimationCancelled(Landroid/view/SurfaceControl;)V
PLcom/android/server/wm/SurfaceAnimationRunner;->startAnimation(Lcom/android/server/wm/LocalAnimationAdapter$AnimationSpec;Landroid/view/SurfaceControl;Landroid/view/SurfaceControl$Transaction;Ljava/lang/Runnable;)V
PLcom/android/server/wm/SurfaceAnimationRunner;->startAnimationLocked(Lcom/android/server/wm/SurfaceAnimationRunner$RunningAnimation;)V
PLcom/android/server/wm/SurfaceAnimationRunner;->startAnimations(J)V
PLcom/android/server/wm/SurfaceAnimator$Animatable;->shouldDeferAnimationFinish(Ljava/lang/Runnable;)Z
PLcom/android/server/wm/SurfaceAnimator;->createAnimationLeash(Landroid/view/SurfaceControl;Landroid/view/SurfaceControl$Transaction;IIZ)Landroid/view/SurfaceControl;
PLcom/android/server/wm/SurfaceAnimator;->endDelayingAnimationStart()V
PLcom/android/server/wm/SurfaceAnimator;->isAnimationStartDelayed()Z
PLcom/android/server/wm/SurfaceAnimator;->lambda$getFinishedCallback$0$SurfaceAnimator(Ljava/lang/Runnable;)V
PLcom/android/server/wm/SurfaceAnimator;->lambda$getFinishedCallback$1$SurfaceAnimator(Ljava/lang/Runnable;Lcom/android/server/wm/AnimationAdapter;)V
PLcom/android/server/wm/SurfaceAnimator;->lambda$getFinishedCallback$1(Lcom/android/server/wm/SurfaceAnimator;Ljava/lang/Runnable;Lcom/android/server/wm/AnimationAdapter;)V
PLcom/android/server/wm/SurfaceAnimator;->reparent(Landroid/view/SurfaceControl$Transaction;Landroid/view/SurfaceControl;)V
PLcom/android/server/wm/SurfaceAnimator;->startAnimation(Landroid/view/SurfaceControl$Transaction;Lcom/android/server/wm/AnimationAdapter;Z)V
PLcom/android/server/wm/SurfaceAnimator;->transferAnimation(Lcom/android/server/wm/SurfaceAnimator;)V
PLcom/android/server/wm/SystemGesturesPointerEventListener$FlingGestureDetector;->onFling(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z
PLcom/android/server/wm/SystemGesturesPointerEventListener$FlingGestureDetector;->onSingleTapUp(Landroid/view/MotionEvent;)Z
PLcom/android/server/wm/SystemGesturesPointerEventListener;->captureDown(Landroid/view/MotionEvent;I)V
PLcom/android/server/wm/SystemGesturesPointerEventListener;->detectSwipe(IJFF)I
PLcom/android/server/wm/SystemGesturesPointerEventListener;->detectSwipe(Landroid/view/MotionEvent;)I
PLcom/android/server/wm/SystemGesturesPointerEventListener;->findIndex(I)I
PLcom/android/server/wm/SystemGesturesPointerEventListener;->onPointerEvent(Landroid/view/MotionEvent;)V
PLcom/android/server/wm/Task;->clearPreserveNonFloatingState()V
PLcom/android/server/wm/Task;->dontAnimateDimExit()V
PLcom/android/server/wm/Task;->fillsParent()Z
PLcom/android/server/wm/Task;->forAllTasks(Ljava/util/function/Consumer;)V
PLcom/android/server/wm/Task;->getAnimationLeashParent()Landroid/view/SurfaceControl;
PLcom/android/server/wm/Task;->getTaskDescription()Landroid/app/ActivityManager$TaskDescription;
PLcom/android/server/wm/Task;->getTopFullscreenAppToken()Lcom/android/server/wm/AppWindowToken;
PLcom/android/server/wm/Task;->getTopVisibleAppMainWindow()Lcom/android/server/wm/WindowState;
PLcom/android/server/wm/Task;->isDragResizing()Z
PLcom/android/server/wm/Task;->onDescendantOrientationChanged(Landroid/os/IBinder;Lcom/android/server/wm/ConfigurationContainer;)Z
PLcom/android/server/wm/Task;->onSnapshotChanged(Landroid/app/ActivityManager$TaskSnapshot;)V
PLcom/android/server/wm/Task;->removeChild(Lcom/android/server/wm/AppWindowToken;)V
PLcom/android/server/wm/Task;->removeChild(Lcom/android/server/wm/WindowContainer;)V
PLcom/android/server/wm/Task;->removeIfPossible()V
PLcom/android/server/wm/Task;->removeImmediately()V
PLcom/android/server/wm/Task;->reparent(Lcom/android/server/wm/TaskStack;IZ)V
PLcom/android/server/wm/Task;->resize(ZZ)V
PLcom/android/server/wm/Task;->setBounds(Landroid/graphics/Rect;Z)I
PLcom/android/server/wm/Task;->setCanAffectSystemUiFlags(Z)V
PLcom/android/server/wm/Task;->setSendingToBottom(Z)V
PLcom/android/server/wm/Task;->shouldDeferRemoval()Z
PLcom/android/server/wm/Task;->toString()Ljava/lang/String;
PLcom/android/server/wm/TaskChangeNotificationController;->notifyActivityPinned(Lcom/android/server/wm/ActivityRecord;)V
PLcom/android/server/wm/TaskChangeNotificationController;->notifyActivityRequestedOrientationChanged(II)V
PLcom/android/server/wm/TaskChangeNotificationController;->notifyActivityUnpinned()V
PLcom/android/server/wm/TaskChangeNotificationController;->notifyPinnedStackAnimationEnded()V
PLcom/android/server/wm/TaskChangeNotificationController;->notifyPinnedStackAnimationStarted()V
PLcom/android/server/wm/TaskChangeNotificationController;->notifyTaskMovedToFront(I)V
PLcom/android/server/wm/TaskChangeNotificationController;->notifyTaskMovedToFront(Landroid/app/TaskInfo;)V
PLcom/android/server/wm/TaskChangeNotificationController;->notifyTaskRemovalStarted(I)V
PLcom/android/server/wm/TaskChangeNotificationController;->notifyTaskRemovalStarted(Landroid/app/ActivityManager$RunningTaskInfo;)V
PLcom/android/server/wm/TaskChangeNotificationController;->notifyTaskRemoved(I)V
PLcom/android/server/wm/TaskChangeNotificationController;->notifyTaskSnapshotChanged(ILandroid/app/ActivityManager$TaskSnapshot;)V
PLcom/android/server/wm/TaskChangeNotificationController;->unregisterTaskStackListener(Landroid/app/ITaskStackListener;)V
PLcom/android/server/wm/TaskPersister$1;->compare(Lcom/android/server/wm/TaskRecord;Lcom/android/server/wm/TaskRecord;)I
PLcom/android/server/wm/TaskPersister$1;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
PLcom/android/server/wm/TaskPersister$ImageWriteQueueItem;->matches(Lcom/android/server/wm/PersisterQueue$WriteQueueItem;)Z
PLcom/android/server/wm/TaskPersister$ImageWriteQueueItem;->matches(Lcom/android/server/wm/TaskPersister$ImageWriteQueueItem;)Z
PLcom/android/server/wm/TaskPersister$ImageWriteQueueItem;->process()V
PLcom/android/server/wm/TaskPersister$ImageWriteQueueItem;->updateFrom(Lcom/android/server/wm/PersisterQueue$WriteQueueItem;)V
PLcom/android/server/wm/TaskPersister$ImageWriteQueueItem;->updateFrom(Lcom/android/server/wm/TaskPersister$ImageWriteQueueItem;)V
PLcom/android/server/wm/TaskPersister$TaskWriteQueueItem;->process()V
PLcom/android/server/wm/TaskPersister$TaskWriteQueueItem;->saveToXml(Lcom/android/server/wm/TaskRecord;)Ljava/io/StringWriter;
PLcom/android/server/wm/TaskPersister;->getTaskDescriptionIcon(Ljava/lang/String;)Landroid/graphics/Bitmap;
PLcom/android/server/wm/TaskPersister;->getUserTasksDir(I)Ljava/io/File;
PLcom/android/server/wm/TaskPersister;->removeObsoleteFiles(Landroid/util/ArraySet;[Ljava/io/File;)V
PLcom/android/server/wm/TaskPersister;->restoreTasksForUserLocked(ILandroid/util/SparseBooleanArray;)Ljava/util/List;
PLcom/android/server/wm/TaskPersister;->saveImage(Landroid/graphics/Bitmap;Ljava/lang/String;)V
PLcom/android/server/wm/TaskPersister;->taskIdToTask(ILjava/util/ArrayList;)Lcom/android/server/wm/TaskRecord;
PLcom/android/server/wm/TaskPersister;->unloadUserDataFromMemory(I)V
PLcom/android/server/wm/TaskPersister;->wakeup(Lcom/android/server/wm/TaskRecord;Z)V
PLcom/android/server/wm/TaskPersister;->writePersistedTaskIdsForUser(Landroid/util/SparseBooleanArray;I)V
PLcom/android/server/wm/TaskPositioningController;->handleTapOutsideTask(Lcom/android/server/wm/DisplayContent;II)V
PLcom/android/server/wm/TaskPositioningController;->lambda$handleTapOutsideTask$0(Lcom/android/server/wm/TaskPositioningController;Lcom/android/server/wm/DisplayContent;II)V
PLcom/android/server/wm/TaskRecord$TaskActivitiesReport;-><init>()V
PLcom/android/server/wm/TaskRecord$TaskRecordFactory;->create(Lcom/android/server/wm/ActivityTaskManagerService;ILandroid/content/Intent;Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;Landroid/content/ComponentName;ZZZIILjava/lang/String;Ljava/util/ArrayList;JZLandroid/app/ActivityManager$TaskDescription;IIIIILjava/lang/String;IZZZII)Lcom/android/server/wm/TaskRecord;
PLcom/android/server/wm/TaskRecord$TaskRecordFactory;->restoreFromXml(Lorg/xmlpull/v1/XmlPullParser;Lcom/android/server/wm/ActivityStackSupervisor;)Lcom/android/server/wm/TaskRecord;
PLcom/android/server/wm/TaskRecord;-><init>(Lcom/android/server/wm/ActivityTaskManagerService;ILandroid/content/Intent;Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;Landroid/content/ComponentName;ZZZIILjava/lang/String;Ljava/util/ArrayList;JZLandroid/app/ActivityManager$TaskDescription;IIIIILjava/lang/String;IZZZII)V
PLcom/android/server/wm/TaskRecord;->addStartingWindowsForVisibleActivities(Z)V
PLcom/android/server/wm/TaskRecord;->adjustForMinimalTaskDimensions(Landroid/graphics/Rect;Landroid/graphics/Rect;)V
PLcom/android/server/wm/TaskRecord;->autoRemoveFromRecents()Z
PLcom/android/server/wm/TaskRecord;->calculateInsetFrames(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayInfo;)V
PLcom/android/server/wm/TaskRecord;->canBeLaunchedOnDisplay(I)Z
PLcom/android/server/wm/TaskRecord;->canResizeToBounds(Landroid/graphics/Rect;)Z
PLcom/android/server/wm/TaskRecord;->cleanUpResourcesForDestroy()V
PLcom/android/server/wm/TaskRecord;->computeConfigResourceOverrides(Landroid/content/res/Configuration;Landroid/content/res/Configuration;)V
PLcom/android/server/wm/TaskRecord;->computeConfigResourceOverrides(Landroid/content/res/Configuration;Landroid/content/res/Configuration;Z)V
PLcom/android/server/wm/TaskRecord;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V
PLcom/android/server/wm/TaskRecord;->fillTaskInfo(Landroid/app/TaskInfo;Lcom/android/server/wm/TaskRecord$TaskActivitiesReport;)V
PLcom/android/server/wm/TaskRecord;->findActivityInHistoryLocked(Lcom/android/server/wm/ActivityRecord;)Lcom/android/server/wm/ActivityRecord;
PLcom/android/server/wm/TaskRecord;->getInactiveDuration()J
PLcom/android/server/wm/TaskRecord;->getSnapshot(Z)Landroid/app/ActivityManager$TaskSnapshot;
PLcom/android/server/wm/TaskRecord;->intersectWithInsetsIfFits(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
PLcom/android/server/wm/TaskRecord;->isClearingToReuseTask()Z
PLcom/android/server/wm/TaskRecord;->isSameIntentFilter(Lcom/android/server/wm/ActivityRecord;)Z
PLcom/android/server/wm/TaskRecord;->lockTaskAuthToString()Ljava/lang/String;
PLcom/android/server/wm/TaskRecord;->onSnapshotChanged(Landroid/app/ActivityManager$TaskSnapshot;)V
PLcom/android/server/wm/TaskRecord;->onlyHasTaskOverlayActivities(Z)Z
PLcom/android/server/wm/TaskRecord;->performClearTaskAtIndexLocked(IZLjava/lang/String;)V
PLcom/android/server/wm/TaskRecord;->performClearTaskForReuseLocked(Lcom/android/server/wm/ActivityRecord;I)Lcom/android/server/wm/ActivityRecord;
PLcom/android/server/wm/TaskRecord;->performClearTaskLocked()V
PLcom/android/server/wm/TaskRecord;->performClearTaskLocked(Lcom/android/server/wm/ActivityRecord;I)Lcom/android/server/wm/ActivityRecord;
PLcom/android/server/wm/TaskRecord;->removeActivity(Lcom/android/server/wm/ActivityRecord;)Z
PLcom/android/server/wm/TaskRecord;->removeActivity(Lcom/android/server/wm/ActivityRecord;Z)Z
PLcom/android/server/wm/TaskRecord;->removeTaskActivitiesLocked(ZLjava/lang/String;)V
PLcom/android/server/wm/TaskRecord;->removeWindowContainer()V
PLcom/android/server/wm/TaskRecord;->removedFromRecents()V
PLcom/android/server/wm/TaskRecord;->reparent(Lcom/android/server/wm/ActivityStack;IIZZZLjava/lang/String;)Z
PLcom/android/server/wm/TaskRecord;->reparent(Lcom/android/server/wm/ActivityStack;ZIZZZLjava/lang/String;)Z
PLcom/android/server/wm/TaskRecord;->resize(Landroid/graphics/Rect;IZZ)Z
PLcom/android/server/wm/TaskRecord;->returnsToHomeStack()Z
PLcom/android/server/wm/TaskRecord;->saveToXml(Lorg/xmlpull/v1/XmlSerializer;)V
PLcom/android/server/wm/TaskRecord;->setNextAffiliate(Lcom/android/server/wm/TaskRecord;)V
PLcom/android/server/wm/TaskRecord;->setPrevAffiliate(Lcom/android/server/wm/TaskRecord;)V
PLcom/android/server/wm/TaskRecord;->toString()Ljava/lang/String;
PLcom/android/server/wm/TaskSnapshotCache;->getSnapshot(IIZZ)Landroid/app/ActivityManager$TaskSnapshot;
PLcom/android/server/wm/TaskSnapshotCache;->onAppDied(Lcom/android/server/wm/AppWindowToken;)V
PLcom/android/server/wm/TaskSnapshotCache;->onAppRemoved(Lcom/android/server/wm/AppWindowToken;)V
PLcom/android/server/wm/TaskSnapshotCache;->onTaskRemoved(I)V
PLcom/android/server/wm/TaskSnapshotCache;->putSnapshot(Lcom/android/server/wm/Task;Landroid/app/ActivityManager$TaskSnapshot;)V
PLcom/android/server/wm/TaskSnapshotController;->addSkipClosingAppSnapshotTasks(Landroid/util/ArraySet;)V
PLcom/android/server/wm/TaskSnapshotController;->createStartingSurface(Lcom/android/server/wm/AppWindowToken;Landroid/app/ActivityManager$TaskSnapshot;)Lcom/android/server/policy/WindowManagerPolicy$StartingSurface;
PLcom/android/server/wm/TaskSnapshotController;->drawAppThemeSnapshot(Lcom/android/server/wm/Task;)Landroid/app/ActivityManager$TaskSnapshot;
PLcom/android/server/wm/TaskSnapshotController;->findAppTokenForSnapshot(Lcom/android/server/wm/Task;)Lcom/android/server/wm/AppWindowToken;
PLcom/android/server/wm/TaskSnapshotController;->getSnapshot(IIZZ)Landroid/app/ActivityManager$TaskSnapshot;
PLcom/android/server/wm/TaskSnapshotController;->lambda$screenTurningOff$1$TaskSnapshotController(Lcom/android/server/wm/Task;)V
PLcom/android/server/wm/TaskSnapshotController;->lambda$screenTurningOff$2$TaskSnapshotController(Lcom/android/server/policy/WindowManagerPolicy$ScreenOffListener;)V
PLcom/android/server/wm/TaskSnapshotController;->lambda$screenTurningOff$2(Lcom/android/server/wm/TaskSnapshotController;Lcom/android/server/policy/WindowManagerPolicy$ScreenOffListener;)V
PLcom/android/server/wm/TaskSnapshotController;->minRect(Landroid/graphics/Rect;Landroid/graphics/Rect;)Landroid/graphics/Rect;
PLcom/android/server/wm/TaskSnapshotController;->notifyTaskRemovedFromRecents(II)V
PLcom/android/server/wm/TaskSnapshotController;->onAppDied(Lcom/android/server/wm/AppWindowToken;)V
PLcom/android/server/wm/TaskSnapshotController;->onAppRemoved(Lcom/android/server/wm/AppWindowToken;)V
PLcom/android/server/wm/TaskSnapshotController;->screenTurningOff(Lcom/android/server/policy/WindowManagerPolicy$ScreenOffListener;)V
PLcom/android/server/wm/TaskSnapshotController;->setPersisterPaused(Z)V
PLcom/android/server/wm/TaskSnapshotController;->snapshotTask(Lcom/android/server/wm/Task;)Landroid/app/ActivityManager$TaskSnapshot;
PLcom/android/server/wm/TaskSnapshotLoader;->loadTask(IIZ)Landroid/app/ActivityManager$TaskSnapshot;
PLcom/android/server/wm/TaskSnapshotPersister$DeleteWriteQueueItem;->write()V
PLcom/android/server/wm/TaskSnapshotPersister$RemoveObsoleteFilesQueueItem;->getTaskId(Ljava/lang/String;)I
PLcom/android/server/wm/TaskSnapshotPersister$StoreWriteQueueItem;->onDequeuedLocked()V
PLcom/android/server/wm/TaskSnapshotPersister$StoreWriteQueueItem;->write()V
PLcom/android/server/wm/TaskSnapshotPersister$StoreWriteQueueItem;->writeBuffer()Z
PLcom/android/server/wm/TaskSnapshotPersister$StoreWriteQueueItem;->writeProto()Z
PLcom/android/server/wm/TaskSnapshotPersister;->getBitmapFile(II)Ljava/io/File;
PLcom/android/server/wm/TaskSnapshotPersister;->getProtoFile(II)Ljava/io/File;
PLcom/android/server/wm/TaskSnapshotPersister;->getReducedResolutionBitmapFile(II)Ljava/io/File;
PLcom/android/server/wm/TaskSnapshotPersister;->getReducedScale()F
PLcom/android/server/wm/TaskSnapshotPersister;->onTaskRemovedFromRecents(II)V
PLcom/android/server/wm/TaskSnapshotPersister;->persistSnapshot(IILandroid/app/ActivityManager$TaskSnapshot;)V
PLcom/android/server/wm/TaskSnapshotPersister;->setPaused(Z)V
PLcom/android/server/wm/TaskSnapshotSurface$1;-><init>(Landroid/os/Looper;)V
PLcom/android/server/wm/TaskSnapshotSurface$1;->handleMessage(Landroid/os/Message;)V
PLcom/android/server/wm/TaskSnapshotSurface$SystemBarBackgroundPainter;-><init>(IIIII)V
PLcom/android/server/wm/TaskSnapshotSurface$SystemBarBackgroundPainter;->drawDecors(Landroid/graphics/Canvas;Landroid/graphics/Rect;)V
PLcom/android/server/wm/TaskSnapshotSurface$SystemBarBackgroundPainter;->drawNavigationBarBackground(Landroid/graphics/Canvas;)V
PLcom/android/server/wm/TaskSnapshotSurface$SystemBarBackgroundPainter;->drawStatusBarBackground(Landroid/graphics/Canvas;Landroid/graphics/Rect;I)V
PLcom/android/server/wm/TaskSnapshotSurface$SystemBarBackgroundPainter;->getStatusBarColorViewHeight()I
PLcom/android/server/wm/TaskSnapshotSurface$SystemBarBackgroundPainter;->setInsets(Landroid/graphics/Rect;Landroid/graphics/Rect;)V
PLcom/android/server/wm/TaskSnapshotSurface$Window;-><init>()V
PLcom/android/server/wm/TaskSnapshotSurface$Window;->resized(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;ZLandroid/util/MergedConfiguration;Landroid/graphics/Rect;ZZILandroid/view/DisplayCutout$ParcelableWrapper;)V
PLcom/android/server/wm/TaskSnapshotSurface;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/TaskSnapshotSurface$Window;Landroid/view/SurfaceControl;Landroid/app/ActivityManager$TaskSnapshot;Ljava/lang/CharSequence;IIIIIILandroid/graphics/Rect;I)V
PLcom/android/server/wm/TaskSnapshotSurface;->calculateSnapshotCrop()Landroid/graphics/Rect;
PLcom/android/server/wm/TaskSnapshotSurface;->calculateSnapshotFrame(Landroid/graphics/Rect;)Landroid/graphics/Rect;
PLcom/android/server/wm/TaskSnapshotSurface;->create(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/AppWindowToken;Landroid/app/ActivityManager$TaskSnapshot;)Lcom/android/server/wm/TaskSnapshotSurface;
PLcom/android/server/wm/TaskSnapshotSurface;->drawBackgroundAndBars(Landroid/graphics/Canvas;Landroid/graphics/Rect;)V
PLcom/android/server/wm/TaskSnapshotSurface;->drawSizeMismatchSnapshot(Landroid/graphics/GraphicBuffer;)V
PLcom/android/server/wm/TaskSnapshotSurface;->drawSnapshot()V
PLcom/android/server/wm/TaskSnapshotSurface;->remove()V
PLcom/android/server/wm/TaskSnapshotSurface;->reportDrawn()V
PLcom/android/server/wm/TaskSnapshotSurface;->setFrames(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
PLcom/android/server/wm/TaskStack;->animateResizePinnedStack(Landroid/graphics/Rect;Landroid/graphics/Rect;IZ)V
PLcom/android/server/wm/TaskStack;->calculatePinnedBoundsForConfigChange(Landroid/graphics/Rect;)Z
PLcom/android/server/wm/TaskStack;->compareTo(Lcom/android/server/wm/WindowContainer;)I
PLcom/android/server/wm/TaskStack;->deferScheduleMultiWindowModeChanged()Z
PLcom/android/server/wm/TaskStack;->getAnimationOrCurrentBounds(Landroid/graphics/Rect;)V
PLcom/android/server/wm/TaskStack;->getFinalAnimationBounds(Landroid/graphics/Rect;)V
PLcom/android/server/wm/TaskStack;->getFinalAnimationSourceHintBounds(Landroid/graphics/Rect;)V
PLcom/android/server/wm/TaskStack;->getPictureInPictureBounds(FLandroid/graphics/Rect;)Landroid/graphics/Rect;
PLcom/android/server/wm/TaskStack;->getRawBounds()Landroid/graphics/Rect;
PLcom/android/server/wm/TaskStack;->getSurfaceControl()Landroid/view/SurfaceControl;
PLcom/android/server/wm/TaskStack;->isAnimatingBoundsToFullscreen()Z
PLcom/android/server/wm/TaskStack;->isAttached()Z
PLcom/android/server/wm/TaskStack;->lastAnimatingBoundsWasToFullscreen()Z
PLcom/android/server/wm/TaskStack;->onAllWindowsDrawn()V
PLcom/android/server/wm/TaskStack;->onAnimationEnd(ZLandroid/graphics/Rect;Z)V
PLcom/android/server/wm/TaskStack;->onAnimationStart(ZZ)Z
PLcom/android/server/wm/TaskStack;->onPipAnimationEndResize()V
PLcom/android/server/wm/TaskStack;->pinnedStackResizeDisallowed()Z
PLcom/android/server/wm/TaskStack;->positionChildAtBottom(Lcom/android/server/wm/Task;Z)V
PLcom/android/server/wm/TaskStack;->removeChild(Lcom/android/server/wm/Task;)V
PLcom/android/server/wm/TaskStack;->removeChild(Lcom/android/server/wm/WindowContainer;)V
PLcom/android/server/wm/TaskStack;->removeIfPossible()V
PLcom/android/server/wm/TaskStack;->removeImmediately()V
PLcom/android/server/wm/TaskStack;->setAnimationBackground(Lcom/android/server/wm/WindowStateAnimator;I)V
PLcom/android/server/wm/TaskStack;->setAnimationFinalBounds(Landroid/graphics/Rect;Landroid/graphics/Rect;Z)V
PLcom/android/server/wm/TaskStack;->setPictureInPictureActions(Ljava/util/List;)V
PLcom/android/server/wm/TaskStack;->setPictureInPictureAspectRatio(F)V
PLcom/android/server/wm/TaskStack;->setPinnedStackSize(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z
PLcom/android/server/wm/TaskStack;->shouldDeferStartOnMoveToFullscreen()Z
PLcom/android/server/wm/TaskStack;->showAnimationSurface(F)V
PLcom/android/server/wm/TaskStack;->taskIdFromPoint(II)I
PLcom/android/server/wm/TaskTapPointerEventListener;->lambda$new$0$TaskTapPointerEventListener()V
PLcom/android/server/wm/TaskTapPointerEventListener;->lambda$new$0(Lcom/android/server/wm/TaskTapPointerEventListener;)V
PLcom/android/server/wm/TaskTapPointerEventListener;->onPointerEvent(Landroid/view/MotionEvent;)V
PLcom/android/server/wm/UnknownAppVisibilityController;->appRemovedOrHidden(Lcom/android/server/wm/AppWindowToken;)V
PLcom/android/server/wm/UnknownAppVisibilityController;->notifyLaunched(Lcom/android/server/wm/AppWindowToken;)V
PLcom/android/server/wm/UnknownAppVisibilityController;->notifyVisibilitiesUpdated()V
PLcom/android/server/wm/WallpaperController;->processWallpaperDrawPendingTimeout()Z
PLcom/android/server/wm/WallpaperController;->sendWindowWallpaperCommand(Lcom/android/server/wm/WindowState;Ljava/lang/String;IIILandroid/os/Bundle;Z)Landroid/os/Bundle;
PLcom/android/server/wm/WallpaperController;->setWindowWallpaperPosition(Lcom/android/server/wm/WindowState;FFFF)V
PLcom/android/server/wm/WallpaperController;->startWallpaperAnimation(Landroid/view/animation/Animation;)V
PLcom/android/server/wm/WallpaperController;->updateWallpaperOffsetLocked(Lcom/android/server/wm/WindowState;Z)V
PLcom/android/server/wm/WallpaperController;->updateWallpaperVisibility()V
PLcom/android/server/wm/WallpaperController;->wallpaperOffsetsComplete(Landroid/os/IBinder;)V
PLcom/android/server/wm/WallpaperController;->wallpaperTransitionReady()Z
PLcom/android/server/wm/WallpaperVisibilityListeners;->unregisterWallpaperVisibilityListener(Landroid/view/IWallpaperVisibilityListener;I)V
PLcom/android/server/wm/WallpaperWindowToken;->hasVisibleNotDrawnWallpaper()Z
PLcom/android/server/wm/WallpaperWindowToken;->sendWindowWallpaperCommand(Ljava/lang/String;IIILandroid/os/Bundle;Z)V
PLcom/android/server/wm/WallpaperWindowToken;->startAnimation(Landroid/view/animation/Animation;)V
PLcom/android/server/wm/WallpaperWindowToken;->updateWallpaperOffset(IIZ)V
PLcom/android/server/wm/WallpaperWindowToken;->updateWallpaperVisibility(Z)V
PLcom/android/server/wm/WindowAnimationSpec;-><init>(Landroid/view/animation/Animation;Landroid/graphics/Point;Landroid/graphics/Rect;ZIZ)V
PLcom/android/server/wm/WindowAnimationSpec;->apply(Landroid/view/SurfaceControl$Transaction;Landroid/view/SurfaceControl;J)V
PLcom/android/server/wm/WindowAnimationSpec;->calculateStatusBarTransitionStartTime()J
PLcom/android/server/wm/WindowAnimationSpec;->canSkipFirstFrame()Z
PLcom/android/server/wm/WindowAnimationSpec;->findTranslateAnimation(Landroid/view/animation/Animation;)Landroid/view/animation/TranslateAnimation;
PLcom/android/server/wm/WindowAnimationSpec;->getBackgroundColor()I
PLcom/android/server/wm/WindowAnimationSpec;->getDuration()J
PLcom/android/server/wm/WindowAnimationSpec;->getShowWallpaper()Z
PLcom/android/server/wm/WindowAnimationSpec;->needsEarlyWakeup()Z
PLcom/android/server/wm/WindowAnimator;->addAfterPrepareSurfacesRunnable(Ljava/lang/Runnable;)V
PLcom/android/server/wm/WindowAnimator;->isAnimating()Z
PLcom/android/server/wm/WindowAnimator;->isAnimationScheduled()Z
PLcom/android/server/wm/WindowAnimator;->removeDisplayLocked(I)V
PLcom/android/server/wm/WindowAnimator;->setAnimating(Z)V
PLcom/android/server/wm/WindowAnimator;->setScreenRotationAnimationLocked(ILcom/android/server/wm/ScreenRotationAnimation;)V
PLcom/android/server/wm/WindowContainer;->forAllTasks(Ljava/util/function/Consumer;)V
PLcom/android/server/wm/WindowContainer;->forceWindowsScaleableInTransaction(Z)V
PLcom/android/server/wm/WindowContainer;->getAnimationLeashParent()Landroid/view/SurfaceControl;
PLcom/android/server/wm/WindowContainer;->getAppAnimationLayer(I)Landroid/view/SurfaceControl;
PLcom/android/server/wm/WindowContainer;->getOrientation(I)I
PLcom/android/server/wm/WindowContainer;->getPrefixOrderIndex()I
PLcom/android/server/wm/WindowContainer;->getPrefixOrderIndex(Lcom/android/server/wm/WindowContainer;)I
PLcom/android/server/wm/WindowContainer;->getSurfaceHeight()I
PLcom/android/server/wm/WindowContainer;->getSurfaceWidth()I
PLcom/android/server/wm/WindowContainer;->hasCommittedReparentToAnimationLeash()Z
PLcom/android/server/wm/WindowContainer;->makeAnimationLeash()Landroid/view/SurfaceControl$Builder;
PLcom/android/server/wm/WindowContainer;->onAnimationFinished()V
PLcom/android/server/wm/WindowContainer;->onAnimationLeashCreated(Landroid/view/SurfaceControl$Transaction;Landroid/view/SurfaceControl;)V
PLcom/android/server/wm/WindowContainer;->onAnimationLeashDestroyed(Landroid/view/SurfaceControl$Transaction;)V
PLcom/android/server/wm/WindowContainer;->onDescendantOrientationChanged(Landroid/os/IBinder;Lcom/android/server/wm/ConfigurationContainer;)Z
PLcom/android/server/wm/WindowContainer;->onMovedByResize()V
PLcom/android/server/wm/WindowContainer;->onParentResize()V
PLcom/android/server/wm/WindowContainer;->reassignLayer(Landroid/view/SurfaceControl$Transaction;)V
PLcom/android/server/wm/WindowContainer;->removeChild(Lcom/android/server/wm/WindowContainer;)V
PLcom/android/server/wm/WindowContainer;->removeImmediately()V
PLcom/android/server/wm/WindowContainer;->reparentSurfaceControl(Landroid/view/SurfaceControl$Transaction;Landroid/view/SurfaceControl;)V
PLcom/android/server/wm/WindowContainer;->startAnimation(Landroid/view/SurfaceControl$Transaction;Lcom/android/server/wm/AnimationAdapter;Z)V
PLcom/android/server/wm/WindowContainer;->transferAnimation(Lcom/android/server/wm/WindowContainer;)V
PLcom/android/server/wm/WindowFrames;->resetLastContentInsets()V
PLcom/android/server/wm/WindowList;->addFirst(Ljava/lang/Object;)V
PLcom/android/server/wm/WindowList;->peekFirst()Ljava/lang/Object;
PLcom/android/server/wm/WindowManagerInternal$AppTransitionListener;->onAppTransitionCancelledLocked(I)V
PLcom/android/server/wm/WindowManagerInternal$IDragDropCallback;->postPerformDrag()V
PLcom/android/server/wm/WindowManagerInternal$IDragDropCallback;->postReportDropResult()V
PLcom/android/server/wm/WindowManagerInternal$IDragDropCallback;->prePerformDrag(Landroid/view/IWindow;Landroid/os/IBinder;IFFFFLandroid/content/ClipData;)Z
PLcom/android/server/wm/WindowManagerInternal$IDragDropCallback;->preReportDropResult(Landroid/view/IWindow;Z)V
PLcom/android/server/wm/WindowManagerInternal$IDragDropCallback;->registerInputChannel(Lcom/android/server/wm/DragState;Landroid/view/Display;Lcom/android/server/input/InputManagerService;Landroid/view/InputChannel;)Z
PLcom/android/server/wm/WindowManagerService$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
PLcom/android/server/wm/WindowManagerService$4;->onAppTransitionCancelledLocked(I)V
PLcom/android/server/wm/WindowManagerService$6;->getServiceType()I
PLcom/android/server/wm/WindowManagerService$6;->onLowPowerModeChanged(Landroid/os/PowerSaveState;)V
PLcom/android/server/wm/WindowManagerService$7;->onOpChanged(ILjava/lang/String;)V
PLcom/android/server/wm/WindowManagerService$LocalService;->addWindowToken(Landroid/os/IBinder;II)V
PLcom/android/server/wm/WindowManagerService$LocalService;->computeWindowsForAccessibility()V
PLcom/android/server/wm/WindowManagerService$LocalService;->getCompatibleMagnificationSpecForWindow(Landroid/os/IBinder;)Landroid/view/MagnificationSpec;
PLcom/android/server/wm/WindowManagerService$LocalService;->getFocusedWindowToken()Landroid/os/IBinder;
PLcom/android/server/wm/WindowManagerService$LocalService;->isHardKeyboardAvailable()Z
PLcom/android/server/wm/WindowManagerService$LocalService;->isKeyguardShowingAndNotOccluded()Z
PLcom/android/server/wm/WindowManagerService$LocalService;->isUidFocused(I)Z
PLcom/android/server/wm/WindowManagerService$LocalService;->removeWindowToken(Landroid/os/IBinder;ZI)V
PLcom/android/server/wm/WindowManagerService$LocalService;->setWindowsForAccessibilityCallback(Lcom/android/server/wm/WindowManagerInternal$WindowsForAccessibilityCallback;)V
PLcom/android/server/wm/WindowManagerService$LocalService;->updateInputMethodTargetWindow(Landroid/os/IBinder;Landroid/os/IBinder;)V
PLcom/android/server/wm/WindowManagerService$LocalService;->updateInputMethodWindowStatus(Landroid/os/IBinder;ZZ)V
PLcom/android/server/wm/WindowManagerService$LocalService;->waitForAllWindowsDrawn(Ljava/lang/Runnable;J)V
PLcom/android/server/wm/WindowManagerService$MousePositionTracker;->onPointerEvent(Landroid/view/MotionEvent;)V
PLcom/android/server/wm/WindowManagerService;->access$1400(Lcom/android/server/wm/WindowManagerService;)Z
PLcom/android/server/wm/WindowManagerService;->access$1500(Lcom/android/server/wm/WindowManagerService;)Lcom/android/server/wm/RecentsAnimationController;
PLcom/android/server/wm/WindowManagerService;->canStartRecentsAnimation()Z
PLcom/android/server/wm/WindowManagerService;->cancelRecentsAnimationSynchronously(ILjava/lang/String;)V
PLcom/android/server/wm/WindowManagerService;->checkSplitScreenMinimizedChanged(Z)V
PLcom/android/server/wm/WindowManagerService;->cleanupRecentsAnimation(I)V
PLcom/android/server/wm/WindowManagerService;->closeSystemDialogs(Ljava/lang/String;)V
PLcom/android/server/wm/WindowManagerService;->dismissKeyguard(Lcom/android/internal/policy/IKeyguardDismissCallback;Ljava/lang/CharSequence;)V
PLcom/android/server/wm/WindowManagerService;->doesAddToastWindowRequireToken(Ljava/lang/String;ILcom/android/server/wm/WindowState;)Z
PLcom/android/server/wm/WindowManagerService;->enableScreenIfNeeded()V
PLcom/android/server/wm/WindowManagerService;->executeAppTransition()V
PLcom/android/server/wm/WindowManagerService;->freezeDisplayRotation(II)V
PLcom/android/server/wm/WindowManagerService;->freezeRotation(I)V
PLcom/android/server/wm/WindowManagerService;->getNavBarPosition(I)I
PLcom/android/server/wm/WindowManagerService;->getTaskSnapshot(IIZ)Landroid/app/ActivityManager$TaskSnapshot;
PLcom/android/server/wm/WindowManagerService;->getTransitionAnimationScaleLocked()F
PLcom/android/server/wm/WindowManagerService;->getWindowAnimationScaleLocked()F
PLcom/android/server/wm/WindowManagerService;->getWindowDisplayFrame(Lcom/android/server/wm/Session;Landroid/view/IWindow;Landroid/graphics/Rect;)V
PLcom/android/server/wm/WindowManagerService;->getWindowId(Landroid/os/IBinder;)Landroid/view/IWindowId;
PLcom/android/server/wm/WindowManagerService;->inSurfaceTransaction(Ljava/lang/Runnable;)V
PLcom/android/server/wm/WindowManagerService;->initializeRecentsAnimation(ILandroid/view/IRecentsAnimationRunner;Lcom/android/server/wm/RecentsAnimationController$RecentsAnimationCallbacks;ILandroid/util/SparseBooleanArray;)V
PLcom/android/server/wm/WindowManagerService;->isKeyguardSecure()Z
PLcom/android/server/wm/WindowManagerService;->isKeyguardShowingAndNotOccluded()Z
PLcom/android/server/wm/WindowManagerService;->isKeyguardTrusted()Z
PLcom/android/server/wm/WindowManagerService;->isRotatingSeamlessly()Z
PLcom/android/server/wm/WindowManagerService;->isSafeModeEnabled()Z
PLcom/android/server/wm/WindowManagerService;->isValidPictureInPictureAspectRatio(IF)Z
PLcom/android/server/wm/WindowManagerService;->lambda$requestAssistScreenshot$2(Landroid/app/IAssistDataReceiver;Landroid/graphics/Bitmap;)V
PLcom/android/server/wm/WindowManagerService;->markForSeamlessRotation(Lcom/android/server/wm/WindowState;Z)V
PLcom/android/server/wm/WindowManagerService;->notifyAppRelaunchesCleared(Landroid/os/IBinder;)V
PLcom/android/server/wm/WindowManagerService;->notifyAppRelaunching(Landroid/os/IBinder;)V
PLcom/android/server/wm/WindowManagerService;->notifyAppRelaunchingFinished(Landroid/os/IBinder;)V
PLcom/android/server/wm/WindowManagerService;->notifyKeyguardFlagsChanged(Ljava/lang/Runnable;I)V
PLcom/android/server/wm/WindowManagerService;->notifyTaskRemovedFromRecents(II)V
PLcom/android/server/wm/WindowManagerService;->onKeyguardOccludedChanged(Z)V
PLcom/android/server/wm/WindowManagerService;->onPowerKeyDown(Z)V
PLcom/android/server/wm/WindowManagerService;->onRectangleOnScreenRequested(Landroid/os/IBinder;Landroid/graphics/Rect;)V
PLcom/android/server/wm/WindowManagerService;->performBootTimeout()V
PLcom/android/server/wm/WindowManagerService;->pokeDrawLock(Lcom/android/server/wm/Session;Landroid/os/IBinder;)V
PLcom/android/server/wm/WindowManagerService;->postWindowRemoveCleanupLocked(Lcom/android/server/wm/WindowState;)V
PLcom/android/server/wm/WindowManagerService;->prepareAppTransition(IZ)V
PLcom/android/server/wm/WindowManagerService;->registerAppFreezeListener(Lcom/android/server/wm/WindowManagerService$AppFreezeListener;)V
PLcom/android/server/wm/WindowManagerService;->removeRotationWatcher(Landroid/view/IRotationWatcher;)V
PLcom/android/server/wm/WindowManagerService;->removeWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;)V
PLcom/android/server/wm/WindowManagerService;->removeWindowToken(Landroid/os/IBinder;I)V
PLcom/android/server/wm/WindowManagerService;->requestAssistScreenshot(Landroid/app/IAssistDataReceiver;)Z
PLcom/android/server/wm/WindowManagerService;->screenTurningOff(Lcom/android/server/policy/WindowManagerPolicy$ScreenOffListener;)V
PLcom/android/server/wm/WindowManagerService;->sendSetRunningRemoteAnimation(IZ)V
PLcom/android/server/wm/WindowManagerService;->setAppFullscreen(Landroid/os/IBinder;Z)V
PLcom/android/server/wm/WindowManagerService;->setCurrentProfileIds([I)V
PLcom/android/server/wm/WindowManagerService;->setNavBarVirtualKeyHapticFeedbackEnabled(Z)V
PLcom/android/server/wm/WindowManagerService;->setPipVisibility(Z)V
PLcom/android/server/wm/WindowManagerService;->setShelfHeight(ZI)V
PLcom/android/server/wm/WindowManagerService;->setTransparentRegionWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;Landroid/graphics/Region;)V
PLcom/android/server/wm/WindowManagerService;->setWindowOpaque(Landroid/os/IBinder;Z)V
PLcom/android/server/wm/WindowManagerService;->statusBarVisibilityChanged(II)V
PLcom/android/server/wm/WindowManagerService;->thawDisplayRotation(I)V
PLcom/android/server/wm/WindowManagerService;->thawRotation()V
PLcom/android/server/wm/WindowManagerService;->triggerAnimationFailsafe()V
PLcom/android/server/wm/WindowManagerService;->unregisterAppFreezeListener(Lcom/android/server/wm/WindowManagerService$AppFreezeListener;)V
PLcom/android/server/wm/WindowManagerService;->unregisterWallpaperVisibilityListener(Landroid/view/IWallpaperVisibilityListener;I)V
PLcom/android/server/wm/WindowManagerService;->updateAppOpsState()V
PLcom/android/server/wm/WindowManagerService;->updatePointerIcon(Landroid/view/IWindow;)V
PLcom/android/server/wm/WindowManagerThreadPriorityBooster;->setBoundsAnimationRunning(Z)V
PLcom/android/server/wm/WindowProcessController;->addPackage(Ljava/lang/String;J)V
PLcom/android/server/wm/WindowProcessController;->addRecentTask(Lcom/android/server/wm/TaskRecord;)V
PLcom/android/server/wm/WindowProcessController;->appEarlyNotResponding(Ljava/lang/String;Ljava/lang/Runnable;)V
PLcom/android/server/wm/WindowProcessController;->appNotResponding(Ljava/lang/String;Ljava/lang/Runnable;Ljava/lang/Runnable;)Z
PLcom/android/server/wm/WindowProcessController;->areBackgroundActivityStartsAllowed()Z
PLcom/android/server/wm/WindowProcessController;->clearPackageList()V
PLcom/android/server/wm/WindowProcessController;->computeOomAdjFromActivities(ILcom/android/server/wm/WindowProcessController$ComputeOomAdjCallback;)I
PLcom/android/server/wm/WindowProcessController;->computeRelaunchReason()I
PLcom/android/server/wm/WindowProcessController;->getCurrentProcState()I
PLcom/android/server/wm/WindowProcessController;->getFgInteractionTime()J
PLcom/android/server/wm/WindowProcessController;->getInteractionEventTime()J
PLcom/android/server/wm/WindowProcessController;->getParent()Lcom/android/server/wm/ConfigurationContainer;
PLcom/android/server/wm/WindowProcessController;->getRequiredAbi()Ljava/lang/String;
PLcom/android/server/wm/WindowProcessController;->getWhenUnimportant()J
PLcom/android/server/wm/WindowProcessController;->hasClientActivities()Z
PLcom/android/server/wm/WindowProcessController;->hasForegroundActivities()Z
PLcom/android/server/wm/WindowProcessController;->hasForegroundServices()Z
PLcom/android/server/wm/WindowProcessController;->hasOverlayUi()Z
PLcom/android/server/wm/WindowProcessController;->hasPendingUiClean()Z
PLcom/android/server/wm/WindowProcessController;->hasStartedActivity(Lcom/android/server/wm/ActivityRecord;)Z
PLcom/android/server/wm/WindowProcessController;->hasTopUi()Z
PLcom/android/server/wm/WindowProcessController;->isInstrumentingWithBackgroundActivityStartPrivileges()Z
PLcom/android/server/wm/WindowProcessController;->isInterestingToUser()Z
PLcom/android/server/wm/WindowProcessController;->isPerceptible()Z
PLcom/android/server/wm/WindowProcessController;->makeFinishingForProcessRemoved()V
PLcom/android/server/wm/WindowProcessController;->onRequestedOverrideConfigurationChanged(Landroid/content/res/Configuration;)V
PLcom/android/server/wm/WindowProcessController;->postPendingUiCleanMsg(Z)V
PLcom/android/server/wm/WindowProcessController;->registerDisplayConfigurationListenerLocked(Lcom/android/server/wm/ActivityDisplay;)V
PLcom/android/server/wm/WindowProcessController;->removeActivity(Lcom/android/server/wm/ActivityRecord;)V
PLcom/android/server/wm/WindowProcessController;->removeRecentTask(Lcom/android/server/wm/TaskRecord;)V
PLcom/android/server/wm/WindowProcessController;->setHasForegroundServices(Z)V
PLcom/android/server/wm/WindowProcessController;->setHasOverlayUi(Z)V
PLcom/android/server/wm/WindowProcessController;->setHasTopUi(Z)V
PLcom/android/server/wm/WindowProcessController;->setPendingUiCleanAndForceProcessStateUpTo(I)V
PLcom/android/server/wm/WindowProcessController;->shouldKillProcessForRemovedTask(Lcom/android/server/wm/TaskRecord;)Z
PLcom/android/server/wm/WindowProcessController;->stopFreezingActivities()V
PLcom/android/server/wm/WindowProcessController;->toString()Ljava/lang/String;
PLcom/android/server/wm/WindowProcessController;->unregisterDisplayConfigurationListenerLocked()V
PLcom/android/server/wm/WindowState$1;->compare(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)I
PLcom/android/server/wm/WindowState$1;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
PLcom/android/server/wm/WindowState$2;->isInteractive()Z
PLcom/android/server/wm/WindowState$2;->wakeUp(JILjava/lang/String;)V
PLcom/android/server/wm/WindowState$3;->run()V
PLcom/android/server/wm/WindowState$DeathRecipient;->binderDied()V
PLcom/android/server/wm/WindowState$MoveAnimationSpec;-><init>(Lcom/android/server/wm/WindowState;IIII)V
PLcom/android/server/wm/WindowState$MoveAnimationSpec;->apply(Landroid/view/SurfaceControl$Transaction;Landroid/view/SurfaceControl;J)V
PLcom/android/server/wm/WindowState$MoveAnimationSpec;->getDuration()J
PLcom/android/server/wm/WindowState;->canBeImeTarget()Z
PLcom/android/server/wm/WindowState;->canShowWhenLocked()Z
PLcom/android/server/wm/WindowState;->checkPolicyVisibilityChange()V
PLcom/android/server/wm/WindowState;->clearAnimatingFlags()Z
PLcom/android/server/wm/WindowState;->disposeInputChannel()V
PLcom/android/server/wm/WindowState;->forAllWindowBottomToTop(Lcom/android/internal/util/ToBooleanFunction;)Z
PLcom/android/server/wm/WindowState;->forAllWindowTopToBottom(Lcom/android/internal/util/ToBooleanFunction;)Z
PLcom/android/server/wm/WindowState;->forceWindowsScaleableInTransaction(Z)V
PLcom/android/server/wm/WindowState;->frameCoversEntireAppTokenBounds()Z
PLcom/android/server/wm/WindowState;->getContainingFrame()Landroid/graphics/Rect;
PLcom/android/server/wm/WindowState;->getContentInsets()Landroid/graphics/Rect;
PLcom/android/server/wm/WindowState;->getContentInsets(Landroid/graphics/Rect;)V
PLcom/android/server/wm/WindowState;->getDisplayFrameLw()Landroid/graphics/Rect;
PLcom/android/server/wm/WindowState;->getDisplayedBounds()Landroid/graphics/Rect;
PLcom/android/server/wm/WindowState;->getFrameNumber()J
PLcom/android/server/wm/WindowState;->getGivenContentInsetsLw()Landroid/graphics/Rect;
PLcom/android/server/wm/WindowState;->getGivenInsetsPendingLw()Z
PLcom/android/server/wm/WindowState;->getGivenVisibleInsetsLw()Landroid/graphics/Rect;
PLcom/android/server/wm/WindowState;->getOverscanFrameLw()Landroid/graphics/Rect;
PLcom/android/server/wm/WindowState;->getParentFrame()Landroid/graphics/Rect;
PLcom/android/server/wm/WindowState;->getRotationAnimationHint()I
PLcom/android/server/wm/WindowState;->getStableFrameLw()Landroid/graphics/Rect;
PLcom/android/server/wm/WindowState;->getStableInsets()Landroid/graphics/Rect;
PLcom/android/server/wm/WindowState;->getStableInsets(Landroid/graphics/Rect;)V
PLcom/android/server/wm/WindowState;->getSurfaceLayer()I
PLcom/android/server/wm/WindowState;->getTransformationMatrix([FLandroid/graphics/Matrix;)V
PLcom/android/server/wm/WindowState;->getVisibleBounds(Landroid/graphics/Rect;)V
PLcom/android/server/wm/WindowState;->getVisibleFrameLw()Landroid/graphics/Rect;
PLcom/android/server/wm/WindowState;->getWindowInfo()Landroid/view/WindowInfo;
PLcom/android/server/wm/WindowState;->hasAppShownWindows()Z
PLcom/android/server/wm/WindowState;->hasDrawnLw()Z
PLcom/android/server/wm/WindowState;->hasVisibleNotDrawnWallpaper()Z
PLcom/android/server/wm/WindowState;->hidePermanentlyLw()V
PLcom/android/server/wm/WindowState;->isClosing()Z
PLcom/android/server/wm/WindowState;->isPotentialDragTarget()Z
PLcom/android/server/wm/WindowState;->layoutInParentFrame()Z
PLcom/android/server/wm/WindowState;->onAnimationFinished()V
PLcom/android/server/wm/WindowState;->onAnimationLeashCreated(Landroid/view/SurfaceControl$Transaction;Landroid/view/SurfaceControl;)V
PLcom/android/server/wm/WindowState;->onAnimationLeashDestroyed(Landroid/view/SurfaceControl$Transaction;)V
PLcom/android/server/wm/WindowState;->onMovedByResize()V
PLcom/android/server/wm/WindowState;->onResize()V
PLcom/android/server/wm/WindowState;->onSetAppExiting()Z
PLcom/android/server/wm/WindowState;->onStartFreezingScreen()V
PLcom/android/server/wm/WindowState;->onStopFreezingScreen()Z
PLcom/android/server/wm/WindowState;->orientationChangeTimedOut()V
PLcom/android/server/wm/WindowState;->pokeDrawLockLw(J)V
PLcom/android/server/wm/WindowState;->removeIfPossible()V
PLcom/android/server/wm/WindowState;->removeIfPossible(Z)V
PLcom/android/server/wm/WindowState;->removeImmediately()V
PLcom/android/server/wm/WindowState;->requestUpdateWallpaperIfNeeded()V
PLcom/android/server/wm/WindowState;->resetAppOpsState()V
PLcom/android/server/wm/WindowState;->resetLastContentInsets()V
PLcom/android/server/wm/WindowState;->seamlesslyRotateIfAllowed(Landroid/view/SurfaceControl$Transaction;IIZ)V
PLcom/android/server/wm/WindowState;->setupWindowForRemoveOnExit()V
PLcom/android/server/wm/WindowState;->shouldKeepVisibleDeadAppWindow()Z
PLcom/android/server/wm/WindowState;->startAnimation(Landroid/view/animation/Animation;)V
PLcom/android/server/wm/WindowState;->startMoveAnimation(II)V
PLcom/android/server/wm/WindowState;->subtractInsets(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
PLcom/android/server/wm/WindowState;->translateToWindowX(F)F
PLcom/android/server/wm/WindowState;->translateToWindowY(F)F
PLcom/android/server/wm/WindowState;->updateAppOpsState()V
PLcom/android/server/wm/WindowState;->waitingForReplacement()Z
PLcom/android/server/wm/WindowStateAnimator;->cancelExitAnimationForNextAnimationLocked()V
PLcom/android/server/wm/WindowStateAnimator;->destroyDeferredSurfaceLocked()V
PLcom/android/server/wm/WindowStateAnimator;->onAnimationFinished()V
PLcom/android/server/wm/WindowStateAnimator;->preserveSurfaceLocked()V
PLcom/android/server/wm/WindowStateAnimator;->setOpaqueLocked(Z)V
PLcom/android/server/wm/WindowStateAnimator;->setTransparentRegionHintLocked(Landroid/graphics/Region;)V
PLcom/android/server/wm/WindowStateAnimator;->tryChangeFormatInPlaceLocked()Z
PLcom/android/server/wm/WindowSurfaceController;->deferTransactionUntil(Landroid/os/IBinder;J)V
PLcom/android/server/wm/WindowSurfaceController;->forceScaleableInTransaction(Z)V
PLcom/android/server/wm/WindowSurfaceController;->getHandle()Landroid/os/IBinder;
PLcom/android/server/wm/WindowSurfaceController;->setOpaque(Z)V
PLcom/android/server/wm/WindowSurfaceController;->setTransparentRegionHint(Landroid/graphics/Region;)V
PLcom/android/server/wm/WindowSurfacePlacer;->isInLayout()Z
PLcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V
PLcom/android/server/wm/WindowToken;->canLayerAboveSystemBars()Z
PLcom/android/server/wm/WindowToken;->isEmpty()Z
PLcom/android/server/wm/WindowToken;->lambda$new$0$WindowToken(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)I
PLcom/android/server/wm/WindowToken;->lambda$new$0(Lcom/android/server/wm/WindowToken;Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)I
PLcom/android/server/wm/WindowToken;->removeAllWindowsIfPossible()V
PLcom/android/server/wm/WindowToken;->removeImmediately()V
PLcom/android/server/wm/WindowToken;->setExiting()V
PLcom/android/server/wm/WindowToken;->windowsCanBeWallpaperTarget()Z
PLcom/android/server/wm/animation/ClipRectLRAnimation;-><init>(IIII)V
PLcom/android/server/wm/animation/ClipRectLRAnimation;->applyTransformation(FLandroid/view/animation/Transformation;)V
PLcom/android/server/wm/animation/ClipRectTBAnimation;-><init>(IIIIIILandroid/view/animation/Interpolator;)V
PLcom/android/server/wm/animation/ClipRectTBAnimation;->applyTransformation(FLandroid/view/animation/Transformation;)V
PLcom/android/server/wm/animation/ClipRectTBAnimation;->getTransformation(JLandroid/view/animation/Transformation;)Z
PLcom/android/server/wm/utils/CoordinateTransforms;->transformLogicalToPhysicalCoordinates(IIILandroid/graphics/Matrix;)V
PLcom/google/protobuf/GeneratedMessageLite$Builder;->copyOnWrite()V
PLcom/google/protobuf/GeneratedMessageLite$Builder;->mergeFrom(Lcom/google/protobuf/GeneratedMessageLite;)Lcom/google/protobuf/GeneratedMessageLite$Builder;
PLcom/google/protobuf/GeneratedMessageLite$MergeFromVisitor;-><init>()V
PLcom/google/protobuf/GeneratedMessageLite$MergeFromVisitor;->visitDouble(ZDZD)D
PLcom/google/protobuf/GeneratedMessageLite$MergeFromVisitor;->visitInt(ZIZI)I
PLcom/google/protobuf/GeneratedMessageLite$MergeFromVisitor;->visitLong(ZJZJ)J
PLcom/google/protobuf/GeneratedMessageLite$MergeFromVisitor;->visitMessage(Lcom/google/protobuf/MessageLite;Lcom/google/protobuf/MessageLite;)Lcom/google/protobuf/MessageLite;
PLcom/google/protobuf/GeneratedMessageLite$MergeFromVisitor;->visitUnknownFields(Lcom/google/protobuf/UnknownFieldSetLite;Lcom/google/protobuf/UnknownFieldSetLite;)Lcom/google/protobuf/UnknownFieldSetLite;
PLcom/google/protobuf/GeneratedMessageLite$MethodToInvoke;-><init>(Ljava/lang/String;I)V
PLcom/google/protobuf/GeneratedMessageLite$MethodToInvoke;->values()[Lcom/google/protobuf/GeneratedMessageLite$MethodToInvoke;
PLcom/google/protobuf/GeneratedMessageLite;->dynamicMethod(Lcom/google/protobuf/GeneratedMessageLite$MethodToInvoke;)Ljava/lang/Object;
PLcom/google/protobuf/GeneratedMessageLite;->dynamicMethod(Lcom/google/protobuf/GeneratedMessageLite$MethodToInvoke;Ljava/lang/Object;)Ljava/lang/Object;
PLcom/google/protobuf/GeneratedMessageLite;->makeImmutable()V
PLcom/google/protobuf/GeneratedMessageLite;->visit(Lcom/google/protobuf/GeneratedMessageLite$Visitor;Lcom/google/protobuf/GeneratedMessageLite;)V
PLcom/google/protobuf/UnknownFieldSetLite;-><init>(I[I[Ljava/lang/Object;Z)V
SPLandroid/hardware/authsecret/V1_0/IAuthSecret$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/authsecret/V1_0/IAuthSecret;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/authsecret/V1_0/IAuthSecret;
SPLandroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprint$Proxy;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprint$Proxy;->enumerate()I
SPLandroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprint$Proxy;->getAuthenticatorId()J
SPLandroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprint$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprint$Proxy;->setActiveGroup(ILjava/lang/String;)I
SPLandroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprint$Proxy;->setNotify(Landroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprintClientCallback;)J
SPLandroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprint;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprint;
SPLandroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprintClientCallback$Stub;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprintClientCallback$Stub;->onTransact(ILandroid/os/HwParcel;Landroid/os/HwParcel;I)V
SPLandroid/hardware/configstore/V1_0/ISurfaceFlingerConfigs$Proxy;->hasHDRDisplay()Landroid/hardware/configstore/V1_0/OptionalBool;
SPLandroid/hardware/configstore/V1_0/ISurfaceFlingerConfigs$Proxy;->hasWideColorDisplay()Landroid/hardware/configstore/V1_0/OptionalBool;
SPLandroid/hardware/configstore/V1_0/ISurfaceFlingerConfigs$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/configstore/V1_0/ISurfaceFlingerConfigs;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/configstore/V1_0/ISurfaceFlingerConfigs;
SPLandroid/hardware/health/V1_0/HealthInfo;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/health/V2_0/DiskStats;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/health/V2_0/HealthInfo;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/health/V2_0/IHealth$Proxy;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hardware/health/V2_0/IHealth$Proxy;->equals(Ljava/lang/Object;)Z
SPLandroid/hardware/health/V2_0/IHealth$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/health/V2_0/IHealth$Proxy;->registerCallback(Landroid/hardware/health/V2_0/IHealthInfoCallback;)I
SPLandroid/hardware/health/V2_0/IHealth$Proxy;->update()I
SPLandroid/hardware/health/V2_0/IHealth;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/health/V2_0/IHealth;
SPLandroid/hardware/health/V2_0/IHealthInfoCallback$Stub;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hardware/health/V2_0/IHealthInfoCallback$Stub;->onTransact(ILandroid/os/HwParcel;Landroid/os/HwParcel;I)V
SPLandroid/hardware/health/V2_0/StorageAttribute;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/health/V2_0/StorageInfo;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/oemlock/V1_0/IOemLock$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/oemlock/V1_0/IOemLock;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/oemlock/V1_0/IOemLock;
SPLandroid/hardware/usb/V1_0/IUsb$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/usb/V1_0/IUsb$Proxy;->linkToDeath(Landroid/os/IHwBinder$DeathRecipient;J)Z
SPLandroid/hardware/usb/V1_0/IUsb$Proxy;->queryPortStatus()V
SPLandroid/hardware/usb/V1_0/IUsb$Proxy;->setCallback(Landroid/hardware/usb/V1_0/IUsbCallback;)V
SPLandroid/hardware/usb/V1_0/IUsb;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/usb/V1_0/IUsb;
SPLandroid/hardware/usb/V1_0/PortStatus;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/usb/V1_1/PortStatus_1_1;->readVectorFromParcel(Landroid/os/HwParcel;)Ljava/util/ArrayList;
SPLandroid/hardware/usb/V1_2/IUsbCallback$Stub;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hardware/usb/V1_2/IUsbCallback$Stub;->onTransact(ILandroid/os/HwParcel;Landroid/os/HwParcel;I)V
SPLandroid/hardware/weaver/V1_0/IWeaver$Proxy;->getConfig(Landroid/hardware/weaver/V1_0/IWeaver$getConfigCallback;)V
SPLandroid/hardware/weaver/V1_0/IWeaver$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/weaver/V1_0/IWeaver;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/weaver/V1_0/IWeaver;
SPLandroid/hardware/wifi/V1_0/IWifi$Proxy;->getChip(ILandroid/hardware/wifi/V1_0/IWifi$getChipCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifi$Proxy;->getChipIds(Landroid/hardware/wifi/V1_0/IWifi$getChipIdsCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifi$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/wifi/V1_0/IWifi$Proxy;->isStarted()Z
SPLandroid/hardware/wifi/V1_0/IWifi$Proxy;->linkToDeath(Landroid/os/IHwBinder$DeathRecipient;J)Z
SPLandroid/hardware/wifi/V1_0/IWifi$Proxy;->registerEventCallback(Landroid/hardware/wifi/V1_0/IWifiEventCallback;)Landroid/hardware/wifi/V1_0/WifiStatus;
SPLandroid/hardware/wifi/V1_0/IWifi$Proxy;->start()Landroid/hardware/wifi/V1_0/WifiStatus;
SPLandroid/hardware/wifi/V1_0/IWifi$Proxy;->stop()Landroid/hardware/wifi/V1_0/WifiStatus;
SPLandroid/hardware/wifi/V1_0/IWifi;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/V1_0/IWifi;
SPLandroid/hardware/wifi/V1_0/IWifiChip$ChipIfaceCombination;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/wifi/V1_0/IWifiChip$ChipIfaceCombinationLimit;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/wifi/V1_0/IWifiChip$ChipMode;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/wifi/V1_0/IWifiChip$ChipMode;->readVectorFromParcel(Landroid/os/HwParcel;)Ljava/util/ArrayList;
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->configureChip(I)Landroid/hardware/wifi/V1_0/WifiStatus;
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->createNanIface(Landroid/hardware/wifi/V1_0/IWifiChip$createNanIfaceCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->createRttController(Landroid/hardware/wifi/V1_0/IWifiIface;Landroid/hardware/wifi/V1_0/IWifiChip$createRttControllerCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->createStaIface(Landroid/hardware/wifi/V1_0/IWifiChip$createStaIfaceCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->getApIfaceNames(Landroid/hardware/wifi/V1_0/IWifiChip$getApIfaceNamesCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->getAvailableModes(Landroid/hardware/wifi/V1_0/IWifiChip$getAvailableModesCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->getMode(Landroid/hardware/wifi/V1_0/IWifiChip$getModeCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->getNanIface(Ljava/lang/String;Landroid/hardware/wifi/V1_0/IWifiChip$getNanIfaceCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->getNanIfaceNames(Landroid/hardware/wifi/V1_0/IWifiChip$getNanIfaceNamesCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->getP2pIfaceNames(Landroid/hardware/wifi/V1_0/IWifiChip$getP2pIfaceNamesCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->getStaIface(Ljava/lang/String;Landroid/hardware/wifi/V1_0/IWifiChip$getStaIfaceCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->getStaIfaceNames(Landroid/hardware/wifi/V1_0/IWifiChip$getStaIfaceNamesCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->removeNanIface(Ljava/lang/String;)Landroid/hardware/wifi/V1_0/WifiStatus;
SPLandroid/hardware/wifi/V1_0/IWifiChip$Proxy;->removeStaIface(Ljava/lang/String;)Landroid/hardware/wifi/V1_0/WifiStatus;
SPLandroid/hardware/wifi/V1_0/IWifiChip;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/V1_0/IWifiChip;
SPLandroid/hardware/wifi/V1_0/IWifiEventCallback$Stub;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hardware/wifi/V1_0/IWifiEventCallback$Stub;->onTransact(ILandroid/os/HwParcel;Landroid/os/HwParcel;I)V
SPLandroid/hardware/wifi/V1_0/IWifiNanIface$Proxy;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hardware/wifi/V1_0/IWifiNanIface$Proxy;->getCapabilitiesRequest(S)Landroid/hardware/wifi/V1_0/WifiStatus;
SPLandroid/hardware/wifi/V1_0/IWifiNanIface$Proxy;->getName(Landroid/hardware/wifi/V1_0/IWifiIface$getNameCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiNanIface$Proxy;->getType(Landroid/hardware/wifi/V1_0/IWifiIface$getTypeCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiNanIface$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/wifi/V1_0/IWifiNanIface;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/V1_0/IWifiNanIface;
SPLandroid/hardware/wifi/V1_0/IWifiRttController$Proxy;->getCapabilities(Landroid/hardware/wifi/V1_0/IWifiRttController$getCapabilitiesCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiRttController$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/wifi/V1_0/IWifiRttController$Proxy;->registerEventCallback(Landroid/hardware/wifi/V1_0/IWifiRttControllerEventCallback;)Landroid/hardware/wifi/V1_0/WifiStatus;
SPLandroid/hardware/wifi/V1_0/IWifiRttController;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/V1_0/IWifiRttController;
SPLandroid/hardware/wifi/V1_0/IWifiRttControllerEventCallback$Stub;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->enableLinkLayerStatsCollection(Z)Landroid/hardware/wifi/V1_0/WifiStatus;
SPLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->getBackgroundScanCapabilities(Landroid/hardware/wifi/V1_0/IWifiStaIface$getBackgroundScanCapabilitiesCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->getName(Landroid/hardware/wifi/V1_0/IWifiIface$getNameCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->getType(Landroid/hardware/wifi/V1_0/IWifiIface$getTypeCallback;)V
SPLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/wifi/V1_0/IWifiStaIface$Proxy;->registerEventCallback(Landroid/hardware/wifi/V1_0/IWifiStaIfaceEventCallback;)Landroid/hardware/wifi/V1_0/WifiStatus;
SPLandroid/hardware/wifi/V1_0/IWifiStaIface;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/V1_0/IWifiStaIface;
SPLandroid/hardware/wifi/V1_0/IWifiStaIfaceEventCallback$Stub;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hardware/wifi/V1_0/NanCapabilities;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/wifi/V1_0/RttCapabilities;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/wifi/V1_0/StaBackgroundScanCapabilities;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/wifi/V1_0/StaBackgroundScanCapabilities;->toString()Ljava/lang/String;
SPLandroid/hardware/wifi/V1_0/WifiNanStatus;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/wifi/V1_0/WifiStatus;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/wifi/V1_2/IWifiChip$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/wifi/V1_2/IWifiChip$Proxy;->registerEventCallback_1_2(Landroid/hardware/wifi/V1_2/IWifiChipEventCallback;)Landroid/hardware/wifi/V1_0/WifiStatus;
SPLandroid/hardware/wifi/V1_2/IWifiChip$Proxy;->resetTxPowerScenario()Landroid/hardware/wifi/V1_0/WifiStatus;
SPLandroid/hardware/wifi/V1_2/IWifiChip;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/V1_2/IWifiChip;
SPLandroid/hardware/wifi/V1_2/IWifiChipEventCallback$Stub;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hardware/wifi/V1_2/IWifiChipEventCallback$Stub;->onTransact(ILandroid/os/HwParcel;Landroid/os/HwParcel;I)V
SPLandroid/hardware/wifi/V1_2/IWifiNanIface$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/wifi/V1_2/IWifiNanIface$Proxy;->registerEventCallback_1_2(Landroid/hardware/wifi/V1_2/IWifiNanIfaceEventCallback;)Landroid/hardware/wifi/V1_0/WifiStatus;
SPLandroid/hardware/wifi/V1_2/IWifiNanIface;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/V1_2/IWifiNanIface;
SPLandroid/hardware/wifi/V1_2/IWifiNanIfaceEventCallback$Stub;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hardware/wifi/V1_2/IWifiNanIfaceEventCallback$Stub;->onTransact(ILandroid/os/HwParcel;Landroid/os/HwParcel;I)V
SPLandroid/hardware/wifi/V1_3/IWifiChip$Proxy;->getCapabilities_1_3(Landroid/hardware/wifi/V1_3/IWifiChip$getCapabilities_1_3Callback;)V
SPLandroid/hardware/wifi/V1_3/IWifiChip$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/wifi/V1_3/IWifiChip;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/V1_3/IWifiChip;
SPLandroid/hardware/wifi/supplicant/V1_0/ISupplicant$Proxy;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hardware/wifi/supplicant/V1_0/ISupplicant$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/wifi/supplicant/V1_0/ISupplicant$Proxy;->linkToDeath(Landroid/os/IHwBinder$DeathRecipient;J)Z
SPLandroid/hardware/wifi/supplicant/V1_0/ISupplicant;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/supplicant/V1_0/ISupplicant;
SPLandroid/hardware/wifi/supplicant/V1_0/ISupplicantIface$Proxy;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hardware/wifi/supplicant/V1_0/ISupplicantIface$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/wifi/supplicant/V1_0/ISupplicantIface;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface;
SPLandroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;->readEmbeddedFromParcel(Landroid/os/HwParcel;Landroid/os/HwBlob;J)V
SPLandroid/hardware/wifi/supplicant/V1_1/ISupplicant$Proxy;->addInterface(Landroid/hardware/wifi/supplicant/V1_0/ISupplicant$IfaceInfo;Landroid/hardware/wifi/supplicant/V1_1/ISupplicant$addInterfaceCallback;)V
SPLandroid/hardware/wifi/supplicant/V1_1/ISupplicant$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/wifi/supplicant/V1_1/ISupplicant;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/supplicant/V1_1/ISupplicant;
SPLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface$Proxy;->registerCallback_1_2(Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIfaceCallback;)Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;
SPLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface;->asInterface(Landroid/os/IHwBinder;)Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface;
SPLandroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIfaceCallback$Stub;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hidl/manager/V1_0/IServiceManager$Proxy;->getTransport(Ljava/lang/String;Ljava/lang/String;)B
SPLandroid/hidl/manager/V1_0/IServiceManager$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hidl/manager/V1_0/IServiceManager$Proxy;->linkToDeath(Landroid/os/IHwBinder$DeathRecipient;J)Z
SPLandroid/hidl/manager/V1_0/IServiceManager$Proxy;->registerForNotifications(Ljava/lang/String;Ljava/lang/String;Landroid/hidl/manager/V1_0/IServiceNotification;)Z
SPLandroid/hidl/manager/V1_0/IServiceManager;->asInterface(Landroid/os/IHwBinder;)Landroid/hidl/manager/V1_0/IServiceManager;
SPLandroid/hidl/manager/V1_0/IServiceManager;->getService()Landroid/hidl/manager/V1_0/IServiceManager;
SPLandroid/hidl/manager/V1_0/IServiceNotification$Stub;-><init>()V
SPLandroid/hidl/manager/V1_0/IServiceNotification$Stub;->asBinder()Landroid/os/IHwBinder;
SPLandroid/hidl/manager/V1_0/IServiceNotification$Stub;->onTransact(ILandroid/os/HwParcel;Landroid/os/HwParcel;I)V
SPLandroid/hidl/manager/V1_2/IServiceManager$Proxy;->interfaceChain()Ljava/util/ArrayList;
SPLandroid/hidl/manager/V1_2/IServiceManager$Proxy;->linkToDeath(Landroid/os/IHwBinder$DeathRecipient;J)Z
SPLandroid/hidl/manager/V1_2/IServiceManager$Proxy;->listManifestByInterface(Ljava/lang/String;)Ljava/util/ArrayList;
SPLandroid/hidl/manager/V1_2/IServiceManager$Proxy;->registerForNotifications(Ljava/lang/String;Ljava/lang/String;Landroid/hidl/manager/V1_0/IServiceNotification;)Z
SPLandroid/hidl/manager/V1_2/IServiceManager;->asInterface(Landroid/os/IHwBinder;)Landroid/hidl/manager/V1_2/IServiceManager;
SPLandroid/hidl/manager/V1_2/IServiceManager;->getService()Landroid/hidl/manager/V1_2/IServiceManager;
SPLandroid/net/INetd$Stub$Proxy;->bandwidthSetGlobalAlert(J)V
SPLandroid/net/INetd$Stub$Proxy;->firewallEnableChildChain(IZ)V
SPLandroid/net/INetd$Stub$Proxy;->firewallReplaceUidChain(Ljava/lang/String;Z[I)Z
SPLandroid/net/INetd$Stub$Proxy;->firewallSetFirewallType(I)V
SPLandroid/net/INetd$Stub$Proxy;->firewallSetUidRule(III)V
SPLandroid/net/INetd$Stub$Proxy;->interfaceClearAddrs(Ljava/lang/String;)V
SPLandroid/net/INetd$Stub$Proxy;->interfaceGetCfg(Ljava/lang/String;)Landroid/net/InterfaceConfigurationParcel;
SPLandroid/net/INetd$Stub$Proxy;->interfaceGetList()[Ljava/lang/String;
SPLandroid/net/INetd$Stub$Proxy;->interfaceSetEnableIPv6(Ljava/lang/String;Z)V
SPLandroid/net/INetd$Stub$Proxy;->interfaceSetIPv6PrivacyExtensions(Ljava/lang/String;Z)V
SPLandroid/net/INetd$Stub$Proxy;->isAlive()Z
SPLandroid/net/INetd$Stub$Proxy;->networkSetPermissionForUser(I[I)V
SPLandroid/net/INetd$Stub$Proxy;->registerUnsolicitedEventListener(Landroid/net/INetdUnsolicitedEventListener;)V
SPLandroid/net/INetd$Stub$Proxy;->socketDestroy([Landroid/net/UidRangeParcel;[I)V
SPLandroid/net/INetd$Stub$Proxy;->tetherGetStats()[Landroid/net/TetherStatsParcel;
SPLandroid/net/INetd$Stub$Proxy;->trafficSetNetPermForUids(I[I)V
SPLandroid/net/INetd$Stub;->asInterface(Landroid/os/IBinder;)Landroid/net/INetd;
SPLandroid/net/INetdUnsolicitedEventListener$Stub;->asBinder()Landroid/os/IBinder;
SPLandroid/net/INetdUnsolicitedEventListener$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
SPLandroid/net/NetworkStackClient;->getInstance()Landroid/net/NetworkStackClient;
SPLandroid/net/NetworkStackClient;->log(Ljava/lang/String;)V
SPLandroid/net/NetworkStackClient;->makeIpClient(Ljava/lang/String;Landroid/net/ip/IIpClientCallbacks;)V
SPLandroid/net/NetworkStackClient;->requestConnector(Landroid/net/NetworkStackClient$NetworkStackCallback;)V
SPLandroid/net/NetworkStackClient;->start(Landroid/content/Context;)V
SPLandroid/net/ip/IpClientCallbacks;-><init>()V
SPLandroid/net/ip/IpClientUtil;->makeIpClient(Landroid/content/Context;Ljava/lang/String;Landroid/net/ip/IpClientCallbacks;)V
SPLandroid/net/ip/IpServer$Dependencies;->getNetdService()Landroid/net/INetd;
SPLandroid/net/ip/IpServer$InitialState;->enter()V
SPLandroid/net/ip/IpServer$InitialState;->processMessage(Landroid/os/Message;)Z
SPLandroid/net/ip/IpServer;-><init>(Ljava/lang/String;Landroid/os/Looper;ILandroid/net/util/SharedLog;Landroid/os/INetworkManagementService;Landroid/net/INetworkStatsService;Landroid/net/ip/IpServer$Callback;ZLandroid/net/ip/IpServer$Dependencies;)V
SPLandroid/net/ip/IpServer;->getStateString(I)Ljava/lang/String;
SPLandroid/net/ip/IpServer;->interfaceName()Ljava/lang/String;
SPLandroid/net/ip/IpServer;->interfaceType()I
SPLandroid/net/ip/IpServer;->lastError()I
SPLandroid/net/ip/IpServer;->logMessage(Lcom/android/internal/util/State;I)V
SPLandroid/net/ip/IpServer;->updateUpstreamIPv6LinkProperties(Landroid/net/LinkProperties;)V
SPLandroid/net/metrics/INetdEventListener$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
SPLandroid/net/shared/PrivateDnsConfig;-><init>()V
SPLandroid/net/util/NetdService;->get(J)Landroid/net/INetd;
SPLandroid/net/util/PrefixUtils;->pfx(Ljava/lang/String;)Landroid/net/IpPrefix;
SPLandroid/net/util/SharedLog$Category;-><init>(Ljava/lang/String;I)V
SPLandroid/net/util/SharedLog;-><init>(Landroid/util/LocalLog;Ljava/lang/String;Ljava/lang/String;)V
SPLandroid/net/util/SharedLog;->forSubComponent(Ljava/lang/String;)Landroid/net/util/SharedLog;
SPLandroid/net/util/SharedLog;->log(Ljava/lang/String;)V
SPLandroid/net/util/SharedLog;->logLine(Landroid/net/util/SharedLog$Category;Ljava/lang/String;)Ljava/lang/String;
SPLandroid/net/util/SharedLog;->mark(Ljava/lang/String;)V
SPLandroid/net/util/VersionedBroadcastListener;->startListening()V
SPLandroid/net/wifi/IClientInterface$Stub$Proxy;->asBinder()Landroid/os/IBinder;
SPLandroid/net/wifi/IClientInterface$Stub$Proxy;->getWifiScannerImpl()Landroid/net/wifi/IWifiScannerImpl;
SPLandroid/net/wifi/IPnoScanEvent$Stub;->asBinder()Landroid/os/IBinder;
SPLandroid/net/wifi/IScanEvent$Stub;->asBinder()Landroid/os/IBinder;
SPLandroid/net/wifi/IWifiScannerImpl$Stub$Proxy;->asBinder()Landroid/os/IBinder;
SPLandroid/net/wifi/IWifiScannerImpl$Stub$Proxy;->stopPnoScan()Z
SPLandroid/net/wifi/IWifiScannerImpl$Stub$Proxy;->subscribePnoScanEvents(Landroid/net/wifi/IPnoScanEvent;)V
SPLandroid/net/wifi/IWifiScannerImpl$Stub$Proxy;->subscribeScanEvents(Landroid/net/wifi/IScanEvent;)V
SPLandroid/net/wifi/IWifiScannerImpl$Stub$Proxy;->unsubscribePnoScanEvents()V
SPLandroid/net/wifi/IWifiScannerImpl$Stub$Proxy;->unsubscribeScanEvents()V
SPLandroid/net/wifi/IWificond$Stub$Proxy;->asBinder()Landroid/os/IBinder;
SPLandroid/net/wifi/IWificond$Stub$Proxy;->createClientInterface(Ljava/lang/String;)Landroid/net/wifi/IClientInterface;
SPLandroid/net/wifi/IWificond$Stub$Proxy;->getAvailable2gChannels()[I
SPLandroid/net/wifi/IWificond$Stub$Proxy;->getAvailable5gNonDFSChannels()[I
SPLandroid/net/wifi/IWificond$Stub$Proxy;->getAvailableDFSChannels()[I
SPLandroid/net/wifi/IWificond$Stub$Proxy;->tearDownClientInterface(Ljava/lang/String;)Z
SPLandroid/net/wifi/IWificond$Stub$Proxy;->tearDownInterfaces()V
SPLandroid/os/IIdmap2$Stub$Proxy;->getIdmapPath(Ljava/lang/String;I)Ljava/lang/String;
SPLandroid/os/IIdmap2$Stub$Proxy;->verifyIdmap(Ljava/lang/String;IZI)Z
SPLcom/android/location/provider/LocationProviderBase$Service;->setLocationProviderManager(Lcom/android/internal/location/ILocationProviderManager;)V
SPLcom/android/location/provider/LocationProviderBase$Service;->setRequest(Lcom/android/internal/location/ProviderRequest;Landroid/os/WorkSource;)V
SPLcom/android/location/provider/LocationProviderBase;-><init>(Ljava/lang/String;Lcom/android/location/provider/ProviderPropertiesUnbundled;)V
SPLcom/android/location/provider/LocationProviderBase;->getBinder()Landroid/os/IBinder;
SPLcom/android/location/provider/LocationProviderBase;->onEnable()V
SPLcom/android/location/provider/LocationProviderBase;->onInit()V
SPLcom/android/location/provider/ProviderPropertiesUnbundled;->create(ZZZZZZZII)Lcom/android/location/provider/ProviderPropertiesUnbundled;
SPLcom/android/location/provider/ProviderRequestUnbundled;->getReportLocation()Z
SPLcom/android/server/-$$Lambda$1xUIIN0BU8izGcnYWT-VzczLBFU;-><init>()V
SPLcom/android/server/-$$Lambda$1xUIIN0BU8izGcnYWT-VzczLBFU;->get(Lcom/android/server/NsdService$NativeCallbackReceiver;)Lcom/android/server/NsdService$DaemonConnection;
SPLcom/android/server/-$$Lambda$BatteryService$2x73lvpB0jctMSVP4qb9sHAqRPw;->run()V
SPLcom/android/server/-$$Lambda$ContextHubSystemService$q-5gSEKm3he-4vIHcay4DLtf85E;->run()V
SPLcom/android/server/-$$Lambda$HALkbmbB2IPr_wdFkPjiIWCzJsY;-><init>()V
SPLcom/android/server/-$$Lambda$IpSecService$AnqunmSwm_yQvDDEPg-gokhVs5M;-><init>()V
SPLcom/android/server/-$$Lambda$LocationManagerService$LocationProvider$nsL4uwojBLPzs1TzMfpQIBSm7p0;->run()V
SPLcom/android/server/-$$Lambda$LocationManagerService$c--nwJDEsjSPyI_6OK8sVC5iClY;->onUidImportance(II)V
SPLcom/android/server/-$$Lambda$NetworkManagementService$JKmkb4AIm_PPzQp1XOHOgPPRswo;->sendCallback(Landroid/net/INetworkManagementEventObserver;)V
SPLcom/android/server/-$$Lambda$NetworkManagementService$NetdUnsolicitedEventListener$KpFpi2qBs2OPscTclZ3JRRr-G-g;->run()V
SPLcom/android/server/-$$Lambda$NetworkManagementService$NetdUnsolicitedEventListener$QjjL0oku3yfQh6xuCG2xu7lWiSM;->run()V
SPLcom/android/server/-$$Lambda$NetworkManagementService$NetdUnsolicitedEventListener$ne4qDQiQuX7-WNuF8Q_c7HnWnG0;->run()V
SPLcom/android/server/-$$Lambda$NetworkManagementService$NetdUnsolicitedEventListener$pOV71EYm5PphEVG1PGQnV_c6XiA;->run()V
SPLcom/android/server/-$$Lambda$NetworkManagementService$NetdUnsolicitedEventListener$praKgcnQG9FTHNMGfCVPTVY8mK8;->run()V
SPLcom/android/server/-$$Lambda$NetworkManagementService$VhSl9D6THA_3jE0unleMmkHavJ0;->sendCallback(Landroid/net/INetworkManagementEventObserver;)V
SPLcom/android/server/-$$Lambda$NetworkManagementService$Yw12yNgo43yul34SibAKDtttAK8;->sendCallback(Landroid/net/INetworkManagementEventObserver;)V
SPLcom/android/server/-$$Lambda$NetworkManagementService$_L953cbquVj0BMBP1MZlSTm0Umg;->sendCallback(Landroid/net/INetworkManagementEventObserver;)V
SPLcom/android/server/-$$Lambda$NetworkManagementService$hs6djmKbGd8sG4u1TMglrogNP_s;->sendCallback(Landroid/net/INetworkManagementEventObserver;)V
SPLcom/android/server/-$$Lambda$NetworkManagementService$vX8dVVYxxv3YT9jQuN34bgGgRa8;->sendCallback(Landroid/net/INetworkManagementEventObserver;)V
SPLcom/android/server/-$$Lambda$PersistentDataBlockService$EZl9OYaT2eNL7kfSr2nKUBjxidk;->run()V
SPLcom/android/server/-$$Lambda$PinnerService$3$3Ta6TX4Jq9YbpUYE5Y0r8Xt8rBw;-><init>()V
SPLcom/android/server/-$$Lambda$PinnerService$3$3Ta6TX4Jq9YbpUYE5Y0r8Xt8rBw;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/-$$Lambda$PinnerService$3$RQBbrt9b8esLBxJImxDgVTsP34I;-><init>()V
SPLcom/android/server/-$$Lambda$PinnerService$3$RQBbrt9b8esLBxJImxDgVTsP34I;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/-$$Lambda$PinnerService$GeEX-8XoHeV0LEszxat7jOSlrs4;-><init>()V
SPLcom/android/server/-$$Lambda$PinnerService$GeEX-8XoHeV0LEszxat7jOSlrs4;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/-$$Lambda$QTLvklqCTz22VSzZPEWJs-o0bv4;-><init>()V
SPLcom/android/server/-$$Lambda$ServiceWatcher$IP3HV4ye72eH3YxzGb9dMfcGWPE;->run()V
SPLcom/android/server/-$$Lambda$ServiceWatcher$gVk2fFkq2-aamIua2kIpukAFtf8;->run()V
SPLcom/android/server/-$$Lambda$ServiceWatcher$uru7j1zD-GiN8rndFZ3KWaTrxYo;->run()V
SPLcom/android/server/-$$Lambda$SystemServer$NlJmG18aPrQduhRqASIdcn7G0z8;-><init>()V
SPLcom/android/server/-$$Lambda$SystemServer$NlJmG18aPrQduhRqASIdcn7G0z8;->run()V
SPLcom/android/server/-$$Lambda$SystemServer$RIWNR87PnJ4Y6VHItRXU0J6ocqQ;-><init>(Lcom/android/server/SystemServer;Landroid/content/Context;Lcom/android/server/wm/WindowManagerService;ZLcom/android/server/ConnectivityService;Lcom/android/server/NetworkManagementService;Lcom/android/server/net/NetworkPolicyManagerService;Lcom/android/server/IpSecService;Lcom/android/server/net/NetworkStatsService;Lcom/android/server/LocationManagerService;Lcom/android/server/CountryDetectorService;Lcom/android/server/NetworkTimeUpdateService;Lcom/android/server/input/InputManagerService;Lcom/android/server/TelephonyRegistry;Lcom/android/server/media/MediaRouterService;Lcom/android/server/MmsServiceBroker;)V
SPLcom/android/server/-$$Lambda$SystemServer$RIWNR87PnJ4Y6VHItRXU0J6ocqQ;->run()V
SPLcom/android/server/-$$Lambda$SystemServer$UyrPns7R814g-ZEylCbDKhe8It4;-><init>()V
SPLcom/android/server/-$$Lambda$SystemServer$UyrPns7R814g-ZEylCbDKhe8It4;->run()V
SPLcom/android/server/-$$Lambda$SystemServer$VBGb9VpEls6bUcVBPwYLtX7qDTs;-><init>()V
SPLcom/android/server/-$$Lambda$SystemServer$VBGb9VpEls6bUcVBPwYLtX7qDTs;->run()V
SPLcom/android/server/-$$Lambda$SystemServer$Y1gEdKr_Hb7K7cbTDAo_WOJ-SYI;->run()V
SPLcom/android/server/-$$Lambda$SystemServerInitThreadPool$7wfLGkZF7FvYZv7xj3ghvuiJJGk;->run()V
SPLcom/android/server/-$$Lambda$UiModeManagerService$vuGxqIEDBezs_Xyz-NAh0Bonp5g;->run()V
SPLcom/android/server/-$$Lambda$YWiwiKm_Qgqb55C6tTuq_n2JzdY;-><init>()V
SPLcom/android/server/-$$Lambda$YWiwiKm_Qgqb55C6tTuq_n2JzdY;->run()V
SPLcom/android/server/-$$Lambda$hu439-4T6QBT8QyZnspMtXqICWs;-><init>()V
SPLcom/android/server/-$$Lambda$qoNbXUvSu3yuTPVXPUfZW_HDrTQ;-><init>()V
SPLcom/android/server/AlarmManagerService$1;->compare(Lcom/android/server/AlarmManagerService$Alarm;Lcom/android/server/AlarmManagerService$Alarm;)I
SPLcom/android/server/AlarmManagerService$1;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
SPLcom/android/server/AlarmManagerService$3;->currentNetworkTimeMillis()J
SPLcom/android/server/AlarmManagerService$3;->getNextAlarmClock(I)Landroid/app/AlarmManager$AlarmClockInfo;
SPLcom/android/server/AlarmManagerService$3;->remove(Landroid/app/PendingIntent;Landroid/app/IAlarmListener;)V
SPLcom/android/server/AlarmManagerService$3;->set(Ljava/lang/String;IJJJILandroid/app/PendingIntent;Landroid/app/IAlarmListener;Ljava/lang/String;Landroid/os/WorkSource;Landroid/app/AlarmManager$AlarmClockInfo;)V
SPLcom/android/server/AlarmManagerService$3;->setTime(J)Z
SPLcom/android/server/AlarmManagerService$6;->onUidForeground(IZ)V
SPLcom/android/server/AlarmManagerService$6;->unblockAlarmsForUid(I)V
SPLcom/android/server/AlarmManagerService$Alarm;-><init>(IJJJJJLandroid/app/PendingIntent;Landroid/app/IAlarmListener;Ljava/lang/String;Landroid/os/WorkSource;ILandroid/app/AlarmManager$AlarmClockInfo;ILjava/lang/String;)V
SPLcom/android/server/AlarmManagerService$Alarm;->makeTag(Landroid/app/PendingIntent;Ljava/lang/String;I)Ljava/lang/String;
SPLcom/android/server/AlarmManagerService$AlarmHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/AlarmManagerService$AlarmThread;->run()V
SPLcom/android/server/AlarmManagerService$AppStandbyTracker;->onParoleStateChanged(Z)V
SPLcom/android/server/AlarmManagerService$Batch;-><init>(Lcom/android/server/AlarmManagerService;Lcom/android/server/AlarmManagerService$Alarm;)V
SPLcom/android/server/AlarmManagerService$Batch;->add(Lcom/android/server/AlarmManagerService$Alarm;)Z
SPLcom/android/server/AlarmManagerService$Batch;->get(I)Lcom/android/server/AlarmManagerService$Alarm;
SPLcom/android/server/AlarmManagerService$Batch;->size()I
SPLcom/android/server/AlarmManagerService$BatchTimeOrder;-><init>()V
SPLcom/android/server/AlarmManagerService$ClockReceiver;->scheduleDateChangedEvent()V
SPLcom/android/server/AlarmManagerService$ClockReceiver;->scheduleTimeTickEvent()V
SPLcom/android/server/AlarmManagerService$Constants;-><init>(Lcom/android/server/AlarmManagerService;Landroid/os/Handler;)V
SPLcom/android/server/AlarmManagerService$Constants;->updateConstants()V
SPLcom/android/server/AlarmManagerService$DeliveryTracker;->alarmComplete(Landroid/os/IBinder;)V
SPLcom/android/server/AlarmManagerService$DeliveryTracker;->deliverLocked(Lcom/android/server/AlarmManagerService$Alarm;JZ)V
SPLcom/android/server/AlarmManagerService$DeliveryTracker;->onSendFinished(Landroid/app/PendingIntent;Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;)V
SPLcom/android/server/AlarmManagerService$DeliveryTracker;->removeLocked(Landroid/app/PendingIntent;Landroid/content/Intent;)Lcom/android/server/AlarmManagerService$InFlight;
SPLcom/android/server/AlarmManagerService$DeliveryTracker;->removeLocked(Landroid/os/IBinder;)Lcom/android/server/AlarmManagerService$InFlight;
SPLcom/android/server/AlarmManagerService$DeliveryTracker;->updateStatsLocked(Lcom/android/server/AlarmManagerService$InFlight;)V
SPLcom/android/server/AlarmManagerService$DeliveryTracker;->updateTrackingLocked(Lcom/android/server/AlarmManagerService$InFlight;)V
SPLcom/android/server/AlarmManagerService$InFlight;-><init>(Lcom/android/server/AlarmManagerService;Lcom/android/server/AlarmManagerService$Alarm;J)V
SPLcom/android/server/AlarmManagerService$IncreasingTimeOrder;-><init>()V
SPLcom/android/server/AlarmManagerService$IncreasingTimeOrder;->compare(Lcom/android/server/AlarmManagerService$Alarm;Lcom/android/server/AlarmManagerService$Alarm;)I
SPLcom/android/server/AlarmManagerService$IncreasingTimeOrder;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
SPLcom/android/server/AlarmManagerService$Injector;->getAlarmWakeLock()Landroid/os/PowerManager$WakeLock;
SPLcom/android/server/AlarmManagerService$Injector;->getClockReceiver(Lcom/android/server/AlarmManagerService;)Lcom/android/server/AlarmManagerService$ClockReceiver;
SPLcom/android/server/AlarmManagerService$Injector;->getCurrentTimeMillis()J
SPLcom/android/server/AlarmManagerService$Injector;->getElapsedRealtime()J
SPLcom/android/server/AlarmManagerService$Injector;->getSystemUiUid()I
SPLcom/android/server/AlarmManagerService$Injector;->init()V
SPLcom/android/server/AlarmManagerService$Injector;->isAlarmDriverPresent()Z
SPLcom/android/server/AlarmManagerService$Injector;->setAlarm(IJ)V
SPLcom/android/server/AlarmManagerService$Injector;->setKernelTime(J)V
SPLcom/android/server/AlarmManagerService$Injector;->setKernelTimezone(I)V
SPLcom/android/server/AlarmManagerService$Injector;->waitForAlarm()I
SPLcom/android/server/AlarmManagerService$InteractiveStateReceiver;-><init>(Lcom/android/server/AlarmManagerService;)V
SPLcom/android/server/AlarmManagerService$LocalService;->isIdling()Z
SPLcom/android/server/AlarmManagerService$LocalService;->registerInFlightListener(Lcom/android/server/AlarmManagerInternal$InFlightListener;)V
SPLcom/android/server/AlarmManagerService$UidObserver;->onUidActive(I)V
SPLcom/android/server/AlarmManagerService$UidObserver;->onUidGone(IZ)V
SPLcom/android/server/AlarmManagerService$UidObserver;->onUidIdle(IZ)V
SPLcom/android/server/AlarmManagerService$UninstallReceiver;-><init>(Lcom/android/server/AlarmManagerService;)V
SPLcom/android/server/AlarmManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/AlarmManagerService;-><init>(Landroid/content/Context;Lcom/android/server/AlarmManagerService$Injector;)V
SPLcom/android/server/AlarmManagerService;->adjustDeliveryTimeBasedOnBucketLocked(Lcom/android/server/AlarmManagerService$Alarm;)Z
SPLcom/android/server/AlarmManagerService;->calculateDeliveryPriorities(Ljava/util/ArrayList;)V
SPLcom/android/server/AlarmManagerService;->checkAllowNonWakeupDelayLocked(J)Z
SPLcom/android/server/AlarmManagerService;->convertToElapsed(JI)J
SPLcom/android/server/AlarmManagerService;->deliverAlarmsLocked(Ljava/util/ArrayList;J)V
SPLcom/android/server/AlarmManagerService;->getNextAlarmClockImpl(I)Landroid/app/AlarmManager$AlarmClockInfo;
SPLcom/android/server/AlarmManagerService;->getStatsLocked(ILjava/lang/String;)Lcom/android/server/AlarmManagerService$BroadcastStats;
SPLcom/android/server/AlarmManagerService;->haveAlarmsTimeTickAlarm(Ljava/util/ArrayList;)Z
SPLcom/android/server/AlarmManagerService;->haveBatchesTimeTickAlarm(Ljava/util/ArrayList;)Z
SPLcom/android/server/AlarmManagerService;->insertAndBatchAlarmLocked(Lcom/android/server/AlarmManagerService$Alarm;)V
SPLcom/android/server/AlarmManagerService;->isBackgroundRestricted(Lcom/android/server/AlarmManagerService$Alarm;)Z
SPLcom/android/server/AlarmManagerService;->isIdlingImpl()Z
SPLcom/android/server/AlarmManagerService;->maxTriggerTime(JJJ)J
SPLcom/android/server/AlarmManagerService;->onBootPhase(I)V
SPLcom/android/server/AlarmManagerService;->onStart()V
SPLcom/android/server/AlarmManagerService;->reAddAlarmLocked(Lcom/android/server/AlarmManagerService$Alarm;JZ)V
SPLcom/android/server/AlarmManagerService;->rebatchAllAlarms()V
SPLcom/android/server/AlarmManagerService;->removeImpl(Landroid/app/PendingIntent;Landroid/app/IAlarmListener;)V
SPLcom/android/server/AlarmManagerService;->reorderAlarmsBasedOnStandbyBuckets(Landroid/util/ArraySet;)Z
SPLcom/android/server/AlarmManagerService;->rescheduleKernelAlarmsLocked()V
SPLcom/android/server/AlarmManagerService;->sendPendingBackgroundAlarmsLocked(ILjava/lang/String;)V
SPLcom/android/server/AlarmManagerService;->setImpl(IJJJLandroid/app/PendingIntent;Landroid/app/IAlarmListener;Ljava/lang/String;ILandroid/os/WorkSource;Landroid/app/AlarmManager$AlarmClockInfo;ILjava/lang/String;)V
SPLcom/android/server/AlarmManagerService;->setImplLocked(IJJJJJLandroid/app/PendingIntent;Landroid/app/IAlarmListener;Ljava/lang/String;IZLandroid/os/WorkSource;Landroid/app/AlarmManager$AlarmClockInfo;ILjava/lang/String;)V
SPLcom/android/server/AlarmManagerService;->setImplLocked(Lcom/android/server/AlarmManagerService$Alarm;ZZ)V
SPLcom/android/server/AlarmManagerService;->setLocked(IJ)V
SPLcom/android/server/AlarmManagerService;->setTimeImpl(J)Z
SPLcom/android/server/AlarmManagerService;->setTimeZoneImpl(Ljava/lang/String;)V
SPLcom/android/server/AlarmManagerService;->setWakelockWorkSource(Landroid/os/WorkSource;ILjava/lang/String;Z)V
SPLcom/android/server/AlarmManagerService;->triggerAlarmsLocked(Ljava/util/ArrayList;JJ)Z
SPLcom/android/server/AlarmManagerService;->updateNextAlarmClockLocked()V
SPLcom/android/server/AlarmManagerService;->validateLastAlarmExpiredLocked(J)V
SPLcom/android/server/AnimationThread;->ensureThreadLocked()V
SPLcom/android/server/AnimationThread;->get()Lcom/android/server/AnimationThread;
SPLcom/android/server/AnimationThread;->getHandler()Landroid/os/Handler;
SPLcom/android/server/AnyMotionDetector;-><init>(Landroid/os/PowerManager;Landroid/os/Handler;Landroid/hardware/SensorManager;Lcom/android/server/AnyMotionDetector$DeviceIdleCallback;F)V
SPLcom/android/server/AppStateTracker$FeatureFlagsObserver;->isForcedAppStandbyEnabled()Z
SPLcom/android/server/AppStateTracker$FeatureFlagsObserver;->isForcedAppStandbyForSmallBatteryEnabled()Z
SPLcom/android/server/AppStateTracker$FeatureFlagsObserver;->register()V
SPLcom/android/server/AppStateTracker$Listener;->onUidForeground(IZ)V
SPLcom/android/server/AppStateTracker$Listener;->unblockAlarmsForUid(I)V
SPLcom/android/server/AppStateTracker$Listener;->updateJobsForUid(IZ)V
SPLcom/android/server/AppStateTracker$MyHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/AppStateTracker$MyHandler;->handleUidActive(I)V
SPLcom/android/server/AppStateTracker$MyHandler;->handleUidGone(IZ)V
SPLcom/android/server/AppStateTracker$MyHandler;->handleUidIdle(IZ)V
SPLcom/android/server/AppStateTracker$MyHandler;->handleUidStateChanged(II)V
SPLcom/android/server/AppStateTracker$MyHandler;->notifyAllWhitelistChanged()V
SPLcom/android/server/AppStateTracker$MyHandler;->notifyUidActiveStateChanged(I)V
SPLcom/android/server/AppStateTracker$MyHandler;->notifyUidForegroundStateChanged(I)V
SPLcom/android/server/AppStateTracker$MyHandler;->onUidActive(I)V
SPLcom/android/server/AppStateTracker$MyHandler;->onUidGone(IZ)V
SPLcom/android/server/AppStateTracker$MyHandler;->onUidIdle(IZ)V
SPLcom/android/server/AppStateTracker$MyHandler;->onUidStateChanged(II)V
SPLcom/android/server/AppStateTracker$MyHandler;->removeUid(IZ)V
SPLcom/android/server/AppStateTracker$MyReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/AppStateTracker$StandbyTracker;->onParoleStateChanged(Z)V
SPLcom/android/server/AppStateTracker$UidObserver;->onUidActive(I)V
SPLcom/android/server/AppStateTracker$UidObserver;->onUidGone(IZ)V
SPLcom/android/server/AppStateTracker$UidObserver;->onUidIdle(IZ)V
SPLcom/android/server/AppStateTracker$UidObserver;->onUidStateChanged(IIJ)V
SPLcom/android/server/AppStateTracker;-><init>(Landroid/content/Context;Landroid/os/Looper;)V
SPLcom/android/server/AppStateTracker;->addListener(Lcom/android/server/AppStateTracker$Listener;)V
SPLcom/android/server/AppStateTracker;->areAlarmsRestricted(ILjava/lang/String;Z)Z
SPLcom/android/server/AppStateTracker;->areJobsRestricted(ILjava/lang/String;Z)Z
SPLcom/android/server/AppStateTracker;->cloneListeners()[Lcom/android/server/AppStateTracker$Listener;
SPLcom/android/server/AppStateTracker;->findForcedAppStandbyUidPackageIndexLocked(ILjava/lang/String;)I
SPLcom/android/server/AppStateTracker;->injectActivityManagerInternal()Landroid/app/ActivityManagerInternal;
SPLcom/android/server/AppStateTracker;->injectAppOpsManager()Landroid/app/AppOpsManager;
SPLcom/android/server/AppStateTracker;->injectGetGlobalSettingInt(Ljava/lang/String;I)I
SPLcom/android/server/AppStateTracker;->injectIActivityManager()Landroid/app/IActivityManager;
SPLcom/android/server/AppStateTracker;->injectIAppOpsService()Lcom/android/internal/app/IAppOpsService;
SPLcom/android/server/AppStateTracker;->injectPowerManagerInternal()Landroid/os/PowerManagerInternal;
SPLcom/android/server/AppStateTracker;->injectUsageStatsManagerInternal()Landroid/app/usage/UsageStatsManagerInternal;
SPLcom/android/server/AppStateTracker;->isAnyAppIdUnwhitelisted([I[I)Z
SPLcom/android/server/AppStateTracker;->isRestricted(ILjava/lang/String;ZZ)Z
SPLcom/android/server/AppStateTracker;->isRunAnyRestrictedLocked(ILjava/lang/String;)Z
SPLcom/android/server/AppStateTracker;->isUidInForeground(I)Z
SPLcom/android/server/AppStateTracker;->onSystemServicesReady()V
SPLcom/android/server/AppStateTracker;->refreshForcedAppStandbyUidPackagesLocked()V
SPLcom/android/server/AppStateTracker;->setPowerSaveWhitelistAppIds([I[I[I)V
SPLcom/android/server/AppStateTracker;->updateForceAllAppStandbyState()V
SPLcom/android/server/AttributeCache;->get(Ljava/lang/String;I[II)Lcom/android/server/AttributeCache$Entry;
SPLcom/android/server/AttributeCache;->instance()Lcom/android/server/AttributeCache;
SPLcom/android/server/AttributeCache;->removePackage(Ljava/lang/String;)V
SPLcom/android/server/AttributeCache;->updateConfiguration(Landroid/content/res/Configuration;)V
SPLcom/android/server/BatteryService$8;->run()V
SPLcom/android/server/BatteryService$9;->run()V
SPLcom/android/server/BatteryService$BatteryPropertiesRegistrar;->scheduleUpdate()V
SPLcom/android/server/BatteryService$HealthHalCallback;->healthInfoChanged(Landroid/hardware/health/V2_0/HealthInfo;)V
SPLcom/android/server/BatteryService$HealthHalCallback;->onRegistration(Landroid/hardware/health/V2_0/IHealth;Landroid/hardware/health/V2_0/IHealth;Ljava/lang/String;)V
SPLcom/android/server/BatteryService$HealthServiceWrapper$IHealthSupplier;->get(Ljava/lang/String;)Landroid/hardware/health/V2_0/IHealth;
SPLcom/android/server/BatteryService$HealthServiceWrapper$IServiceManagerSupplier;->get()Landroid/hidl/manager/V1_0/IServiceManager;
SPLcom/android/server/BatteryService$HealthServiceWrapper$Notification$1;->run()V
SPLcom/android/server/BatteryService$HealthServiceWrapper$Notification;->onRegistration(Ljava/lang/String;Ljava/lang/String;Z)V
SPLcom/android/server/BatteryService$HealthServiceWrapper;->init(Lcom/android/server/BatteryService$HealthServiceWrapper$Callback;Lcom/android/server/BatteryService$HealthServiceWrapper$IServiceManagerSupplier;Lcom/android/server/BatteryService$HealthServiceWrapper$IHealthSupplier;)V
SPLcom/android/server/BatteryService$Led;-><init>(Lcom/android/server/BatteryService;Landroid/content/Context;Lcom/android/server/lights/LightsManager;)V
SPLcom/android/server/BatteryService$Led;->updateLightsLocked()V
SPLcom/android/server/BatteryService$LocalService;->getBatteryChargeCounter()I
SPLcom/android/server/BatteryService$LocalService;->getBatteryLevel()I
SPLcom/android/server/BatteryService$LocalService;->getBatteryLevelLow()Z
SPLcom/android/server/BatteryService$LocalService;->getPlugType()I
SPLcom/android/server/BatteryService$LocalService;->isPowered(I)Z
SPLcom/android/server/BatteryService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/BatteryService;->getIconLocked(I)I
SPLcom/android/server/BatteryService;->isPoweredLocked(I)Z
SPLcom/android/server/BatteryService;->onBootPhase(I)V
SPLcom/android/server/BatteryService;->onStart()V
SPLcom/android/server/BatteryService;->processValuesLocked(Z)V
SPLcom/android/server/BatteryService;->registerHealthCallback()V
SPLcom/android/server/BatteryService;->sendBatteryChangedIntentLocked()V
SPLcom/android/server/BatteryService;->sendBatteryLevelChangedIntentLocked()V
SPLcom/android/server/BatteryService;->shouldSendBatteryLowLocked()Z
SPLcom/android/server/BatteryService;->update(Landroid/hardware/health/V2_0/HealthInfo;)V
SPLcom/android/server/BatteryService;->updateBatteryWarningLevelLocked()V
SPLcom/android/server/BinderCallsStatsService$AuthorizedWorkSourceProvider;->createAppidWhitelist(Landroid/content/Context;)Landroid/util/ArraySet;
SPLcom/android/server/BinderCallsStatsService$AuthorizedWorkSourceProvider;->systemReady(Landroid/content/Context;)V
SPLcom/android/server/BinderCallsStatsService$LifeCycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/BinderCallsStatsService$LifeCycle;->onBootPhase(I)V
SPLcom/android/server/BinderCallsStatsService$LifeCycle;->onStart()V
SPLcom/android/server/BinderCallsStatsService$SettingsObserver;-><init>(Landroid/content/Context;Lcom/android/internal/os/BinderCallsStats;Lcom/android/server/BinderCallsStatsService$AuthorizedWorkSourceProvider;)V
SPLcom/android/server/BinderCallsStatsService$SettingsObserver;->onChange()V
SPLcom/android/server/BinderCallsStatsService;->systemReady(Landroid/content/Context;)V
SPLcom/android/server/BluetoothManagerService$1;->onBluetoothStateChange(II)V
SPLcom/android/server/BluetoothManagerService$2;->onUserRestrictionsChanged(ILandroid/os/Bundle;Landroid/os/Bundle;)V
SPLcom/android/server/BluetoothManagerService$4;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/BluetoothManagerService$BluetoothHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/BluetoothManagerService$BluetoothServiceConnection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
SPLcom/android/server/BluetoothManagerService$ProfileServiceConnections;->bindService()Z
SPLcom/android/server/BluetoothManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/BluetoothManagerService;->access$1000(Lcom/android/server/BluetoothManagerService;)Landroid/bluetooth/IBluetooth;
SPLcom/android/server/BluetoothManagerService;->access$1002(Lcom/android/server/BluetoothManagerService;Landroid/bluetooth/IBluetooth;)Landroid/bluetooth/IBluetooth;
SPLcom/android/server/BluetoothManagerService;->access$1300(Lcom/android/server/BluetoothManagerService;)Z
SPLcom/android/server/BluetoothManagerService;->access$1302(Lcom/android/server/BluetoothManagerService;Z)Z
SPLcom/android/server/BluetoothManagerService;->access$200(Lcom/android/server/BluetoothManagerService;)Lcom/android/server/BluetoothManagerService$BluetoothHandler;
SPLcom/android/server/BluetoothManagerService;->access$2402(Lcom/android/server/BluetoothManagerService;Z)Z
SPLcom/android/server/BluetoothManagerService;->access$2600(Lcom/android/server/BluetoothManagerService;)Z
SPLcom/android/server/BluetoothManagerService;->access$2602(Lcom/android/server/BluetoothManagerService;Z)Z
SPLcom/android/server/BluetoothManagerService;->access$2700(Lcom/android/server/BluetoothManagerService;Z)V
SPLcom/android/server/BluetoothManagerService;->access$3000(Lcom/android/server/BluetoothManagerService;)Landroid/os/RemoteCallbackList;
SPLcom/android/server/BluetoothManagerService;->access$3100(Lcom/android/server/BluetoothManagerService;)Landroid/os/RemoteCallbackList;
SPLcom/android/server/BluetoothManagerService;->access$3602(Lcom/android/server/BluetoothManagerService;Landroid/os/IBinder;)Landroid/os/IBinder;
SPLcom/android/server/BluetoothManagerService;->access$3700(Lcom/android/server/BluetoothManagerService;)Z
SPLcom/android/server/BluetoothManagerService;->access$3800(Lcom/android/server/BluetoothManagerService;)Landroid/bluetooth/IBluetoothCallback;
SPLcom/android/server/BluetoothManagerService;->access$3900(Lcom/android/server/BluetoothManagerService;)V
SPLcom/android/server/BluetoothManagerService;->access$4002(Lcom/android/server/BluetoothManagerService;I)I
SPLcom/android/server/BluetoothManagerService;->access$4100(Lcom/android/server/BluetoothManagerService;II)V
SPLcom/android/server/BluetoothManagerService;->access$900(Lcom/android/server/BluetoothManagerService;)Ljava/util/concurrent/locks/ReentrantReadWriteLock;
SPLcom/android/server/BluetoothManagerService;->addActiveLog(ILjava/lang/String;Z)V
SPLcom/android/server/BluetoothManagerService;->bindBluetoothProfileService(ILandroid/bluetooth/IBluetoothProfileServiceConnection;)Z
SPLcom/android/server/BluetoothManagerService;->bluetoothStateChangeHandler(II)V
SPLcom/android/server/BluetoothManagerService;->doBind(Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z
SPLcom/android/server/BluetoothManagerService;->handleEnable(Z)V
SPLcom/android/server/BluetoothManagerService;->handleOnBootPhase()V
SPLcom/android/server/BluetoothManagerService;->isBluetoothDisallowed()Z
SPLcom/android/server/BluetoothManagerService;->isBluetoothPersistedStateOn()Z
SPLcom/android/server/BluetoothManagerService;->isHearingAidProfileSupported()Z
SPLcom/android/server/BluetoothManagerService;->loadStoredNameAndAddress()V
SPLcom/android/server/BluetoothManagerService;->registerAdapter(Landroid/bluetooth/IBluetoothManagerCallback;)Landroid/bluetooth/IBluetooth;
SPLcom/android/server/BluetoothManagerService;->registerStateChangeCallback(Landroid/bluetooth/IBluetoothStateChangeCallback;)V
SPLcom/android/server/BluetoothManagerService;->sendBleStateChanged(II)V
SPLcom/android/server/BluetoothManagerService;->sendBluetoothServiceUpCallback()V
SPLcom/android/server/BluetoothManagerService;->storeNameAndAddress(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/BluetoothManagerService;->updateOppLauncherComponentState(IZ)V
SPLcom/android/server/BluetoothService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/BluetoothService;->onBootPhase(I)V
SPLcom/android/server/BluetoothService;->onStart()V
SPLcom/android/server/CachedDeviceStateService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/CachedDeviceStateService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/CachedDeviceStateService;->onBootPhase(I)V
SPLcom/android/server/CachedDeviceStateService;->onStart()V
SPLcom/android/server/CertBlacklister;-><init>(Landroid/content/Context;)V
SPLcom/android/server/ConnectivityService$2;->getDefaultNetworkRequest()Landroid/net/NetworkRequest;
SPLcom/android/server/ConnectivityService$2;->isTetheringSupported()Z
SPLcom/android/server/ConnectivityService$6;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/ConnectivityService$LegacyTypeTracker;->addSupportedType(I)V
SPLcom/android/server/ConnectivityService$LegacyTypeTracker;->isTypeSupported(I)Z
SPLcom/android/server/ConnectivityService$NetworkRequestInfo;-><init>(Lcom/android/server/ConnectivityService;Landroid/os/Messenger;Landroid/net/NetworkRequest;Landroid/os/IBinder;)V
SPLcom/android/server/ConnectivityService$NetworkRequestInfo;->enforceRequestCountLimit()V
SPLcom/android/server/ConnectivityService$NetworkRequestInfo;->toString()Ljava/lang/String;
SPLcom/android/server/ConnectivityService$NetworkStateTrackerHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/ConnectivityService$NetworkStateTrackerHandler;->maybeHandleAsyncChannelMessage(Landroid/os/Message;)Z
SPLcom/android/server/ConnectivityService$NetworkStateTrackerHandler;->maybeHandleNetworkAgentMessage(Landroid/os/Message;)V
SPLcom/android/server/ConnectivityService$NetworkStateTrackerHandler;->maybeHandleNetworkMonitorMessage(Landroid/os/Message;)Z
SPLcom/android/server/ConnectivityService$SettingsObserver;->observe(Landroid/net/Uri;I)V
SPLcom/android/server/ConnectivityService;-><init>(Landroid/content/Context;Landroid/os/INetworkManagementService;Landroid/net/INetworkStatsService;Landroid/net/INetworkPolicyManager;)V
SPLcom/android/server/ConnectivityService;-><init>(Landroid/content/Context;Landroid/os/INetworkManagementService;Landroid/net/INetworkStatsService;Landroid/net/INetworkPolicyManager;Landroid/net/metrics/IpConnectivityLog;)V
SPLcom/android/server/ConnectivityService;->createMultinetworkPolicyTracker(Landroid/content/Context;Landroid/os/Handler;Ljava/lang/Runnable;)Landroid/net/util/MultinetworkPolicyTracker;
SPLcom/android/server/ConnectivityService;->createVpnInfo(Lcom/android/server/connectivity/Vpn;)Lcom/android/internal/net/VpnInfo;
SPLcom/android/server/ConnectivityService;->enforceAnyPermissionOf([Ljava/lang/String;)V
SPLcom/android/server/ConnectivityService;->ensureRunningOnConnectivityServiceThread()V
SPLcom/android/server/ConnectivityService;->filterNetworkStateForUid(Landroid/net/NetworkState;IZ)V
SPLcom/android/server/ConnectivityService;->getActiveNetworkForUid(IZ)Landroid/net/Network;
SPLcom/android/server/ConnectivityService;->getActiveNetworkForUidInternal(IZ)Landroid/net/Network;
SPLcom/android/server/ConnectivityService;->getActiveNetworkInfo()Landroid/net/NetworkInfo;
SPLcom/android/server/ConnectivityService;->getAllVpnInfo()[Lcom/android/internal/net/VpnInfo;
SPLcom/android/server/ConnectivityService;->getNetworkAgentInfoForNetId(I)Lcom/android/server/connectivity/NetworkAgentInfo;
SPLcom/android/server/ConnectivityService;->getNetworkCapabilities(Landroid/net/Network;)Landroid/net/NetworkCapabilities;
SPLcom/android/server/ConnectivityService;->getNetworkCapabilitiesInternal(Lcom/android/server/connectivity/NetworkAgentInfo;)Landroid/net/NetworkCapabilities;
SPLcom/android/server/ConnectivityService;->getNetworkForRequest(I)Lcom/android/server/connectivity/NetworkAgentInfo;
SPLcom/android/server/ConnectivityService;->getProxyForNetwork(Landroid/net/Network;)Landroid/net/ProxyInfo;
SPLcom/android/server/ConnectivityService;->getSystemProperties()Lcom/android/server/connectivity/MockableSystemProperties;
SPLcom/android/server/ConnectivityService;->getTetherableWifiRegexs()[Ljava/lang/String;
SPLcom/android/server/ConnectivityService;->getVpnUnderlyingNetworks(I)[Landroid/net/Network;
SPLcom/android/server/ConnectivityService;->handleAlwaysOnNetworkRequest(Landroid/net/NetworkRequest;Ljava/lang/String;Z)V
SPLcom/android/server/ConnectivityService;->handleAsyncChannelHalfConnect(Landroid/os/Message;)V
SPLcom/android/server/ConnectivityService;->handleRegisterNetworkFactory(Lcom/android/server/ConnectivityService$NetworkFactoryInfo;)V
SPLcom/android/server/ConnectivityService;->handleRegisterNetworkRequest(Lcom/android/server/ConnectivityService$NetworkRequestInfo;)V
SPLcom/android/server/ConnectivityService;->hasWifiNetworkListenPermission(Landroid/net/NetworkCapabilities;)Z
SPLcom/android/server/ConnectivityService;->isNetworkSupported(I)Z
SPLcom/android/server/ConnectivityService;->isTetheringSupported()Z
SPLcom/android/server/ConnectivityService;->isTetheringSupported(Ljava/lang/String;)Z
SPLcom/android/server/ConnectivityService;->listenForNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;Landroid/os/IBinder;)Landroid/net/NetworkRequest;
SPLcom/android/server/ConnectivityService;->makeProxyTracker()Lcom/android/server/connectivity/ProxyTracker;
SPLcom/android/server/ConnectivityService;->makeTethering()Lcom/android/server/connectivity/Tethering;
SPLcom/android/server/ConnectivityService;->maybeLogBlockedNetworkInfo(Landroid/net/NetworkInfo;I)V
SPLcom/android/server/ConnectivityService;->maybeNotifyNetworkBlockedForNewUidRules(II)V
SPLcom/android/server/ConnectivityService;->nextNetworkRequestId()I
SPLcom/android/server/ConnectivityService;->onPackageRemoved(Ljava/lang/String;IZ)V
SPLcom/android/server/ConnectivityService;->onUserStart(I)V
SPLcom/android/server/ConnectivityService;->registerNetdEventCallback()V
SPLcom/android/server/ConnectivityService;->registerNetworkFactory(Landroid/os/Messenger;Ljava/lang/String;)I
SPLcom/android/server/ConnectivityService;->registerPrivateDnsSettingsCallbacks()V
SPLcom/android/server/ConnectivityService;->registerSettingsCallbacks()V
SPLcom/android/server/ConnectivityService;->rematchAllNetworksAndRequests(Lcom/android/server/connectivity/NetworkAgentInfo;I)V
SPLcom/android/server/ConnectivityService;->requestNetwork(Landroid/net/NetworkCapabilities;Landroid/os/Messenger;ILandroid/os/IBinder;I)Landroid/net/NetworkRequest;
SPLcom/android/server/ConnectivityService;->sendUpdatedScoreToFactories(Landroid/net/NetworkRequest;Lcom/android/server/connectivity/NetworkAgentInfo;)V
SPLcom/android/server/ConnectivityService;->systemReady()V
SPLcom/android/server/ConnectivityService;->updateLockdownVpn()Z
SPLcom/android/server/ConsumerIrService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/ContextHubSystemService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/ContextHubSystemService;->lambda$new$0$ContextHubSystemService(Landroid/content/Context;)V
SPLcom/android/server/ContextHubSystemService;->onBootPhase(I)V
SPLcom/android/server/ContextHubSystemService;->onStart()V
SPLcom/android/server/CountryDetectorService$2;->run()V
SPLcom/android/server/CountryDetectorService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/CountryDetectorService;->addCountryListener(Landroid/location/ICountryListener;)V
SPLcom/android/server/CountryDetectorService;->addListener(Landroid/location/ICountryListener;)V
SPLcom/android/server/CountryDetectorService;->detectCountry()Landroid/location/Country;
SPLcom/android/server/CountryDetectorService;->run()V
SPLcom/android/server/CountryDetectorService;->setCountryListener(Landroid/location/CountryListener;)V
SPLcom/android/server/CountryDetectorService;->systemRunning()V
SPLcom/android/server/DeviceIdleController$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/DeviceIdleController$9;->onKeyguardStateChanged(Z)V
SPLcom/android/server/DeviceIdleController$BinderService;->getAppIdWhitelist()[I
SPLcom/android/server/DeviceIdleController$BinderService;->getAppIdWhitelistExceptIdle()[I
SPLcom/android/server/DeviceIdleController$Constants;-><init>(Lcom/android/server/DeviceIdleController;Landroid/os/Handler;Landroid/content/ContentResolver;)V
SPLcom/android/server/DeviceIdleController$Constants;->updateConstants()V
SPLcom/android/server/DeviceIdleController$Injector;->getAlarmManager()Landroid/app/AlarmManager;
SPLcom/android/server/DeviceIdleController$Injector;->getAnyMotionDetector(Landroid/os/Handler;Landroid/hardware/SensorManager;Lcom/android/server/AnyMotionDetector$DeviceIdleCallback;F)Lcom/android/server/AnyMotionDetector;
SPLcom/android/server/DeviceIdleController$Injector;->getAppStateTracker(Landroid/content/Context;Landroid/os/Looper;)Lcom/android/server/AppStateTracker;
SPLcom/android/server/DeviceIdleController$Injector;->getConnectivityService()Lcom/android/server/ConnectivityService;
SPLcom/android/server/DeviceIdleController$Injector;->getConstants(Lcom/android/server/DeviceIdleController;Landroid/os/Handler;Landroid/content/ContentResolver;)Lcom/android/server/DeviceIdleController$Constants;
SPLcom/android/server/DeviceIdleController$Injector;->getConstraintController(Landroid/os/Handler;Lcom/android/server/DeviceIdleController$LocalService;)Lcom/android/server/deviceidle/ConstraintController;
SPLcom/android/server/DeviceIdleController$Injector;->getHandler(Lcom/android/server/DeviceIdleController;)Lcom/android/server/DeviceIdleController$MyHandler;
SPLcom/android/server/DeviceIdleController$Injector;->getPowerManager()Landroid/os/PowerManager;
SPLcom/android/server/DeviceIdleController$Injector;->getSensorManager()Landroid/hardware/SensorManager;
SPLcom/android/server/DeviceIdleController$Injector;->useMotionSensor()Z
SPLcom/android/server/DeviceIdleController$LocalService;->getPowerSaveTempWhitelistAppIds()[I
SPLcom/android/server/DeviceIdleController$LocalService;->getPowerSaveWhitelistUserAppIds()[I
SPLcom/android/server/DeviceIdleController$LocalService;->setAlarmsActive(Z)V
SPLcom/android/server/DeviceIdleController;-><init>(Landroid/content/Context;)V
SPLcom/android/server/DeviceIdleController;-><init>(Landroid/content/Context;Lcom/android/server/DeviceIdleController$Injector;)V
SPLcom/android/server/DeviceIdleController;->becomeActiveLocked(Ljava/lang/String;I)V
SPLcom/android/server/DeviceIdleController;->becomeActiveLocked(Ljava/lang/String;IJZ)V
SPLcom/android/server/DeviceIdleController;->becomeInactiveIfAppropriateLocked()V
SPLcom/android/server/DeviceIdleController;->buildAppIdArray(Landroid/util/ArrayMap;Landroid/util/ArrayMap;Landroid/util/SparseBooleanArray;)[I
SPLcom/android/server/DeviceIdleController;->exitMaintenanceEarlyIfNeededLocked()V
SPLcom/android/server/DeviceIdleController;->getAppIdTempWhitelistInternal()[I
SPLcom/android/server/DeviceIdleController;->getAppIdWhitelistExceptIdleInternal()[I
SPLcom/android/server/DeviceIdleController;->getAppIdWhitelistInternal()[I
SPLcom/android/server/DeviceIdleController;->getPowerSaveWhitelistUserAppIds()[I
SPLcom/android/server/DeviceIdleController;->keyguardShowingLocked(Z)V
SPLcom/android/server/DeviceIdleController;->onBootPhase(I)V
SPLcom/android/server/DeviceIdleController;->onStart()V
SPLcom/android/server/DeviceIdleController;->readConfigFileLocked()V
SPLcom/android/server/DeviceIdleController;->readConfigFileLocked(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/DeviceIdleController;->setAlarmsActive(Z)V
SPLcom/android/server/DeviceIdleController;->updateChargingLocked(Z)V
SPLcom/android/server/DeviceIdleController;->updateConnectivityState(Landroid/content/Intent;)V
SPLcom/android/server/DeviceIdleController;->updateInteractivityLocked()V
SPLcom/android/server/DeviceIdleController;->updateQuickDozeFlagLocked(Z)V
SPLcom/android/server/DeviceIdleController;->updateWhitelistAppIdsLocked()V
SPLcom/android/server/DeviceIdleController;->verifyAlarmStateLocked()V
SPLcom/android/server/DiskStatsService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/DisplayThread;->ensureThreadLocked()V
SPLcom/android/server/DisplayThread;->get()Lcom/android/server/DisplayThread;
SPLcom/android/server/DisplayThread;->getHandler()Landroid/os/Handler;
SPLcom/android/server/DockObserver;-><init>(Landroid/content/Context;)V
SPLcom/android/server/DockObserver;->init()V
SPLcom/android/server/DockObserver;->onBootPhase(I)V
SPLcom/android/server/DockObserver;->onStart()V
SPLcom/android/server/DropBoxManagerService$1$1;->run()V
SPLcom/android/server/DropBoxManagerService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/DropBoxManagerService$2;->add(Landroid/os/DropBoxManager$Entry;)V
SPLcom/android/server/DropBoxManagerService$2;->isTagEnabled(Ljava/lang/String;)Z
SPLcom/android/server/DropBoxManagerService$3;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/DropBoxManagerService$4;->onChange(Z)V
SPLcom/android/server/DropBoxManagerService$EntryFile;-><init>(J)V
SPLcom/android/server/DropBoxManagerService$EntryFile;-><init>(Ljava/io/File;Ljava/io/File;Ljava/lang/String;JII)V
SPLcom/android/server/DropBoxManagerService$EntryFile;->getExtension()Ljava/lang/String;
SPLcom/android/server/DropBoxManagerService$EntryFile;->getFilename()Ljava/lang/String;
SPLcom/android/server/DropBoxManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/DropBoxManagerService;-><init>(Landroid/content/Context;Ljava/io/File;Landroid/os/Looper;)V
SPLcom/android/server/DropBoxManagerService;->add(Landroid/os/DropBoxManager$Entry;)V
SPLcom/android/server/DropBoxManagerService;->createEntry(Ljava/io/File;Ljava/lang/String;I)J
SPLcom/android/server/DropBoxManagerService;->isTagEnabled(Ljava/lang/String;)Z
SPLcom/android/server/DropBoxManagerService;->onBootPhase(I)V
SPLcom/android/server/DropBoxManagerService;->onStart()V
SPLcom/android/server/DropBoxManagerService;->trimToFit()J
SPLcom/android/server/DynamicSystemService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/EntropyMixer;-><init>(Landroid/content/Context;)V
SPLcom/android/server/EntropyMixer;-><init>(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/EntropyMixer;->addDeviceSpecificEntropy()V
SPLcom/android/server/EntropyMixer;->addHwRandomEntropy()V
SPLcom/android/server/EntropyMixer;->loadInitialEntropy()V
SPLcom/android/server/EntropyMixer;->writeEntropy()V
SPLcom/android/server/EventLogTags;->writeNetstatsMobileSample(JJJJJJJJJJJJJ)V
SPLcom/android/server/EventLogTags;->writeNetstatsWifiSample(JJJJJJJJJJJJJ)V
SPLcom/android/server/EventLogTags;->writeNotificationCancelAll(IILjava/lang/String;IIIILjava/lang/String;)V
SPLcom/android/server/EventLogTags;->writeStorageState(Ljava/lang/String;IIJJ)V
SPLcom/android/server/ExtconStateObserver;->parseStateFromFile(Lcom/android/server/ExtconUEventObserver$ExtconInfo;)Ljava/lang/Object;
SPLcom/android/server/ExtconUEventObserver$ExtconInfo;->getDevicePath()Ljava/lang/String;
SPLcom/android/server/ExtconUEventObserver$ExtconInfo;->getExtconInfos(Ljava/lang/String;)Ljava/util/List;
SPLcom/android/server/ExtconUEventObserver;->extconExists()Z
SPLcom/android/server/ExtconUEventObserver;->startObserving(Lcom/android/server/ExtconUEventObserver$ExtconInfo;)V
SPLcom/android/server/FgThread;->ensureThreadLocked()V
SPLcom/android/server/FgThread;->get()Lcom/android/server/FgThread;
SPLcom/android/server/FgThread;->getHandler()Landroid/os/Handler;
SPLcom/android/server/GestureLauncherService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/GestureLauncherService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/GestureLauncherService;-><init>(Landroid/content/Context;Lcom/android/internal/logging/MetricsLogger;)V
SPLcom/android/server/GestureLauncherService;->isGestureLauncherEnabled(Landroid/content/res/Resources;)Z
SPLcom/android/server/GestureLauncherService;->onBootPhase(I)V
SPLcom/android/server/GestureLauncherService;->onStart()V
SPLcom/android/server/GestureLauncherService;->registerContentObservers()V
SPLcom/android/server/GestureLauncherService;->unregisterCameraLaunchGesture()V
SPLcom/android/server/GestureLauncherService;->updateCameraDoubleTapPowerEnabled()V
SPLcom/android/server/GestureLauncherService;->updateCameraRegistered()V
SPLcom/android/server/GraphicsStatsService$ActiveBuffer;-><init>(Lcom/android/server/GraphicsStatsService;Landroid/view/IGraphicsStatsCallback;IILjava/lang/String;J)V
SPLcom/android/server/GraphicsStatsService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/GraphicsStatsService;->fetchActiveBuffersLocked(Landroid/view/IGraphicsStatsCallback;IILjava/lang/String;J)Lcom/android/server/GraphicsStatsService$ActiveBuffer;
SPLcom/android/server/GraphicsStatsService;->getPfd(Landroid/os/MemoryFile;)Landroid/os/ParcelFileDescriptor;
SPLcom/android/server/GraphicsStatsService;->normalizeDate(J)Ljava/util/Calendar;
SPLcom/android/server/GraphicsStatsService;->requestBufferForProcess(Ljava/lang/String;Landroid/view/IGraphicsStatsCallback;)Landroid/os/ParcelFileDescriptor;
SPLcom/android/server/GraphicsStatsService;->scheduleRotateLocked()V
SPLcom/android/server/HardwarePropertiesManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/IntentResolver$1;-><init>()V
SPLcom/android/server/IntentResolver$1;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
SPLcom/android/server/IntentResolver$IteratorWrapper;->hasNext()Z
SPLcom/android/server/IntentResolver$IteratorWrapper;->next()Landroid/content/IntentFilter;
SPLcom/android/server/IntentResolver$IteratorWrapper;->next()Ljava/lang/Object;
SPLcom/android/server/IntentResolver;-><init>()V
SPLcom/android/server/IntentResolver;->allowFilterResult(Landroid/content/IntentFilter;Ljava/util/List;)Z
SPLcom/android/server/IntentResolver;->filterIterator()Ljava/util/Iterator;
SPLcom/android/server/IntentResolver;->filterSet()Ljava/util/Set;
SPLcom/android/server/IntentResolver;->isFilterStopped(Landroid/content/IntentFilter;I)Z
SPLcom/android/server/IntentResolver;->newResult(Landroid/content/IntentFilter;II)Ljava/lang/Object;
SPLcom/android/server/IntentResolver;->sortResults(Ljava/util/List;)V
SPLcom/android/server/IoThread;->ensureThreadLocked()V
SPLcom/android/server/IoThread;->get()Lcom/android/server/IoThread;
SPLcom/android/server/IoThread;->getHandler()Landroid/os/Handler;
SPLcom/android/server/IpSecService$1;->run()V
SPLcom/android/server/IpSecService$IpSecServiceConfiguration$1;-><init>()V
SPLcom/android/server/IpSecService$IpSecServiceConfiguration$1;->getNetdInstance()Landroid/net/INetd;
SPLcom/android/server/IpSecService;->create(Landroid/content/Context;)Lcom/android/server/IpSecService;
SPLcom/android/server/IpSecService;->isNetdAlive()Z
SPLcom/android/server/IpSecService;->systemReady()V
SPLcom/android/server/LocationManagerService$2;->onChange(Z)V
SPLcom/android/server/LocationManagerService$3;->onChange(Z)V
SPLcom/android/server/LocationManagerService$8;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/LocationManagerService$LocationProvider;-><init>(Lcom/android/server/LocationManagerService;Ljava/lang/String;Lcom/android/server/LocationManagerService$1;)V
SPLcom/android/server/LocationManagerService$LocationProvider;-><init>(Lcom/android/server/LocationManagerService;Ljava/lang/String;Z)V
SPLcom/android/server/LocationManagerService$LocationProvider;-><init>(Lcom/android/server/LocationManagerService;Ljava/lang/String;ZLcom/android/server/LocationManagerService$1;)V
SPLcom/android/server/LocationManagerService$LocationProvider;->attachLocked(Lcom/android/server/location/AbstractLocationProvider;)V
SPLcom/android/server/LocationManagerService$LocationProvider;->getName()Ljava/lang/String;
SPLcom/android/server/LocationManagerService$LocationProvider;->getPropertiesLocked()Lcom/android/internal/location/ProviderProperties;
SPLcom/android/server/LocationManagerService$LocationProvider;->isUseableForUserLocked(I)Z
SPLcom/android/server/LocationManagerService$LocationProvider;->isUseableLocked()Z
SPLcom/android/server/LocationManagerService$LocationProvider;->lambda$onSetEnabled$2$LocationManagerService$LocationProvider(Z)V
SPLcom/android/server/LocationManagerService$LocationProvider;->lambda$onSetEnabled$2(Lcom/android/server/LocationManagerService$LocationProvider;Z)V
SPLcom/android/server/LocationManagerService$LocationProvider;->onAllowedChangedLocked()V
SPLcom/android/server/LocationManagerService$LocationProvider;->onLocationModeChangedLocked()V
SPLcom/android/server/LocationManagerService$LocationProvider;->onSetEnabled(Z)V
SPLcom/android/server/LocationManagerService$LocationProvider;->onSetProperties(Lcom/android/internal/location/ProviderProperties;)V
SPLcom/android/server/LocationManagerService$LocationProvider;->onUseableChangedLocked()V
SPLcom/android/server/LocationManagerService$LocationProvider;->onUseableChangedLocked(Z)V
SPLcom/android/server/LocationManagerService$LocationProvider;->onUserChangingLocked()V
SPLcom/android/server/LocationManagerService$LocationProvider;->setRequestLocked(Lcom/android/internal/location/ProviderRequest;Landroid/os/WorkSource;)V
SPLcom/android/server/LocationManagerService$Receiver;-><init>(Lcom/android/server/LocationManagerService;Landroid/location/ILocationListener;Landroid/app/PendingIntent;IILjava/lang/String;Landroid/os/WorkSource;Z)V
SPLcom/android/server/LocationManagerService$Receiver;->getListener()Landroid/location/ILocationListener;
SPLcom/android/server/LocationManagerService$Receiver;->updateMonitoring(Z)V
SPLcom/android/server/LocationManagerService$Receiver;->updateMonitoring(ZZI)Z
SPLcom/android/server/LocationManagerService$UpdateRecord;-><init>(Lcom/android/server/LocationManagerService;Ljava/lang/String;Landroid/location/LocationRequest;Lcom/android/server/LocationManagerService$Receiver;)V
SPLcom/android/server/LocationManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/LocationManagerService;->addProviderLocked(Lcom/android/server/LocationManagerService$LocationProvider;)V
SPLcom/android/server/LocationManagerService;->applyRequirementsLocked(Lcom/android/server/LocationManagerService$LocationProvider;)V
SPLcom/android/server/LocationManagerService;->checkPackageName(Ljava/lang/String;)V
SPLcom/android/server/LocationManagerService;->checkResolutionLevelIsSufficientForProviderUseLocked(ILjava/lang/String;)V
SPLcom/android/server/LocationManagerService;->createSanitizedRequest(Landroid/location/LocationRequest;IZ)Landroid/location/LocationRequest;
SPLcom/android/server/LocationManagerService;->ensureFallbackFusedProviderPresentLocked([Ljava/lang/String;)V
SPLcom/android/server/LocationManagerService;->geocoderIsPresent()Z
SPLcom/android/server/LocationManagerService;->getAllowedResolutionLevel(II)I
SPLcom/android/server/LocationManagerService;->getMinimumResolutionLevelForProviderUseLocked(Ljava/lang/String;)I
SPLcom/android/server/LocationManagerService;->getProviders(Landroid/location/Criteria;Z)Ljava/util/List;
SPLcom/android/server/LocationManagerService;->getReceiverLocked(Landroid/location/ILocationListener;IILjava/lang/String;Landroid/os/WorkSource;Z)Lcom/android/server/LocationManagerService$Receiver;
SPLcom/android/server/LocationManagerService;->initializeLocked()V
SPLcom/android/server/LocationManagerService;->initializeProvidersLocked()V
SPLcom/android/server/LocationManagerService;->isLocationEnabledForUser(I)Z
SPLcom/android/server/LocationManagerService;->isProviderEnabledForUser(Ljava/lang/String;I)Z
SPLcom/android/server/LocationManagerService;->lambda$initializeLocked$3$LocationManagerService(II)V
SPLcom/android/server/LocationManagerService;->lambda$initializeLocked$3(Lcom/android/server/LocationManagerService;II)V
SPLcom/android/server/LocationManagerService;->linkToListenerDeathNotificationLocked(Landroid/os/IBinder;Lcom/android/server/LocationManagerService$LinkedListenerBase;)Z
SPLcom/android/server/LocationManagerService;->onBackgroundThrottleWhitelistChangedLocked()V
SPLcom/android/server/LocationManagerService;->onIgnoreSettingsWhitelistChangedLocked()V
SPLcom/android/server/LocationManagerService;->onLocationModeChangedLocked(Z)V
SPLcom/android/server/LocationManagerService;->onProviderAllowedChangedLocked(Z)V
SPLcom/android/server/LocationManagerService;->onUidImportanceChangedLocked(II)V
SPLcom/android/server/LocationManagerService;->onUserChangedLocked(I)V
SPLcom/android/server/LocationManagerService;->requestLocationUpdates(Landroid/location/LocationRequest;Landroid/location/ILocationListener;Landroid/app/PendingIntent;Ljava/lang/String;)V
SPLcom/android/server/LocationManagerService;->requestLocationUpdatesLocked(Landroid/location/LocationRequest;Lcom/android/server/LocationManagerService$Receiver;ILjava/lang/String;)V
SPLcom/android/server/LocationManagerService;->systemRunning()V
SPLcom/android/server/LocationManagerService;->updateGnssDataProviderOnUidImportanceChangedLocked(Landroid/util/ArrayMap;Lcom/android/server/location/RemoteListenerHelper;Ljava/util/function/Function;IZ)V
SPLcom/android/server/LocationManagerService;->updateProviderUseableLocked(Lcom/android/server/LocationManagerService$LocationProvider;)V
SPLcom/android/server/LockGuard;->findOrCreateLockInfo(Ljava/lang/Object;)Lcom/android/server/LockGuard$LockInfo;
SPLcom/android/server/LockGuard;->installLock(Ljava/lang/Object;I)Ljava/lang/Object;
SPLcom/android/server/LockGuard;->installLock(Ljava/lang/Object;IZ)Ljava/lang/Object;
SPLcom/android/server/LockGuard;->lockToString(I)Ljava/lang/String;
SPLcom/android/server/LooperStatsService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/LooperStatsService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/LooperStatsService$Lifecycle;->onStart()V
SPLcom/android/server/LooperStatsService;->initFromSettings()V
SPLcom/android/server/MmsServiceBroker;-><init>(Landroid/content/Context;)V
SPLcom/android/server/MmsServiceBroker;->onStart()V
SPLcom/android/server/MmsServiceBroker;->systemRunning()V
SPLcom/android/server/MountServiceIdler;->scheduleIdlePass(Landroid/content/Context;)V
SPLcom/android/server/MountServiceIdler;->tomorrowMidnight()Ljava/util/Calendar;
SPLcom/android/server/NativeDaemonConnector;-><init>(Lcom/android/server/INativeDaemonConnectorCallbacks;Ljava/lang/String;ILjava/lang/String;ILandroid/os/PowerManager$WakeLock;Landroid/os/Looper;)V
SPLcom/android/server/NativeDaemonConnector;->listenToSocket()V
SPLcom/android/server/NativeDaemonConnector;->monitor()V
SPLcom/android/server/NativeDaemonConnector;->run()V
SPLcom/android/server/NetworkManagementService$NetdCallbackReceiver;->onDaemonConnected()V
SPLcom/android/server/NetworkManagementService$NetdTetheringStatsProvider;->getTetherStats(I)Landroid/net/NetworkStats;
SPLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->lambda$onInterfaceAdded$5$NetworkManagementService$NetdUnsolicitedEventListener(Ljava/lang/String;)V
SPLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->lambda$onInterfaceAddressRemoved$4$NetworkManagementService$NetdUnsolicitedEventListener(Ljava/lang/String;Landroid/net/LinkAddress;)V
SPLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->lambda$onInterfaceAddressUpdated$3$NetworkManagementService$NetdUnsolicitedEventListener(Ljava/lang/String;Landroid/net/LinkAddress;)V
SPLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->lambda$onInterfaceLinkStateChanged$8$NetworkManagementService$NetdUnsolicitedEventListener(Ljava/lang/String;Z)V
SPLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->lambda$onRouteChanged$9$NetworkManagementService$NetdUnsolicitedEventListener(ZLandroid/net/RouteInfo;)V
SPLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->onInterfaceAdded(Ljava/lang/String;)V
SPLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->onInterfaceAddressRemoved(Ljava/lang/String;Ljava/lang/String;II)V
SPLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->onInterfaceAddressUpdated(Ljava/lang/String;Ljava/lang/String;II)V
SPLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->onInterfaceLinkStateChanged(Ljava/lang/String;Z)V
SPLcom/android/server/NetworkManagementService$NetdUnsolicitedEventListener;->onRouteChanged(ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/NetworkManagementService$SystemServices;->getNetd()Landroid/net/INetd;
SPLcom/android/server/NetworkManagementService$SystemServices;->getService(Ljava/lang/String;)Landroid/os/IBinder;
SPLcom/android/server/NetworkManagementService$SystemServices;->registerLocalService(Lcom/android/server/NetworkManagementInternal;)V
SPLcom/android/server/NetworkManagementService;-><init>(Landroid/content/Context;Ljava/lang/String;Lcom/android/server/NetworkManagementService$SystemServices;)V
SPLcom/android/server/NetworkManagementService;->clearInterfaceAddresses(Ljava/lang/String;)V
SPLcom/android/server/NetworkManagementService;->closeSocketsForFirewallChainLocked(ILjava/lang/String;)V
SPLcom/android/server/NetworkManagementService;->connectNativeNetdService()V
SPLcom/android/server/NetworkManagementService;->create(Landroid/content/Context;)Lcom/android/server/NetworkManagementService;
SPLcom/android/server/NetworkManagementService;->create(Landroid/content/Context;Ljava/lang/String;Lcom/android/server/NetworkManagementService$SystemServices;)Lcom/android/server/NetworkManagementService;
SPLcom/android/server/NetworkManagementService;->disableIpv6(Ljava/lang/String;)V
SPLcom/android/server/NetworkManagementService;->getBatteryStats()Lcom/android/internal/app/IBatteryStats;
SPLcom/android/server/NetworkManagementService;->getFirewallChainName(I)Ljava/lang/String;
SPLcom/android/server/NetworkManagementService;->getInterfaceConfig(Ljava/lang/String;)Landroid/net/InterfaceConfiguration;
SPLcom/android/server/NetworkManagementService;->getNetworkStatsSummaryDev()Landroid/net/NetworkStats;
SPLcom/android/server/NetworkManagementService;->getNetworkStatsSummaryXt()Landroid/net/NetworkStats;
SPLcom/android/server/NetworkManagementService;->getNetworkStatsTethering(I)Landroid/net/NetworkStats;
SPLcom/android/server/NetworkManagementService;->getNetworkStatsUidDetail(I[Ljava/lang/String;)Landroid/net/NetworkStats;
SPLcom/android/server/NetworkManagementService;->invokeForAllObservers(Lcom/android/server/NetworkManagementService$NetworkManagementEventCallback;)V
SPLcom/android/server/NetworkManagementService;->isBandwidthControlEnabled()Z
SPLcom/android/server/NetworkManagementService;->listInterfaces()[Ljava/lang/String;
SPLcom/android/server/NetworkManagementService;->monitor()V
SPLcom/android/server/NetworkManagementService;->prepareNativeDaemon()V
SPLcom/android/server/NetworkManagementService;->registerObserver(Landroid/net/INetworkManagementEventObserver;)V
SPLcom/android/server/NetworkManagementService;->registerTetheringStatsProvider(Landroid/net/ITetheringStatsProvider;Ljava/lang/String;)V
SPLcom/android/server/NetworkManagementService;->setDataSaverModeEnabled(Z)Z
SPLcom/android/server/NetworkManagementService;->setFirewallChainEnabled(IZ)V
SPLcom/android/server/NetworkManagementService;->setFirewallChainState(IZ)V
SPLcom/android/server/NetworkManagementService;->setFirewallEnabled(Z)V
SPLcom/android/server/NetworkManagementService;->setFirewallUidRule(III)V
SPLcom/android/server/NetworkManagementService;->setFirewallUidRuleLocked(III)V
SPLcom/android/server/NetworkManagementService;->setGlobalAlert(J)V
SPLcom/android/server/NetworkManagementService;->setInterfaceIpv6PrivacyExtensions(Ljava/lang/String;Z)V
SPLcom/android/server/NetworkManagementService;->setPermission(Ljava/lang/String;[I)V
SPLcom/android/server/NetworkManagementService;->setUidCleartextNetworkPolicy(II)V
SPLcom/android/server/NetworkManagementService;->syncFirewallChainLocked(ILjava/lang/String;)V
SPLcom/android/server/NetworkManagementService;->systemReady()V
SPLcom/android/server/NetworkManagementService;->unregisterObserver(Landroid/net/INetworkManagementEventObserver;)V
SPLcom/android/server/NetworkScoreService$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/NetworkScoreService$5;->accept(Landroid/net/INetworkScoreCache;Ljava/lang/Object;)V
SPLcom/android/server/NetworkScoreService$5;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/NetworkScoreService$DispatchingContentObserver;->observe(Landroid/net/Uri;I)V
SPLcom/android/server/NetworkScoreService$DispatchingContentObserver;->onChange(ZLandroid/net/Uri;)V
SPLcom/android/server/NetworkScoreService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/NetworkScoreService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/NetworkScoreService$Lifecycle;->onStart()V
SPLcom/android/server/NetworkScoreService$ServiceHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/NetworkScoreService;-><init>(Landroid/content/Context;Lcom/android/server/NetworkScorerAppManager;Ljava/util/function/Function;Landroid/os/Looper;)V
SPLcom/android/server/NetworkScoreService;->bindToScoringServiceIfNeeded(Landroid/net/NetworkScorerAppData;)V
SPLcom/android/server/NetworkScoreService;->getScoreCacheLists()Ljava/util/Collection;
SPLcom/android/server/NetworkScoreService;->registerNetworkScoreCache(ILandroid/net/INetworkScoreCache;I)V
SPLcom/android/server/NetworkScoreService;->registerPackageMonitorIfNeeded()V
SPLcom/android/server/NetworkScoreService;->sendCacheUpdateCallback(Ljava/util/function/BiConsumer;Ljava/util/Collection;)V
SPLcom/android/server/NetworkScoreService;->systemReady()V
SPLcom/android/server/NetworkScoreService;->unbindFromScoringServiceIfNeeded()V
SPLcom/android/server/NetworkScorerAppManager$SettingsFacade;->getInt(Landroid/content/Context;Ljava/lang/String;I)I
SPLcom/android/server/NetworkScorerAppManager$SettingsFacade;->getString(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/NetworkScorerAppManager$SettingsFacade;->putInt(Landroid/content/Context;Ljava/lang/String;I)Z
SPLcom/android/server/NetworkScorerAppManager;->getActiveScorer()Landroid/net/NetworkScorerAppData;
SPLcom/android/server/NetworkScorerAppManager;->getAllValidScorers()Ljava/util/List;
SPLcom/android/server/NetworkScorerAppManager;->getScorer(Ljava/lang/String;)Landroid/net/NetworkScorerAppData;
SPLcom/android/server/NetworkScorerAppManager;->migrateNetworkScorerAppSettingIfNeeded()V
SPLcom/android/server/NetworkScorerAppManager;->setNetworkRecommendationsEnabledSetting(I)V
SPLcom/android/server/NetworkScorerAppManager;->updateState()V
SPLcom/android/server/NewNetworkTimeUpdateService$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/NewNetworkTimeUpdateService$SettingsObserver;->observe(Landroid/content/Context;)V
SPLcom/android/server/NewNetworkTimeUpdateService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/NewNetworkTimeUpdateService;->systemRunning()V
SPLcom/android/server/NsdService$DaemonConnection;-><init>(Lcom/android/server/NsdService$NativeCallbackReceiver;)V
SPLcom/android/server/NsdService$NativeCallbackReceiver;->awaitConnection()V
SPLcom/android/server/NsdService$NativeCallbackReceiver;->onDaemonConnected()V
SPLcom/android/server/NsdService$NsdSettings$1;->isEnabled()Z
SPLcom/android/server/NsdService$NsdSettings$1;->registerContentObserver(Landroid/net/Uri;Landroid/database/ContentObserver;)V
SPLcom/android/server/NsdService$NsdStateMachine$EnabledState;->enter()V
SPLcom/android/server/NsdService$NsdStateMachine;-><init>(Lcom/android/server/NsdService;Ljava/lang/String;Landroid/os/Handler;)V
SPLcom/android/server/NsdService;-><init>(Landroid/content/Context;Lcom/android/server/NsdService$NsdSettings;Landroid/os/Handler;Lcom/android/server/NsdService$DaemonConnectionSupplier;)V
SPLcom/android/server/NsdService;->create(Landroid/content/Context;)Lcom/android/server/NsdService;
SPLcom/android/server/NsdService;->isNsdEnabled()Z
SPLcom/android/server/PackageWatchdog;-><init>(Landroid/content/Context;)V
SPLcom/android/server/PackageWatchdog;->getEarliestPackageExpiryLocked()J
SPLcom/android/server/PackageWatchdog;->getInstance(Landroid/content/Context;)Lcom/android/server/PackageWatchdog;
SPLcom/android/server/PackageWatchdog;->loadFromFile()V
SPLcom/android/server/PackageWatchdog;->registerHealthObserver(Lcom/android/server/PackageWatchdog$PackageHealthObserver;)V
SPLcom/android/server/PackageWatchdog;->rescheduleCleanup()V
SPLcom/android/server/PersistentDataBlockService$2;->getTestHarnessModeData()[B
SPLcom/android/server/PersistentDataBlockService$2;->readInternal(JI)[B
SPLcom/android/server/PersistentDataBlockService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/PersistentDataBlockService;->computeAndWriteDigestLocked()Z
SPLcom/android/server/PersistentDataBlockService;->doGetOemUnlockEnabled()Z
SPLcom/android/server/PersistentDataBlockService;->doSetOemUnlockEnabledLocked(Z)V
SPLcom/android/server/PersistentDataBlockService;->enforceChecksumValidity()Z
SPLcom/android/server/PersistentDataBlockService;->formatIfOemUnlockEnabled()V
SPLcom/android/server/PersistentDataBlockService;->formatPartitionLocked(Z)V
SPLcom/android/server/PersistentDataBlockService;->getAllowedUid(I)I
SPLcom/android/server/PersistentDataBlockService;->getBlockDeviceSize()J
SPLcom/android/server/PersistentDataBlockService;->lambda$onStart$0$PersistentDataBlockService()V
SPLcom/android/server/PersistentDataBlockService;->onBootPhase(I)V
SPLcom/android/server/PersistentDataBlockService;->onStart()V
SPLcom/android/server/PinnerService$3;->onUidActive(I)V
SPLcom/android/server/PinnerService$3;->onUidGone(IZ)V
SPLcom/android/server/PinnerService$PinRangeSourceStatic;->read(Lcom/android/server/PinnerService$PinRange;)Z
SPLcom/android/server/PinnerService$PinnerHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/PinnerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/PinnerService;->getApplicationInfoForIntent(Landroid/content/Intent;IZ)Landroid/content/pm/ApplicationInfo;
SPLcom/android/server/PinnerService;->getCameraInfo(I)Landroid/content/pm/ApplicationInfo;
SPLcom/android/server/PinnerService;->getUidForKey(I)I
SPLcom/android/server/PinnerService;->handlePinOnStart()V
SPLcom/android/server/PinnerService;->handleUidGone(I)V
SPLcom/android/server/PinnerService;->maybeOpenPinMetaInZip(Ljava/util/zip/ZipFile;Ljava/lang/String;)Ljava/io/InputStream;
SPLcom/android/server/PinnerService;->maybeOpenZip(Ljava/lang/String;)Ljava/util/zip/ZipFile;
SPLcom/android/server/PinnerService;->onStart()V
SPLcom/android/server/PinnerService;->pinApp(IIZ)V
SPLcom/android/server/PinnerService;->pinApp(ILandroid/content/pm/ApplicationInfo;)V
SPLcom/android/server/PinnerService;->pinFile(Ljava/lang/String;IZ)Lcom/android/server/PinnerService$PinnedFile;
SPLcom/android/server/PinnerService;->registerUidListener()V
SPLcom/android/server/PinnerService;->safeClose(Ljava/io/Closeable;)V
SPLcom/android/server/PinnerService;->safeClose(Ljava/io/FileDescriptor;)V
SPLcom/android/server/PinnerService;->unpinApp(I)V
SPLcom/android/server/PinnerService;->updateActiveState(IZ)V
SPLcom/android/server/PruneInstantAppsJobService;->schedule(Landroid/content/Context;)V
SPLcom/android/server/RandomBlock;->close(Ljava/io/Closeable;)V
SPLcom/android/server/RandomBlock;->fromFile(Ljava/lang/String;)Lcom/android/server/RandomBlock;
SPLcom/android/server/RandomBlock;->fromStream(Ljava/io/InputStream;)Lcom/android/server/RandomBlock;
SPLcom/android/server/RandomBlock;->toFile(Ljava/lang/String;Z)V
SPLcom/android/server/RandomBlock;->truncateIfPossible(Ljava/io/RandomAccessFile;)V
SPLcom/android/server/RecoverySystemService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/RecoverySystemService;->onStart()V
SPLcom/android/server/RescueParty$BootThreshold;-><init>()V
SPLcom/android/server/RescueParty$BootThreshold;->getCount()I
SPLcom/android/server/RescueParty$BootThreshold;->getStart()J
SPLcom/android/server/RescueParty$BootThreshold;->setCount(I)V
SPLcom/android/server/RescueParty$BootThreshold;->setStart(J)V
SPLcom/android/server/RescueParty$Threshold;->incrementAndTest()Z
SPLcom/android/server/RescueParty;->executeRescueLevel(Landroid/content/Context;)V
SPLcom/android/server/RescueParty;->isDisabled()Z
SPLcom/android/server/RescueParty;->isUsbActive()Z
SPLcom/android/server/RescueParty;->noteBoot(Landroid/content/Context;)V
SPLcom/android/server/RuntimeService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/SensorNotificationService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/SensorNotificationService;->onBootPhase(I)V
SPLcom/android/server/SensorNotificationService;->onStart()V
SPLcom/android/server/SensorPrivacyService$DeathRecipient;-><init>(Lcom/android/server/SensorPrivacyService;Landroid/hardware/ISensorPrivacyListener;)V
SPLcom/android/server/SensorPrivacyService$SensorPrivacyHandler;->addListener(Landroid/hardware/ISensorPrivacyListener;)V
SPLcom/android/server/SensorPrivacyService$SensorPrivacyServiceImpl;-><init>(Lcom/android/server/SensorPrivacyService;Landroid/content/Context;)V
SPLcom/android/server/SensorPrivacyService$SensorPrivacyServiceImpl;->addSensorPrivacyListener(Landroid/hardware/ISensorPrivacyListener;)V
SPLcom/android/server/SensorPrivacyService$SensorPrivacyServiceImpl;->isSensorPrivacyEnabled()Z
SPLcom/android/server/SensorPrivacyService$SensorPrivacyServiceImpl;->readPersistedSensorPrivacyEnabledLocked()Z
SPLcom/android/server/SensorPrivacyService;->onStart()V
SPLcom/android/server/SerialService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/ServiceThread;-><init>(Ljava/lang/String;IZ)V
SPLcom/android/server/ServiceThread;->run()V
SPLcom/android/server/ServiceWatcher$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/ServiceWatcher;-><init>(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;IIILandroid/os/Handler;)V
SPLcom/android/server/ServiceWatcher;->bind(Landroid/content/ComponentName;II)V
SPLcom/android/server/ServiceWatcher;->bindBestPackage(Z)V
SPLcom/android/server/ServiceWatcher;->getCurrentPackageName()Ljava/lang/String;
SPLcom/android/server/ServiceWatcher;->getSignatureSets(Landroid/content/Context;[Ljava/lang/String;)Ljava/util/ArrayList;
SPLcom/android/server/ServiceWatcher;->isSignatureMatch([Landroid/content/pm/Signature;Ljava/util/List;)Z
SPLcom/android/server/ServiceWatcher;->lambda$onServiceConnected$3$ServiceWatcher(Landroid/content/ComponentName;Landroid/os/IBinder;)V
SPLcom/android/server/ServiceWatcher;->lambda$runOnBinder$1$ServiceWatcher(Lcom/android/server/ServiceWatcher$BinderRunner;)V
SPLcom/android/server/ServiceWatcher;->lambda$runOnBinder$1(Lcom/android/server/ServiceWatcher;Lcom/android/server/ServiceWatcher$BinderRunner;)V
SPLcom/android/server/ServiceWatcher;->lambda$start$0$ServiceWatcher()V
SPLcom/android/server/ServiceWatcher;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
SPLcom/android/server/ServiceWatcher;->start()Z
SPLcom/android/server/ServiceWatcher;->unbind()V
SPLcom/android/server/StorageManagerService$4;->onVolumeCreated(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/StorageManagerService$4;->onVolumeDestroyed(Ljava/lang/String;)V
SPLcom/android/server/StorageManagerService$4;->onVolumeInternalPathChanged(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/StorageManagerService$4;->onVolumePathChanged(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/StorageManagerService$4;->onVolumeStateChanged(Ljava/lang/String;I)V
SPLcom/android/server/StorageManagerService$8;->onFinished(ILandroid/os/PersistableBundle;)V
SPLcom/android/server/StorageManagerService$8;->onStatus(ILandroid/os/PersistableBundle;)V
SPLcom/android/server/StorageManagerService$Callbacks;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/StorageManagerService$Callbacks;->invokeCallback(Landroid/os/storage/IStorageEventListener;ILcom/android/internal/os/SomeArgs;)V
SPLcom/android/server/StorageManagerService$Callbacks;->register(Landroid/os/storage/IStorageEventListener;)V
SPLcom/android/server/StorageManagerService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/StorageManagerService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/StorageManagerService$Lifecycle;->onStart()V
SPLcom/android/server/StorageManagerService$StorageManagerInternalImpl;->addExternalStoragePolicy(Landroid/os/storage/StorageManagerInternal$ExternalStorageMountPolicy;)V
SPLcom/android/server/StorageManagerService$StorageManagerInternalImpl;->destroySandboxForApp(Ljava/lang/String;Ljava/lang/String;I)V
SPLcom/android/server/StorageManagerService$StorageManagerInternalImpl;->getExternalStorageMountMode(ILjava/lang/String;)I
SPLcom/android/server/StorageManagerService$StorageManagerInternalImpl;->getSandboxId(Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/StorageManagerService$StorageManagerInternalImpl;->getVisibleVolumesForUser(I)[Ljava/lang/String;
SPLcom/android/server/StorageManagerService$StorageManagerInternalImpl;->hasExternalStorage(ILjava/lang/String;)Z
SPLcom/android/server/StorageManagerService$StorageManagerInternalImpl;->onReset(Landroid/os/IVold;)V
SPLcom/android/server/StorageManagerService$StorageManagerServiceHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/StorageManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/StorageManagerService;->connect()V
SPLcom/android/server/StorageManagerService;->copyLocaleFromMountService()V
SPLcom/android/server/StorageManagerService;->dispatchOnFinished(Landroid/os/IVoldTaskListener;ILandroid/os/PersistableBundle;)V
SPLcom/android/server/StorageManagerService;->dispatchOnStatus(Landroid/os/IVoldTaskListener;ILandroid/os/PersistableBundle;)V
SPLcom/android/server/StorageManagerService;->findRecordForPath(Ljava/lang/String;)Landroid/os/storage/VolumeRecord;
SPLcom/android/server/StorageManagerService;->fstrim(ILandroid/os/IVoldTaskListener;)V
SPLcom/android/server/StorageManagerService;->getDisks()[Landroid/os/storage/DiskInfo;
SPLcom/android/server/StorageManagerService;->getField(Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/StorageManagerService;->getMountMode(ILjava/lang/String;)I
SPLcom/android/server/StorageManagerService;->getVolumeList(ILjava/lang/String;I)[Landroid/os/storage/StorageVolume;
SPLcom/android/server/StorageManagerService;->getVolumeRecords(I)[Landroid/os/storage/VolumeRecord;
SPLcom/android/server/StorageManagerService;->getVolumes(I)[Landroid/os/storage/VolumeInfo;
SPLcom/android/server/StorageManagerService;->handleSystemReady()V
SPLcom/android/server/StorageManagerService;->initIfReadyAndConnected()V
SPLcom/android/server/StorageManagerService;->isMountDisallowed(Landroid/os/storage/VolumeInfo;)Z
SPLcom/android/server/StorageManagerService;->killMediaProvider(Ljava/util/List;)V
SPLcom/android/server/StorageManagerService;->lastMaintenance()J
SPLcom/android/server/StorageManagerService;->maybeLogMediaMount(Landroid/os/storage/VolumeInfo;I)V
SPLcom/android/server/StorageManagerService;->monitor()V
SPLcom/android/server/StorageManagerService;->mount(Landroid/os/storage/VolumeInfo;)V
SPLcom/android/server/StorageManagerService;->onDaemonConnected()V
SPLcom/android/server/StorageManagerService;->onKeyguardStateChanged(Z)V
SPLcom/android/server/StorageManagerService;->onVolumeCreatedLocked(Landroid/os/storage/VolumeInfo;)V
SPLcom/android/server/StorageManagerService;->onVolumeStateChangedLocked(Landroid/os/storage/VolumeInfo;II)V
SPLcom/android/server/StorageManagerService;->readSettingsLocked()V
SPLcom/android/server/StorageManagerService;->refreshIsolatedStorageSettings()V
SPLcom/android/server/StorageManagerService;->refreshZramSettings()V
SPLcom/android/server/StorageManagerService;->registerListener(Landroid/os/storage/IStorageEventListener;)V
SPLcom/android/server/StorageManagerService;->resetIfReadyAndConnected()V
SPLcom/android/server/StorageManagerService;->runIdleMaintenance(Ljava/lang/Runnable;)V
SPLcom/android/server/StorageManagerService;->runMaintenance()V
SPLcom/android/server/StorageManagerService;->scrubPath(Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/StorageManagerService;->servicesReady()V
SPLcom/android/server/SystemServer;-><init>()V
SPLcom/android/server/SystemServer;->lambda$startOtherServices$1()V
SPLcom/android/server/SystemServer;->lambda$startOtherServices$3$SystemServer()V
SPLcom/android/server/SystemServer;->lambda$startOtherServices$3(Lcom/android/server/SystemServer;)V
SPLcom/android/server/SystemServer;->lambda$startOtherServices$4$SystemServer(Landroid/content/Context;Lcom/android/server/wm/WindowManagerService;ZLcom/android/server/ConnectivityService;Lcom/android/server/NetworkManagementService;Lcom/android/server/net/NetworkPolicyManagerService;Lcom/android/server/IpSecService;Lcom/android/server/net/NetworkStatsService;Lcom/android/server/LocationManagerService;Lcom/android/server/CountryDetectorService;Lcom/android/server/NetworkTimeUpdateService;Lcom/android/server/input/InputManagerService;Lcom/android/server/TelephonyRegistry;Lcom/android/server/media/MediaRouterService;Lcom/android/server/MmsServiceBroker;)V
SPLcom/android/server/SystemServer;->lambda$startOtherServices$4(Lcom/android/server/SystemServer;Landroid/content/Context;Lcom/android/server/wm/WindowManagerService;ZLcom/android/server/ConnectivityService;Lcom/android/server/NetworkManagementService;Lcom/android/server/net/NetworkPolicyManagerService;Lcom/android/server/IpSecService;Lcom/android/server/net/NetworkStatsService;Lcom/android/server/LocationManagerService;Lcom/android/server/CountryDetectorService;Lcom/android/server/NetworkTimeUpdateService;Lcom/android/server/input/InputManagerService;Lcom/android/server/TelephonyRegistry;Lcom/android/server/media/MediaRouterService;Lcom/android/server/MmsServiceBroker;)V
SPLcom/android/server/SystemServer;->main([Ljava/lang/String;)V
SPLcom/android/server/SystemServer;->performPendingShutdown()V
SPLcom/android/server/SystemServer;->run()V
SPLcom/android/server/SystemServer;->startBootstrapServices()V
SPLcom/android/server/SystemServer;->startContentCaptureService(Landroid/content/Context;)V
SPLcom/android/server/SystemServer;->startCoreServices()V
SPLcom/android/server/SystemServer;->startOtherServices()V
SPLcom/android/server/SystemServer;->traceBeginAndSlog(Ljava/lang/String;)V
SPLcom/android/server/SystemServer;->traceEnd()V
SPLcom/android/server/SystemServerInitThreadPool;->get()Lcom/android/server/SystemServerInitThreadPool;
SPLcom/android/server/SystemServerInitThreadPool;->lambda$submit$0(Ljava/lang/String;Ljava/lang/Runnable;)V
SPLcom/android/server/SystemServerInitThreadPool;->shutdown()V
SPLcom/android/server/SystemServerInitThreadPool;->submit(Ljava/lang/Runnable;Ljava/lang/String;)Ljava/util/concurrent/Future;
SPLcom/android/server/SystemService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/SystemService;->getContext()Landroid/content/Context;
SPLcom/android/server/SystemService;->getLocalService(Ljava/lang/Class;)Ljava/lang/Object;
SPLcom/android/server/SystemService;->onBootPhase(I)V
SPLcom/android/server/SystemService;->onStartUser(I)V
SPLcom/android/server/SystemService;->publishBinderService(Ljava/lang/String;Landroid/os/IBinder;)V
SPLcom/android/server/SystemServiceManager;->isBootCompleted()Z
SPLcom/android/server/SystemServiceManager;->isRuntimeRestarted()Z
SPLcom/android/server/SystemServiceManager;->isSafeMode()Z
SPLcom/android/server/SystemServiceManager;->setSafeMode(Z)V
SPLcom/android/server/SystemServiceManager;->setStartInfo(ZJJ)V
SPLcom/android/server/SystemServiceManager;->startService(Lcom/android/server/SystemService;)V
SPLcom/android/server/SystemServiceManager;->startService(Ljava/lang/Class;)Lcom/android/server/SystemService;
SPLcom/android/server/SystemServiceManager;->startService(Ljava/lang/String;)Lcom/android/server/SystemService;
SPLcom/android/server/SystemServiceManager;->startUser(I)V
SPLcom/android/server/SystemUpdateManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/SystemUpdateManagerService;->loadSystemUpdateInfoLocked()Landroid/os/Bundle;
SPLcom/android/server/SystemUpdateManagerService;->removeInfoFileAndGetDefaultInfoBundleLocked()Landroid/os/Bundle;
SPLcom/android/server/TelephonyRegistry$1;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/TelephonyRegistry$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/TelephonyRegistry$Record;->matchPhoneStateListenerEvent(I)Z
SPLcom/android/server/TelephonyRegistry;-><init>(Landroid/content/Context;)V
SPLcom/android/server/TelephonyRegistry;->addOnSubscriptionsChangedListener(Ljava/lang/String;Lcom/android/internal/telephony/IOnSubscriptionsChangedListener;)V
SPLcom/android/server/TelephonyRegistry;->broadcastDataConnectionStateChanged(IZLjava/lang/String;Ljava/lang/String;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;ZI)V
SPLcom/android/server/TelephonyRegistry;->broadcastPreciseDataConnectionStateChanged(IILjava/lang/String;Ljava/lang/String;Landroid/net/LinkProperties;I)V
SPLcom/android/server/TelephonyRegistry;->broadcastServiceStateChanged(Landroid/telephony/ServiceState;II)V
SPLcom/android/server/TelephonyRegistry;->broadcastSignalStrengthChanged(Landroid/telephony/SignalStrength;II)V
SPLcom/android/server/TelephonyRegistry;->checkListenerPermission(IILjava/lang/String;Ljava/lang/String;)Z
SPLcom/android/server/TelephonyRegistry;->checkNotifyPermission(Ljava/lang/String;)Z
SPLcom/android/server/TelephonyRegistry;->handleRemoveListLocked()V
SPLcom/android/server/TelephonyRegistry;->idMatch(III)Z
SPLcom/android/server/TelephonyRegistry;->listen(Ljava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZI)V
SPLcom/android/server/TelephonyRegistry;->listenForSubscriber(ILjava/lang/String;Lcom/android/internal/telephony/IPhoneStateListener;IZ)V
SPLcom/android/server/TelephonyRegistry;->notifyActiveDataSubIdChanged(I)V
SPLcom/android/server/TelephonyRegistry;->notifyCellLocationForSubscriber(ILandroid/os/Bundle;)V
SPLcom/android/server/TelephonyRegistry;->notifyDataActivityForSubscriber(II)V
SPLcom/android/server/TelephonyRegistry;->notifyDataConnectionForSubscriber(IIZLjava/lang/String;Ljava/lang/String;Landroid/net/LinkProperties;Landroid/net/NetworkCapabilities;IZ)V
SPLcom/android/server/TelephonyRegistry;->notifyOtaspChanged(I)V
SPLcom/android/server/TelephonyRegistry;->notifyPhoneCapabilityChanged(Landroid/telephony/PhoneCapability;)V
SPLcom/android/server/TelephonyRegistry;->notifyPhysicalChannelConfigurationForSubscriber(ILjava/util/List;)V
SPLcom/android/server/TelephonyRegistry;->notifyRadioPowerStateChanged(I)V
SPLcom/android/server/TelephonyRegistry;->notifyServiceStateForPhoneId(IILandroid/telephony/ServiceState;)V
SPLcom/android/server/TelephonyRegistry;->notifySignalStrengthForPhoneId(IILandroid/telephony/SignalStrength;)V
SPLcom/android/server/TelephonyRegistry;->systemRunning()V
SPLcom/android/server/ThreadPriorityBooster$1;->initialValue()Lcom/android/server/ThreadPriorityBooster$PriorityState;
SPLcom/android/server/ThreadPriorityBooster$1;->initialValue()Ljava/lang/Object;
SPLcom/android/server/ThreadPriorityBooster;-><init>(II)V
SPLcom/android/server/ThreadPriorityBooster;->setBoostToPriority(I)V
SPLcom/android/server/UiModeManagerService$3;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/UiModeManagerService$6;->getCurrentModeType()I
SPLcom/android/server/UiModeManagerService$UserSwitchedReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/UiModeManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/UiModeManagerService;->lambda$onStart$1$UiModeManagerService()V
SPLcom/android/server/UiModeManagerService;->lambda$onStart$1(Lcom/android/server/UiModeManagerService;)V
SPLcom/android/server/UiModeManagerService;->onBootPhase(I)V
SPLcom/android/server/UiModeManagerService;->onStart()V
SPLcom/android/server/UiModeManagerService;->registerVrStateListener()V
SPLcom/android/server/UiModeManagerService;->sendConfigurationAndStartDreamOrDockAppLocked(Ljava/lang/String;)V
SPLcom/android/server/UiModeManagerService;->sendConfigurationLocked()V
SPLcom/android/server/UiModeManagerService;->updateConfigurationLocked()V
SPLcom/android/server/UiModeManagerService;->updateLocked(II)V
SPLcom/android/server/UiThread;->ensureThreadLocked()V
SPLcom/android/server/UiThread;->get()Lcom/android/server/UiThread;
SPLcom/android/server/UiThread;->getHandler()Landroid/os/Handler;
SPLcom/android/server/UiThread;->run()V
SPLcom/android/server/UpdateLockService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/UpdateLockService;->sendLockChangedBroadcast(Z)V
SPLcom/android/server/VibratorService$1;->onUidGone(IZ)V
SPLcom/android/server/VibratorService$1;->onUidStateChanged(IIJ)V
SPLcom/android/server/VibratorService$3;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/VibratorService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/VibratorService;->hasVibrator()Z
SPLcom/android/server/VibratorService;->systemReady()V
SPLcom/android/server/VibratorService;->updateInputDeviceVibratorsLocked()Z
SPLcom/android/server/VibratorService;->updateVibrationIntensityLocked()V
SPLcom/android/server/VibratorService;->updateVibrators()V
SPLcom/android/server/Watchdog$BinderThreadMonitor;->monitor()V
SPLcom/android/server/Watchdog$HandlerChecker;->run()V
SPLcom/android/server/Watchdog$HandlerChecker;->scheduleCheckLocked()V
SPLcom/android/server/Watchdog$OpenFdMonitor;->create()Lcom/android/server/Watchdog$OpenFdMonitor;
SPLcom/android/server/Watchdog;-><init>()V
SPLcom/android/server/Watchdog;->addMonitor(Lcom/android/server/Watchdog$Monitor;)V
SPLcom/android/server/Watchdog;->addThread(Landroid/os/Handler;)V
SPLcom/android/server/Watchdog;->addThread(Landroid/os/Handler;J)V
SPLcom/android/server/Watchdog;->getInstance()Lcom/android/server/Watchdog;
SPLcom/android/server/Watchdog;->init(Landroid/content/Context;Lcom/android/server/am/ActivityManagerService;)V
SPLcom/android/server/Watchdog;->processStarted(Ljava/lang/String;I)V
SPLcom/android/server/Watchdog;->run()V
SPLcom/android/server/WiredAccessoryManager$1;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/WiredAccessoryManager$WiredAccessoryObserver;->init()V
SPLcom/android/server/WiredAccessoryManager$WiredAccessoryObserver;->makeObservedUEventList()Ljava/util/List;
SPLcom/android/server/WiredAccessoryManager;-><init>(Landroid/content/Context;Lcom/android/server/input/InputManagerService;)V
SPLcom/android/server/WiredAccessoryManager;->notifyWiredAccessoryChanged(JII)V
SPLcom/android/server/WiredAccessoryManager;->onSystemReady()V
SPLcom/android/server/WiredAccessoryManager;->switchCodeToString(II)Ljava/lang/String;
SPLcom/android/server/WiredAccessoryManager;->systemReady()V
SPLcom/android/server/WiredAccessoryManager;->updateLocked(Ljava/lang/String;I)V
SPLcom/android/server/ZramWriteback;->scheduleZramWriteback(Landroid/content/Context;)V
SPLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$5vwr6qV-eqdCr73CeDmVnsJlZHM;-><init>()V
SPLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$5vwr6qV-eqdCr73CeDmVnsJlZHM;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$CNt8wbTQCYcsUnUkUCQHtKqr-tY;->acceptOrThrow(Ljava/lang/Object;)V
SPLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$Gu-W_dQ2mWyy8l4tm19TzFxGbeM;-><init>()V
SPLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$K4sS36agT2_B03tVUTy8mldugxY;->acceptOrThrow(Ljava/lang/Object;)V
SPLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$RFkfb_W9wnTTs_gy8Dg3k2uQOYQ;->run()V
SPLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$_rvRsbhZRBJitXrpMqI0NptLUa8;->acceptOrThrow(Ljava/lang/Object;)V
SPLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$heq1MRdQjg8BGWFbpV3PEpnDVcg;-><init>()V
SPLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$heq1MRdQjg8BGWFbpV3PEpnDVcg;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$mAPLBShddfLlktd9Q8jVo04VVXo;-><init>()V
SPLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$mAPLBShddfLlktd9Q8jVo04VVXo;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$w0ifSldCn8nADYgU7v1foSdmfe0;-><init>()V
SPLcom/android/server/accessibility/-$$Lambda$AccessibilityManagerService$w0ifSldCn8nADYgU7v1foSdmfe0;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/accessibility/AccessibilityManagerService$1;->onPackageRemoved(Ljava/lang/String;I)V
SPLcom/android/server/accessibility/AccessibilityManagerService$1;->onSomePackagesChanged()V
SPLcom/android/server/accessibility/AccessibilityManagerService$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/accessibility/AccessibilityManagerService$AccessibilityContentObserver;-><init>(Lcom/android/server/accessibility/AccessibilityManagerService;Landroid/os/Handler;)V
SPLcom/android/server/accessibility/AccessibilityManagerService$AccessibilityContentObserver;->register(Landroid/content/ContentResolver;)V
SPLcom/android/server/accessibility/AccessibilityManagerService$AccessibilityDisplayListener;->getValidDisplayList()Ljava/util/ArrayList;
SPLcom/android/server/accessibility/AccessibilityManagerService$AccessibilityDisplayListener;->initializeDisplayList()V
SPLcom/android/server/accessibility/AccessibilityManagerService$AccessibilityDisplayListener;->onDisplayChanged(I)V
SPLcom/android/server/accessibility/AccessibilityManagerService$Client;-><init>(Lcom/android/server/accessibility/AccessibilityManagerService;Landroid/view/accessibility/IAccessibilityManagerClient;ILcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/accessibility/AccessibilityManagerService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/accessibility/AccessibilityManagerService$Lifecycle;->onStart()V
SPLcom/android/server/accessibility/AccessibilityManagerService$RemoteAccessibilityConnection;->unlinkToDeath()V
SPLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->enforceCallingPermission(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->isCallerInteractingAcrossUsers(I)Z
SPLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->resolveCallingUserIdEnforcingPermissionsLocked(I)I
SPLcom/android/server/accessibility/AccessibilityManagerService$SecurityPolicy;->resolveProfileParentLocked(I)I
SPLcom/android/server/accessibility/AccessibilityManagerService$UserState;-><init>(Lcom/android/server/accessibility/AccessibilityManagerService;I)V
SPLcom/android/server/accessibility/AccessibilityManagerService$UserState;->getBindInstantServiceAllowed()Z
SPLcom/android/server/accessibility/AccessibilityManagerService$UserState;->getClientState()I
SPLcom/android/server/accessibility/AccessibilityManagerService$UserState;->isHandlingAccessibilityEvents()Z
SPLcom/android/server/accessibility/AccessibilityManagerService$UserState;->onSwitchToAnotherUserLocked()V
SPLcom/android/server/accessibility/AccessibilityManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->addClient(Landroid/view/accessibility/IAccessibilityManagerClient;I)J
SPLcom/android/server/accessibility/AccessibilityManagerService;->canRegisterService(Landroid/content/pm/ServiceInfo;)Z
SPLcom/android/server/accessibility/AccessibilityManagerService;->computeRelevantEventTypesLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;Lcom/android/server/accessibility/AccessibilityManagerService$Client;)I
SPLcom/android/server/accessibility/AccessibilityManagerService;->getEnabledAccessibilityServiceList(II)Ljava/util/List;
SPLcom/android/server/accessibility/AccessibilityManagerService;->getRecommendedTimeoutMillis()J
SPLcom/android/server/accessibility/AccessibilityManagerService;->getUserState(I)Lcom/android/server/accessibility/AccessibilityManagerService$UserState;
SPLcom/android/server/accessibility/AccessibilityManagerService;->getValidDisplayList()Ljava/util/ArrayList;
SPLcom/android/server/accessibility/AccessibilityManagerService;->isClientInPackageWhitelist(Landroid/accessibilityservice/AccessibilityServiceInfo;Lcom/android/server/accessibility/AccessibilityManagerService$Client;)Z
SPLcom/android/server/accessibility/AccessibilityManagerService;->lambda$updateRelevantEventsLocked$0$AccessibilityManagerService(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;Lcom/android/server/accessibility/AccessibilityManagerService$Client;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->lambda$updateRelevantEventsLocked$0(Lcom/android/server/accessibility/AccessibilityManagerService;Lcom/android/server/accessibility/AccessibilityManagerService$UserState;Lcom/android/server/accessibility/AccessibilityManagerService$Client;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->lambda$updateRelevantEventsLocked$1$AccessibilityManagerService(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->notifyAccessibilityButtonVisibilityChanged(Z)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->notifyAccessibilityButtonVisibilityChangedLocked(Z)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->onUserStateChangedLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->readAccessibilityButtonSettingsLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)Z
SPLcom/android/server/accessibility/AccessibilityManagerService;->readAccessibilityShortcutSettingLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)Z
SPLcom/android/server/accessibility/AccessibilityManagerService;->readComponentNamesFromStringLocked(Ljava/lang/String;Ljava/util/Set;Z)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->readConfigurationForUserStateLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)Z
SPLcom/android/server/accessibility/AccessibilityManagerService;->readEnabledAccessibilityServicesLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)Z
SPLcom/android/server/accessibility/AccessibilityManagerService;->readInstalledAccessibilityServiceLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)Z
SPLcom/android/server/accessibility/AccessibilityManagerService;->readMagnificationEnabledSettingsLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)Z
SPLcom/android/server/accessibility/AccessibilityManagerService;->readTouchExplorationGrantedAccessibilityServicesLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)Z
SPLcom/android/server/accessibility/AccessibilityManagerService;->readUserRecommendedUiTimeoutSettingsLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)Z
SPLcom/android/server/accessibility/AccessibilityManagerService;->registerBroadcastReceivers()V
SPLcom/android/server/accessibility/AccessibilityManagerService;->scheduleUpdateClientsIfNeededLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->setPictureInPictureActionReplacingConnection(Landroid/view/accessibility/IAccessibilityInteractionConnection;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->switchUser(I)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->updateAccessibilityButtonTargetsLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->updateAccessibilityEnabledSetting(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->updateAccessibilityShortcutLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->updateFilterKeyEventsLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->updateFingerprintGestureHandling(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->updateInputFilter(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->updateLegacyCapabilitiesLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->updateMagnificationLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->updatePerformGesturesLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->updateRecommendedUiTimeoutLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->updateServicesLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->updateTouchExplorationLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->updateWindowsForAccessibilityCallbackLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;)V
SPLcom/android/server/accessibility/AccessibilityManagerService;->userHasListeningMagnificationServicesLocked(Lcom/android/server/accessibility/AccessibilityManagerService$UserState;I)Z
SPLcom/android/server/accessibility/UiAutomationManager;->canRetrieveInteractiveWindowsLocked()Z
SPLcom/android/server/accessibility/UiAutomationManager;->getServiceInfo()Landroid/accessibilityservice/AccessibilityServiceInfo;
SPLcom/android/server/accessibility/UiAutomationManager;->isTouchExplorationEnabledLocked()Z
SPLcom/android/server/accessibility/UiAutomationManager;->isUiAutomationRunningLocked()Z
SPLcom/android/server/accessibility/UiAutomationManager;->suppressingAccessibilityServicesLocked()Z
SPLcom/android/server/accounts/AccountAuthenticatorCache$MySerializer;-><init>(Lcom/android/server/accounts/AccountAuthenticatorCache$1;)V
SPLcom/android/server/accounts/AccountAuthenticatorCache$MySerializer;->createFromXml(Lorg/xmlpull/v1/XmlPullParser;)Landroid/accounts/AuthenticatorDescription;
SPLcom/android/server/accounts/AccountAuthenticatorCache$MySerializer;->createFromXml(Lorg/xmlpull/v1/XmlPullParser;)Ljava/lang/Object;
SPLcom/android/server/accounts/AccountAuthenticatorCache;->parseServiceAttributes(Landroid/content/res/Resources;Ljava/lang/String;Landroid/util/AttributeSet;)Landroid/accounts/AuthenticatorDescription;
SPLcom/android/server/accounts/AccountAuthenticatorCache;->parseServiceAttributes(Landroid/content/res/Resources;Ljava/lang/String;Landroid/util/AttributeSet;)Ljava/lang/Object;
SPLcom/android/server/accounts/AccountManagerService$AccountManagerInternalImpl;->addOnAppPermissionChangeListener(Landroid/accounts/AccountManagerInternal$OnAppPermissionChangeListener;)V
SPLcom/android/server/accounts/AccountManagerService$Injector;->addLocalService(Landroid/accounts/AccountManagerInternal;)V
SPLcom/android/server/accounts/AccountManagerService$Injector;->getAccountAuthenticatorCache()Lcom/android/server/accounts/IAccountAuthenticatorCache;
SPLcom/android/server/accounts/AccountManagerService$Injector;->getContext()Landroid/content/Context;
SPLcom/android/server/accounts/AccountManagerService$Injector;->getDeDatabaseName(I)Ljava/lang/String;
SPLcom/android/server/accounts/AccountManagerService$Injector;->getMessageHandlerLooper()Landroid/os/Looper;
SPLcom/android/server/accounts/AccountManagerService$Injector;->getPreNDatabaseName(I)Ljava/lang/String;
SPLcom/android/server/accounts/AccountManagerService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/accounts/AccountManagerService$Lifecycle;->onStart()V
SPLcom/android/server/accounts/AccountManagerService$UserAccounts;-><init>(Landroid/content/Context;ILjava/io/File;Ljava/io/File;)V
SPLcom/android/server/accounts/AccountManagerService;-><init>(Lcom/android/server/accounts/AccountManagerService$Injector;)V
SPLcom/android/server/accounts/AccountManagerService;->filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account;
SPLcom/android/server/accounts/AccountManagerService;->filterSharedAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/util/Map;ILjava/lang/String;)Ljava/util/Map;
SPLcom/android/server/accounts/AccountManagerService;->getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;
SPLcom/android/server/accounts/AccountManagerService;->getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account;
SPLcom/android/server/accounts/AccountManagerService;->getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account;
SPLcom/android/server/accounts/AccountManagerService;->getAccountsInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;ILjava/lang/String;Ljava/util/List;Z)[Landroid/accounts/Account;
SPLcom/android/server/accounts/AccountManagerService;->getAuthenticatorTypeAndUIDForUser(Lcom/android/server/accounts/IAccountAuthenticatorCache;I)Ljava/util/HashMap;
SPLcom/android/server/accounts/AccountManagerService;->getTypesForCaller(IIZ)Ljava/util/List;
SPLcom/android/server/accounts/AccountManagerService;->getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts;
SPLcom/android/server/accounts/AccountManagerService;->isLocalUnlockedUser(I)Z
SPLcom/android/server/accounts/AccountManagerService;->purgeOldGrants(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V
SPLcom/android/server/accounts/AccountManagerService;->resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer;
SPLcom/android/server/accounts/AccountManagerService;->validateAccountsInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Z)V
SPLcom/android/server/accounts/AccountsDb$DeDatabaseHelper;->onOpen(Landroid/database/sqlite/SQLiteDatabase;)V
SPLcom/android/server/accounts/AccountsDb;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
SPLcom/android/server/accounts/AccountsDb;->create(Landroid/content/Context;ILjava/io/File;Ljava/io/File;)Lcom/android/server/accounts/AccountsDb;
SPLcom/android/server/accounts/AccountsDb;->findAllDeAccounts()Ljava/util/Map;
SPLcom/android/server/accounts/AccountsDb;->findAllUidGrants()Ljava/util/List;
SPLcom/android/server/accounts/AccountsDb;->findAllVisibilityValues()Ljava/util/Map;
SPLcom/android/server/accounts/AccountsDb;->findMetaAuthUid()Ljava/util/Map;
SPLcom/android/server/accounts/AccountsDb;->isCeDatabaseAttached()Z
SPLcom/android/server/adb/AdbDebuggingManager$AdbKeyStore;->getKeyMapFromFile()Ljava/util/Map;
SPLcom/android/server/adb/AdbDebuggingManager;->getAdbFile(Ljava/lang/String;)Ljava/io/File;
SPLcom/android/server/adb/AdbService$AdbHandler;-><init>(Lcom/android/server/adb/AdbService;Landroid/os/Looper;)V
SPLcom/android/server/adb/AdbService$AdbHandler;->containsFunction(Ljava/lang/String;Ljava/lang/String;)Z
SPLcom/android/server/adb/AdbService$AdbManagerInternalImpl;->isAdbEnabled()Z
SPLcom/android/server/adb/AdbService$AdbManagerInternalImpl;->registerTransport(Landroid/debug/IAdbTransport;)V
SPLcom/android/server/adb/AdbService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/adb/AdbService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/adb/AdbService$Lifecycle;->onStart()V
SPLcom/android/server/adb/AdbService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/adb/AdbService;->systemReady()V
SPLcom/android/server/am/-$$Lambda$ActivityManagerService$30I5N5ZS7997YvRBJqVkTZMPd6M;->run()V
SPLcom/android/server/am/-$$Lambda$ActivityManagerService$XMDHDkKdzWb8nQlDZRKevGp6Oa8;-><init>()V
SPLcom/android/server/am/-$$Lambda$ActivityManagerService$Z3G4KWA2tlTOhqhFtAvVby1SjyQ;-><init>(Lcom/android/server/am/ActivityManagerService;)V
SPLcom/android/server/am/-$$Lambda$BatteryExternalStatsWorker$ML8sXrbYk0MflPvsY2cfCYlcU0w;-><init>()V
SPLcom/android/server/am/-$$Lambda$BatteryExternalStatsWorker$ML8sXrbYk0MflPvsY2cfCYlcU0w;->newThread(Ljava/lang/Runnable;)Ljava/lang/Thread;
SPLcom/android/server/am/-$$Lambda$BatteryExternalStatsWorker$PpNEY15dspg9oLlkg1OsyjrPTqw;->run()V
SPLcom/android/server/am/-$$Lambda$BatteryExternalStatsWorker$ddVY5lmqswnSjXppAxPTOHbuzzQ;->run()V
SPLcom/android/server/am/-$$Lambda$BatteryExternalStatsWorker$r3x3xYmhrLG8kgeNVPXl5EILHwU;->run()V
SPLcom/android/server/am/-$$Lambda$BatteryStatsService$ZxbqtJ7ozYmzYFkkNV3m_QRd0Sk;->run()V
SPLcom/android/server/am/-$$Lambda$BatteryStatsService$rRONgIFHr4sujxPESRmo9P5RJ6w;->run()V
SPLcom/android/server/am/-$$Lambda$OomAdjProfiler$5x1ooCPxPmlzbXvtcEuYDu_6Uz4;-><init>()V
SPLcom/android/server/am/-$$Lambda$OomAdjProfiler$5x1ooCPxPmlzbXvtcEuYDu_6Uz4;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/am/-$$Lambda$PendingIntentRecord$hlEHdgdG_SS5n3v7IRr7e6QZgLQ;-><init>()V
SPLcom/android/server/am/-$$Lambda$PendingIntentRecord$hlEHdgdG_SS5n3v7IRr7e6QZgLQ;->accept(Ljava/lang/Object;)V
SPLcom/android/server/am/-$$Lambda$ProcessList$Clv-1gpwGcZ-lQ1Ghdh2VzSdPZ4;-><init>(Lcom/android/server/am/ProcessList;Lcom/android/server/am/ProcessRecord;JLjava/lang/String;Ljava/lang/String;[IIILjava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/am/-$$Lambda$ProcessList$Clv-1gpwGcZ-lQ1Ghdh2VzSdPZ4;->run()V
SPLcom/android/server/am/-$$Lambda$gATL8uvTPRd405IfefK1RL9bNqA;->run()V
SPLcom/android/server/am/ActiveServices$ServiceDumper;-><init>(Lcom/android/server/am/ActiveServices;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;IZLjava/lang/String;)V
SPLcom/android/server/am/ActiveServices$ServiceDumper;->dumpHeaderLocked()V
SPLcom/android/server/am/ActiveServices$ServiceDumper;->dumpLocked()V
SPLcom/android/server/am/ActiveServices$ServiceDumper;->dumpRemainsLocked()V
SPLcom/android/server/am/ActiveServices$ServiceDumper;->dumpServiceLocalLocked(Lcom/android/server/am/ServiceRecord;)V
SPLcom/android/server/am/ActiveServices$ServiceDumper;->dumpUserHeaderLocked(I)V
SPLcom/android/server/am/ActiveServices$ServiceDumper;->dumpUserRemainsLocked(I)V
SPLcom/android/server/am/ActiveServices$ServiceLookupResult;-><init>(Lcom/android/server/am/ActiveServices;Lcom/android/server/am/ServiceRecord;Ljava/lang/String;)V
SPLcom/android/server/am/ActiveServices$ServiceMap;-><init>(Lcom/android/server/am/ActiveServices;Landroid/os/Looper;I)V
SPLcom/android/server/am/ActiveServices$ServiceMap;->ensureNotStartingBackgroundLocked(Lcom/android/server/am/ServiceRecord;)V
SPLcom/android/server/am/ActiveServices$ServiceRestarter;-><init>(Lcom/android/server/am/ActiveServices;Lcom/android/server/am/ActiveServices$1;)V
SPLcom/android/server/am/ActiveServices;-><init>(Lcom/android/server/am/ActivityManagerService;)V
SPLcom/android/server/am/ActiveServices;->attachApplicationLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;)Z
SPLcom/android/server/am/ActiveServices;->bindServiceLocked(Landroid/app/IApplicationThread;Landroid/os/IBinder;Landroid/content/Intent;Ljava/lang/String;Landroid/app/IServiceConnection;ILjava/lang/String;Ljava/lang/String;I)I
SPLcom/android/server/am/ActiveServices;->bringDownDisabledPackageServicesLocked(Ljava/lang/String;Ljava/util/Set;IZZ)Z
SPLcom/android/server/am/ActiveServices;->bringUpServiceLocked(Lcom/android/server/am/ServiceRecord;IZZZZ)Ljava/lang/String;
SPLcom/android/server/am/ActiveServices;->bumpServiceExecutingLocked(Lcom/android/server/am/ServiceRecord;ZLjava/lang/String;)V
SPLcom/android/server/am/ActiveServices;->collectPackageServicesLocked(Ljava/lang/String;Ljava/util/Set;ZZLandroid/util/ArrayMap;)Z
SPLcom/android/server/am/ActiveServices;->forceStopPackageLocked(Ljava/lang/String;I)V
SPLcom/android/server/am/ActiveServices;->getServiceMapLocked(I)Lcom/android/server/am/ActiveServices$ServiceMap;
SPLcom/android/server/am/ActiveServices;->killServicesLocked(Lcom/android/server/am/ProcessRecord;Z)V
SPLcom/android/server/am/ActiveServices;->newServiceDumperLocked(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;IZLjava/lang/String;)Lcom/android/server/am/ActiveServices$ServiceDumper;
SPLcom/android/server/am/ActiveServices;->publishServiceLocked(Lcom/android/server/am/ServiceRecord;Landroid/content/Intent;Landroid/os/IBinder;)V
SPLcom/android/server/am/ActiveServices;->realStartServiceLocked(Lcom/android/server/am/ServiceRecord;Lcom/android/server/am/ProcessRecord;Z)V
SPLcom/android/server/am/ActiveServices;->requestServiceBindingLocked(Lcom/android/server/am/ServiceRecord;Lcom/android/server/am/IntentBindRecord;ZZ)Z
SPLcom/android/server/am/ActiveServices;->requestStartTargetPermissionsReviewIfNeededLocked(Lcom/android/server/am/ServiceRecord;Ljava/lang/String;ILandroid/content/Intent;ZI)Z
SPLcom/android/server/am/ActiveServices;->retrieveServiceLocked(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIZZZZ)Lcom/android/server/am/ActiveServices$ServiceLookupResult;
SPLcom/android/server/am/ActiveServices;->scheduleServiceTimeoutLocked(Lcom/android/server/am/ProcessRecord;)V
SPLcom/android/server/am/ActiveServices;->sendServiceArgsLocked(Lcom/android/server/am/ServiceRecord;ZZ)V
SPLcom/android/server/am/ActiveServices;->serviceDoneExecutingLocked(Lcom/android/server/am/ServiceRecord;III)V
SPLcom/android/server/am/ActiveServices;->serviceDoneExecutingLocked(Lcom/android/server/am/ServiceRecord;ZZ)V
SPLcom/android/server/am/ActiveServices;->startServiceInnerLocked(Lcom/android/server/am/ActiveServices$ServiceMap;Landroid/content/Intent;Lcom/android/server/am/ServiceRecord;ZZZ)Landroid/content/ComponentName;
SPLcom/android/server/am/ActiveServices;->startServiceLocked(Landroid/app/IApplicationThread;Landroid/content/Intent;Ljava/lang/String;IIZLjava/lang/String;IZ)Landroid/content/ComponentName;
SPLcom/android/server/am/ActiveServices;->stopInBackgroundLocked(I)V
SPLcom/android/server/am/ActiveServices;->unscheduleServiceRestartLocked(Lcom/android/server/am/ServiceRecord;IZ)Z
SPLcom/android/server/am/ActiveServices;->updateServiceClientActivitiesLocked(Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ConnectionRecord;Z)Z
SPLcom/android/server/am/ActiveServices;->updateServiceConnectionActivitiesLocked(Lcom/android/server/am/ProcessRecord;)V
SPLcom/android/server/am/ActiveServices;->updateServiceForegroundLocked(Lcom/android/server/am/ProcessRecord;Z)V
SPLcom/android/server/am/ActiveUids;->size()I
SPLcom/android/server/am/ActivityManagerConstants;-><init>(Lcom/android/server/am/ActivityManagerService;Landroid/os/Handler;)V
SPLcom/android/server/am/ActivityManagerConstants;->start(Landroid/content/ContentResolver;)V
SPLcom/android/server/am/ActivityManagerConstants;->updateConstants()V
SPLcom/android/server/am/ActivityManagerConstants;->updateMaxCachedProcesses()V
SPLcom/android/server/am/ActivityManagerService$15;-><init>(Lcom/android/server/am/ActivityManagerService;)V
SPLcom/android/server/am/ActivityManagerService$15;->performReceive(Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;ZZI)V
SPLcom/android/server/am/ActivityManagerService$16;-><init>(Lcom/android/server/am/ActivityManagerService;)V
SPLcom/android/server/am/ActivityManagerService$17;->run()V
SPLcom/android/server/am/ActivityManagerService$18;-><init>(Lcom/android/server/am/ActivityManagerService;Ljava/lang/String;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/io/File;Landroid/app/ApplicationErrorReport$CrashInfo;Landroid/os/DropBoxManager;)V
SPLcom/android/server/am/ActivityManagerService$19;->compare(Landroid/util/Pair;Landroid/util/Pair;)I
SPLcom/android/server/am/ActivityManagerService$19;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
SPLcom/android/server/am/ActivityManagerService$21;-><init>(Lcom/android/server/am/ActivityManagerService;)V
SPLcom/android/server/am/ActivityManagerService$2;->allowFilterResult(Landroid/content/IntentFilter;Ljava/util/List;)Z
SPLcom/android/server/am/ActivityManagerService$2;->isPackageForFilter(Ljava/lang/String;Landroid/content/IntentFilter;)Z
SPLcom/android/server/am/ActivityManagerService$2;->isPackageForFilter(Ljava/lang/String;Lcom/android/server/am/BroadcastFilter;)Z
SPLcom/android/server/am/ActivityManagerService$2;->newResult(Landroid/content/IntentFilter;II)Ljava/lang/Object;
SPLcom/android/server/am/ActivityManagerService$2;->newResult(Lcom/android/server/am/BroadcastFilter;II)Lcom/android/server/am/BroadcastFilter;
SPLcom/android/server/am/ActivityManagerService$5;->run()V
SPLcom/android/server/am/ActivityManagerService$AppDeathRecipient;-><init>(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessRecord;ILandroid/app/IApplicationThread;)V
SPLcom/android/server/am/ActivityManagerService$AppDeathRecipient;->binderDied()V
SPLcom/android/server/am/ActivityManagerService$DevelopmentSettingsObserver;-><init>(Lcom/android/server/am/ActivityManagerService;)V
SPLcom/android/server/am/ActivityManagerService$DevelopmentSettingsObserver;->onChange()V
SPLcom/android/server/am/ActivityManagerService$HiddenApiSettings;->getPolicy()I
SPLcom/android/server/am/ActivityManagerService$HiddenApiSettings;->isDisabled()Z
SPLcom/android/server/am/ActivityManagerService$HiddenApiSettings;->registerObserver()V
SPLcom/android/server/am/ActivityManagerService$HiddenApiSettings;->update()V
SPLcom/android/server/am/ActivityManagerService$Injector;->getAppOpsService(Ljava/io/File;Landroid/os/Handler;)Lcom/android/server/appop/AppOpsService;
SPLcom/android/server/am/ActivityManagerService$Injector;->getUiHandler(Lcom/android/server/am/ActivityManagerService;)Landroid/os/Handler;
SPLcom/android/server/am/ActivityManagerService$IntentFirewallInterface;->getAMSLock()Ljava/lang/Object;
SPLcom/android/server/am/ActivityManagerService$ItemMatcher;->build([Ljava/lang/String;I)I
SPLcom/android/server/am/ActivityManagerService$ItemMatcher;->match(Ljava/lang/Object;Landroid/content/ComponentName;)Z
SPLcom/android/server/am/ActivityManagerService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/am/ActivityManagerService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/am/ActivityManagerService$Lifecycle;->onStart()V
SPLcom/android/server/am/ActivityManagerService$LocalService;->broadcastGlobalConfigurationChanged(IZ)V
SPLcom/android/server/am/ActivityManagerService$LocalService;->broadcastIntentInPackage(Ljava/lang/String;ILandroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;Ljava/lang/String;Landroid/os/Bundle;ZZIZ)I
SPLcom/android/server/am/ActivityManagerService$LocalService;->enforceCallingPermission(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/am/ActivityManagerService$LocalService;->finishBooting()V
SPLcom/android/server/am/ActivityManagerService$LocalService;->getCurrentProfileIds()[I
SPLcom/android/server/am/ActivityManagerService$LocalService;->getCurrentUserId()I
SPLcom/android/server/am/ActivityManagerService$LocalService;->getUidProcessState(I)I
SPLcom/android/server/am/ActivityManagerService$LocalService;->hasStartedUserState(I)Z
SPLcom/android/server/am/ActivityManagerService$LocalService;->isBooted()Z
SPLcom/android/server/am/ActivityManagerService$LocalService;->isBooting()Z
SPLcom/android/server/am/ActivityManagerService$LocalService;->isRuntimeRestarted()Z
SPLcom/android/server/am/ActivityManagerService$LocalService;->isSystemReady()Z
SPLcom/android/server/am/ActivityManagerService$LocalService;->isUidActive(I)Z
SPLcom/android/server/am/ActivityManagerService$LocalService;->isUserRunning(II)Z
SPLcom/android/server/am/ActivityManagerService$LocalService;->killAllBackgroundProcessesExcept(II)V
SPLcom/android/server/am/ActivityManagerService$LocalService;->notifyNetworkPolicyRulesUpdated(IJ)V
SPLcom/android/server/am/ActivityManagerService$LocalService;->reportCurKeyguardUsageEvent(Z)V
SPLcom/android/server/am/ActivityManagerService$LocalService;->scheduleAppGcs()V
SPLcom/android/server/am/ActivityManagerService$LocalService;->setBooted(Z)V
SPLcom/android/server/am/ActivityManagerService$LocalService;->setBooting(Z)V
SPLcom/android/server/am/ActivityManagerService$LocalService;->setDeviceIdleWhitelist([I[I)V
SPLcom/android/server/am/ActivityManagerService$LocalService;->shouldConfirmCredentials(I)Z
SPLcom/android/server/am/ActivityManagerService$LocalService;->startIsolatedProcess(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Runnable;)Z
SPLcom/android/server/am/ActivityManagerService$LocalService;->startProcess(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;ZLjava/lang/String;Landroid/content/ComponentName;)V
SPLcom/android/server/am/ActivityManagerService$LocalService;->trimApplications()V
SPLcom/android/server/am/ActivityManagerService$LocalService;->updateActivityUsageStats(Landroid/content/ComponentName;IILandroid/os/IBinder;Landroid/content/ComponentName;)V
SPLcom/android/server/am/ActivityManagerService$LocalService;->updateBatteryStats(Landroid/content/ComponentName;IIZ)V
SPLcom/android/server/am/ActivityManagerService$LocalService;->updateCpuStats()V
SPLcom/android/server/am/ActivityManagerService$LocalService;->updateForegroundTimeIfOnBattery(Ljava/lang/String;IJ)V
SPLcom/android/server/am/ActivityManagerService$LocalService;->updateOomAdj()V
SPLcom/android/server/am/ActivityManagerService$LocalService;->updateOomLevelsForDisplay(I)V
SPLcom/android/server/am/ActivityManagerService$MainHandler$1;->run()V
SPLcom/android/server/am/ActivityManagerService$MainHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/am/ActivityManagerService$PermissionController;->checkPermission(Ljava/lang/String;II)Z
SPLcom/android/server/am/ActivityManagerService$PermissionController;->getPackagesForUid(I)[Ljava/lang/String;
SPLcom/android/server/am/ActivityManagerService$PermissionController;->isRuntimePermission(Ljava/lang/String;)Z
SPLcom/android/server/am/ActivityManagerService$PermissionController;->noteOp(Ljava/lang/String;ILjava/lang/String;)I
SPLcom/android/server/am/ActivityManagerService$PidMap;->get(I)Lcom/android/server/am/ProcessRecord;
SPLcom/android/server/am/ActivityManagerService$PidMap;->put(ILcom/android/server/am/ProcessRecord;)V
SPLcom/android/server/am/ActivityManagerService$PidMap;->remove(I)V
SPLcom/android/server/am/ActivityManagerService$PidMap;->size()I
SPLcom/android/server/am/ActivityManagerService$PidMap;->valueAt(I)Lcom/android/server/am/ProcessRecord;
SPLcom/android/server/am/ActivityManagerService$ProfileData;->getProfileApp()Ljava/lang/String;
SPLcom/android/server/am/ActivityManagerService$ProfileData;->getProfileProc()Lcom/android/server/am/ProcessRecord;
SPLcom/android/server/am/ActivityManagerService$ProfileData;->getProfilerInfo()Landroid/app/ProfilerInfo;
SPLcom/android/server/am/ActivityManagerService$UiHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/am/ActivityManagerService;-><init>(Landroid/content/Context;Lcom/android/server/wm/ActivityTaskManagerService;)V
SPLcom/android/server/am/ActivityManagerService;->addAppLocked(Landroid/content/pm/ApplicationInfo;Ljava/lang/String;ZZZLjava/lang/String;)Lcom/android/server/am/ProcessRecord;
SPLcom/android/server/am/ActivityManagerService;->addBackgroundCheckViolationLocked(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/am/ActivityManagerService;->addBroadcastStatLocked(Ljava/lang/String;Ljava/lang/String;IIJ)V
SPLcom/android/server/am/ActivityManagerService;->addErrorToDropBox(Ljava/lang/String;Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;Ljava/io/File;Landroid/app/ApplicationErrorReport$CrashInfo;)V
SPLcom/android/server/am/ActivityManagerService;->addPackageDependency(Ljava/lang/String;)V
SPLcom/android/server/am/ActivityManagerService;->addProcessToGcListLocked(Lcom/android/server/am/ProcessRecord;)V
SPLcom/android/server/am/ActivityManagerService;->appDiedLocked(Lcom/android/server/am/ProcessRecord;ILandroid/app/IApplicationThread;Z)V
SPLcom/android/server/am/ActivityManagerService;->appRestrictedInBackgroundLocked(ILjava/lang/String;I)I
SPLcom/android/server/am/ActivityManagerService;->appServicesRestrictedInBackgroundLocked(ILjava/lang/String;I)I
SPLcom/android/server/am/ActivityManagerService;->appendDropBoxProcessHeaders(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/StringBuilder;)V
SPLcom/android/server/am/ActivityManagerService;->appendMemBucket(Ljava/lang/StringBuilder;JLjava/lang/String;Z)V
SPLcom/android/server/am/ActivityManagerService;->appendMemInfo(Ljava/lang/StringBuilder;Lcom/android/server/am/ProcessMemInfo;)V
SPLcom/android/server/am/ActivityManagerService;->attachApplication(Landroid/app/IApplicationThread;J)V
SPLcom/android/server/am/ActivityManagerService;->attachApplicationLocked(Landroid/app/IApplicationThread;IIJ)Z
SPLcom/android/server/am/ActivityManagerService;->batteryNeedsCpuUpdate()V
SPLcom/android/server/am/ActivityManagerService;->batteryPowerChanged(Z)V
SPLcom/android/server/am/ActivityManagerService;->batterySendBroadcast(Landroid/content/Intent;)V
SPLcom/android/server/am/ActivityManagerService;->batteryStatsReset()V
SPLcom/android/server/am/ActivityManagerService;->bindIsolatedService(Landroid/app/IApplicationThread;Landroid/os/IBinder;Landroid/content/Intent;Ljava/lang/String;Landroid/app/IServiceConnection;ILjava/lang/String;Ljava/lang/String;I)I
SPLcom/android/server/am/ActivityManagerService;->broadcastIntent(Landroid/app/IApplicationThread;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZI)I
SPLcom/android/server/am/ActivityManagerService;->broadcastIntentInPackage(Ljava/lang/String;ILandroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;Ljava/lang/String;Landroid/os/Bundle;ZZIZ)I
SPLcom/android/server/am/ActivityManagerService;->broadcastIntentLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZIII)I
SPLcom/android/server/am/ActivityManagerService;->broadcastIntentLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZIIIII)I
SPLcom/android/server/am/ActivityManagerService;->broadcastIntentLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZIIIIIZ)I
SPLcom/android/server/am/ActivityManagerService;->broadcastIntentLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZIIIZ)I
SPLcom/android/server/am/ActivityManagerService;->broadcastQueueForIntent(Landroid/content/Intent;)Lcom/android/server/am/BroadcastQueue;
SPLcom/android/server/am/ActivityManagerService;->checkAppInLaunchingProvidersLocked(Lcom/android/server/am/ProcessRecord;)Z
SPLcom/android/server/am/ActivityManagerService;->checkBroadcastFromSystem(Landroid/content/Intent;Lcom/android/server/am/ProcessRecord;Ljava/lang/String;IZLjava/util/List;)V
SPLcom/android/server/am/ActivityManagerService;->checkCallingPermission(Ljava/lang/String;)I
SPLcom/android/server/am/ActivityManagerService;->checkComponentPermission(Ljava/lang/String;IIIZ)I
SPLcom/android/server/am/ActivityManagerService;->checkContentProviderAssociation(Lcom/android/server/am/ProcessRecord;ILandroid/content/pm/ProviderInfo;)Ljava/lang/String;
SPLcom/android/server/am/ActivityManagerService;->checkTime(JLjava/lang/String;)V
SPLcom/android/server/am/ActivityManagerService;->checkUriPermission(Landroid/net/Uri;IIIILandroid/os/IBinder;)I
SPLcom/android/server/am/ActivityManagerService;->cleanUpApplicationRecordLocked(Lcom/android/server/am/ProcessRecord;ZZIZ)Z
SPLcom/android/server/am/ActivityManagerService;->cleanupAppInLaunchingProvidersLocked(Lcom/android/server/am/ProcessRecord;Z)Z
SPLcom/android/server/am/ActivityManagerService;->collectReceiverComponents(Landroid/content/Intent;Ljava/lang/String;I[I)Ljava/util/List;
SPLcom/android/server/am/ActivityManagerService;->compatibilityInfoForPackage(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/CompatibilityInfo;
SPLcom/android/server/am/ActivityManagerService;->decProviderCountLocked(Lcom/android/server/am/ContentProviderConnection;Lcom/android/server/am/ContentProviderRecord;Landroid/os/IBinder;Z)Z
SPLcom/android/server/am/ActivityManagerService;->dispatchProcessDied(II)V
SPLcom/android/server/am/ActivityManagerService;->dispatchProcessesChanged()V
SPLcom/android/server/am/ActivityManagerService;->doLowMemReportIfNeededLocked(Lcom/android/server/am/ProcessRecord;)V
SPLcom/android/server/am/ActivityManagerService;->dumpProcessList(Ljava/io/PrintWriter;Lcom/android/server/am/ActivityManagerService;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
SPLcom/android/server/am/ActivityManagerService;->dumpProcessOomList(Ljava/io/PrintWriter;Lcom/android/server/am/ActivityManagerService;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)Z
SPLcom/android/server/am/ActivityManagerService;->dumpProcessesLocked(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;IZLjava/lang/String;I)V
SPLcom/android/server/am/ActivityManagerService;->dumpProcessesToGc(Ljava/io/PrintWriter;ZLjava/lang/String;)Z
SPLcom/android/server/am/ActivityManagerService;->dumpUids(Ljava/io/PrintWriter;Ljava/lang/String;ILcom/android/server/am/ActiveUids;Ljava/lang/String;Z)Z
SPLcom/android/server/am/ActivityManagerService;->enforceCallingPermission(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/am/ActivityManagerService;->enqueueUidChangeLocked(Lcom/android/server/am/UidRecord;II)V
SPLcom/android/server/am/ActivityManagerService;->findAppProcess(Landroid/os/IBinder;Ljava/lang/String;)Lcom/android/server/am/ProcessRecord;
SPLcom/android/server/am/ActivityManagerService;->finishBooting()V
SPLcom/android/server/am/ActivityManagerService;->finishReceiver(Landroid/os/IBinder;ILjava/lang/String;Landroid/os/Bundle;ZI)V
SPLcom/android/server/am/ActivityManagerService;->forceStopPackageLocked(Ljava/lang/String;IZZZZZILjava/lang/String;)Z
SPLcom/android/server/am/ActivityManagerService;->generateApplicationProvidersLocked(Lcom/android/server/am/ProcessRecord;)Ljava/util/List;
SPLcom/android/server/am/ActivityManagerService;->getAppOpsService()Lcom/android/internal/app/IAppOpsService;
SPLcom/android/server/am/ActivityManagerService;->getAppStartModeLocked(ILjava/lang/String;IIZZZ)I
SPLcom/android/server/am/ActivityManagerService;->getBackgroundLaunchBroadcasts()Landroid/util/ArraySet;
SPLcom/android/server/am/ActivityManagerService;->getBlockStateForUid(Lcom/android/server/am/UidRecord;)I
SPLcom/android/server/am/ActivityManagerService;->getCommonServicesLocked(Z)Landroid/util/ArrayMap;
SPLcom/android/server/am/ActivityManagerService;->getContentProvider(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;IZ)Landroid/app/ContentProviderHolder;
SPLcom/android/server/am/ActivityManagerService;->getContentProviderImpl(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;ZI)Landroid/app/ContentProviderHolder;
SPLcom/android/server/am/ActivityManagerService;->getCurrentUser()Landroid/content/pm/UserInfo;
SPLcom/android/server/am/ActivityManagerService;->getIntentSender(ILjava/lang/String;Landroid/os/IBinder;Ljava/lang/String;I[Landroid/content/Intent;[Ljava/lang/String;ILandroid/os/Bundle;I)Landroid/content/IIntentSender;
SPLcom/android/server/am/ActivityManagerService;->getKsmInfo()[J
SPLcom/android/server/am/ActivityManagerService;->getMemoryInfo(Landroid/app/ActivityManager$MemoryInfo;)V
SPLcom/android/server/am/ActivityManagerService;->getMemoryTrimLevel()I
SPLcom/android/server/am/ActivityManagerService;->getPackageForIntentSender(Landroid/content/IIntentSender;)Ljava/lang/String;
SPLcom/android/server/am/ActivityManagerService;->getPackageProcessState(Ljava/lang/String;Ljava/lang/String;)I
SPLcom/android/server/am/ActivityManagerService;->getProcessMemoryInfo([I)[Landroid/os/Debug$MemoryInfo;
SPLcom/android/server/am/ActivityManagerService;->getProcessRecordLocked(Ljava/lang/String;IZ)Lcom/android/server/am/ProcessRecord;
SPLcom/android/server/am/ActivityManagerService;->getRunningAppProcesses()Ljava/util/List;
SPLcom/android/server/am/ActivityManagerService;->getRunningUserIds()[I
SPLcom/android/server/am/ActivityManagerService;->getTagForIntentSender(Landroid/content/IIntentSender;Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/am/ActivityManagerService;->getTagForIntentSenderLocked(Lcom/android/server/am/PendingIntentRecord;Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/am/ActivityManagerService;->getTasks(I)Ljava/util/List;
SPLcom/android/server/am/ActivityManagerService;->getTopAppLocked()Lcom/android/server/am/ProcessRecord;
SPLcom/android/server/am/ActivityManagerService;->getUidForIntentSender(Landroid/content/IIntentSender;)I
SPLcom/android/server/am/ActivityManagerService;->getUidFromIntent(Landroid/content/Intent;)I
SPLcom/android/server/am/ActivityManagerService;->getUidState(I)I
SPLcom/android/server/am/ActivityManagerService;->grantEphemeralAccessLocked(ILandroid/content/Intent;II)V
SPLcom/android/server/am/ActivityManagerService;->handleAppDiedLocked(Lcom/android/server/am/ProcessRecord;ZZ)V
SPLcom/android/server/am/ActivityManagerService;->handleApplicationStrictModeViolation(Landroid/os/IBinder;ILandroid/os/StrictMode$ViolationInfo;)V
SPLcom/android/server/am/ActivityManagerService;->handleApplicationWtf(Landroid/os/IBinder;Ljava/lang/String;ZLandroid/app/ApplicationErrorReport$ParcelableCrashInfo;)Z
SPLcom/android/server/am/ActivityManagerService;->handleApplicationWtfInner(IILandroid/os/IBinder;Ljava/lang/String;Landroid/app/ApplicationErrorReport$CrashInfo;)Lcom/android/server/am/ProcessRecord;
SPLcom/android/server/am/ActivityManagerService;->hasUsageStatsPermission(Ljava/lang/String;)Z
SPLcom/android/server/am/ActivityManagerService;->incProviderCountLocked(Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ContentProviderRecord;Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;Z)Lcom/android/server/am/ContentProviderConnection;
SPLcom/android/server/am/ActivityManagerService;->initPowerManagement()V
SPLcom/android/server/am/ActivityManagerService;->installSystemProviders()V
SPLcom/android/server/am/ActivityManagerService;->isAllowedWhileBooting(Landroid/content/pm/ApplicationInfo;)Z
SPLcom/android/server/am/ActivityManagerService;->isAppStartModeDisabled(ILjava/lang/String;)Z
SPLcom/android/server/am/ActivityManagerService;->isIntentSenderABroadcast(Landroid/content/IIntentSender;)Z
SPLcom/android/server/am/ActivityManagerService;->isIntentSenderAForegroundService(Landroid/content/IIntentSender;)Z
SPLcom/android/server/am/ActivityManagerService;->isIntentSenderAnActivity(Landroid/content/IIntentSender;)Z
SPLcom/android/server/am/ActivityManagerService;->isPendingBroadcastProcessLocked(I)Z
SPLcom/android/server/am/ActivityManagerService;->isProcessAliveLocked(Lcom/android/server/am/ProcessRecord;)Z
SPLcom/android/server/am/ActivityManagerService;->isSingleton(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;Ljava/lang/String;I)Z
SPLcom/android/server/am/ActivityManagerService;->isUidActive(ILjava/lang/String;)Z
SPLcom/android/server/am/ActivityManagerService;->isUidActiveLocked(I)Z
SPLcom/android/server/am/ActivityManagerService;->isUserRunning(II)Z
SPLcom/android/server/am/ActivityManagerService;->killAllBackgroundProcessesExcept(II)V
SPLcom/android/server/am/ActivityManagerService;->killApplication(Ljava/lang/String;IILjava/lang/String;)V
SPLcom/android/server/am/ActivityManagerService;->logStrictModeViolationToDropBox(Lcom/android/server/am/ProcessRecord;Landroid/os/StrictMode$ViolationInfo;)V
SPLcom/android/server/am/ActivityManagerService;->maybeUpdateProviderUsageStatsLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/am/ActivityManagerService;->monitor()V
SPLcom/android/server/am/ActivityManagerService;->noteAlarmFinish(Landroid/content/IIntentSender;Landroid/os/WorkSource;ILjava/lang/String;)V
SPLcom/android/server/am/ActivityManagerService;->noteAlarmStart(Landroid/content/IIntentSender;Landroid/os/WorkSource;ILjava/lang/String;)V
SPLcom/android/server/am/ActivityManagerService;->noteUidProcessState(II)V
SPLcom/android/server/am/ActivityManagerService;->noteWakeupAlarm(Landroid/content/IIntentSender;Landroid/os/WorkSource;ILjava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/am/ActivityManagerService;->notifyPackageUse(Ljava/lang/String;I)V
SPLcom/android/server/am/ActivityManagerService;->onCoreSettingsChange(Landroid/os/Bundle;)V
SPLcom/android/server/am/ActivityManagerService;->processClass(Lcom/android/server/am/ProcessRecord;)Ljava/lang/String;
SPLcom/android/server/am/ActivityManagerService;->publishContentProviders(Landroid/app/IApplicationThread;Ljava/util/List;)V
SPLcom/android/server/am/ActivityManagerService;->publishService(Landroid/os/IBinder;Landroid/content/Intent;Landroid/os/IBinder;)V
SPLcom/android/server/am/ActivityManagerService;->registerTaskStackListener(Landroid/app/ITaskStackListener;)V
SPLcom/android/server/am/ActivityManagerService;->registerUidObserver(Landroid/app/IUidObserver;IILjava/lang/String;)V
SPLcom/android/server/am/ActivityManagerService;->registerUserSwitchObserver(Landroid/app/IUserSwitchObserver;Ljava/lang/String;)V
SPLcom/android/server/am/ActivityManagerService;->removeContentProvider(Landroid/os/IBinder;Z)V
SPLcom/android/server/am/ActivityManagerService;->reportCurWakefulnessUsageEventLocked()V
SPLcom/android/server/am/ActivityManagerService;->reportGlobalUsageEventLocked(I)V
SPLcom/android/server/am/ActivityManagerService;->reportUidInfoMessageLocked(Ljava/lang/String;Ljava/lang/String;I)V
SPLcom/android/server/am/ActivityManagerService;->requestPssAllProcsLocked(JZZ)V
SPLcom/android/server/am/ActivityManagerService;->retrieveSettings()V
SPLcom/android/server/am/ActivityManagerService;->rotateBroadcastStatsIfNeededLocked()V
SPLcom/android/server/am/ActivityManagerService;->scheduleAppGcsLocked()V
SPLcom/android/server/am/ActivityManagerService;->scheduleApplicationInfoChanged(Ljava/util/List;I)V
SPLcom/android/server/am/ActivityManagerService;->sendIntentSender(Landroid/content/IIntentSender;Landroid/os/IBinder;ILandroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;Ljava/lang/String;Landroid/os/Bundle;)I
SPLcom/android/server/am/ActivityManagerService;->sendPackageBroadcastLocked(I[Ljava/lang/String;I)V
SPLcom/android/server/am/ActivityManagerService;->sendPendingBroadcastsLocked(Lcom/android/server/am/ProcessRecord;)Z
SPLcom/android/server/am/ActivityManagerService;->serviceDoneExecuting(Landroid/os/IBinder;III)V
SPLcom/android/server/am/ActivityManagerService;->setInstaller(Lcom/android/server/pm/Installer;)V
SPLcom/android/server/am/ActivityManagerService;->setRenderThread(I)V
SPLcom/android/server/am/ActivityManagerService;->setSystemProcess()V
SPLcom/android/server/am/ActivityManagerService;->setSystemServiceManager(Lcom/android/server/SystemServiceManager;)V
SPLcom/android/server/am/ActivityManagerService;->setUsageStatsManager(Landroid/app/usage/UsageStatsManagerInternal;)V
SPLcom/android/server/am/ActivityManagerService;->setWindowManager(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/am/ActivityManagerService;->skipCurrentReceiverLocked(Lcom/android/server/am/ProcessRecord;)V
SPLcom/android/server/am/ActivityManagerService;->sortProcessOomList(Ljava/util/List;Ljava/lang/String;)Ljava/util/ArrayList;
SPLcom/android/server/am/ActivityManagerService;->start()V
SPLcom/android/server/am/ActivityManagerService;->startAssociationLocked(ILjava/lang/String;IIJLandroid/content/ComponentName;Ljava/lang/String;)Lcom/android/server/am/ActivityManagerService$Association;
SPLcom/android/server/am/ActivityManagerService;->startIsolatedProcess(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Runnable;)Z
SPLcom/android/server/am/ActivityManagerService;->startObservingNativeCrashes()V
SPLcom/android/server/am/ActivityManagerService;->startPersistentApps(I)V
SPLcom/android/server/am/ActivityManagerService;->startProcessLocked(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;ZILjava/lang/String;Landroid/content/ComponentName;ZZZ)Lcom/android/server/am/ProcessRecord;
SPLcom/android/server/am/ActivityManagerService;->startService(Landroid/app/IApplicationThread;Landroid/content/Intent;Ljava/lang/String;ZLjava/lang/String;I)Landroid/content/ComponentName;
SPLcom/android/server/am/ActivityManagerService;->stopAssociationLocked(ILjava/lang/String;IJLandroid/content/ComponentName;Ljava/lang/String;)V
SPLcom/android/server/am/ActivityManagerService;->stringifyKBSize(J)Ljava/lang/String;
SPLcom/android/server/am/ActivityManagerService;->stringifySize(JI)Ljava/lang/String;
SPLcom/android/server/am/ActivityManagerService;->systemReady(Ljava/lang/Runnable;Landroid/util/TimingsTraceLog;)V
SPLcom/android/server/am/ActivityManagerService;->trimApplications()V
SPLcom/android/server/am/ActivityManagerService;->trimApplicationsLocked()V
SPLcom/android/server/am/ActivityManagerService;->updateActivityUsageStats(Landroid/content/ComponentName;IILandroid/os/IBinder;Landroid/content/ComponentName;)V
SPLcom/android/server/am/ActivityManagerService;->updateApplicationInfoLocked(Ljava/util/List;I)V
SPLcom/android/server/am/ActivityManagerService;->updateBatteryStats(Landroid/content/ComponentName;IIZ)V
SPLcom/android/server/am/ActivityManagerService;->updateCpuStats()V
SPLcom/android/server/am/ActivityManagerService;->updateForceBackgroundCheck(Z)V
SPLcom/android/server/am/ActivityManagerService;->updateLockTaskPackages(I[Ljava/lang/String;)V
SPLcom/android/server/am/ActivityManagerService;->updateLruProcessLocked(Lcom/android/server/am/ProcessRecord;ZLcom/android/server/am/ProcessRecord;)V
SPLcom/android/server/am/ActivityManagerService;->updateOomAdjLocked()V
SPLcom/android/server/am/ActivityManagerService;->updateOomAdjLocked(Lcom/android/server/am/ProcessRecord;Z)Z
SPLcom/android/server/am/ActivityManagerService;->updateProcessForegroundLocked(Lcom/android/server/am/ProcessRecord;ZIZ)V
SPLcom/android/server/am/ActivityManagerService;->validateAssociationAllowedLocked(Ljava/lang/String;ILjava/lang/String;I)Z
SPLcom/android/server/am/ActivityManagerService;->verifyBroadcastLocked(Landroid/content/Intent;)Landroid/content/Intent;
SPLcom/android/server/am/AppBindRecord;->dumpInIntentBind(Ljava/io/PrintWriter;Ljava/lang/String;)V
SPLcom/android/server/am/AppCompactor$MemCompactionHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/am/AppCompactor;-><init>(Lcom/android/server/am/ActivityManagerService;)V
SPLcom/android/server/am/AppCompactor;->access$700(Lcom/android/server/am/AppCompactor;)Lcom/android/server/am/ActivityManagerService;
SPLcom/android/server/am/AppCompactor;->access$800(Lcom/android/server/am/AppCompactor;)Ljava/util/ArrayList;
SPLcom/android/server/am/AppCompactor;->access$900(Lcom/android/server/am/AppCompactor;)Ljava/util/Random;
SPLcom/android/server/am/AppCompactor;->init()V
SPLcom/android/server/am/AppCompactor;->updateCompactionActions()V
SPLcom/android/server/am/AppCompactor;->updateCompactionThrottles()V
SPLcom/android/server/am/AppCompactor;->updateStatsdSampleRate()V
SPLcom/android/server/am/AppCompactor;->updateUseCompaction()V
SPLcom/android/server/am/AppCompactor;->useCompaction()Z
SPLcom/android/server/am/AppErrors;-><init>(Landroid/content/Context;Lcom/android/server/am/ActivityManagerService;Lcom/android/server/PackageWatchdog;)V
SPLcom/android/server/am/AppErrors;->dumpLocked(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;ZLjava/lang/String;)Z
SPLcom/android/server/am/AppErrors;->isBadProcessLocked(Landroid/content/pm/ApplicationInfo;)Z
SPLcom/android/server/am/AppErrors;->loadAppsNotReportingCrashesFromConfigLocked(Ljava/lang/String;)V
SPLcom/android/server/am/AppErrors;->resetProcessCrashTimeLocked(Landroid/content/pm/ApplicationInfo;)V
SPLcom/android/server/am/AppErrors;->resetProcessCrashTimeLocked(ZII)V
SPLcom/android/server/am/BatteryExternalStatsWorker$1;->run()V
SPLcom/android/server/am/BatteryExternalStatsWorker$2;->run()V
SPLcom/android/server/am/BatteryExternalStatsWorker;-><init>(Landroid/content/Context;Lcom/android/internal/os/BatteryStatsImpl;)V
SPLcom/android/server/am/BatteryExternalStatsWorker;->awaitControllerInfo(Landroid/os/SynchronousResultReceiver;)Landroid/os/Parcelable;
SPLcom/android/server/am/BatteryExternalStatsWorker;->cancelCpuSyncDueToWakelockChange()V
SPLcom/android/server/am/BatteryExternalStatsWorker;->lambda$scheduleCpuSyncDueToWakelockChange$2$BatteryExternalStatsWorker()V
SPLcom/android/server/am/BatteryExternalStatsWorker;->lambda$scheduleCpuSyncDueToWakelockChange$3$BatteryExternalStatsWorker()V
SPLcom/android/server/am/BatteryExternalStatsWorker;->scheduleCpuSyncDueToRemovedUid(I)Ljava/util/concurrent/Future;
SPLcom/android/server/am/BatteryExternalStatsWorker;->scheduleCpuSyncDueToScreenStateChange(ZZ)Ljava/util/concurrent/Future;
SPLcom/android/server/am/BatteryExternalStatsWorker;->scheduleCpuSyncDueToWakelockChange(J)Ljava/util/concurrent/Future;
SPLcom/android/server/am/BatteryExternalStatsWorker;->scheduleDelayedSyncLocked(Ljava/util/concurrent/Future;Ljava/lang/Runnable;J)Ljava/util/concurrent/Future;
SPLcom/android/server/am/BatteryExternalStatsWorker;->scheduleRunnable(Ljava/lang/Runnable;)V
SPLcom/android/server/am/BatteryExternalStatsWorker;->scheduleSync(Ljava/lang/String;I)Ljava/util/concurrent/Future;
SPLcom/android/server/am/BatteryExternalStatsWorker;->scheduleSyncLocked(Ljava/lang/String;I)Ljava/util/concurrent/Future;
SPLcom/android/server/am/BatteryExternalStatsWorker;->scheduleWrite()Ljava/util/concurrent/Future;
SPLcom/android/server/am/BatteryExternalStatsWorker;->updateExternalStatsLocked(Ljava/lang/String;IZZZ)V
SPLcom/android/server/am/BatteryStatsService$1;->getUserIds()[I
SPLcom/android/server/am/BatteryStatsService$WakeupReasonThread;->run()V
SPLcom/android/server/am/BatteryStatsService$WakeupReasonThread;->waitWakeup()Ljava/lang/String;
SPLcom/android/server/am/BatteryStatsService;-><init>(Landroid/content/Context;Ljava/io/File;Landroid/os/Handler;)V
SPLcom/android/server/am/BatteryStatsService;->addIsolatedUid(II)V
SPLcom/android/server/am/BatteryStatsService;->fillLowPowerStats(Lcom/android/internal/os/RpmStats;)V
SPLcom/android/server/am/BatteryStatsService;->fillRailDataStats(Lcom/android/internal/os/RailStats;)V
SPLcom/android/server/am/BatteryStatsService;->getActiveStatistics()Lcom/android/internal/os/BatteryStatsImpl;
SPLcom/android/server/am/BatteryStatsService;->getPlatformLowPowerStats()Ljava/lang/String;
SPLcom/android/server/am/BatteryStatsService;->getService()Lcom/android/internal/app/IBatteryStats;
SPLcom/android/server/am/BatteryStatsService;->getSubsystemLowPowerStats()Ljava/lang/String;
SPLcom/android/server/am/BatteryStatsService;->initPowerManagement()V
SPLcom/android/server/am/BatteryStatsService;->isCharging()Z
SPLcom/android/server/am/BatteryStatsService;->lambda$setBatteryState$0$BatteryStatsService(IIIIIIII)V
SPLcom/android/server/am/BatteryStatsService;->lambda$setBatteryState$0(Lcom/android/server/am/BatteryStatsService;IIIIIIII)V
SPLcom/android/server/am/BatteryStatsService;->lambda$setBatteryState$1$BatteryStatsService(IIIIIIII)V
SPLcom/android/server/am/BatteryStatsService;->lambda$setBatteryState$1(Lcom/android/server/am/BatteryStatsService;IIIIIIII)V
SPLcom/android/server/am/BatteryStatsService;->noteAlarmFinish(Ljava/lang/String;Landroid/os/WorkSource;I)V
SPLcom/android/server/am/BatteryStatsService;->noteAlarmStart(Ljava/lang/String;Landroid/os/WorkSource;I)V
SPLcom/android/server/am/BatteryStatsService;->noteEvent(ILjava/lang/String;I)V
SPLcom/android/server/am/BatteryStatsService;->noteInteractive(Z)V
SPLcom/android/server/am/BatteryStatsService;->noteNetworkStatsEnabled()V
SPLcom/android/server/am/BatteryStatsService;->notePackageUninstalled(Ljava/lang/String;)V
SPLcom/android/server/am/BatteryStatsService;->notePhoneSignalStrength(Landroid/telephony/SignalStrength;)V
SPLcom/android/server/am/BatteryStatsService;->notePhoneState(I)V
SPLcom/android/server/am/BatteryStatsService;->noteProcessFinish(Ljava/lang/String;I)V
SPLcom/android/server/am/BatteryStatsService;->noteProcessStart(Ljava/lang/String;I)V
SPLcom/android/server/am/BatteryStatsService;->noteResetBleScan()V
SPLcom/android/server/am/BatteryStatsService;->noteScreenBrightness(I)V
SPLcom/android/server/am/BatteryStatsService;->noteScreenState(I)V
SPLcom/android/server/am/BatteryStatsService;->noteStartSensor(II)V
SPLcom/android/server/am/BatteryStatsService;->noteStartWakelock(IILjava/lang/String;Ljava/lang/String;IZ)V
SPLcom/android/server/am/BatteryStatsService;->noteStartWakelockFromSource(Landroid/os/WorkSource;ILjava/lang/String;Ljava/lang/String;IZ)V
SPLcom/android/server/am/BatteryStatsService;->noteStopWakelock(IILjava/lang/String;Ljava/lang/String;I)V
SPLcom/android/server/am/BatteryStatsService;->noteStopWakelockFromSource(Landroid/os/WorkSource;ILjava/lang/String;Ljava/lang/String;I)V
SPLcom/android/server/am/BatteryStatsService;->noteUidProcessState(II)V
SPLcom/android/server/am/BatteryStatsService;->noteWakupAlarm(Ljava/lang/String;ILandroid/os/WorkSource;Ljava/lang/String;)V
SPLcom/android/server/am/BatteryStatsService;->noteWifiOff()V
SPLcom/android/server/am/BatteryStatsService;->noteWifiOn()V
SPLcom/android/server/am/BatteryStatsService;->noteWifiState(ILjava/lang/String;)V
SPLcom/android/server/am/BatteryStatsService;->removeIsolatedUid(II)V
SPLcom/android/server/am/BatteryStatsService;->removeUid(I)V
SPLcom/android/server/am/BatteryStatsService;->setBatteryState(IIIIIIII)V
SPLcom/android/server/am/BroadcastConstants;-><init>(Ljava/lang/String;)V
SPLcom/android/server/am/BroadcastConstants;->startObserving(Landroid/os/Handler;Landroid/content/ContentResolver;)V
SPLcom/android/server/am/BroadcastConstants;->updateConstants()V
SPLcom/android/server/am/BroadcastDispatcher$1;->broadcastAlarmComplete(I)V
SPLcom/android/server/am/BroadcastDispatcher$1;->broadcastAlarmPending(I)V
SPLcom/android/server/am/BroadcastDispatcher;-><init>(Lcom/android/server/am/BroadcastQueue;Lcom/android/server/am/BroadcastConstants;Landroid/os/Handler;Ljava/lang/Object;)V
SPLcom/android/server/am/BroadcastDispatcher;->cleanupDeferralsListDisabledReceiversLocked(Ljava/util/ArrayList;Ljava/lang/String;Ljava/util/Set;IZ)Z
SPLcom/android/server/am/BroadcastDispatcher;->cleanupDisabledPackageReceiversLocked(Ljava/lang/String;Ljava/util/Set;IZ)Z
SPLcom/android/server/am/BroadcastDispatcher;->enqueueOrderedBroadcastLocked(Lcom/android/server/am/BroadcastRecord;)V
SPLcom/android/server/am/BroadcastDispatcher;->getActiveBroadcastLocked()Lcom/android/server/am/BroadcastRecord;
SPLcom/android/server/am/BroadcastDispatcher;->getNextBroadcastLocked(J)Lcom/android/server/am/BroadcastRecord;
SPLcom/android/server/am/BroadcastDispatcher;->isDeferringLocked(I)Z
SPLcom/android/server/am/BroadcastDispatcher;->replaceBroadcastLocked(Lcom/android/server/am/BroadcastRecord;Ljava/lang/String;)Lcom/android/server/am/BroadcastRecord;
SPLcom/android/server/am/BroadcastDispatcher;->replaceBroadcastLocked(Ljava/util/ArrayList;Lcom/android/server/am/BroadcastRecord;Ljava/lang/String;)Lcom/android/server/am/BroadcastRecord;
SPLcom/android/server/am/BroadcastDispatcher;->retireBroadcastLocked(Lcom/android/server/am/BroadcastRecord;)V
SPLcom/android/server/am/BroadcastDispatcher;->scheduleDeferralCheckLocked(Z)V
SPLcom/android/server/am/BroadcastDispatcher;->start()V
SPLcom/android/server/am/BroadcastQueue$BroadcastHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/am/BroadcastQueue;-><init>(Lcom/android/server/am/ActivityManagerService;Landroid/os/Handler;Ljava/lang/String;Lcom/android/server/am/BroadcastConstants;Z)V
SPLcom/android/server/am/BroadcastQueue;->addBroadcastToHistoryLocked(Lcom/android/server/am/BroadcastRecord;)V
SPLcom/android/server/am/BroadcastQueue;->cancelBroadcastTimeoutLocked()V
SPLcom/android/server/am/BroadcastQueue;->cleanupDisabledPackageReceiversLocked(Ljava/lang/String;Ljava/util/Set;IZ)Z
SPLcom/android/server/am/BroadcastQueue;->deliverToRegisteredReceiverLocked(Lcom/android/server/am/BroadcastRecord;Lcom/android/server/am/BroadcastFilter;ZI)V
SPLcom/android/server/am/BroadcastQueue;->enqueueOrderedBroadcastLocked(Lcom/android/server/am/BroadcastRecord;)V
SPLcom/android/server/am/BroadcastQueue;->enqueueParallelBroadcastLocked(Lcom/android/server/am/BroadcastRecord;)V
SPLcom/android/server/am/BroadcastQueue;->finishReceiverLocked(Lcom/android/server/am/BroadcastRecord;ILjava/lang/String;Landroid/os/Bundle;ZZ)Z
SPLcom/android/server/am/BroadcastQueue;->isSignaturePerm([Ljava/lang/String;)Z
SPLcom/android/server/am/BroadcastQueue;->maybeAddAllowBackgroundActivityStartsToken(Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/BroadcastRecord;)V
SPLcom/android/server/am/BroadcastQueue;->performReceiveLocked(Lcom/android/server/am/ProcessRecord;Landroid/content/IIntentReceiver;Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;ZZI)V
SPLcom/android/server/am/BroadcastQueue;->performReceiveLocked(Lcom/android/server/am/ProcessRecord;Landroid/content/IIntentReceiver;Landroid/content/Intent;ILjava/lang/String;Landroid/os/Bundle;ZZILcom/android/server/am/BroadcastRecord;)V
SPLcom/android/server/am/BroadcastQueue;->processCurBroadcastLocked(Lcom/android/server/am/BroadcastRecord;Lcom/android/server/am/ProcessRecord;Z)V
SPLcom/android/server/am/BroadcastQueue;->processNextBroadcast(Z)V
SPLcom/android/server/am/BroadcastQueue;->replaceBroadcastLocked(Ljava/util/ArrayList;Lcom/android/server/am/BroadcastRecord;Ljava/lang/String;)Lcom/android/server/am/BroadcastRecord;
SPLcom/android/server/am/BroadcastQueue;->replaceOrderedBroadcastLocked(Lcom/android/server/am/BroadcastRecord;)Lcom/android/server/am/BroadcastRecord;
SPLcom/android/server/am/BroadcastQueue;->replaceParallelBroadcastLocked(Lcom/android/server/am/BroadcastRecord;)Lcom/android/server/am/BroadcastRecord;
SPLcom/android/server/am/BroadcastQueue;->requestStartTargetPermissionsReviewIfNeededLocked(Lcom/android/server/am/BroadcastRecord;Ljava/lang/String;I)Z
SPLcom/android/server/am/BroadcastQueue;->scheduleBroadcastsLocked()V
SPLcom/android/server/am/BroadcastQueue;->sendPendingBroadcastsLocked(Lcom/android/server/am/ProcessRecord;)Z
SPLcom/android/server/am/BroadcastQueue;->setBroadcastTimeoutLocked(J)V
SPLcom/android/server/am/BroadcastRecord;-><init>(Lcom/android/server/am/BroadcastQueue;Landroid/content/Intent;Lcom/android/server/am/ProcessRecord;Ljava/lang/String;IIZLjava/lang/String;[Ljava/lang/String;ILandroid/app/BroadcastOptions;Ljava/util/List;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;ZZZIZZ)V
SPLcom/android/server/am/BroadcastRecord;-><init>(Lcom/android/server/am/BroadcastRecord;Landroid/content/Intent;)V
SPLcom/android/server/am/BroadcastRecord;->getReceiverUid(Ljava/lang/Object;)I
SPLcom/android/server/am/BroadcastRecord;->toString()Ljava/lang/String;
SPLcom/android/server/am/BroadcastStats$1;-><init>()V
SPLcom/android/server/am/BroadcastStats;->addBackgroundCheckViolation(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/am/BroadcastStats;->addBroadcast(Ljava/lang/String;Ljava/lang/String;IIJ)V
SPLcom/android/server/am/ConnectionRecord;-><init>(Lcom/android/server/am/AppBindRecord;Lcom/android/server/wm/ActivityServiceConnectionsHolder;Landroid/app/IServiceConnection;IILandroid/app/PendingIntent;ILjava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/am/ConnectionRecord;->startAssociationIfNeeded()V
SPLcom/android/server/am/ConnectionRecord;->toString()Ljava/lang/String;
SPLcom/android/server/am/ConnectionRecord;->trackProcState(IIJ)V
SPLcom/android/server/am/ContentProviderConnection;->startAssociationIfNeeded()V
SPLcom/android/server/am/ContentProviderRecord;-><init>(Lcom/android/server/am/ActivityManagerService;Landroid/content/pm/ProviderInfo;Landroid/content/pm/ApplicationInfo;Landroid/content/ComponentName;Z)V
SPLcom/android/server/am/ContentProviderRecord;->canRunHere(Lcom/android/server/am/ProcessRecord;)Z
SPLcom/android/server/am/ContentProviderRecord;->hasExternalProcessHandles()Z
SPLcom/android/server/am/ContentProviderRecord;->newHolder(Lcom/android/server/am/ContentProviderConnection;)Landroid/app/ContentProviderHolder;
SPLcom/android/server/am/ContentProviderRecord;->setProcess(Lcom/android/server/am/ProcessRecord;)V
SPLcom/android/server/am/CoreSettingsObserver;->beginObserveCoreSettings()V
SPLcom/android/server/am/CoreSettingsObserver;->getCoreSettingsLocked()Landroid/os/Bundle;
SPLcom/android/server/am/CoreSettingsObserver;->populateSettings(Landroid/os/Bundle;Ljava/util/Map;)V
SPLcom/android/server/am/DumpHeapProvider;-><init>()V
SPLcom/android/server/am/DumpHeapProvider;->onCreate()Z
SPLcom/android/server/am/EventLogTags;->writeAmUidActive(I)V
SPLcom/android/server/am/IntentBindRecord;->collectFlags()I
SPLcom/android/server/am/IntentBindRecord;->dumpInService(Ljava/io/PrintWriter;Ljava/lang/String;)V
SPLcom/android/server/am/NativeCrashListener;->run()V
SPLcom/android/server/am/OomAdjProfiler$CpuTimes;->addCpuTimeMs(J)V
SPLcom/android/server/am/OomAdjProfiler$CpuTimes;->addCpuTimeMs(JZZ)V
SPLcom/android/server/am/OomAdjProfiler$CpuTimes;->isEmpty()Z
SPLcom/android/server/am/OomAdjProfiler;-><init>()V
SPLcom/android/server/am/OomAdjProfiler;->batteryPowerChanged(Z)V
SPLcom/android/server/am/OomAdjProfiler;->oomAdjEnded()V
SPLcom/android/server/am/OomAdjProfiler;->oomAdjStarted()V
SPLcom/android/server/am/OomAdjProfiler;->reset()V
SPLcom/android/server/am/OomAdjProfiler;->scheduleSystemServerCpuTimeUpdate()V
SPLcom/android/server/am/OomAdjProfiler;->updateSystemServerCpuTime(ZZ)V
SPLcom/android/server/am/OomAdjuster;-><init>(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessList;Lcom/android/server/am/ActiveUids;)V
SPLcom/android/server/am/OomAdjuster;-><init>(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ProcessList;Lcom/android/server/am/ActiveUids;Ljava/lang/Object;)V
SPLcom/android/server/am/OomAdjuster;->maybeUpdateUsageStatsLocked(Lcom/android/server/am/ProcessRecord;J)V
SPLcom/android/server/am/OomAdjuster;->shouldSkipDueToCycle(Lcom/android/server/am/ProcessRecord;Lcom/android/server/am/ProcessRecord;IIZ)Z
SPLcom/android/server/am/OomAdjuster;->updateOomAdjLocked(Lcom/android/server/am/ProcessRecord;Z)Z
SPLcom/android/server/am/PendingIntentController;-><init>(Landroid/os/Looper;Lcom/android/server/am/UserController;)V
SPLcom/android/server/am/PendingIntentController;->getIntentSender(ILjava/lang/String;IILandroid/os/IBinder;Ljava/lang/String;I[Landroid/content/Intent;[Ljava/lang/String;ILandroid/os/Bundle;)Lcom/android/server/am/PendingIntentRecord;
SPLcom/android/server/am/PendingIntentController;->onActivityManagerInternalAdded()V
SPLcom/android/server/am/PendingIntentController;->removePendingIntentsForPackage(Ljava/lang/String;IIZ)Z
SPLcom/android/server/am/PendingIntentRecord$Key;-><init>(ILjava/lang/String;Landroid/os/IBinder;Ljava/lang/String;I[Landroid/content/Intent;[Ljava/lang/String;ILcom/android/server/wm/SafeActivityOptions;I)V
SPLcom/android/server/am/PendingIntentRecord$Key;->equals(Ljava/lang/Object;)Z
SPLcom/android/server/am/PendingIntentRecord$Key;->hashCode()I
SPLcom/android/server/am/PendingIntentRecord;-><init>(Lcom/android/server/am/PendingIntentController;Lcom/android/server/am/PendingIntentRecord$Key;I)V
SPLcom/android/server/am/PendingIntentRecord;->completeFinalize()V
SPLcom/android/server/am/PendingIntentRecord;->finalize()V
SPLcom/android/server/am/PendingIntentRecord;->sendInner(ILandroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Landroid/content/IIntentReceiver;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IIILandroid/os/Bundle;)I
SPLcom/android/server/am/ProcessList$IsolatedUidRangeAllocator;-><init>(Lcom/android/server/am/ProcessList;III)V
SPLcom/android/server/am/ProcessList$KillHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/am/ProcessList$ProcStateMemTracker;-><init>()V
SPLcom/android/server/am/ProcessList;-><init>()V
SPLcom/android/server/am/ProcessList;->addProcessNameLocked(Lcom/android/server/am/ProcessRecord;)V
SPLcom/android/server/am/ProcessList;->appendRamKb(Ljava/lang/StringBuilder;J)V
SPLcom/android/server/am/ProcessList;->checkSlow(JLjava/lang/String;)V
SPLcom/android/server/am/ProcessList;->computeNextPssTime(ILcom/android/server/am/ProcessList$ProcStateMemTracker;ZZJ)J
SPLcom/android/server/am/ProcessList;->dumpLruListHeaderLocked(Ljava/io/PrintWriter;)V
SPLcom/android/server/am/ProcessList;->getLruSizeLocked()I
SPLcom/android/server/am/ProcessList;->getMemoryInfo(Landroid/app/ActivityManager$MemoryInfo;)V
SPLcom/android/server/am/ProcessList;->getProcessRecordLocked(Ljava/lang/String;IZ)Lcom/android/server/am/ProcessRecord;
SPLcom/android/server/am/ProcessList;->getUidRecordLocked(I)Lcom/android/server/am/UidRecord;
SPLcom/android/server/am/ProcessList;->handleProcessStartedLocked(Lcom/android/server/am/ProcessRecord;IZJZ)Z
SPLcom/android/server/am/ProcessList;->handleProcessStartedLocked(Lcom/android/server/am/ProcessRecord;Landroid/os/Process$ProcessStartResult;J)Z
SPLcom/android/server/am/ProcessList;->haveBackgroundProcessLocked()Z
SPLcom/android/server/am/ProcessList;->init(Lcom/android/server/am/ActivityManagerService;Lcom/android/server/am/ActiveUids;)V
SPLcom/android/server/am/ProcessList;->isProcStartValidLocked(Lcom/android/server/am/ProcessRecord;J)Ljava/lang/String;
SPLcom/android/server/am/ProcessList;->killAllBackgroundProcessesExceptLocked(II)V
SPLcom/android/server/am/ProcessList;->killPackageProcessesLocked(Ljava/lang/String;IIIZZZZZLjava/lang/String;)Z
SPLcom/android/server/am/ProcessList;->lambda$startProcessLocked$0$ProcessList(Lcom/android/server/am/ProcessRecord;JLjava/lang/String;Ljava/lang/String;[IIILjava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/am/ProcessList;->lambda$startProcessLocked$0(Lcom/android/server/am/ProcessList;Lcom/android/server/am/ProcessRecord;JLjava/lang/String;Ljava/lang/String;[IIILjava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/am/ProcessList;->newProcessRecordLocked(Landroid/content/pm/ApplicationInfo;Ljava/lang/String;ZIZ)Lcom/android/server/am/ProcessRecord;
SPLcom/android/server/am/ProcessList;->openLmkdSocketLS()Z
SPLcom/android/server/am/ProcessList;->removeLruProcessLocked(Lcom/android/server/am/ProcessRecord;)V
SPLcom/android/server/am/ProcessList;->removeProcessNameLocked(Ljava/lang/String;ILcom/android/server/am/ProcessRecord;)Lcom/android/server/am/ProcessRecord;
SPLcom/android/server/am/ProcessList;->sendPackageBroadcastLocked(I[Ljava/lang/String;I)V
SPLcom/android/server/am/ProcessList;->setOomAdj(III)V
SPLcom/android/server/am/ProcessList;->startProcess(Ljava/lang/String;Ljava/lang/String;Lcom/android/server/am/ProcessRecord;I[IIILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)Landroid/os/Process$ProcessStartResult;
SPLcom/android/server/am/ProcessList;->startProcessLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
SPLcom/android/server/am/ProcessList;->startProcessLocked(Lcom/android/server/am/ProcessRecord;Ljava/lang/String;Ljava/lang/String;ZZLjava/lang/String;)Z
SPLcom/android/server/am/ProcessList;->startProcessLocked(Ljava/lang/String;Landroid/content/pm/ApplicationInfo;ZILjava/lang/String;Landroid/content/ComponentName;ZZIZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/Runnable;)Lcom/android/server/am/ProcessRecord;
SPLcom/android/server/am/ProcessList;->startProcessLocked(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/android/server/am/ProcessRecord;I[IIILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)Z
SPLcom/android/server/am/ProcessList;->updateApplicationInfoLocked(Ljava/util/List;IZ)V
SPLcom/android/server/am/ProcessList;->updateClientActivitiesOrdering(Lcom/android/server/am/ProcessRecord;III)V
SPLcom/android/server/am/ProcessList;->updateCoreSettingsLocked(Landroid/os/Bundle;)V
SPLcom/android/server/am/ProcessList;->updateLruProcessLocked(Lcom/android/server/am/ProcessRecord;ZLcom/android/server/am/ProcessRecord;)V
SPLcom/android/server/am/ProcessList;->updateOomLevels(IIZ)V
SPLcom/android/server/am/ProcessList;->writeLmkd(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Z
SPLcom/android/server/am/ProcessList;->writeLmkdCommandLS(Ljava/nio/ByteBuffer;)Z
SPLcom/android/server/am/ProcessMemInfo;-><init>(Ljava/lang/String;IIILjava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/am/ProcessRecord$PackageList;->containsKey(Ljava/lang/Object;)Z
SPLcom/android/server/am/ProcessRecord$PackageList;->size()I
SPLcom/android/server/am/ProcessRecord$PackageList;->valueAt(I)Lcom/android/internal/app/procstats/ProcessStats$ProcessStateHolder;
SPLcom/android/server/am/ProcessRecord;-><init>(Lcom/android/server/am/ActivityManagerService;Landroid/content/pm/ApplicationInfo;Ljava/lang/String;I)V
SPLcom/android/server/am/ProcessRecord;->addPackage(Ljava/lang/String;JLcom/android/server/am/ProcessStatsService;)Z
SPLcom/android/server/am/ProcessRecord;->clearWaitingToKill()V
SPLcom/android/server/am/ProcessRecord;->forceProcessStateUpTo(I)V
SPLcom/android/server/am/ProcessRecord;->getActiveInstrumentation()Lcom/android/server/am/ActiveInstrumentation;
SPLcom/android/server/am/ProcessRecord;->getCpuTime()J
SPLcom/android/server/am/ProcessRecord;->getCurRawAdj()I
SPLcom/android/server/am/ProcessRecord;->getCurRawProcState()I
SPLcom/android/server/am/ProcessRecord;->getCurrentSchedulingGroup()I
SPLcom/android/server/am/ProcessRecord;->getPackageList()[Ljava/lang/String;
SPLcom/android/server/am/ProcessRecord;->hasActivitiesOrRecentTasks()Z
SPLcom/android/server/am/ProcessRecord;->hasClientActivities()Z
SPLcom/android/server/am/ProcessRecord;->hasOverlayUi()Z
SPLcom/android/server/am/ProcessRecord;->hasRecentTasks()Z
SPLcom/android/server/am/ProcessRecord;->hasTopUi()Z
SPLcom/android/server/am/ProcessRecord;->isCrashing()Z
SPLcom/android/server/am/ProcessRecord;->isPersistent()Z
SPLcom/android/server/am/ProcessRecord;->isRemoved()Z
SPLcom/android/server/am/ProcessRecord;->makeActive(Landroid/app/IApplicationThread;Lcom/android/server/am/ProcessStatsService;)V
SPLcom/android/server/am/ProcessRecord;->makeAdjReason()Ljava/lang/String;
SPLcom/android/server/am/ProcessRecord;->makeInactive(Lcom/android/server/am/ProcessStatsService;)V
SPLcom/android/server/am/ProcessRecord;->modifyRawOomAdj(I)I
SPLcom/android/server/am/ProcessRecord;->onStartActivity(IZ)V
SPLcom/android/server/am/ProcessRecord;->resetPackageList(Lcom/android/server/am/ProcessStatsService;)V
SPLcom/android/server/am/ProcessRecord;->setDebugging(Z)V
SPLcom/android/server/am/ProcessRecord;->setPendingUiClean(Z)V
SPLcom/android/server/am/ProcessRecord;->setReportedProcState(I)V
SPLcom/android/server/am/ProcessRecord;->setRequiredAbi(Ljava/lang/String;)V
SPLcom/android/server/am/ProcessRecord;->setUsingWrapper(Z)V
SPLcom/android/server/am/ProcessRecord;->toShortString(Ljava/lang/StringBuilder;)V
SPLcom/android/server/am/ProcessRecord;->toString()Ljava/lang/String;
SPLcom/android/server/am/ProcessRecord;->updateProcessInfo(ZZZZ)V
SPLcom/android/server/am/ProcessRecord;->updateServiceConnectionActivities()V
SPLcom/android/server/am/ProcessStatsService;-><init>(Lcom/android/server/am/ActivityManagerService;Ljava/io/File;)V
SPLcom/android/server/am/ProcessStatsService;->getMemFactorLocked()I
SPLcom/android/server/am/ProcessStatsService;->setMemFactorLocked(IZJ)Z
SPLcom/android/server/am/ProcessStatsService;->shouldWriteNowLocked(J)Z
SPLcom/android/server/am/ProcessStatsService;->updateFile()V
SPLcom/android/server/am/ProcessStatsService;->updateTrackingAssociationsLocked(IJ)V
SPLcom/android/server/am/ProviderMap;-><init>(Lcom/android/server/am/ActivityManagerService;)V
SPLcom/android/server/am/ProviderMap;->collectPackageProvidersLocked(Ljava/lang/String;Ljava/util/Set;ZZILjava/util/ArrayList;)Z
SPLcom/android/server/am/ProviderMap;->collectPackageProvidersLocked(Ljava/lang/String;Ljava/util/Set;ZZLjava/util/HashMap;Ljava/util/ArrayList;)Z
SPLcom/android/server/am/ProviderMap;->getProviderByName(Ljava/lang/String;I)Lcom/android/server/am/ContentProviderRecord;
SPLcom/android/server/am/ProviderMap;->getProvidersByClass(I)Ljava/util/HashMap;
SPLcom/android/server/am/ProviderMap;->getProvidersByName(I)Ljava/util/HashMap;
SPLcom/android/server/am/ServiceRecord$StartItem;-><init>(Lcom/android/server/am/ServiceRecord;ZILandroid/content/Intent;Lcom/android/server/uri/NeededUriGrants;I)V
SPLcom/android/server/am/ServiceRecord;-><init>(Lcom/android/server/am/ActivityManagerService;Lcom/android/internal/os/BatteryStatsImpl$Uid$Pkg$Serv;Landroid/content/ComponentName;Landroid/content/ComponentName;Landroid/content/Intent$FilterComparison;Landroid/content/pm/ServiceInfo;ZLjava/lang/Runnable;)V
SPLcom/android/server/am/ServiceRecord;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V
SPLcom/android/server/am/ServiceRecord;->findDeliveredStart(IZZ)Lcom/android/server/am/ServiceRecord$StartItem;
SPLcom/android/server/am/ServiceRecord;->getTracker()Lcom/android/internal/app/procstats/ServiceState;
SPLcom/android/server/am/ServiceRecord;->hasAutoCreateConnections()Z
SPLcom/android/server/am/ServiceRecord;->postNotification()V
SPLcom/android/server/am/ServiceRecord;->retrieveAppBindingLocked(Landroid/content/Intent;Lcom/android/server/am/ProcessRecord;)Lcom/android/server/am/AppBindRecord;
SPLcom/android/server/am/ServiceRecord;->setProcess(Lcom/android/server/am/ProcessRecord;)V
SPLcom/android/server/am/ServiceRecord;->toString()Ljava/lang/String;
SPLcom/android/server/am/SettingsToPropertiesMapper;->isNativeFlagsResetPerformed()Z
SPLcom/android/server/am/SettingsToPropertiesMapper;->makePropertyName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/am/SettingsToPropertiesMapper;->setProperty(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/am/SettingsToPropertiesMapper;->systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/am/SettingsToPropertiesMapper;->updatePropertiesFromSettings()V
SPLcom/android/server/am/SettingsToPropertiesMapper;->updatePropertyFromSetting(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/am/UidRecord;->toString()Ljava/lang/String;
SPLcom/android/server/am/UserController$Injector;->broadcastIntent(Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZIII)I
SPLcom/android/server/am/UserController$Injector;->broadcastIntent(Landroid/content/Intent;Ljava/lang/String;Landroid/content/IIntentReceiver;ILjava/lang/String;Landroid/os/Bundle;[Ljava/lang/String;ILandroid/os/Bundle;ZZIIIII)I
SPLcom/android/server/am/UserController$Injector;->checkCallingPermission(Ljava/lang/String;)I
SPLcom/android/server/am/UserController$Injector;->checkComponentPermission(Ljava/lang/String;IIIZ)I
SPLcom/android/server/am/UserController$Injector;->getContext()Landroid/content/Context;
SPLcom/android/server/am/UserController$Injector;->getHandler(Landroid/os/Handler$Callback;)Landroid/os/Handler;
SPLcom/android/server/am/UserController$Injector;->getLockPatternUtils()Lcom/android/internal/widget/LockPatternUtils;
SPLcom/android/server/am/UserController$Injector;->getUiHandler(Landroid/os/Handler$Callback;)Landroid/os/Handler;
SPLcom/android/server/am/UserController$Injector;->getUserManager()Lcom/android/server/pm/UserManagerService;
SPLcom/android/server/am/UserController$Injector;->isCallerRecents(I)Z
SPLcom/android/server/am/UserController$Injector;->reportCurWakefulnessUsageEvent()V
SPLcom/android/server/am/UserController;-><init>(Lcom/android/server/am/UserController$Injector;)V
SPLcom/android/server/am/UserController;->dump(Ljava/io/PrintWriter;Z)V
SPLcom/android/server/am/UserController;->exists(I)Z
SPLcom/android/server/am/UserController;->getCurrentProfileIds()[I
SPLcom/android/server/am/UserController;->getCurrentUser()Landroid/content/pm/UserInfo;
SPLcom/android/server/am/UserController;->getCurrentUserIdLU()I
SPLcom/android/server/am/UserController;->getStartedUserArray()[I
SPLcom/android/server/am/UserController;->getUsers()[I
SPLcom/android/server/am/UserController;->hasStartedUserState(I)Z
SPLcom/android/server/am/UserController;->isSameProfileGroup(II)Z
SPLcom/android/server/am/UserController;->isUserOrItsParentRunning(I)Z
SPLcom/android/server/am/UserController;->onSystemReady()V
SPLcom/android/server/am/UserController;->registerUserSwitchObserver(Landroid/app/IUserSwitchObserver;Ljava/lang/String;)V
SPLcom/android/server/am/UserController;->sendUserSwitchBroadcasts(II)V
SPLcom/android/server/am/UserController;->shouldConfirmCredentials(I)Z
SPLcom/android/server/am/UserController;->updateCurrentProfileIds()V
SPLcom/android/server/am/UserController;->updateStartedUserArrayLU()V
SPLcom/android/server/am/UserState;-><init>(Landroid/os/UserHandle;)V
SPLcom/android/server/am/UserState;->stateToString(I)Ljava/lang/String;
SPLcom/android/server/appbinding/-$$Lambda$xkEFYM78dwFMyAjWJXkB7AxgA2c;-><init>()V
SPLcom/android/server/appbinding/AppBindingConstants;-><init>(Ljava/lang/String;)V
SPLcom/android/server/appbinding/AppBindingService$Injector;->getGlobalSettingString(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/appbinding/AppBindingService$Injector;->getIPackageManager()Landroid/content/pm/IPackageManager;
SPLcom/android/server/appbinding/AppBindingService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/appbinding/AppBindingService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/appbinding/AppBindingService$Lifecycle;->onStart()V
SPLcom/android/server/appbinding/AppBindingService$Lifecycle;->onStartUser(I)V
SPLcom/android/server/appbinding/AppBindingService;-><init>(Lcom/android/server/appbinding/AppBindingService$Injector;Landroid/content/Context;)V
SPLcom/android/server/appbinding/AppBindingService;->bindServicesLocked(ILcom/android/server/appbinding/finders/AppServiceFinder;Ljava/lang/String;)V
SPLcom/android/server/appbinding/AppBindingService;->findConnectionLock(ILcom/android/server/appbinding/finders/AppServiceFinder;)Lcom/android/server/appbinding/AppBindingService$AppServiceConnection;
SPLcom/android/server/appbinding/AppBindingService;->onPhaseActivityManagerReady()V
SPLcom/android/server/appbinding/AppBindingService;->onPhaseThirdPartyAppsCanStart()V
SPLcom/android/server/appbinding/AppBindingService;->onStartUser(I)V
SPLcom/android/server/appbinding/AppBindingService;->rebindAllLocked(Ljava/lang/String;)V
SPLcom/android/server/appbinding/AppBindingService;->refreshConstants()V
SPLcom/android/server/appbinding/AppBindingUtils;->findService(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/Class;Landroid/content/pm/IPackageManager;Ljava/lang/StringBuilder;)Landroid/content/pm/ServiceInfo;
SPLcom/android/server/appbinding/finders/AppServiceFinder;-><init>(Landroid/content/Context;Ljava/util/function/BiConsumer;Landroid/os/Handler;)V
SPLcom/android/server/appbinding/finders/AppServiceFinder;->findService(ILandroid/content/pm/IPackageManager;Lcom/android/server/appbinding/AppBindingConstants;)Landroid/content/pm/ServiceInfo;
SPLcom/android/server/appbinding/finders/CarrierMessagingClientServiceFinder;->getServiceAction()Ljava/lang/String;
SPLcom/android/server/appbinding/finders/CarrierMessagingClientServiceFinder;->getServiceClass()Ljava/lang/Class;
SPLcom/android/server/appbinding/finders/CarrierMessagingClientServiceFinder;->getServicePermission()Ljava/lang/String;
SPLcom/android/server/appbinding/finders/CarrierMessagingClientServiceFinder;->getTargetPackage(I)Ljava/lang/String;
SPLcom/android/server/appbinding/finders/CarrierMessagingClientServiceFinder;->isEnabled(Lcom/android/server/appbinding/AppBindingConstants;)Z
SPLcom/android/server/appbinding/finders/CarrierMessagingClientServiceFinder;->startMonitoring()V
SPLcom/android/server/appop/-$$Lambda$AppOpsService$GUeKjlbzT65s86vaxy5gvOajuhw;-><init>()V
SPLcom/android/server/appop/-$$Lambda$AppOpsService$GUeKjlbzT65s86vaxy5gvOajuhw;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/appop/AppOpsService$ActiveCallback;-><init>(Lcom/android/server/appop/AppOpsService;Lcom/android/internal/app/IAppOpsActiveCallback;III)V
SPLcom/android/server/appop/AppOpsService$AppOpsManagerInternalImpl;->setDeviceAndProfileOwners(Landroid/util/SparseIntArray;)V
SPLcom/android/server/appop/AppOpsService$ClientRestrictionState;->hasRestriction(ILjava/lang/String;I)Z
SPLcom/android/server/appop/AppOpsService$ClientRestrictionState;->setRestriction(IZ[Ljava/lang/String;I)Z
SPLcom/android/server/appop/AppOpsService$ClientState;-><init>(Lcom/android/server/appop/AppOpsService;Landroid/os/IBinder;)V
SPLcom/android/server/appop/AppOpsService$Constants;->updateConstants()V
SPLcom/android/server/appop/AppOpsService$ModeCallback;-><init>(Lcom/android/server/appop/AppOpsService;Lcom/android/internal/app/IAppOpsCallback;IIII)V
SPLcom/android/server/appop/AppOpsService$NotedCallback;-><init>(Lcom/android/server/appop/AppOpsService;Lcom/android/internal/app/IAppOpsNotedCallback;III)V
SPLcom/android/server/appop/AppOpsService;-><init>(Ljava/io/File;Landroid/os/Handler;)V
SPLcom/android/server/appop/AppOpsService;->checkAudioOperation(IIILjava/lang/String;)I
SPLcom/android/server/appop/AppOpsService;->checkAudioOperationImpl(IIILjava/lang/String;)I
SPLcom/android/server/appop/AppOpsService;->checkOperation(IILjava/lang/String;)I
SPLcom/android/server/appop/AppOpsService;->checkOperationInternal(IILjava/lang/String;Z)I
SPLcom/android/server/appop/AppOpsService;->checkOperationRaw(IILjava/lang/String;)I
SPLcom/android/server/appop/AppOpsService;->checkOperationUnchecked(IILjava/lang/String;Z)I
SPLcom/android/server/appop/AppOpsService;->checkPackage(ILjava/lang/String;)I
SPLcom/android/server/appop/AppOpsService;->commitUidPendingStateLocked(Lcom/android/server/appop/AppOpsService$UidState;)V
SPLcom/android/server/appop/AppOpsService;->finishOperation(Landroid/os/IBinder;IILjava/lang/String;)V
SPLcom/android/server/appop/AppOpsService;->finishOperationLocked(Lcom/android/server/appop/AppOpsService$Op;Z)V
SPLcom/android/server/appop/AppOpsService;->getToken(Landroid/os/IBinder;)Landroid/os/IBinder;
SPLcom/android/server/appop/AppOpsService;->isOpRestrictedLocked(IILjava/lang/String;)Z
SPLcom/android/server/appop/AppOpsService;->isPackageSuspendedForUser(Ljava/lang/String;I)Z
SPLcom/android/server/appop/AppOpsService;->noteOperation(IILjava/lang/String;)I
SPLcom/android/server/appop/AppOpsService;->noteOperationUnchecked(IILjava/lang/String;ILjava/lang/String;)I
SPLcom/android/server/appop/AppOpsService;->notifyOpChanged(Lcom/android/server/appop/AppOpsService$ModeCallback;IILjava/lang/String;)V
SPLcom/android/server/appop/AppOpsService;->packageRemoved(ILjava/lang/String;)V
SPLcom/android/server/appop/AppOpsService;->permissionToOpCode(Ljava/lang/String;)I
SPLcom/android/server/appop/AppOpsService;->publish(Landroid/content/Context;)V
SPLcom/android/server/appop/AppOpsService;->readUidOps(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/appop/AppOpsService;->resolvePackageName(ILjava/lang/String;)Ljava/lang/String;
SPLcom/android/server/appop/AppOpsService;->resolveUid(Ljava/lang/String;)I
SPLcom/android/server/appop/AppOpsService;->scheduleOpActiveChangedIfNeededLocked(IILjava/lang/String;Z)V
SPLcom/android/server/appop/AppOpsService;->scheduleOpNotedIfNeededLocked(IILjava/lang/String;I)V
SPLcom/android/server/appop/AppOpsService;->scheduleWriteLocked()V
SPLcom/android/server/appop/AppOpsService;->setAudioRestriction(IIII[Ljava/lang/String;)V
SPLcom/android/server/appop/AppOpsService;->setMode(IILjava/lang/String;I)V
SPLcom/android/server/appop/AppOpsService;->setMode(IILjava/lang/String;IZZ)V
SPLcom/android/server/appop/AppOpsService;->setUserRestrictionNoCheck(IZLandroid/os/IBinder;I[Ljava/lang/String;)V
SPLcom/android/server/appop/AppOpsService;->startOperation(Landroid/os/IBinder;IILjava/lang/String;Z)I
SPLcom/android/server/appop/AppOpsService;->startWatchingActive([ILcom/android/internal/app/IAppOpsActiveCallback;)V
SPLcom/android/server/appop/AppOpsService;->startWatchingMode(ILjava/lang/String;Lcom/android/internal/app/IAppOpsCallback;)V
SPLcom/android/server/appop/AppOpsService;->startWatchingNoted([ILcom/android/internal/app/IAppOpsNotedCallback;)V
SPLcom/android/server/appop/AppOpsService;->uidRemoved(I)V
SPLcom/android/server/appop/AppOpsService;->updateUidProcState(II)V
SPLcom/android/server/appop/AppOpsService;->upgradeLocked(I)V
SPLcom/android/server/appop/HistoricalRegistry$Persistence;-><init>(JJ)V
SPLcom/android/server/appop/HistoricalRegistry$Persistence;->getLastPersistTimeMillisDLocked()J
SPLcom/android/server/appop/HistoricalRegistry;-><init>(Ljava/lang/Object;)V
SPLcom/android/server/appop/HistoricalRegistry;->getUpdatedPendingHistoricalOpsMLocked(J)Landroid/app/AppOpsManager$HistoricalOps;
SPLcom/android/server/appop/HistoricalRegistry;->increaseOpAccessDuration(IILjava/lang/String;IJ)V
SPLcom/android/server/appop/HistoricalRegistry;->incrementOpAccessedCount(IILjava/lang/String;I)V
SPLcom/android/server/appop/HistoricalRegistry;->incrementOpRejected(IILjava/lang/String;I)V
SPLcom/android/server/appop/HistoricalRegistry;->updateParametersFromSetting(Landroid/content/ContentResolver;)V
SPLcom/android/server/appprediction/AppPredictionManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/appprediction/AppPredictionManagerService;->newServiceLocked(IZ)Lcom/android/server/appprediction/AppPredictionPerUserService;
SPLcom/android/server/appprediction/AppPredictionManagerService;->newServiceLocked(IZ)Lcom/android/server/infra/AbstractPerUserSystemService;
SPLcom/android/server/appprediction/AppPredictionManagerService;->onStart()V
SPLcom/android/server/appprediction/AppPredictionPerUserService;->updateLocked(Z)Z
SPLcom/android/server/appwidget/AppWidgetService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/appwidget/AppWidgetService;->onBootPhase(I)V
SPLcom/android/server/appwidget/AppWidgetService;->onStart()V
SPLcom/android/server/appwidget/AppWidgetServiceImpl$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/appwidget/AppWidgetServiceImpl;-><init>(Landroid/content/Context;)V
SPLcom/android/server/appwidget/AppWidgetServiceImpl;->computeMaximumWidgetBitmapMemory()V
SPLcom/android/server/appwidget/AppWidgetServiceImpl;->onConfigurationChanged()V
SPLcom/android/server/appwidget/AppWidgetServiceImpl;->onStart()V
SPLcom/android/server/appwidget/AppWidgetServiceImpl;->registerBroadcastReceiver()V
SPLcom/android/server/appwidget/AppWidgetServiceImpl;->setSafeMode(Z)V
SPLcom/android/server/attention/AttentionManagerService$LocalService;->isAttentionServiceSupported()Z
SPLcom/android/server/attention/AttentionManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/attention/AttentionManagerService;->isAttentionServiceSupported()Z
SPLcom/android/server/attention/AttentionManagerService;->isServiceAvailable()Z
SPLcom/android/server/attention/AttentionManagerService;->onStart()V
SPLcom/android/server/attention/AttentionManagerService;->resolveAttentionService(Landroid/content/Context;)Landroid/content/ComponentName;
SPLcom/android/server/audio/AudioDeviceBroker$BrokerHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/audio/AudioDeviceBroker$BrokerThread;->run()V
SPLcom/android/server/audio/AudioDeviceBroker;-><init>(Landroid/content/Context;Lcom/android/server/audio/AudioService;)V
SPLcom/android/server/audio/AudioDeviceBroker;->isAvrcpAbsoluteVolumeSupported()Z
SPLcom/android/server/audio/AudioDeviceBroker;->isBluetoothScoOnForApp()Z
SPLcom/android/server/audio/AudioDeviceBroker;->isMessageHandledUnderWakelock(I)Z
SPLcom/android/server/audio/AudioDeviceBroker;->onSystemReady()V
SPLcom/android/server/audio/AudioDeviceBroker;->sendIILMsg(IIIILjava/lang/Object;I)V
SPLcom/android/server/audio/AudioDeviceBroker;->setBluetoothScoOn(ZLjava/lang/String;)V
SPLcom/android/server/audio/AudioDeviceBroker;->setupMessaging(Landroid/content/Context;)V
SPLcom/android/server/audio/AudioDeviceBroker;->startWatchingRoutes(Landroid/media/IAudioRoutesObserver;)Landroid/media/AudioRoutesInfo;
SPLcom/android/server/audio/AudioDeviceBroker;->waitForBrokerHandlerCreation()V
SPLcom/android/server/audio/AudioDeviceInventory;->startWatchingRoutes(Landroid/media/IAudioRoutesObserver;)Landroid/media/AudioRoutesInfo;
SPLcom/android/server/audio/AudioEventLogger;-><init>(ILjava/lang/String;)V
SPLcom/android/server/audio/AudioEventLogger;->log(Lcom/android/server/audio/AudioEventLogger$Event;)V
SPLcom/android/server/audio/AudioService$1;->onError(I)V
SPLcom/android/server/audio/AudioService$AudioHandler;->getSoundEffectFilePath(I)Ljava/lang/String;
SPLcom/android/server/audio/AudioService$AudioHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/audio/AudioService$AudioHandler;->onLoadSoundEffects()Z
SPLcom/android/server/audio/AudioService$AudioHandler;->setAllVolumes(Lcom/android/server/audio/AudioService$VolumeStreamState;)V
SPLcom/android/server/audio/AudioService$AudioServiceBroadcastReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/audio/AudioService$AudioServiceInternal;->setAccessibilityServiceUids(Landroid/util/IntArray;)V
SPLcom/android/server/audio/AudioService$AudioServiceInternal;->setRingerModeDelegate(Landroid/media/AudioManagerInternal$RingerModeDelegate;)V
SPLcom/android/server/audio/AudioService$AudioServiceInternal;->updateRingerModeAffectedStreamsInternal()V
SPLcom/android/server/audio/AudioService$AudioServiceUserRestrictionsListener;->onUserRestrictionsChanged(ILandroid/os/Bundle;Landroid/os/Bundle;)V
SPLcom/android/server/audio/AudioService$AudioSystemThread;->run()V
SPLcom/android/server/audio/AudioService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/audio/AudioService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/audio/AudioService$Lifecycle;->onStart()V
SPLcom/android/server/audio/AudioService$SettingsObserver;-><init>(Lcom/android/server/audio/AudioService;)V
SPLcom/android/server/audio/AudioService$SettingsObserver;->onChange(Z)V
SPLcom/android/server/audio/AudioService$SettingsObserver;->updateEncodedSurroundOutput()V
SPLcom/android/server/audio/AudioService$SoundPoolCallback;->onLoadComplete(Landroid/media/SoundPool;II)V
SPLcom/android/server/audio/AudioService$SoundPoolListenerThread;->run()V
SPLcom/android/server/audio/AudioService$VolumeController;->asBinder()Landroid/os/IBinder;
SPLcom/android/server/audio/AudioService$VolumeController;->isSameBinder(Landroid/media/IVolumeController;)Z
SPLcom/android/server/audio/AudioService$VolumeController;->loadSettings(Landroid/content/ContentResolver;)V
SPLcom/android/server/audio/AudioService$VolumeController;->postDismiss()V
SPLcom/android/server/audio/AudioService$VolumeController;->setController(Landroid/media/IVolumeController;)V
SPLcom/android/server/audio/AudioService$VolumeController;->setLayoutDirection(I)V
SPLcom/android/server/audio/AudioService$VolumeStreamState;-><init>(Lcom/android/server/audio/AudioService;Ljava/lang/String;I)V
SPLcom/android/server/audio/AudioService$VolumeStreamState;->applyAllVolumes()V
SPLcom/android/server/audio/AudioService$VolumeStreamState;->applyDeviceVolume_syncVSS(IZ)V
SPLcom/android/server/audio/AudioService$VolumeStreamState;->checkFixedVolumeDevices()V
SPLcom/android/server/audio/AudioService$VolumeStreamState;->getIndex(I)I
SPLcom/android/server/audio/AudioService$VolumeStreamState;->getMinIndex()I
SPLcom/android/server/audio/AudioService$VolumeStreamState;->getStreamType()I
SPLcom/android/server/audio/AudioService$VolumeStreamState;->mute(Z)V
SPLcom/android/server/audio/AudioService$VolumeStreamState;->observeDevicesForStream_syncVSS(Z)I
SPLcom/android/server/audio/AudioService$VolumeStreamState;->setAllIndexes(Lcom/android/server/audio/AudioService$VolumeStreamState;Ljava/lang/String;)V
SPLcom/android/server/audio/AudioService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/audio/AudioService;->broadcastVibrateSetting(I)V
SPLcom/android/server/audio/AudioService;->checkAllAliasStreamVolumes()V
SPLcom/android/server/audio/AudioService;->checkMuteAffectedStreams()V
SPLcom/android/server/audio/AudioService;->createStreamStates()V
SPLcom/android/server/audio/AudioService;->enforceSafeMediaVolume(Ljava/lang/String;)V
SPLcom/android/server/audio/AudioService;->ensureValidStreamType(I)V
SPLcom/android/server/audio/AudioService;->getActivePlaybackConfigurations()Ljava/util/List;
SPLcom/android/server/audio/AudioService;->getCurrentUserId()I
SPLcom/android/server/audio/AudioService;->getDeviceForStream(I)I
SPLcom/android/server/audio/AudioService;->getDevicesForStream(IZ)I
SPLcom/android/server/audio/AudioService;->getLastAudibleStreamVolume(I)I
SPLcom/android/server/audio/AudioService;->getMode()I
SPLcom/android/server/audio/AudioService;->getRingerModeExternal()I
SPLcom/android/server/audio/AudioService;->getRingerModeInternal()I
SPLcom/android/server/audio/AudioService;->getSafeUsbMediaVolumeIndex()I
SPLcom/android/server/audio/AudioService;->getStreamMaxVolume(I)I
SPLcom/android/server/audio/AudioService;->getStreamMinVolume(I)I
SPLcom/android/server/audio/AudioService;->getVibrateSetting(I)I
SPLcom/android/server/audio/AudioService;->handleConfigurationChanged(Landroid/content/Context;)V
SPLcom/android/server/audio/AudioService;->isBluetoothScoOn()Z
SPLcom/android/server/audio/AudioService;->isInCommunication()Z
SPLcom/android/server/audio/AudioService;->isPlatformTelevision()Z
SPLcom/android/server/audio/AudioService;->isStreamAffectedByMute(I)Z
SPLcom/android/server/audio/AudioService;->isStreamAffectedByRingerMode(I)Z
SPLcom/android/server/audio/AudioService;->isStreamMute(I)Z
SPLcom/android/server/audio/AudioService;->isValidRingerMode(I)Z
SPLcom/android/server/audio/AudioService;->loadTouchSoundAssets()V
SPLcom/android/server/audio/AudioService;->muteRingerModeStreams()V
SPLcom/android/server/audio/AudioService;->observeDevicesForStreams(I)V
SPLcom/android/server/audio/AudioService;->onAccessibilityServicesStateChanged(Landroid/view/accessibility/AccessibilityManager;)V
SPLcom/android/server/audio/AudioService;->onIndicateSystemReady()V
SPLcom/android/server/audio/AudioService;->onSystemReady()V
SPLcom/android/server/audio/AudioService;->postUpdateRingerModeServiceInt()V
SPLcom/android/server/audio/AudioService;->readAndSetLowRamDevice()V
SPLcom/android/server/audio/AudioService;->readAudioSettings(Z)V
SPLcom/android/server/audio/AudioService;->readDockAudioSettings(Landroid/content/ContentResolver;)V
SPLcom/android/server/audio/AudioService;->readPersistedSettings()V
SPLcom/android/server/audio/AudioService;->readUserRestrictions()V
SPLcom/android/server/audio/AudioService;->registerPlaybackCallback(Landroid/media/IPlaybackConfigDispatcher;)V
SPLcom/android/server/audio/AudioService;->rescaleIndex(III)I
SPLcom/android/server/audio/AudioService;->sendBroadcastToAll(Landroid/content/Intent;)V
SPLcom/android/server/audio/AudioService;->sendEnabledSurroundFormats(Landroid/content/ContentResolver;Z)V
SPLcom/android/server/audio/AudioService;->sendEncodedSurroundMode(ILjava/lang/String;)V
SPLcom/android/server/audio/AudioService;->sendStickyBroadcastToAll(Landroid/content/Intent;)V
SPLcom/android/server/audio/AudioService;->setRingerMode(ILjava/lang/String;Z)V
SPLcom/android/server/audio/AudioService;->setRingerModeExt(I)V
SPLcom/android/server/audio/AudioService;->setRingerModeInt(IZ)V
SPLcom/android/server/audio/AudioService;->setRingerModeInternal(ILjava/lang/String;)V
SPLcom/android/server/audio/AudioService;->setRingtonePlayer(Landroid/media/IRingtonePlayer;)V
SPLcom/android/server/audio/AudioService;->setSystemAudioMute(Z)V
SPLcom/android/server/audio/AudioService;->setUpdateRingerModeServiceInt()V
SPLcom/android/server/audio/AudioService;->setVolumeController(Landroid/media/IVolumeController;)V
SPLcom/android/server/audio/AudioService;->setVolumePolicy(Landroid/media/VolumePolicy;)V
SPLcom/android/server/audio/AudioService;->shouldZenMuteStream(I)Z
SPLcom/android/server/audio/AudioService;->startWatchingRoutes(Landroid/media/IAudioRoutesObserver;)Landroid/media/AudioRoutesInfo;
SPLcom/android/server/audio/AudioService;->systemReady()V
SPLcom/android/server/audio/AudioService;->trackPlayer(Landroid/media/PlayerBase$PlayerIdCard;)I
SPLcom/android/server/audio/AudioService;->updateAssistantUId(Z)V
SPLcom/android/server/audio/AudioService;->updateDefaultVolumes()V
SPLcom/android/server/audio/AudioService;->updateMasterBalance(Landroid/content/ContentResolver;)V
SPLcom/android/server/audio/AudioService;->updateRingerAndZenModeAffectedStreams()Z
SPLcom/android/server/audio/AudioService;->updateStreamVolumeAlias(ZLjava/lang/String;)V
SPLcom/android/server/audio/AudioService;->updateZenModeAffectedStreams()Z
SPLcom/android/server/audio/AudioService;->waitForAudioHandlerCreation()V
SPLcom/android/server/audio/BtHelper;->clearAllScoClients(IZ)V
SPLcom/android/server/audio/BtHelper;->isAvrcpAbsoluteVolumeSupported()Z
SPLcom/android/server/audio/BtHelper;->onBroadcastScoConnectionState(I)V
SPLcom/android/server/audio/BtHelper;->onSystemReady()V
SPLcom/android/server/audio/BtHelper;->resetBluetoothSco()V
SPLcom/android/server/audio/BtHelper;->sendStickyBroadcastToAll(Landroid/content/Intent;)V
SPLcom/android/server/audio/MediaFocusControl;-><init>(Landroid/content/Context;Lcom/android/server/audio/PlayerFocusEnforcer;)V
SPLcom/android/server/audio/MediaFocusControl;->discardAudioFocusOwner()V
SPLcom/android/server/audio/MediaFocusControl;->getFocusRampTimeMs(ILandroid/media/AudioAttributes;)I
SPLcom/android/server/audio/PlaybackActivityMonitor$NewPlayerEvent;-><init>(Landroid/media/AudioPlaybackConfiguration;)V
SPLcom/android/server/audio/PlaybackActivityMonitor$PlayMonitorClient;->init()Z
SPLcom/android/server/audio/PlaybackActivityMonitor;-><init>(Landroid/content/Context;I)V
SPLcom/android/server/audio/PlaybackActivityMonitor;->anonymizeForPublicConsumption(Ljava/util/List;)Ljava/util/ArrayList;
SPLcom/android/server/audio/PlaybackActivityMonitor;->getActivePlaybackConfigurations(Z)Ljava/util/List;
SPLcom/android/server/audio/PlaybackActivityMonitor;->registerPlaybackCallback(Landroid/media/IPlaybackConfigDispatcher;Z)V
SPLcom/android/server/audio/PlaybackActivityMonitor;->trackPlayer(Landroid/media/PlayerBase$PlayerIdCard;)I
SPLcom/android/server/audio/RotationHelper$AudioDisplayListener;-><init>()V
SPLcom/android/server/audio/RotationHelper;->enable()V
SPLcom/android/server/audio/RotationHelper;->updateOrientation()V
SPLcom/android/server/autofill/AutofillManagerService$AutofillCompatState;->isCompatibilityModeRequested(Ljava/lang/String;JI)Z
SPLcom/android/server/autofill/AutofillManagerService$AutofillCompatState;->removeCompatibilityModeRequests(I)V
SPLcom/android/server/autofill/AutofillManagerService$AutofillCompatState;->reset(I)V
SPLcom/android/server/autofill/AutofillManagerService$LocalService;->getAutofillOptions(Ljava/lang/String;JI)Landroid/content/AutofillOptions;
SPLcom/android/server/autofill/AutofillManagerService$LocalService;->isCompatibilityModeRequested(Ljava/lang/String;JI)Z
SPLcom/android/server/autofill/AutofillManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/autofill/AutofillManagerService;->addCompatibilityModeRequestsLocked(Lcom/android/server/autofill/AutofillManagerServiceImpl;I)V
SPLcom/android/server/autofill/AutofillManagerService;->getServiceSettingsProperty()Ljava/lang/String;
SPLcom/android/server/autofill/AutofillManagerService;->newServiceLocked(IZ)Lcom/android/server/infra/AbstractPerUserSystemService;
SPLcom/android/server/autofill/AutofillManagerService;->onServiceEnabledLocked(Lcom/android/server/infra/AbstractPerUserSystemService;I)V
SPLcom/android/server/autofill/AutofillManagerService;->onServiceRemoved(Lcom/android/server/infra/AbstractPerUserSystemService;I)V
SPLcom/android/server/autofill/AutofillManagerService;->onStart()V
SPLcom/android/server/autofill/AutofillManagerService;->registerForExtraSettingsChanges(Landroid/content/ContentResolver;Landroid/database/ContentObserver;)V
SPLcom/android/server/autofill/AutofillManagerService;->setDeviceConfigProperties()V
SPLcom/android/server/autofill/AutofillManagerService;->setLogLevelFromSettings()V
SPLcom/android/server/autofill/AutofillManagerService;->setMaxPartitionsFromSettings()V
SPLcom/android/server/autofill/AutofillManagerService;->setMaxVisibleDatasetsFromSettings()V
SPLcom/android/server/autofill/AutofillManagerService;->setSmartSuggestionEmulationFromSettings()V
SPLcom/android/server/autofill/AutofillManagerService;->setSmartSuggestionModesFromDeviceConfig(Ljava/lang/String;)V
SPLcom/android/server/autofill/AutofillManagerServiceImpl;-><init>(Lcom/android/server/autofill/AutofillManagerService;Ljava/lang/Object;Landroid/util/LocalLog;Landroid/util/LocalLog;ILcom/android/server/autofill/ui/AutoFillUI;Lcom/android/server/autofill/AutofillManagerService$AutofillCompatState;Z)V
SPLcom/android/server/autofill/AutofillManagerServiceImpl;->destroyLocked()V
SPLcom/android/server/autofill/AutofillManagerServiceImpl;->destroySessionsLocked()V
SPLcom/android/server/autofill/AutofillManagerServiceImpl;->sendStateToClients(Z)V
SPLcom/android/server/autofill/AutofillManagerServiceImpl;->updateLocked(Z)Z
SPLcom/android/server/autofill/FieldClassificationStrategy;->reset()V
SPLcom/android/server/autofill/Helper;->getIntDeviceConfigProperty(Ljava/lang/String;I)I
SPLcom/android/server/autofill/ui/-$$Lambda$AutoFillUI$XWhvh2-Jd9NLMoEos-e8RkZdQaI;->run()V
SPLcom/android/server/autofill/ui/AutoFillUI;-><init>(Landroid/content/Context;)V
SPLcom/android/server/autofill/ui/AutoFillUI;->destroySaveUiUiThread(Lcom/android/server/autofill/ui/PendingUi;Z)V
SPLcom/android/server/backup/BackupManagerService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/backup/BackupManagerService$Lifecycle;->onStart()V
SPLcom/android/server/backup/Trampoline;-><init>(Landroid/content/Context;)V
SPLcom/android/server/backup/Trampoline;->binderGetCallingUserId()I
SPLcom/android/server/backup/Trampoline;->dataChanged(Ljava/lang/String;)V
SPLcom/android/server/backup/Trampoline;->dataChangedForUser(ILjava/lang/String;)V
SPLcom/android/server/backup/Trampoline;->isBackupDisabled()Z
SPLcom/android/server/biometrics/-$$Lambda$BiometricServiceBase$F4H2HbJPkB5kHnCG99RJzq63ETk;->run()V
SPLcom/android/server/biometrics/-$$Lambda$BiometricServiceBase$HtA60PD2POS70xjo2Wkv9Ds3iIM;->run()V
SPLcom/android/server/biometrics/-$$Lambda$BiometricServiceBase$d8jmYuo4MyZZpxoeouUPEq4DMII;->run()V
SPLcom/android/server/biometrics/-$$Lambda$BiometricServiceBase$fPrFwbkIihZrGIgPSW0LZgzpmas;->run()V
SPLcom/android/server/biometrics/AuthenticationClient;-><init>(Landroid/content/Context;Lcom/android/server/biometrics/Metrics;Lcom/android/server/biometrics/BiometricServiceBase$DaemonWrapper;JLandroid/os/IBinder;Lcom/android/server/biometrics/BiometricServiceBase$ServiceListener;IIJZLjava/lang/String;IZ)V
SPLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;-><init>(Lcom/android/server/biometrics/BiometricService;)V
SPLcom/android/server/biometrics/BiometricService$BiometricServiceWrapper;->registerEnabledOnKeyguardCallback(Landroid/hardware/biometrics/IBiometricEnabledOnKeyguardCallback;)V
SPLcom/android/server/biometrics/BiometricService$EnabledOnKeyguardCallback;-><init>(Lcom/android/server/biometrics/BiometricService;Landroid/hardware/biometrics/IBiometricEnabledOnKeyguardCallback;)V
SPLcom/android/server/biometrics/BiometricService$SettingObserver;-><init>(Lcom/android/server/biometrics/BiometricService;Landroid/os/Handler;)V
SPLcom/android/server/biometrics/BiometricService$SettingObserver;->onChange(ZLandroid/net/Uri;)V
SPLcom/android/server/biometrics/BiometricService$SettingObserver;->updateContentObserver()V
SPLcom/android/server/biometrics/BiometricService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/biometrics/BiometricService;->getAuthenticator(I)Landroid/hardware/biometrics/BiometricAuthenticator;
SPLcom/android/server/biometrics/BiometricService;->onStart()V
SPLcom/android/server/biometrics/BiometricServiceBase$AuthenticationClientImpl;-><init>(Lcom/android/server/biometrics/BiometricServiceBase;Landroid/content/Context;Lcom/android/server/biometrics/BiometricServiceBase$DaemonWrapper;JLandroid/os/IBinder;Lcom/android/server/biometrics/BiometricServiceBase$ServiceListener;IIJZLjava/lang/String;IZ)V
SPLcom/android/server/biometrics/BiometricServiceBase$EnumerateClientImpl;-><init>(Lcom/android/server/biometrics/BiometricServiceBase;Landroid/content/Context;Lcom/android/server/biometrics/BiometricServiceBase$DaemonWrapper;JLandroid/os/IBinder;Lcom/android/server/biometrics/BiometricServiceBase$ServiceListener;IIZLjava/lang/String;)V
SPLcom/android/server/biometrics/BiometricServiceBase$InternalEnumerateClient;-><init>(Lcom/android/server/biometrics/BiometricServiceBase;Landroid/content/Context;Lcom/android/server/biometrics/BiometricServiceBase$DaemonWrapper;JLandroid/os/IBinder;Lcom/android/server/biometrics/BiometricServiceBase$ServiceListener;IIZLjava/lang/String;Ljava/util/List;Lcom/android/server/biometrics/BiometricUtils;)V
SPLcom/android/server/biometrics/BiometricServiceBase$InternalEnumerateClient;->doTemplateCleanup()V
SPLcom/android/server/biometrics/BiometricServiceBase$InternalEnumerateClient;->handleEnumeratedTemplate(Landroid/hardware/biometrics/BiometricAuthenticator$Identifier;)V
SPLcom/android/server/biometrics/BiometricServiceBase$InternalEnumerateClient;->onEnumerationResult(Landroid/hardware/biometrics/BiometricAuthenticator$Identifier;I)Z
SPLcom/android/server/biometrics/BiometricServiceBase$LockoutResetMonitor;-><init>(Lcom/android/server/biometrics/BiometricServiceBase;Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback;)V
SPLcom/android/server/biometrics/BiometricServiceBase;-><init>(Landroid/content/Context;)V
SPLcom/android/server/biometrics/BiometricServiceBase;->authenticateInternal(Lcom/android/server/biometrics/BiometricServiceBase$AuthenticationClientImpl;JLjava/lang/String;)V
SPLcom/android/server/biometrics/BiometricServiceBase;->authenticateInternal(Lcom/android/server/biometrics/BiometricServiceBase$AuthenticationClientImpl;JLjava/lang/String;III)V
SPLcom/android/server/biometrics/BiometricServiceBase;->canUseBiometric(Ljava/lang/String;ZIII)Z
SPLcom/android/server/biometrics/BiometricServiceBase;->checkPermission(Ljava/lang/String;)V
SPLcom/android/server/biometrics/BiometricServiceBase;->doTemplateCleanupForUser(I)V
SPLcom/android/server/biometrics/BiometricServiceBase;->enumerateInternal(Lcom/android/server/biometrics/BiometricServiceBase$EnumerateClientImpl;)V
SPLcom/android/server/biometrics/BiometricServiceBase;->enumerateInternal(Lcom/android/server/biometrics/EnumerateClient;)V
SPLcom/android/server/biometrics/BiometricServiceBase;->enumerateUser(I)V
SPLcom/android/server/biometrics/BiometricServiceBase;->getCurrentClient()Lcom/android/server/biometrics/ClientMonitor;
SPLcom/android/server/biometrics/BiometricServiceBase;->getLockoutMode()I
SPLcom/android/server/biometrics/BiometricServiceBase;->getUserOrWorkProfileId(Ljava/lang/String;I)I
SPLcom/android/server/biometrics/BiometricServiceBase;->handleEnumerate(Landroid/hardware/biometrics/BiometricAuthenticator$Identifier;I)V
SPLcom/android/server/biometrics/BiometricServiceBase;->hasPermission(Ljava/lang/String;)Z
SPLcom/android/server/biometrics/BiometricServiceBase;->isRestricted()Z
SPLcom/android/server/biometrics/BiometricServiceBase;->isWorkProfile(I)Z
SPLcom/android/server/biometrics/BiometricServiceBase;->lambda$addLockoutResetCallback$7$BiometricServiceBase(Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback;)V
SPLcom/android/server/biometrics/BiometricServiceBase;->lambda$authenticateInternal$2$BiometricServiceBase(JLcom/android/server/biometrics/BiometricServiceBase$AuthenticationClientImpl;Ljava/lang/String;)V
SPLcom/android/server/biometrics/BiometricServiceBase;->lambda$authenticateInternal$2(Lcom/android/server/biometrics/BiometricServiceBase;JLcom/android/server/biometrics/BiometricServiceBase$AuthenticationClientImpl;Ljava/lang/String;)V
SPLcom/android/server/biometrics/BiometricServiceBase;->lambda$enumerateInternal$6$BiometricServiceBase(Lcom/android/server/biometrics/EnumerateClient;)V
SPLcom/android/server/biometrics/BiometricServiceBase;->listenForUserSwitches()V
SPLcom/android/server/biometrics/BiometricServiceBase;->loadAuthenticatorIds()V
SPLcom/android/server/biometrics/BiometricServiceBase;->removeClient(Lcom/android/server/biometrics/ClientMonitor;)V
SPLcom/android/server/biometrics/BiometricServiceBase;->startAuthentication(Lcom/android/server/biometrics/BiometricServiceBase$AuthenticationClientImpl;Ljava/lang/String;)V
SPLcom/android/server/biometrics/BiometricServiceBase;->startCleanupUnknownHALTemplates()V
SPLcom/android/server/biometrics/BiometricServiceBase;->startClient(Lcom/android/server/biometrics/ClientMonitor;Z)V
SPLcom/android/server/biometrics/BiometricServiceBase;->startCurrentClient(I)V
SPLcom/android/server/biometrics/BiometricUserState;-><init>(Landroid/content/Context;I)V
SPLcom/android/server/biometrics/BiometricUserState;->getBiometrics()Ljava/util/List;
SPLcom/android/server/biometrics/BiometricUserState;->parseStateLocked(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/biometrics/BiometricUserState;->readStateSyncLocked()V
SPLcom/android/server/biometrics/ClientMonitor;-><init>(Landroid/content/Context;Lcom/android/server/biometrics/Metrics;Lcom/android/server/biometrics/BiometricServiceBase$DaemonWrapper;JLandroid/os/IBinder;Lcom/android/server/biometrics/BiometricServiceBase$ServiceListener;IIZLjava/lang/String;I)V
SPLcom/android/server/biometrics/ClientMonitor;->destroy()V
SPLcom/android/server/biometrics/ClientMonitor;->getCookie()I
SPLcom/android/server/biometrics/EnumerateClient;->start()I
SPLcom/android/server/biometrics/fingerprint/-$$Lambda$FingerprintService$1$3I9ge5BoesXZUovbayCOCR754fc;->run()V
SPLcom/android/server/biometrics/fingerprint/-$$Lambda$FingerprintService$YOMIOLvco2SvXVeJIulOSVKdX7A;->run()V
SPLcom/android/server/biometrics/fingerprint/FingerprintMetrics;->tagAuthToken()Ljava/lang/String;
SPLcom/android/server/biometrics/fingerprint/FingerprintService$1;->lambda$onEnumerate$5$FingerprintService$1(IIJI)V
SPLcom/android/server/biometrics/fingerprint/FingerprintService$1;->onEnumerate(JIII)V
SPLcom/android/server/biometrics/fingerprint/FingerprintService$2;->enumerate()I
SPLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintServiceWrapper;->addLockoutResetCallback(Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback;)V
SPLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintServiceWrapper;->authenticate(Landroid/os/IBinder;JILandroid/hardware/fingerprint/IFingerprintServiceReceiver;ILjava/lang/String;)V
SPLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintServiceWrapper;->getEnrolledFingerprints(ILjava/lang/String;)Ljava/util/List;
SPLcom/android/server/biometrics/fingerprint/FingerprintService$FingerprintServiceWrapper;->isHardwareDetected(JLjava/lang/String;)Z
SPLcom/android/server/biometrics/fingerprint/FingerprintService$InternalEnumerateClient;->doFingerprintCleanup()V
SPLcom/android/server/biometrics/fingerprint/FingerprintService$InternalEnumerateClient;->handleEnumeratedFingerprint(Landroid/hardware/biometrics/BiometricAuthenticator$Identifier;I)V
SPLcom/android/server/biometrics/fingerprint/FingerprintService$InternalEnumerateClient;->onEnumerationResult(Landroid/hardware/biometrics/BiometricAuthenticator$Identifier;I)Z
SPLcom/android/server/biometrics/fingerprint/FingerprintService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->checkUseBiometricPermission()V
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->cleanupUnknownFingerprints()V
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->enumerateUser(I)V
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->getBiometricUtils()Lcom/android/server/biometrics/BiometricUtils;
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->getDaemonWrapper()Lcom/android/server/biometrics/BiometricServiceBase$DaemonWrapper;
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->getEnrolledTemplates(I)Ljava/util/List;
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->getFailedAttemptsLockoutPermanent()I
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->getFingerprintDaemon()Landroid/hardware/biometrics/fingerprint/V2_1/IBiometricsFingerprint;
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->getLockoutBroadcastPermission()Ljava/lang/String;
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->getLockoutMode()I
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->getLockoutResetIntent()Ljava/lang/String;
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->getManageBiometricPermission()Ljava/lang/String;
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->getMetrics()Lcom/android/server/biometrics/Metrics;
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->getTag()Ljava/lang/String;
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->handleEnumerate(Landroid/hardware/fingerprint/Fingerprint;I)V
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->hasEnrolledBiometrics(I)Z
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->notifyClientActiveCallbacks(Z)V
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->onStart()V
SPLcom/android/server/biometrics/fingerprint/FingerprintService;->updateActiveGroup(ILjava/lang/String;)V
SPLcom/android/server/biometrics/fingerprint/FingerprintUserState;->getBiometricFile()Ljava/lang/String;
SPLcom/android/server/biometrics/fingerprint/FingerprintUserState;->getBiometricsTag()Ljava/lang/String;
SPLcom/android/server/biometrics/fingerprint/FingerprintUserState;->getCopy(Ljava/util/ArrayList;)Ljava/util/ArrayList;
SPLcom/android/server/biometrics/fingerprint/FingerprintUserState;->parseBiometricsLocked(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/biometrics/fingerprint/FingerprintUtils;->getBiometricsForUser(Landroid/content/Context;I)Ljava/util/List;
SPLcom/android/server/biometrics/fingerprint/FingerprintUtils;->getInstance()Lcom/android/server/biometrics/fingerprint/FingerprintUtils;
SPLcom/android/server/biometrics/fingerprint/FingerprintUtils;->getStateForUser(Landroid/content/Context;I)Lcom/android/server/biometrics/fingerprint/FingerprintUserState;
SPLcom/android/server/camera/CameraServiceProxy;-><init>(Landroid/content/Context;)V
SPLcom/android/server/camera/CameraServiceProxy;->notifyMediaserverLocked(ILjava/util/Set;)Z
SPLcom/android/server/camera/CameraServiceProxy;->onStart()V
SPLcom/android/server/camera/CameraServiceProxy;->onStartUser(I)V
SPLcom/android/server/camera/CameraServiceProxy;->toArray(Ljava/util/Collection;)[I
SPLcom/android/server/camera/CameraStatsJobService;->schedule(Landroid/content/Context;)V
SPLcom/android/server/clipboard/ClipboardService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/clipboard/ClipboardService;->onStart()V
SPLcom/android/server/companion/-$$Lambda$CompanionDeviceManagerService$1$EelUlD0Ldboon98oq6H5kDCPW9I;->apply(Ljava/lang/Object;)Ljava/lang/Object;
SPLcom/android/server/companion/-$$Lambda$CompanionDeviceManagerService$CompanionDeviceManagerImpl$bdv3Vfadbb8b9nrSgkARO4oYOXU;-><init>()V
SPLcom/android/server/companion/-$$Lambda$CompanionDeviceManagerService$bh5xRJq9-CRJoXvmerYRNjK1xEQ;-><init>()V
SPLcom/android/server/companion/-$$Lambda$CompanionDeviceManagerService$bh5xRJq9-CRJoXvmerYRNjK1xEQ;->apply(Ljava/lang/Object;)Ljava/lang/Object;
SPLcom/android/server/companion/CompanionDeviceManagerService$1;->onPackageRemoved(Ljava/lang/String;I)V
SPLcom/android/server/companion/CompanionDeviceManagerService$CompanionDeviceManagerImpl;->checkCallerIsSystemOr(Ljava/lang/String;I)V
SPLcom/android/server/companion/CompanionDeviceManagerService$CompanionDeviceManagerImpl;->checkUsesFeature(Ljava/lang/String;I)V
SPLcom/android/server/companion/CompanionDeviceManagerService$CompanionDeviceManagerImpl;->getAssociations(Ljava/lang/String;I)Ljava/util/List;
SPLcom/android/server/companion/CompanionDeviceManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/companion/CompanionDeviceManagerService;->onStart()V
SPLcom/android/server/companion/CompanionDeviceManagerService;->readAllAssociations(ILjava/lang/String;)Ljava/util/Set;
SPLcom/android/server/companion/CompanionDeviceManagerService;->updateAssociations(Ljava/util/function/Function;I)V
SPLcom/android/server/connectivity/-$$Lambda$IpConnectivityMetrics$B0oR30xfeM300kIzUVaV_zUNLCg;-><init>()V
SPLcom/android/server/connectivity/-$$Lambda$IpConnectivityMetrics$B0oR30xfeM300kIzUVaV_zUNLCg;->applyAsInt(Ljava/lang/Object;)I
SPLcom/android/server/connectivity/DataConnectionStats$1;-><init>(Lcom/android/server/connectivity/DataConnectionStats;)V
SPLcom/android/server/connectivity/DataConnectionStats;->startMonitoring()V
SPLcom/android/server/connectivity/DefaultNetworkMetrics;-><init>()V
SPLcom/android/server/connectivity/DefaultNetworkMetrics;->newDefaultNetwork(JLcom/android/server/connectivity/NetworkAgentInfo;)V
SPLcom/android/server/connectivity/DnsManager;->getPrivateDnsSettingsUris()[Landroid/net/Uri;
SPLcom/android/server/connectivity/IpConnectivityMetrics$Impl;->addNetdEventCallback(ILandroid/net/INetdEventCallback;)Z
SPLcom/android/server/connectivity/IpConnectivityMetrics;-><init>(Landroid/content/Context;)V
SPLcom/android/server/connectivity/IpConnectivityMetrics;-><init>(Landroid/content/Context;Ljava/util/function/ToIntFunction;)V
SPLcom/android/server/connectivity/IpConnectivityMetrics;->initBuffer()V
SPLcom/android/server/connectivity/IpConnectivityMetrics;->onBootPhase(I)V
SPLcom/android/server/connectivity/IpConnectivityMetrics;->onStart()V
SPLcom/android/server/connectivity/LingerMonitor;->makeTransportToNameMap()Ljava/util/HashMap;
SPLcom/android/server/connectivity/MockableSystemProperties;->get(Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/connectivity/MockableSystemProperties;->getBoolean(Ljava/lang/String;Z)Z
SPLcom/android/server/connectivity/MockableSystemProperties;->getInt(Ljava/lang/String;I)I
SPLcom/android/server/connectivity/MultipathPolicyTracker$ConfigChangeReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/connectivity/MultipathPolicyTracker$Dependencies;-><init>()V
SPLcom/android/server/connectivity/MultipathPolicyTracker$Dependencies;->getClock()Ljava/time/Clock;
SPLcom/android/server/connectivity/MultipathPolicyTracker;-><init>(Landroid/content/Context;Landroid/os/Handler;Lcom/android/server/connectivity/MultipathPolicyTracker$Dependencies;)V
SPLcom/android/server/connectivity/MultipathPolicyTracker;->registerTrackMobileCallback()V
SPLcom/android/server/connectivity/MultipathPolicyTracker;->start()V
SPLcom/android/server/connectivity/NetdEventListenerService$NetworkMetricsSnapshot;->collect(JLandroid/util/SparseArray;)Lcom/android/server/connectivity/NetdEventListenerService$NetworkMetricsSnapshot;
SPLcom/android/server/connectivity/NetdEventListenerService;-><init>(Landroid/net/ConnectivityManager;)V
SPLcom/android/server/connectivity/NetdEventListenerService;->addNetdEventCallback(ILandroid/net/INetdEventCallback;)Z
SPLcom/android/server/connectivity/NetdEventListenerService;->collectPendingMetricsSnapshot(J)V
SPLcom/android/server/connectivity/NetdEventListenerService;->getTransports(I)J
SPLcom/android/server/connectivity/NetdEventListenerService;->onDnsEvent(IIIILjava/lang/String;[Ljava/lang/String;II)V
SPLcom/android/server/connectivity/PacManager;-><init>(Landroid/content/Context;Landroid/os/Handler;I)V
SPLcom/android/server/connectivity/PermissionMonitor;-><init>(Landroid/content/Context;Landroid/os/INetworkManagementService;)V
SPLcom/android/server/connectivity/PermissionMonitor;->getDeviceFirstSdkInt()I
SPLcom/android/server/connectivity/PermissionMonitor;->hasUseBackgroundNetworksPermission(I)Z
SPLcom/android/server/connectivity/PermissionMonitor;->onPackageRemoved(I)V
SPLcom/android/server/connectivity/PermissionMonitor;->sendPackagePermissionsToNetd(Landroid/util/SparseIntArray;)V
SPLcom/android/server/connectivity/ProxyTracker;->getGlobalProxy()Landroid/net/ProxyInfo;
SPLcom/android/server/connectivity/ProxyTracker;->loadDeprecatedGlobalHttpProxy()V
SPLcom/android/server/connectivity/ProxyTracker;->loadGlobalProxy()V
SPLcom/android/server/connectivity/TcpKeepaliveController;-><init>(Landroid/os/Handler;)V
SPLcom/android/server/connectivity/Tethering$3;->updateInterfaceState(Landroid/net/ip/IpServer;II)V
SPLcom/android/server/connectivity/Tethering$3;->updateLinkProperties(Landroid/net/ip/IpServer;Landroid/net/LinkProperties;)V
SPLcom/android/server/connectivity/Tethering$StateReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/connectivity/Tethering$TetherMasterSM$InitialState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/connectivity/Tethering$TetherMasterSM$OffloadWrapper;->excludeDownstreamInterface(Ljava/lang/String;)V
SPLcom/android/server/connectivity/Tethering$TetherMasterSM$OffloadWrapper;->sendOffloadExemptPrefixes()V
SPLcom/android/server/connectivity/Tethering$TetherMasterSM$OffloadWrapper;->sendOffloadExemptPrefixes(Ljava/util/Set;)V
SPLcom/android/server/connectivity/Tethering$TetherMasterSM;-><init>(Lcom/android/server/connectivity/Tethering;Ljava/lang/String;Landroid/os/Looper;Lcom/android/server/connectivity/tethering/TetheringDependencies;)V
SPLcom/android/server/connectivity/Tethering$TetherMasterSM;->handleInterfaceServingStateInactive(Landroid/net/ip/IpServer;)V
SPLcom/android/server/connectivity/Tethering$TetheringUserRestrictionListener;->onUserRestrictionsChanged(ILandroid/os/Bundle;Landroid/os/Bundle;)V
SPLcom/android/server/connectivity/Tethering;-><init>(Landroid/content/Context;Landroid/os/INetworkManagementService;Landroid/net/INetworkStatsService;Landroid/net/INetworkPolicyManager;Landroid/os/Looper;Lcom/android/server/connectivity/MockableSystemProperties;Lcom/android/server/connectivity/tethering/TetheringDependencies;)V
SPLcom/android/server/connectivity/Tethering;->clearTetheredNotification()V
SPLcom/android/server/connectivity/Tethering;->getTetherableWifiRegexs()[Ljava/lang/String;
SPLcom/android/server/connectivity/Tethering;->hasTetherableConfiguration()Z
SPLcom/android/server/connectivity/Tethering;->interfaceAdded(Ljava/lang/String;)V
SPLcom/android/server/connectivity/Tethering;->interfaceLinkStateChanged(Ljava/lang/String;Z)V
SPLcom/android/server/connectivity/Tethering;->interfaceStatusChanged(Ljava/lang/String;Z)V
SPLcom/android/server/connectivity/Tethering;->logMessage(Lcom/android/internal/util/State;I)V
SPLcom/android/server/connectivity/Tethering;->maybeTrackNewInterfaceLocked(Ljava/lang/String;)V
SPLcom/android/server/connectivity/Tethering;->maybeTrackNewInterfaceLocked(Ljava/lang/String;I)V
SPLcom/android/server/connectivity/Tethering;->notifyInterfaceStateChange(Landroid/net/ip/IpServer;II)V
SPLcom/android/server/connectivity/Tethering;->notifyLinkPropertiesChanged(Landroid/net/ip/IpServer;Landroid/net/LinkProperties;)V
SPLcom/android/server/connectivity/Tethering;->sendTetherStateChangedBroadcast()V
SPLcom/android/server/connectivity/Tethering;->startStateMachineUpdaters()V
SPLcom/android/server/connectivity/Tethering;->systemReady()V
SPLcom/android/server/connectivity/Tethering;->updateConfiguration()V
SPLcom/android/server/connectivity/Vpn$SystemServices;->settingsSecureGetIntForUser(Ljava/lang/String;II)I
SPLcom/android/server/connectivity/Vpn$SystemServices;->settingsSecureGetStringForUser(Ljava/lang/String;I)Ljava/lang/String;
SPLcom/android/server/connectivity/Vpn;-><init>(Landroid/os/Looper;Landroid/content/Context;Landroid/os/INetworkManagementService;ILcom/android/server/connectivity/Vpn$SystemServices;)V
SPLcom/android/server/connectivity/Vpn;->appliesToUid(I)Z
SPLcom/android/server/connectivity/Vpn;->doesPackageTargetAtLeastQ(Ljava/lang/String;)Z
SPLcom/android/server/connectivity/Vpn;->getAppUid(Ljava/lang/String;I)I
SPLcom/android/server/connectivity/Vpn;->getVpnInfo()Lcom/android/internal/net/VpnInfo;
SPLcom/android/server/connectivity/Vpn;->loadAlwaysOnPackage()V
SPLcom/android/server/connectivity/Vpn;->setAllowOnlyVpnForUids(ZLjava/util/Collection;)Z
SPLcom/android/server/connectivity/Vpn;->setAlwaysOnPackageInternal(Ljava/lang/String;ZLjava/util/List;)Z
SPLcom/android/server/connectivity/Vpn;->setVpnForcedLocked(Z)V
SPLcom/android/server/connectivity/Vpn;->updateAlwaysOnNotification(Landroid/net/NetworkInfo$DetailedState;)V
SPLcom/android/server/connectivity/Vpn;->updateCapabilities()V
SPLcom/android/server/connectivity/Vpn;->updateCapabilities(Landroid/net/ConnectivityManager;[Landroid/net/Network;Landroid/net/NetworkCapabilities;Z)V
SPLcom/android/server/connectivity/Vpn;->updateCapabilities(Landroid/net/Network;)Landroid/net/NetworkCapabilities;
SPLcom/android/server/connectivity/tethering/-$$Lambda$OffloadController$OffloadTetheringStatsProvider$3TF0NI3fE8A-xW0925oMv3YzAOk;->run()V
SPLcom/android/server/connectivity/tethering/EntitlementManager;-><init>(Landroid/content/Context;Lcom/android/internal/util/StateMachine;Landroid/net/util/SharedLog;Lcom/android/server/connectivity/MockableSystemProperties;)V
SPLcom/android/server/connectivity/tethering/EntitlementManager;->updateConfiguration(Lcom/android/server/connectivity/tethering/TetheringConfiguration;)V
SPLcom/android/server/connectivity/tethering/IPv6TetheringCoordinator;->findDownstream(Landroid/net/ip/IpServer;)Lcom/android/server/connectivity/tethering/IPv6TetheringCoordinator$Downstream;
SPLcom/android/server/connectivity/tethering/IPv6TetheringCoordinator;->removeActiveDownstream(Landroid/net/ip/IpServer;)V
SPLcom/android/server/connectivity/tethering/OffloadController$OffloadTetheringStatsProvider;->getTetherStats(I)Landroid/net/NetworkStats;
SPLcom/android/server/connectivity/tethering/OffloadController$OffloadTetheringStatsProvider;->lambda$getTetherStats$0$OffloadController$OffloadTetheringStatsProvider()V
SPLcom/android/server/connectivity/tethering/OffloadController;-><init>(Landroid/os/Handler;Lcom/android/server/connectivity/tethering/OffloadHardwareInterface;Landroid/content/ContentResolver;Landroid/os/INetworkManagementService;Landroid/net/util/SharedLog;)V
SPLcom/android/server/connectivity/tethering/OffloadController;->removeDownstreamInterface(Ljava/lang/String;)V
SPLcom/android/server/connectivity/tethering/OffloadController;->setLocalPrefixes(Ljava/util/Set;)V
SPLcom/android/server/connectivity/tethering/OffloadHardwareInterface$ForwardedStats;-><init>()V
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;-><init>(Landroid/content/Context;Landroid/net/util/SharedLog;)V
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;-><init>(Landroid/content/Context;Landroid/net/util/SharedLog;I)V
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->dunCheckString(I)Ljava/lang/String;
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->getProvisioningAppNoUi(Landroid/content/Context;)Ljava/lang/String;
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->getProvisioningAppNoUi(Landroid/content/res/Resources;)Ljava/lang/String;
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->getResourceBoolean(Landroid/content/Context;I)Z
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->getResourceBoolean(Landroid/content/res/Resources;I)Z
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->getResourceStringArray(Landroid/content/Context;I)[Ljava/lang/String;
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->getResourceStringArray(Landroid/content/res/Resources;I)[Ljava/lang/String;
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->getUpstreamIfaceTypes(Landroid/content/Context;I)Ljava/util/Collection;
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->getUpstreamIfaceTypes(Landroid/content/res/Resources;I)Ljava/util/Collection;
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->isBluetooth(Ljava/lang/String;)Z
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->isUsb(Ljava/lang/String;)Z
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->isWifi(Ljava/lang/String;)Z
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->makeString([Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->preferredUpstreamNames(Ljava/util/Collection;)[Ljava/lang/String;
SPLcom/android/server/connectivity/tethering/TetheringConfiguration;->toString()Ljava/lang/String;
SPLcom/android/server/connectivity/tethering/TetheringDependencies;->getDefaultDataSubscriptionId()I
SPLcom/android/server/connectivity/tethering/TetheringDependencies;->getEntitlementManager(Landroid/content/Context;Lcom/android/internal/util/StateMachine;Landroid/net/util/SharedLog;Lcom/android/server/connectivity/MockableSystemProperties;)Lcom/android/server/connectivity/tethering/EntitlementManager;
SPLcom/android/server/connectivity/tethering/TetheringDependencies;->getIPv6TetheringCoordinator(Ljava/util/ArrayList;Landroid/net/util/SharedLog;)Lcom/android/server/connectivity/tethering/IPv6TetheringCoordinator;
SPLcom/android/server/connectivity/tethering/TetheringDependencies;->getIpServerDependencies()Landroid/net/ip/IpServer$Dependencies;
SPLcom/android/server/connectivity/tethering/TetheringDependencies;->getIpServerDependencies(Landroid/content/Context;)Landroid/net/ip/IpServer$Dependencies;
SPLcom/android/server/connectivity/tethering/TetheringDependencies;->getOffloadHardwareInterface(Landroid/os/Handler;Landroid/net/util/SharedLog;)Lcom/android/server/connectivity/tethering/OffloadHardwareInterface;
SPLcom/android/server/connectivity/tethering/TetheringDependencies;->getUpstreamNetworkMonitor(Landroid/content/Context;Lcom/android/internal/util/StateMachine;Landroid/net/util/SharedLog;I)Lcom/android/server/connectivity/tethering/UpstreamNetworkMonitor;
SPLcom/android/server/connectivity/tethering/UpstreamNetworkMonitor;-><init>(Landroid/content/Context;Lcom/android/internal/util/StateMachine;Landroid/net/util/SharedLog;I)V
SPLcom/android/server/connectivity/tethering/UpstreamNetworkMonitor;->getLocalPrefixes()Ljava/util/Set;
SPLcom/android/server/connectivity/tethering/UpstreamNetworkMonitor;->startTrackDefaultNetwork(Landroid/net/NetworkRequest;)V
SPLcom/android/server/connectivity/tethering/UpstreamNetworkMonitor;->updateMobileRequiresDun(Z)V
SPLcom/android/server/content/-$$Lambda$SyncManager$68MEyNkTh36YmYoFlURJoRa_-cY;-><init>()V
SPLcom/android/server/content/-$$Lambda$SyncManager$CjX_2uO4O4xJPQnKzeqvGwd87Dc;->run()V
SPLcom/android/server/content/-$$Lambda$SyncManager$bVs0A6OYdmGkOiq_lbp5MiBwelw;-><init>()V
SPLcom/android/server/content/-$$Lambda$SyncManagerConstants$qo5ldQVp10jCUY9aavBZDKP2k6Q;->run()V
SPLcom/android/server/content/ContentService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/content/ContentService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/content/ContentService$Lifecycle;->onStart()V
SPLcom/android/server/content/ContentService$Lifecycle;->onStartUser(I)V
SPLcom/android/server/content/ContentService$ObserverNode;->collectMyObserversLocked(ZLandroid/database/IContentObserver;ZIILjava/util/ArrayList;)V
SPLcom/android/server/content/ContentService;-><init>(Landroid/content/Context;Z)V
SPLcom/android/server/content/ContentService;->checkUriPermission(Landroid/net/Uri;IIII)I
SPLcom/android/server/content/ContentService;->getSyncAdapterPackagesForAuthorityAsUser(Ljava/lang/String;I)[Ljava/lang/String;
SPLcom/android/server/content/ContentService;->getSyncExemptionAndCleanUpExtrasForCaller(ILandroid/os/Bundle;)I
SPLcom/android/server/content/ContentService;->getSyncManager()Lcom/android/server/content/SyncManager;
SPLcom/android/server/content/ContentService;->invalidateCacheLocked(ILjava/lang/String;Landroid/net/Uri;)V
SPLcom/android/server/content/ContentService;->notifyChange(Landroid/net/Uri;Landroid/database/IContentObserver;ZIIILjava/lang/String;)V
SPLcom/android/server/content/ContentService;->unregisterContentObserver(Landroid/database/IContentObserver;)V
SPLcom/android/server/content/SyncLogger$RotatingFileLogger$MyHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/content/SyncLogger$RotatingFileLogger$MyHandler;->log(J[Ljava/lang/Object;)V
SPLcom/android/server/content/SyncLogger$RotatingFileLogger;-><init>()V
SPLcom/android/server/content/SyncLogger$RotatingFileLogger;->enabled()Z
SPLcom/android/server/content/SyncLogger$RotatingFileLogger;->log([Ljava/lang/Object;)V
SPLcom/android/server/content/SyncLogger$RotatingFileLogger;->openLogLocked(J)V
SPLcom/android/server/content/SyncLogger;->getInstance()Lcom/android/server/content/SyncLogger;
SPLcom/android/server/content/SyncManager$5;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/content/SyncManager;-><init>(Landroid/content/Context;Z)V
SPLcom/android/server/content/SyncManager;->getSyncAdapterPackagesForAuthorityAsUser(Ljava/lang/String;I)[Ljava/lang/String;
SPLcom/android/server/content/SyncManager;->lambda$onStartUser$1$SyncManager(I)V
SPLcom/android/server/content/SyncManager;->onBootPhase(I)V
SPLcom/android/server/content/SyncManager;->onStartUser(I)V
SPLcom/android/server/content/SyncManager;->scheduleLocalSync(Landroid/accounts/Account;IILjava/lang/String;IIILjava/lang/String;)V
SPLcom/android/server/content/SyncManager;->scheduleSync(Landroid/accounts/Account;IILjava/lang/String;Landroid/os/Bundle;IJZIIILjava/lang/String;)V
SPLcom/android/server/content/SyncManager;->whiteListExistingSyncAdaptersIfNeeded()V
SPLcom/android/server/content/SyncManagerConstants;-><init>(Landroid/content/Context;)V
SPLcom/android/server/content/SyncManagerConstants;->lambda$start$0$SyncManagerConstants()V
SPLcom/android/server/content/SyncManagerConstants;->refresh()V
SPLcom/android/server/content/SyncManagerConstants;->start()V
SPLcom/android/server/content/SyncStorageEngine$AccountAuthorityValidator;-><init>(Landroid/content/Context;)V
SPLcom/android/server/content/SyncStorageEngine$AccountAuthorityValidator;->isAccountValid(Landroid/accounts/Account;I)Z
SPLcom/android/server/content/SyncStorageEngine$AccountAuthorityValidator;->isAuthorityValid(Ljava/lang/String;I)Z
SPLcom/android/server/content/SyncStorageEngine$AuthorityInfo;->defaultInitialisation()V
SPLcom/android/server/content/SyncStorageEngine$AuthorityInfo;->toString()Ljava/lang/String;
SPLcom/android/server/content/SyncStorageEngine$EndPoint;-><init>(Landroid/accounts/Account;Ljava/lang/String;I)V
SPLcom/android/server/content/SyncStorageEngine$EndPoint;->toString()Ljava/lang/String;
SPLcom/android/server/content/SyncStorageEngine;-><init>(Landroid/content/Context;Ljava/io/File;Landroid/os/Looper;)V
SPLcom/android/server/content/SyncStorageEngine;->createAuthorityLocked(Lcom/android/server/content/SyncStorageEngine$EndPoint;IZ)Lcom/android/server/content/SyncStorageEngine$AuthorityInfo;
SPLcom/android/server/content/SyncStorageEngine;->getOrCreateAuthorityLocked(Lcom/android/server/content/SyncStorageEngine$EndPoint;IZ)Lcom/android/server/content/SyncStorageEngine$AuthorityInfo;
SPLcom/android/server/content/SyncStorageEngine;->maybeMigrateSettingsForRenamedAuthorities()Z
SPLcom/android/server/content/SyncStorageEngine;->parseAuthority(Lorg/xmlpull/v1/XmlPullParser;ILcom/android/server/content/SyncStorageEngine$AccountAuthorityValidator;)Lcom/android/server/content/SyncStorageEngine$AuthorityInfo;
SPLcom/android/server/content/SyncStorageEngine;->parseListenForTickles(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/content/SyncStorageEngine;->readStatisticsLocked()V
SPLcom/android/server/content/SyncStorageEngine;->readStatusLocked()V
SPLcom/android/server/content/SyncStorageEngine;->setClockValid()V
SPLcom/android/server/content/SyncStorageEngine;->setOnAuthorityRemovedListener(Lcom/android/server/content/SyncStorageEngine$OnAuthorityRemovedListener;)V
SPLcom/android/server/content/SyncStorageEngine;->setOnSyncRequestListener(Lcom/android/server/content/SyncStorageEngine$OnSyncRequestListener;)V
SPLcom/android/server/content/SyncStorageEngine;->setPeriodicSyncAddedListener(Lcom/android/server/content/SyncStorageEngine$PeriodicSyncAddedListener;)V
SPLcom/android/server/content/SyncStorageEngine;->shouldGrantSyncAdaptersAccountAccess()Z
SPLcom/android/server/contentcapture/ContentCaptureManagerService$LocalService;->getOptionsForPackage(ILjava/lang/String;)Landroid/content/ContentCaptureOptions;
SPLcom/android/server/contentcapture/ContentCaptureManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/contentcapture/ContentCaptureManagerService;->isDisabledBySettings(I)Z
SPLcom/android/server/contentcapture/ContentCaptureManagerService;->isDisabledLocked(I)Z
SPLcom/android/server/contentcapture/ContentCaptureManagerService;->newServiceLocked(IZ)Lcom/android/server/infra/AbstractPerUserSystemService;
SPLcom/android/server/contentcapture/ContentCaptureManagerService;->onServiceRemoved(Lcom/android/server/infra/AbstractPerUserSystemService;I)V
SPLcom/android/server/contentcapture/ContentCaptureManagerService;->onStart()V
SPLcom/android/server/contentcapture/ContentCaptureManagerService;->registerForExtraSettingsChanges(Landroid/content/ContentResolver;Landroid/database/ContentObserver;)V
SPLcom/android/server/contentcapture/ContentCaptureManagerService;->setDisabledByDeviceConfig(Ljava/lang/String;)V
SPLcom/android/server/contentcapture/ContentCaptureManagerService;->setFineTuneParamsFromDeviceConfig()V
SPLcom/android/server/contentcapture/ContentCaptureManagerService;->setLoggingLevelFromDeviceConfig()V
SPLcom/android/server/contentcapture/ContentCapturePerUserService;->updateLocked(Z)Z
SPLcom/android/server/contentcapture/ContentCapturePerUserService;->updateRemoteServiceLocked(Z)V
SPLcom/android/server/contentsuggestions/ContentSuggestionsManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/contentsuggestions/ContentSuggestionsManagerService;->newServiceLocked(IZ)Lcom/android/server/contentsuggestions/ContentSuggestionsPerUserService;
SPLcom/android/server/contentsuggestions/ContentSuggestionsManagerService;->newServiceLocked(IZ)Lcom/android/server/infra/AbstractPerUserSystemService;
SPLcom/android/server/contentsuggestions/ContentSuggestionsManagerService;->onStart()V
SPLcom/android/server/contentsuggestions/ContentSuggestionsPerUserService;->updateLocked(Z)Z
SPLcom/android/server/devicepolicy/-$$Lambda$DevicePolicyManagerService$_Nw-YGl5ncBg-LJs8W81WNW6xoU;->run()V
SPLcom/android/server/devicepolicy/CertificateMonitor$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/devicepolicy/CertificateMonitor;-><init>(Lcom/android/server/devicepolicy/DevicePolicyManagerService;Lcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;Landroid/os/Handler;)V
SPLcom/android/server/devicepolicy/CertificateMonitor;->updateInstalledCertificates(Landroid/os/UserHandle;)V
SPLcom/android/server/devicepolicy/DeviceAdminServiceController;-><init>(Lcom/android/server/devicepolicy/DevicePolicyManagerService;Lcom/android/server/devicepolicy/DevicePolicyConstants;)V
SPLcom/android/server/devicepolicy/DevicePolicyCacheImpl;->getScreenCaptureDisabled(I)Z
SPLcom/android/server/devicepolicy/DevicePolicyCacheImpl;->setScreenCaptureDisabled(IZ)V
SPLcom/android/server/devicepolicy/DevicePolicyConstants;-><init>(Ljava/lang/String;)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$4;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$4;->sendDeviceOwnerUserCommand(Ljava/lang/String;I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$8;->run()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;-><init>(Landroid/app/admin/DeviceAdminInfo;Z)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;->getParentActiveAdmin()Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;->getUid()I
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;->getUserHandle()Landroid/os/UserHandle;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;->hasParentActiveAdmin()Z
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;->readFromXml(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;->readPackageList(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;)Ljava/util/List;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$DevicePolicyConstantsObserver;->register()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$DevicePolicyData;-><init>(I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->binderClearCallingIdentity()J
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->binderGetCallingUid()I
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->binderRestoreCallingIdentity(J)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->environmentGetUserSystemDirectory(I)Ljava/io/File;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getActivityTaskManagerInternal()Lcom/android/server/wm/ActivityTaskManagerInternal;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getDevicePolicyFilePathForSystemUser()Ljava/lang/String;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getIActivityManager()Landroid/app/IActivityManager;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getIActivityTaskManager()Landroid/app/IActivityTaskManager;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getIPackageManager()Landroid/content/pm/IPackageManager;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getIWindowManager()Landroid/view/IWindowManager;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getMyLooper()Landroid/os/Looper;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getNetworkPolicyManagerInternal()Lcom/android/server/net/NetworkPolicyManagerInternal;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getPackageManager()Landroid/content/pm/PackageManager;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getPackageManagerInternal()Landroid/content/pm/PackageManagerInternal;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getPowerManagerInternal()Landroid/os/PowerManagerInternal;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getTelephonyManager()Landroid/telephony/TelephonyManager;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getUsageStatsManagerInternal()Landroid/app/usage/UsageStatsManagerInternal;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getUserManager()Landroid/os/UserManager;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->getUserManagerInternal()Landroid/os/UserManagerInternal;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->hasFeature()Z
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->newLockPatternUtils()Lcom/android/internal/widget/LockPatternUtils;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->newOwners()Lcom/android/server/devicepolicy/Owners;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->newTransferOwnershipMetadataManager()Lcom/android/server/devicepolicy/TransferOwnershipMetadataManager;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->postOnSystemServerInitThreadPool(Ljava/lang/Runnable;)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->registerContentObserver(Landroid/net/Uri;ZLandroid/database/ContentObserver;I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->securityLogIsLoggingEnabled()Z
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->settingsGlobalGetInt(Ljava/lang/String;I)I
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->settingsGlobalGetString(Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->settingsGlobalPutInt(Ljava/lang/String;I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->settingsSecureGetIntForUser(Ljava/lang/String;II)I
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->systemPropertiesGet(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;->systemPropertiesSet(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Lifecycle;->onStart()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$Lifecycle;->onStartUser(I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$LocalService;->addOnCrossProfileWidgetProvidersChangeListener(Landroid/app/admin/DevicePolicyManagerInternal$OnCrossProfileWidgetProvidersChangeListener;)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$LocalService;->getDevicePolicyCache()Landroid/app/admin/DevicePolicyCache;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$RestrictionsListener;->onUserRestrictionsChanged(ILandroid/os/Bundle;Landroid/os/Bundle;)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$SetupContentObserver;-><init>(Lcom/android/server/devicepolicy/DevicePolicyManagerService;Landroid/os/Handler;)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService$SetupContentObserver;->register()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;-><init>(Lcom/android/server/devicepolicy/DevicePolicyManagerService$Injector;)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->cleanUpOldUsers()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->enforceDeviceOwnerOrManageUsers()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->enforceSystemUserOrPermission(Ljava/lang/String;)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->enforceSystemUserOrPermissionIfCrossUser(ILjava/lang/String;)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->ensureUnknownSourcesRestrictionForProfileOwnerLocked(ILcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;Z)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->findAdmin(Landroid/content/ComponentName;IZ)Landroid/app/admin/DeviceAdminInfo;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->findOwnerComponentIfNecessaryLocked()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getActiveAdminPackagesLocked(I)Ljava/util/Set;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getActiveAdminUncheckedLocked(Landroid/content/ComponentName;I)Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getActiveAdminWithPolicyForUidLocked(Landroid/content/ComponentName;II)Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getActiveAdminsForLockscreenPoliciesLocked(IZ)Ljava/util/List;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getCameraDisabled(Landroid/content/ComponentName;I)Z
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getCameraDisabled(Landroid/content/ComponentName;IZ)Z
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getDeviceOwnerAdminLocked()Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getDeviceOwnerComponent(Z)Landroid/content/ComponentName;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getKeyguardDisabledFeatures(Landroid/content/ComponentName;IZ)I
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getMaximumTimeToLockPolicyFromAdmins(Ljava/util/List;)J
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getOwnerComponent(I)Landroid/content/ComponentName;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getProfileOwner(I)Landroid/content/ComponentName;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getProfileOwnerAdminLocked(I)Lcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getProfileOwnerAsUser(I)Landroid/content/ComponentName;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getProfileParentId(I)I
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getScreenCaptureDisabled(Landroid/content/ComponentName;I)Z
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getUserData(I)Lcom/android/server/devicepolicy/DevicePolicyManagerService$DevicePolicyData;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getUserDataUnchecked(I)Lcom/android/server/devicepolicy/DevicePolicyManagerService$DevicePolicyData;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->getUserInfo(I)Landroid/content/pm/UserInfo;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->handlePackagesChanged(Ljava/lang/String;I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->handleStartUser(I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->hasDeviceOwner()Z
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->isLogoutEnabled()Z
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->isSeparateProfileChallengeEnabled(I)Z
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->lambda$loadAdminDataAsync$0$DevicePolicyManagerService()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->loadOwners()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->loadSettingsLocked(Lcom/android/server/devicepolicy/DevicePolicyManagerService$DevicePolicyData;I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->makeJournaledFile(I)Lcom/android/internal/util/JournaledFile;
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->maybeLogStart()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->maybeSendAdminEnabledBroadcastLocked(I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->maybeSetDefaultProfileOwnerUserRestrictions()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->maybeSetDefaultRestrictionsForAdminLocked(ILcom/android/server/devicepolicy/DevicePolicyManagerService$ActiveAdmin;Ljava/util/Set;)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->maybeStartSecurityLogMonitorOnActivityManagerReady()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->migrateUserRestrictionsIfNecessaryLocked()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->onLockSettingsReady()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->packageHasActiveAdmins(Ljava/lang/String;I)Z
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->pushActiveAdminPackages()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->pushAllMeteredRestrictedPackages()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->pushUserRestrictions(I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->revertTransferOwnershipIfNecessaryLocked()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->setDeviceOwnerSystemPropertyLocked()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->systemReady(I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->updateDeviceOwnerLocked()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->updateLockTaskFeaturesLocked(II)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->updateLockTaskPackagesLocked(Ljava/util/List;I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->updateMaximumTimeToLockLocked(I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->updateProfileLockTimeoutLocked(I)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->updateSystemUpdateFreezePeriodsRecord(Z)V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->updateUserSetupCompleteAndPaired()V
SPLcom/android/server/devicepolicy/DevicePolicyManagerService;->validatePasswordOwnerLocked(Lcom/android/server/devicepolicy/DevicePolicyManagerService$DevicePolicyData;)V
SPLcom/android/server/devicepolicy/Owners$DeviceOwnerReadWriter;->readInner(Lorg/xmlpull/v1/XmlPullParser;ILjava/lang/String;)Z
SPLcom/android/server/devicepolicy/Owners$FileReadWriter;->readFromFileLocked()V
SPLcom/android/server/devicepolicy/Owners$Injector;->environmentGetDataSystemDirectory()Ljava/io/File;
SPLcom/android/server/devicepolicy/Owners$Injector;->environmentGetUserSystemDirectory(I)Ljava/io/File;
SPLcom/android/server/devicepolicy/Owners$OwnerInfo;->readFromXml(Lorg/xmlpull/v1/XmlPullParser;)Lcom/android/server/devicepolicy/Owners$OwnerInfo;
SPLcom/android/server/devicepolicy/Owners$ProfileOwnerReadWriter;->readInner(Lorg/xmlpull/v1/XmlPullParser;ILjava/lang/String;)Z
SPLcom/android/server/devicepolicy/Owners;->getDeviceOwnerComponent()Landroid/content/ComponentName;
SPLcom/android/server/devicepolicy/Owners;->getDeviceOwnerFile()Ljava/io/File;
SPLcom/android/server/devicepolicy/Owners;->getDeviceOwnerUserId()I
SPLcom/android/server/devicepolicy/Owners;->getDeviceOwnerUserRestrictionsNeedsMigration()Z
SPLcom/android/server/devicepolicy/Owners;->getLegacyConfigFile()Ljava/io/File;
SPLcom/android/server/devicepolicy/Owners;->getProfileOwnerComponent(I)Landroid/content/ComponentName;
SPLcom/android/server/devicepolicy/Owners;->getProfileOwnerFile(I)Ljava/io/File;
SPLcom/android/server/devicepolicy/Owners;->getProfileOwnerKeys()Ljava/util/Set;
SPLcom/android/server/devicepolicy/Owners;->getProfileOwnerUserRestrictionsNeedsMigration(I)Z
SPLcom/android/server/devicepolicy/Owners;->getSystemUpdatePolicy()Landroid/app/admin/SystemUpdatePolicy;
SPLcom/android/server/devicepolicy/Owners;->hasDeviceOwner()Z
SPLcom/android/server/devicepolicy/Owners;->hasProfileOwner(I)Z
SPLcom/android/server/devicepolicy/Owners;->isDeviceOwnerUserId(I)Z
SPLcom/android/server/devicepolicy/Owners;->load()V
SPLcom/android/server/devicepolicy/Owners;->pushToAppOpsLocked()V
SPLcom/android/server/devicepolicy/Owners;->pushToPackageManagerLocked()V
SPLcom/android/server/devicepolicy/Owners;->readLegacyOwnerFileLocked(Ljava/io/File;)Z
SPLcom/android/server/devicepolicy/Owners;->systemReady()V
SPLcom/android/server/devicepolicy/SecurityLogMonitor;-><init>(Lcom/android/server/devicepolicy/DevicePolicyManagerService;J)V
SPLcom/android/server/devicepolicy/TransferOwnershipMetadataManager$Injector;->getOwnerTransferMetadataDir()Ljava/io/File;
SPLcom/android/server/devicepolicy/TransferOwnershipMetadataManager;->metadataFileExists()Z
SPLcom/android/server/display/-$$Lambda$AmbientBrightnessStatsTracker$vQZYn_dAhbvzT-Un4vvpuyIATII;->elapsedTimeMillis()J
SPLcom/android/server/display/-$$Lambda$VirtualDisplayAdapter$PFyqe-aYIEBicSVtuy5lL_bT8B0;-><init>()V
SPLcom/android/server/display/AmbientBrightnessStatsTracker$AmbientBrightnessStats;->getOrCreateDayStats(Ljava/util/Deque;Ljava/time/LocalDate;)Landroid/hardware/display/AmbientBrightnessDayStats;
SPLcom/android/server/display/AmbientBrightnessStatsTracker$AmbientBrightnessStats;->getOrCreateUserStats(Ljava/util/Map;I)Ljava/util/Deque;
SPLcom/android/server/display/AmbientBrightnessStatsTracker$AmbientBrightnessStats;->log(ILjava/time/LocalDate;FF)V
SPLcom/android/server/display/AmbientBrightnessStatsTracker$AmbientBrightnessStats;->readFromXML(Ljava/io/InputStream;)V
SPLcom/android/server/display/AmbientBrightnessStatsTracker$Injector;->elapsedRealtimeMillis()J
SPLcom/android/server/display/AmbientBrightnessStatsTracker$Injector;->getLocalDate()Ljava/time/LocalDate;
SPLcom/android/server/display/AmbientBrightnessStatsTracker$Injector;->getUserId(Landroid/os/UserManager;I)I
SPLcom/android/server/display/AmbientBrightnessStatsTracker$Timer;->isRunning()Z
SPLcom/android/server/display/AmbientBrightnessStatsTracker$Timer;->reset()V
SPLcom/android/server/display/AmbientBrightnessStatsTracker$Timer;->start()V
SPLcom/android/server/display/AmbientBrightnessStatsTracker$Timer;->totalDurationSec()F
SPLcom/android/server/display/AmbientBrightnessStatsTracker;-><init>(Landroid/os/UserManager;Lcom/android/server/display/AmbientBrightnessStatsTracker$Injector;)V
SPLcom/android/server/display/AmbientBrightnessStatsTracker;->add(IF)V
SPLcom/android/server/display/AmbientBrightnessStatsTracker;->lambda$new$0$AmbientBrightnessStatsTracker()J
SPLcom/android/server/display/AmbientBrightnessStatsTracker;->readStats(Ljava/io/InputStream;)V
SPLcom/android/server/display/AmbientBrightnessStatsTracker;->start()V
SPLcom/android/server/display/AppSaturationController;->addColorTransformController(Ljava/lang/String;ILjava/lang/ref/WeakReference;)Z
SPLcom/android/server/display/AutomaticBrightnessController$2;-><init>(Lcom/android/server/display/AutomaticBrightnessController;)V
SPLcom/android/server/display/AutomaticBrightnessController$AmbientLightRingBuffer;-><init>(JI)V
SPLcom/android/server/display/AutomaticBrightnessController$AutomaticBrightnessHandler;-><init>(Lcom/android/server/display/AutomaticBrightnessController;Landroid/os/Looper;)V
SPLcom/android/server/display/AutomaticBrightnessController$TaskStackListenerImpl;-><init>(Lcom/android/server/display/AutomaticBrightnessController;)V
SPLcom/android/server/display/AutomaticBrightnessController;-><init>(Lcom/android/server/display/AutomaticBrightnessController$Callbacks;Landroid/os/Looper;Landroid/hardware/SensorManager;Lcom/android/server/display/BrightnessMappingStrategy;IIIFIIJJZLcom/android/server/display/HysteresisLevels;Lcom/android/server/display/HysteresisLevels;JLandroid/content/pm/PackageManager;)V
SPLcom/android/server/display/AutomaticBrightnessController;->configure(ZLandroid/hardware/display/BrightnessConfiguration;FZFZI)V
SPLcom/android/server/display/AutomaticBrightnessController;->hasUserDataPoints()Z
SPLcom/android/server/display/AutomaticBrightnessController;->resetShortTermModel()V
SPLcom/android/server/display/AutomaticBrightnessController;->setBrightnessConfiguration(Landroid/hardware/display/BrightnessConfiguration;)Z
SPLcom/android/server/display/AutomaticBrightnessController;->setDisplayPolicy(I)Z
SPLcom/android/server/display/AutomaticBrightnessController;->setLightSensorEnabled(Z)Z
SPLcom/android/server/display/AutomaticBrightnessController;->updateAutoBrightness(Z)V
SPLcom/android/server/display/BrightnessIdleJob;->scheduleJob(Landroid/content/Context;)V
SPLcom/android/server/display/BrightnessMappingStrategy$PhysicalMappingStrategy;->clearUserDataPoints()V
SPLcom/android/server/display/BrightnessMappingStrategy$PhysicalMappingStrategy;->computeSpline()V
SPLcom/android/server/display/BrightnessMappingStrategy$PhysicalMappingStrategy;->convertToNits(I)F
SPLcom/android/server/display/BrightnessMappingStrategy$PhysicalMappingStrategy;->hasUserDataPoints()Z
SPLcom/android/server/display/BrightnessMappingStrategy$PhysicalMappingStrategy;->setBrightnessConfiguration(Landroid/hardware/display/BrightnessConfiguration;)Z
SPLcom/android/server/display/BrightnessMappingStrategy;->getAdjustedCurve([F[FFFFF)Landroid/util/Pair;
SPLcom/android/server/display/BrightnessMappingStrategy;->isValidMapping([F[F)Z
SPLcom/android/server/display/BrightnessMappingStrategy;->isValidMapping([F[I)Z
SPLcom/android/server/display/BrightnessTracker$DisplayListener;->onDisplayChanged(I)V
SPLcom/android/server/display/BrightnessTracker$Injector;->currentTimeMillis()J
SPLcom/android/server/display/BrightnessTracker$Injector;->elapsedRealtimeNanos()J
SPLcom/android/server/display/BrightnessTracker$Injector;->enableColorSampling(ZI)Z
SPLcom/android/server/display/BrightnessTracker$Injector;->getBackgroundHandler()Landroid/os/Handler;
SPLcom/android/server/display/BrightnessTracker$Injector;->getFile(Ljava/lang/String;)Landroid/util/AtomicFile;
SPLcom/android/server/display/BrightnessTracker$Injector;->getFrameRate(Landroid/content/Context;)F
SPLcom/android/server/display/BrightnessTracker$Injector;->getSamplingAttributes()Landroid/hardware/display/DisplayedContentSamplingAttributes;
SPLcom/android/server/display/BrightnessTracker$Injector;->getUserId(Landroid/os/UserManager;I)I
SPLcom/android/server/display/BrightnessTracker$Injector;->isBrightnessModeAutomatic(Landroid/content/ContentResolver;)Z
SPLcom/android/server/display/BrightnessTracker$Injector;->isInteractive(Landroid/content/Context;)Z
SPLcom/android/server/display/BrightnessTracker$Injector;->registerBrightnessModeObserver(Landroid/content/ContentResolver;Landroid/database/ContentObserver;)V
SPLcom/android/server/display/BrightnessTracker$Injector;->registerDisplayListener(Landroid/content/Context;Landroid/hardware/display/DisplayManager$DisplayListener;Landroid/os/Handler;)V
SPLcom/android/server/display/BrightnessTracker$Injector;->registerReceiver(Landroid/content/Context;Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)V
SPLcom/android/server/display/BrightnessTracker$Injector;->registerSensorListener(Landroid/content/Context;Landroid/hardware/SensorEventListener;Landroid/os/Handler;)V
SPLcom/android/server/display/BrightnessTracker$Injector;->scheduleIdleJob(Landroid/content/Context;)V
SPLcom/android/server/display/BrightnessTracker$Receiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/display/BrightnessTracker$SensorListener;->onAccuracyChanged(Landroid/hardware/Sensor;I)V
SPLcom/android/server/display/BrightnessTracker$SensorListener;->onSensorChanged(Landroid/hardware/SensorEvent;)V
SPLcom/android/server/display/BrightnessTracker$TrackerHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/display/BrightnessTracker;-><init>(Landroid/content/Context;Lcom/android/server/display/BrightnessTracker$Injector;)V
SPLcom/android/server/display/BrightnessTracker;->backgroundStart(F)V
SPLcom/android/server/display/BrightnessTracker;->batteryLevelChanged(II)V
SPLcom/android/server/display/BrightnessTracker;->enableColorSampling()V
SPLcom/android/server/display/BrightnessTracker;->readAmbientBrightnessStats()V
SPLcom/android/server/display/BrightnessTracker;->readEvents()V
SPLcom/android/server/display/BrightnessTracker;->recordSensorEvent(Landroid/hardware/SensorEvent;)V
SPLcom/android/server/display/BrightnessTracker;->start(F)V
SPLcom/android/server/display/BrightnessTracker;->startSensorListener()V
SPLcom/android/server/display/ColorDisplayService$1;-><init>(Lcom/android/server/display/ColorDisplayService;)V
SPLcom/android/server/display/ColorDisplayService$ColorDisplayServiceInternal;->attachColorTransformController(Ljava/lang/String;ILjava/lang/ref/WeakReference;)Z
SPLcom/android/server/display/ColorDisplayService$ColorMatrixEvaluator;-><init>(Lcom/android/server/display/ColorDisplayService$1;)V
SPLcom/android/server/display/ColorDisplayService$TintController;->isActivated()Z
SPLcom/android/server/display/ColorDisplayService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/display/ColorDisplayService;->onBootPhase(I)V
SPLcom/android/server/display/ColorDisplayService;->onStart()V
SPLcom/android/server/display/ColorDisplayService;->onStartUser(I)V
SPLcom/android/server/display/ColorDisplayService;->onUserChanged(I)V
SPLcom/android/server/display/ColorFade;-><init>(I)V
SPLcom/android/server/display/DisplayAdapter$1;->run()V
SPLcom/android/server/display/DisplayAdapter$2;->run()V
SPLcom/android/server/display/DisplayDevice;->performTraversalLocked(Landroid/view/SurfaceControl$Transaction;)V
SPLcom/android/server/display/DisplayDevice;->populateViewportLocked(Landroid/hardware/display/DisplayViewport;)V
SPLcom/android/server/display/DisplayDevice;->setProjectionLocked(Landroid/view/SurfaceControl$Transaction;ILandroid/graphics/Rect;Landroid/graphics/Rect;)V
SPLcom/android/server/display/DisplayDeviceInfo;->diff(Lcom/android/server/display/DisplayDeviceInfo;)I
SPLcom/android/server/display/DisplayDeviceInfo;->equals(Ljava/lang/Object;)Z
SPLcom/android/server/display/DisplayDeviceInfo;->flagsToString(I)Ljava/lang/String;
SPLcom/android/server/display/DisplayDeviceInfo;->toString()Ljava/lang/String;
SPLcom/android/server/display/DisplayManagerService$BinderService;->getDisplayIds()[I
SPLcom/android/server/display/DisplayManagerService$BinderService;->getPreferredWideGamutColorSpaceId()I
SPLcom/android/server/display/DisplayManagerService$BinderService;->getWifiDisplayStatus()Landroid/hardware/display/WifiDisplayStatus;
SPLcom/android/server/display/DisplayManagerService$BinderService;->registerCallback(Landroid/hardware/display/IDisplayManagerCallback;)V
SPLcom/android/server/display/DisplayManagerService$CallbackRecord;->notifyDisplayEventAsync(II)V
SPLcom/android/server/display/DisplayManagerService$DisplayAdapterListener;->onDisplayDeviceEvent(Lcom/android/server/display/DisplayDevice;I)V
SPLcom/android/server/display/DisplayManagerService$DisplayAdapterListener;->onTraversalRequested()V
SPLcom/android/server/display/DisplayManagerService$DisplayManagerHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/display/DisplayManagerService$Injector;->getDefaultDisplayDelayTimeout()J
SPLcom/android/server/display/DisplayManagerService$Injector;->getVirtualDisplayAdapter(Lcom/android/server/display/DisplayManagerService$SyncRoot;Landroid/content/Context;Landroid/os/Handler;Lcom/android/server/display/DisplayAdapter$Listener;)Lcom/android/server/display/VirtualDisplayAdapter;
SPLcom/android/server/display/DisplayManagerService$LocalService$1;->requestDisplayState(II)V
SPLcom/android/server/display/DisplayManagerService$LocalService;->getDisplayInfo(I)Landroid/view/DisplayInfo;
SPLcom/android/server/display/DisplayManagerService$LocalService;->getDisplayedContentSamplingAttributes(I)Landroid/hardware/display/DisplayedContentSamplingAttributes;
SPLcom/android/server/display/DisplayManagerService$LocalService;->getNonOverrideDisplayInfo(ILandroid/view/DisplayInfo;)V
SPLcom/android/server/display/DisplayManagerService$LocalService;->initPowerManagement(Landroid/hardware/display/DisplayManagerInternal$DisplayPowerCallbacks;Landroid/os/Handler;Landroid/hardware/SensorManager;)V
SPLcom/android/server/display/DisplayManagerService$LocalService;->isProximitySensorAvailable()Z
SPLcom/android/server/display/DisplayManagerService$LocalService;->onOverlayChanged()V
SPLcom/android/server/display/DisplayManagerService$LocalService;->performTraversal(Landroid/view/SurfaceControl$Transaction;)V
SPLcom/android/server/display/DisplayManagerService$LocalService;->requestPowerState(Landroid/hardware/display/DisplayManagerInternal$DisplayPowerRequest;Z)Z
SPLcom/android/server/display/DisplayManagerService$LocalService;->setDisplayAccessUIDs(Landroid/util/SparseArray;)V
SPLcom/android/server/display/DisplayManagerService$LocalService;->setDisplayInfoOverrideFromWindowManager(ILandroid/view/DisplayInfo;)V
SPLcom/android/server/display/DisplayManagerService$LocalService;->setDisplayProperties(IZFIZ)V
SPLcom/android/server/display/DisplayManagerService$LocalService;->setDisplayedContentSamplingEnabled(IZII)Z
SPLcom/android/server/display/DisplayManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/display/DisplayManagerService;-><init>(Landroid/content/Context;Lcom/android/server/display/DisplayManagerService$Injector;)V
SPLcom/android/server/display/DisplayManagerService;->addLogicalDisplayLocked(Lcom/android/server/display/DisplayDevice;)Lcom/android/server/display/LogicalDisplay;
SPLcom/android/server/display/DisplayManagerService;->configureColorModeLocked(Lcom/android/server/display/LogicalDisplay;Lcom/android/server/display/DisplayDevice;)V
SPLcom/android/server/display/DisplayManagerService;->configureDisplayLocked(Landroid/view/SurfaceControl$Transaction;Lcom/android/server/display/DisplayDevice;)V
SPLcom/android/server/display/DisplayManagerService;->deliverDisplayEvent(II)V
SPLcom/android/server/display/DisplayManagerService;->getDisplayIdsInternal(I)[I
SPLcom/android/server/display/DisplayManagerService;->getDisplayToken(I)Landroid/os/IBinder;
SPLcom/android/server/display/DisplayManagerService;->getNonOverrideDisplayInfoInternal(ILandroid/view/DisplayInfo;)V
SPLcom/android/server/display/DisplayManagerService;->getViewportLocked(ILjava/lang/String;)Landroid/hardware/display/DisplayViewport;
SPLcom/android/server/display/DisplayManagerService;->getWifiDisplayStatusInternal()Landroid/hardware/display/WifiDisplayStatus;
SPLcom/android/server/display/DisplayManagerService;->handleDisplayDeviceAdded(Lcom/android/server/display/DisplayDevice;)V
SPLcom/android/server/display/DisplayManagerService;->handleDisplayDeviceAddedLocked(Lcom/android/server/display/DisplayDevice;)V
SPLcom/android/server/display/DisplayManagerService;->handleDisplayDeviceChanged(Lcom/android/server/display/DisplayDevice;)V
SPLcom/android/server/display/DisplayManagerService;->loadBrightnessConfiguration()V
SPLcom/android/server/display/DisplayManagerService;->loadStableDisplayValuesLocked()V
SPLcom/android/server/display/DisplayManagerService;->onBootPhase(I)V
SPLcom/android/server/display/DisplayManagerService;->onStart()V
SPLcom/android/server/display/DisplayManagerService;->performTraversalInternal(Landroid/view/SurfaceControl$Transaction;)V
SPLcom/android/server/display/DisplayManagerService;->performTraversalLocked(Landroid/view/SurfaceControl$Transaction;)V
SPLcom/android/server/display/DisplayManagerService;->registerAdditionalDisplayAdapters()V
SPLcom/android/server/display/DisplayManagerService;->registerCallbackInternal(Landroid/hardware/display/IDisplayManagerCallback;I)V
SPLcom/android/server/display/DisplayManagerService;->registerDefaultDisplayAdapters()V
SPLcom/android/server/display/DisplayManagerService;->registerWifiDisplayAdapterLocked()V
SPLcom/android/server/display/DisplayManagerService;->requestGlobalDisplayStateInternal(II)V
SPLcom/android/server/display/DisplayManagerService;->setDisplayAccessUIDsInternal(Landroid/util/SparseArray;)V
SPLcom/android/server/display/DisplayManagerService;->setDisplayInfoOverrideFromWindowManagerInternal(ILandroid/view/DisplayInfo;)V
SPLcom/android/server/display/DisplayManagerService;->setDisplayPropertiesInternal(IZFIZ)V
SPLcom/android/server/display/DisplayManagerService;->setupSchedulerPolicies()V
SPLcom/android/server/display/DisplayManagerService;->systemReady(ZZ)V
SPLcom/android/server/display/DisplayManagerService;->updateLogicalDisplaysLocked()Z
SPLcom/android/server/display/DisplayManagerService;->windowManagerAndInputReady()V
SPLcom/android/server/display/DisplayPowerController$1;-><init>(Lcom/android/server/display/DisplayPowerController;)V
SPLcom/android/server/display/DisplayPowerController$2;-><init>(Lcom/android/server/display/DisplayPowerController;)V
SPLcom/android/server/display/DisplayPowerController$2;->onAnimationEnd()V
SPLcom/android/server/display/DisplayPowerController$3;-><init>(Lcom/android/server/display/DisplayPowerController;)V
SPLcom/android/server/display/DisplayPowerController$3;->run()V
SPLcom/android/server/display/DisplayPowerController$4;-><init>(Lcom/android/server/display/DisplayPowerController;)V
SPLcom/android/server/display/DisplayPowerController$4;->run()V
SPLcom/android/server/display/DisplayPowerController$5;-><init>(Lcom/android/server/display/DisplayPowerController;)V
SPLcom/android/server/display/DisplayPowerController$6;-><init>(Lcom/android/server/display/DisplayPowerController;)V
SPLcom/android/server/display/DisplayPowerController$8;-><init>(Lcom/android/server/display/DisplayPowerController;)V
SPLcom/android/server/display/DisplayPowerController$DisplayControllerHandler;-><init>(Lcom/android/server/display/DisplayPowerController;Landroid/os/Looper;)V
SPLcom/android/server/display/DisplayPowerController$DisplayControllerHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/display/DisplayPowerController$SettingsObserver;-><init>(Lcom/android/server/display/DisplayPowerController;Landroid/os/Handler;)V
SPLcom/android/server/display/DisplayPowerController;-><init>(Landroid/content/Context;Landroid/hardware/display/DisplayManagerInternal$DisplayPowerCallbacks;Landroid/os/Handler;Landroid/hardware/SensorManager;Lcom/android/server/display/DisplayBlanker;)V
SPLcom/android/server/display/DisplayPowerController;->animateScreenBrightness(II)V
SPLcom/android/server/display/DisplayPowerController;->animateScreenStateChange(IZ)V
SPLcom/android/server/display/DisplayPowerController;->clampAbsoluteBrightness(I)I
SPLcom/android/server/display/DisplayPowerController;->getAutoBrightnessAdjustmentSetting()F
SPLcom/android/server/display/DisplayPowerController;->getScreenBrightnessForVrSetting()I
SPLcom/android/server/display/DisplayPowerController;->getScreenBrightnessSetting()I
SPLcom/android/server/display/DisplayPowerController;->initialize()V
SPLcom/android/server/display/DisplayPowerController;->notifyBrightnessChanged(IZZ)V
SPLcom/android/server/display/DisplayPowerController;->requestPowerState(Landroid/hardware/display/DisplayManagerInternal$DisplayPowerRequest;Z)Z
SPLcom/android/server/display/DisplayPowerController;->sendUpdatePowerState()V
SPLcom/android/server/display/DisplayPowerController;->setProximitySensorEnabled(Z)V
SPLcom/android/server/display/DisplayPowerController;->setScreenState(IZ)Z
SPLcom/android/server/display/DisplayPowerController;->unblockScreenOn()V
SPLcom/android/server/display/DisplayPowerController;->updatePowerState()V
SPLcom/android/server/display/DisplayPowerState$1;-><init>(Ljava/lang/String;)V
SPLcom/android/server/display/DisplayPowerState$2;-><init>(Ljava/lang/String;)V
SPLcom/android/server/display/DisplayPowerState$2;->setValue(Lcom/android/server/display/DisplayPowerState;I)V
SPLcom/android/server/display/DisplayPowerState$2;->setValue(Ljava/lang/Object;I)V
SPLcom/android/server/display/DisplayPowerState$3;->run()V
SPLcom/android/server/display/DisplayPowerState$PhotonicModulator;->run()V
SPLcom/android/server/display/DisplayPowerState$PhotonicModulator;->setState(II)Z
SPLcom/android/server/display/DisplayPowerState;-><init>(Lcom/android/server/display/DisplayBlanker;Lcom/android/server/display/ColorFade;)V
SPLcom/android/server/display/DisplayPowerState;->setColorFadeLevel(F)V
SPLcom/android/server/display/DisplayPowerState;->setScreenBrightness(I)V
SPLcom/android/server/display/DisplayTransformManager;-><init>()V
SPLcom/android/server/display/HysteresisLevels;-><init>([I[I[I)V
SPLcom/android/server/display/LocalDisplayAdapter$DisplayModeRecord;->hasMatchingMode(Landroid/view/SurfaceControl$PhysicalDisplayInfo;)Z
SPLcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice$1;->run()V
SPLcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice$1;->setDisplayBrightness(I)V
SPLcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice$1;->setDisplayState(I)V
SPLcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice;-><init>(Lcom/android/server/display/LocalDisplayAdapter;Landroid/os/IBinder;J[Landroid/view/SurfaceControl$PhysicalDisplayInfo;I[IIZ)V
SPLcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice;->applyPendingDisplayDeviceInfoChangesLocked()V
SPLcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice;->getDisplayDeviceInfoLocked()Lcom/android/server/display/DisplayDeviceInfo;
SPLcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice;->hasStableUniqueId()Z
SPLcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice;->onOverlayChangedLocked()V
SPLcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice;->requestColorModeLocked(I)Z
SPLcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice;->requestDisplayModesLocked(II)V
SPLcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice;->requestDisplayStateLocked(II)Ljava/lang/Runnable;
SPLcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice;->requestModeLocked(I)Z
SPLcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice;->updateColorModesLocked([II)Z
SPLcom/android/server/display/LocalDisplayAdapter$LocalDisplayDevice;->updatePhysicalDisplayInfoLocked([Landroid/view/SurfaceControl$PhysicalDisplayInfo;I[II)Z
SPLcom/android/server/display/LocalDisplayAdapter;->registerLocked()V
SPLcom/android/server/display/LocalDisplayAdapter;->tryConnectDisplayLocked(J)V
SPLcom/android/server/display/LogicalDisplay;->configureDisplayLocked(Landroid/view/SurfaceControl$Transaction;Lcom/android/server/display/DisplayDevice;Z)V
SPLcom/android/server/display/LogicalDisplay;->setDisplayInfoOverrideFromWindowManagerLocked(Landroid/view/DisplayInfo;)Z
SPLcom/android/server/display/LogicalDisplay;->updateLocked(Ljava/util/List;)V
SPLcom/android/server/display/OverlayDisplayAdapter$1;->run()V
SPLcom/android/server/display/OverlayDisplayAdapter;->updateOverlayDisplayDevices()V
SPLcom/android/server/display/OverlayDisplayAdapter;->updateOverlayDisplayDevicesLocked()V
SPLcom/android/server/display/PersistentDataStore$BrightnessConfigurations;->loadFromXml(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/display/PersistentDataStore$Injector;->openRead()Ljava/io/InputStream;
SPLcom/android/server/display/PersistentDataStore$StableDeviceValues;->loadFromXml(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/display/PersistentDataStore$StableDeviceValues;->loadIntValue(Lorg/xmlpull/v1/XmlPullParser;)I
SPLcom/android/server/display/PersistentDataStore;-><init>(Lcom/android/server/display/PersistentDataStore$Injector;)V
SPLcom/android/server/display/PersistentDataStore;->load()V
SPLcom/android/server/display/PersistentDataStore;->loadDisplaysFromXml(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/display/PersistentDataStore;->loadFromXml(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/display/PersistentDataStore;->loadRememberedWifiDisplaysFromXml(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/display/RampAnimator;->animateTo(II)Z
SPLcom/android/server/display/VirtualDisplayAdapter;->registerLocked()V
SPLcom/android/server/display/color/AppSaturationController;->addColorTransformController(Ljava/lang/String;ILjava/lang/ref/WeakReference;)Z
SPLcom/android/server/display/color/ColorDisplayService$ColorDisplayServiceInternal;->attachColorTransformController(Ljava/lang/String;ILjava/lang/ref/WeakReference;)Z
SPLcom/android/server/display/color/ColorDisplayService$ColorMatrixEvaluator;-><init>(Lcom/android/server/display/color/ColorDisplayService$1;)V
SPLcom/android/server/display/color/ColorDisplayService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/display/color/ColorDisplayService;->onBootPhase(I)V
SPLcom/android/server/display/color/ColorDisplayService;->onStart()V
SPLcom/android/server/display/color/ColorDisplayService;->onStartUser(I)V
SPLcom/android/server/display/color/ColorDisplayService;->onUserChanged(I)V
SPLcom/android/server/display/color/DisplayTransformManager;-><init>()V
SPLcom/android/server/display/utils/Plog;->createSystemPlog(Ljava/lang/String;)Lcom/android/server/display/utils/Plog;
SPLcom/android/server/display/whitebalance/AmbientSensor$AmbientColorTemperatureSensor;-><init>(Landroid/os/Handler;Landroid/hardware/SensorManager;Ljava/lang/String;I)V
SPLcom/android/server/display/whitebalance/AmbientSensor;-><init>(Ljava/lang/String;Landroid/os/Handler;Landroid/hardware/SensorManager;I)V
SPLcom/android/server/display/whitebalance/DisplayWhiteBalanceFactory;->create(Landroid/os/Handler;Landroid/hardware/SensorManager;Landroid/content/res/Resources;)Lcom/android/server/display/whitebalance/DisplayWhiteBalanceController;
SPLcom/android/server/display/whitebalance/DisplayWhiteBalanceFactory;->createBrightnessFilter(Landroid/content/res/Resources;)Lcom/android/server/display/whitebalance/AmbientFilter;
SPLcom/android/server/display/whitebalance/DisplayWhiteBalanceSettings;-><init>(Landroid/content/Context;Landroid/os/Handler;)V
SPLcom/android/server/dreams/DreamController;-><init>(Landroid/content/Context;Landroid/os/Handler;Lcom/android/server/dreams/DreamController$Listener;)V
SPLcom/android/server/dreams/DreamManagerService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/dreams/DreamManagerService$LocalService;->isDreaming()Z
SPLcom/android/server/dreams/DreamManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/dreams/DreamManagerService;->getServiceInfo(Landroid/content/ComponentName;)Landroid/content/pm/ServiceInfo;
SPLcom/android/server/dreams/DreamManagerService;->isDreamingInternal()Z
SPLcom/android/server/dreams/DreamManagerService;->onBootPhase(I)V
SPLcom/android/server/dreams/DreamManagerService;->onStart()V
SPLcom/android/server/dreams/DreamManagerService;->stopDreamLocked(Z)V
SPLcom/android/server/dreams/DreamManagerService;->validateDream(Landroid/content/ComponentName;)Z
SPLcom/android/server/emergency/EmergencyAffordanceService$MyHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/emergency/EmergencyAffordanceService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/emergency/EmergencyAffordanceService;->handleUpdateCellInfo()Z
SPLcom/android/server/emergency/EmergencyAffordanceService;->handleUpdateSimSubscriptionInfo()Z
SPLcom/android/server/emergency/EmergencyAffordanceService;->onBootPhase(I)V
SPLcom/android/server/emergency/EmergencyAffordanceService;->onStart()V
SPLcom/android/server/emergency/EmergencyAffordanceService;->updateEmergencyAffordanceNeeded()V
SPLcom/android/server/ethernet/-$$Lambda$EthernetTracker$7ZSuSvoSqcExye5DLwv_gyq6gyM;->run()V
SPLcom/android/server/ethernet/-$$Lambda$EthernetTracker$InterfaceObserver$RwJV-Ek3mzxwZq-yoQwiconpRi8;->run()V
SPLcom/android/server/ethernet/-$$Lambda$EthernetTracker$InterfaceObserver$d1ixKZZuAxwm1Dz_AX3HmL4JVLA;->run()V
SPLcom/android/server/ethernet/EthernetConfigStore;-><init>()V
SPLcom/android/server/ethernet/EthernetConfigStore;->getIpConfigurationForDefaultInterface()Landroid/net/IpConfiguration;
SPLcom/android/server/ethernet/EthernetConfigStore;->getIpConfigurations()Landroid/util/ArrayMap;
SPLcom/android/server/ethernet/EthernetConfigStore;->read()V
SPLcom/android/server/ethernet/EthernetNetworkFactory;->updateInterfaceLinkState(Ljava/lang/String;Z)Z
SPLcom/android/server/ethernet/EthernetService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/ethernet/EthernetService;->onBootPhase(I)V
SPLcom/android/server/ethernet/EthernetService;->onStart()V
SPLcom/android/server/ethernet/EthernetServiceImpl;->start()V
SPLcom/android/server/ethernet/EthernetTracker$InterfaceObserver;->interfaceAdded(Ljava/lang/String;)V
SPLcom/android/server/ethernet/EthernetTracker$InterfaceObserver;->interfaceLinkStateChanged(Ljava/lang/String;Z)V
SPLcom/android/server/ethernet/EthernetTracker$InterfaceObserver;->lambda$interfaceAdded$1$EthernetTracker$InterfaceObserver(Ljava/lang/String;)V
SPLcom/android/server/ethernet/EthernetTracker$InterfaceObserver;->lambda$interfaceLinkStateChanged$0$EthernetTracker$InterfaceObserver(Ljava/lang/String;Z)V
SPLcom/android/server/ethernet/EthernetTracker;-><init>(Landroid/content/Context;Landroid/os/Handler;)V
SPLcom/android/server/ethernet/EthernetTracker;->createNetworkCapabilities(ZLjava/lang/String;Ljava/lang/String;)Landroid/net/NetworkCapabilities;
SPLcom/android/server/ethernet/EthernetTracker;->maybeTrackInterface(Ljava/lang/String;)V
SPLcom/android/server/ethernet/EthernetTracker;->start()V
SPLcom/android/server/ethernet/EthernetTracker;->trackAvailableInterfaces()V
SPLcom/android/server/ethernet/EthernetTracker;->updateInterfaceState(Ljava/lang/String;Z)V
SPLcom/android/server/firewall/AndFilter$1;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/CategoryFilter$1;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/FilterFactory;->getTagName()Ljava/lang/String;
SPLcom/android/server/firewall/IntentFirewall$FirewallIntentResolver;->newArray(I)[Landroid/content/IntentFilter;
SPLcom/android/server/firewall/IntentFirewall$FirewallIntentResolver;->newArray(I)[Lcom/android/server/firewall/IntentFirewall$FirewallIntentFilter;
SPLcom/android/server/firewall/IntentFirewall$FirewallIntentResolver;->queryByComponent(Landroid/content/ComponentName;Ljava/util/List;)V
SPLcom/android/server/firewall/IntentFirewall$FirewallIntentResolver;->sortResults(Ljava/util/List;)V
SPLcom/android/server/firewall/IntentFirewall$Rule;->getComponentFilterCount()I
SPLcom/android/server/firewall/IntentFirewall$Rule;->getIntentFilter(I)Lcom/android/server/firewall/IntentFirewall$FirewallIntentFilter;
SPLcom/android/server/firewall/IntentFirewall$Rule;->getIntentFilterCount()I
SPLcom/android/server/firewall/IntentFirewall$Rule;->readChild(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/firewall/IntentFirewall;-><init>(Lcom/android/server/firewall/IntentFirewall$AMSInterface;Landroid/os/Handler;)V
SPLcom/android/server/firewall/IntentFirewall;->checkBroadcast(Landroid/content/Intent;IILjava/lang/String;I)Z
SPLcom/android/server/firewall/IntentFirewall;->checkIntent(Lcom/android/server/firewall/IntentFirewall$FirewallIntentResolver;Landroid/content/ComponentName;ILandroid/content/Intent;IILjava/lang/String;I)Z
SPLcom/android/server/firewall/IntentFirewall;->checkService(Landroid/content/ComponentName;Landroid/content/Intent;IILjava/lang/String;Landroid/content/pm/ApplicationInfo;)Z
SPLcom/android/server/firewall/IntentFirewall;->checkStartActivity(Landroid/content/Intent;IILjava/lang/String;Landroid/content/pm/ApplicationInfo;)Z
SPLcom/android/server/firewall/IntentFirewall;->parseFilter(Lorg/xmlpull/v1/XmlPullParser;)Lcom/android/server/firewall/Filter;
SPLcom/android/server/firewall/IntentFirewall;->readRules(Ljava/io/File;[Lcom/android/server/firewall/IntentFirewall$FirewallIntentResolver;)V
SPLcom/android/server/firewall/IntentFirewall;->readRulesDir(Ljava/io/File;)V
SPLcom/android/server/firewall/NotFilter$1;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/OrFilter$1;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/PortFilter$1;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/SenderFilter$1;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/SenderFilter$2;-><init>()V
SPLcom/android/server/firewall/SenderFilter$3;-><init>()V
SPLcom/android/server/firewall/SenderFilter$4;-><init>()V
SPLcom/android/server/firewall/SenderFilter$5;-><init>()V
SPLcom/android/server/firewall/SenderPackageFilter$1;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/SenderPermissionFilter$1;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/StringFilter$10;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/StringFilter$1;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/StringFilter$2;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/StringFilter$3;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/StringFilter$4;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/StringFilter$5;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/StringFilter$6;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/StringFilter$7;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/StringFilter$8;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/StringFilter$9;-><init>(Ljava/lang/String;)V
SPLcom/android/server/firewall/StringFilter$ValueProvider;->newFilter(Lorg/xmlpull/v1/XmlPullParser;)Lcom/android/server/firewall/Filter;
SPLcom/android/server/firewall/StringFilter;->getFilter(Lcom/android/server/firewall/StringFilter$ValueProvider;Lorg/xmlpull/v1/XmlPullParser;I)Lcom/android/server/firewall/StringFilter;
SPLcom/android/server/firewall/StringFilter;->readFromXml(Lcom/android/server/firewall/StringFilter$ValueProvider;Lorg/xmlpull/v1/XmlPullParser;)Lcom/android/server/firewall/StringFilter;
SPLcom/android/server/gpu/GpuService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/gpu/GpuService;->onBootPhase(I)V
SPLcom/android/server/gpu/GpuService;->onStart()V
SPLcom/android/server/incident/IncidentCompanionService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/incident/IncidentCompanionService;->onBootPhase(I)V
SPLcom/android/server/incident/IncidentCompanionService;->onStart()V
SPLcom/android/server/incident/PendingReports;-><init>(Landroid/content/Context;)V
SPLcom/android/server/infra/-$$Lambda$AbstractMasterSystemService$_fKw-VUP0pSfcMMlgRqoT4OPhxw;->onUserRestrictionsChanged(ILandroid/os/Bundle;Landroid/os/Bundle;)V
SPLcom/android/server/infra/AbstractMasterSystemService$1;->onPackageRemoved(Ljava/lang/String;I)V
SPLcom/android/server/infra/AbstractMasterSystemService$1;->onSomePackagesChanged()V
SPLcom/android/server/infra/AbstractMasterSystemService$SettingsObserver;-><init>(Lcom/android/server/infra/AbstractMasterSystemService;Landroid/os/Handler;)V
SPLcom/android/server/infra/AbstractMasterSystemService;-><init>(Landroid/content/Context;Lcom/android/server/infra/ServiceNameResolver;Ljava/lang/String;)V
SPLcom/android/server/infra/AbstractMasterSystemService;->getServiceForUserLocked(I)Lcom/android/server/infra/AbstractPerUserSystemService;
SPLcom/android/server/infra/AbstractMasterSystemService;->getServiceSettingsProperty()Ljava/lang/String;
SPLcom/android/server/infra/AbstractMasterSystemService;->isBindInstantServiceAllowed()Z
SPLcom/android/server/infra/AbstractMasterSystemService;->isDisabledLocked(I)Z
SPLcom/android/server/infra/AbstractMasterSystemService;->lambda$new$1$AbstractMasterSystemService(Ljava/lang/String;ILandroid/os/Bundle;Landroid/os/Bundle;)V
SPLcom/android/server/infra/AbstractMasterSystemService;->lambda$new$1(Lcom/android/server/infra/AbstractMasterSystemService;Ljava/lang/String;ILandroid/os/Bundle;Landroid/os/Bundle;)V
SPLcom/android/server/infra/AbstractMasterSystemService;->onBootPhase(I)V
SPLcom/android/server/infra/AbstractMasterSystemService;->onServiceEnabledLocked(Lcom/android/server/infra/AbstractPerUserSystemService;I)V
SPLcom/android/server/infra/AbstractMasterSystemService;->onServiceRemoved(Lcom/android/server/infra/AbstractPerUserSystemService;I)V
SPLcom/android/server/infra/AbstractMasterSystemService;->peekServiceForUserLocked(I)Lcom/android/server/infra/AbstractPerUserSystemService;
SPLcom/android/server/infra/AbstractMasterSystemService;->registerForExtraSettingsChanges(Landroid/content/ContentResolver;Landroid/database/ContentObserver;)V
SPLcom/android/server/infra/AbstractMasterSystemService;->updateCachedServiceLocked(I)V
SPLcom/android/server/infra/AbstractMasterSystemService;->updateCachedServiceLocked(IZ)Lcom/android/server/infra/AbstractPerUserSystemService;
SPLcom/android/server/infra/AbstractPerUserSystemService;->isEnabledLocked()Z
SPLcom/android/server/infra/AbstractPerUserSystemService;->updateLocked(Z)Z
SPLcom/android/server/infra/AbstractPerUserSystemService;->updateServiceInfoLocked()Landroid/content/ComponentName;
SPLcom/android/server/infra/FrameworkResourcesServiceNameResolver;->getDefaultServiceName(I)Ljava/lang/String;
SPLcom/android/server/infra/FrameworkResourcesServiceNameResolver;->getServiceName(I)Ljava/lang/String;
SPLcom/android/server/infra/FrameworkResourcesServiceNameResolver;->setOnTemporaryServiceNameChangedCallback(Lcom/android/server/infra/ServiceNameResolver$NameResolverListener;)V
SPLcom/android/server/infra/SecureSettingsServiceNameResolver;->getDefaultServiceName(I)Ljava/lang/String;
SPLcom/android/server/infra/ServiceNameResolver;->getServiceName(I)Ljava/lang/String;
SPLcom/android/server/infra/ServiceNameResolver;->setOnTemporaryServiceNameChangedCallback(Lcom/android/server/infra/ServiceNameResolver$NameResolverListener;)V
SPLcom/android/server/input/InputManagerService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/input/InputManagerService$5;->visitKeyboardLayout(Landroid/content/res/Resources;ILandroid/hardware/input/KeyboardLayout;)V
SPLcom/android/server/input/InputManagerService$InputManagerHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/input/InputManagerService$LocalService;->setDisplayViewports(Ljava/util/List;)V
SPLcom/android/server/input/InputManagerService$LocalService;->setPulseGestureEnabled(Z)V
SPLcom/android/server/input/InputManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/input/InputManagerService;->canDispatchToDisplay(II)Z
SPLcom/android/server/input/InputManagerService;->deliverInputDevicesChanged([Landroid/view/InputDevice;)V
SPLcom/android/server/input/InputManagerService;->getCurrentKeyboardLayoutForInputDevice(Landroid/hardware/input/InputDeviceIdentifier;)Ljava/lang/String;
SPLcom/android/server/input/InputManagerService;->getDeviceAlias(Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/input/InputManagerService;->getDoubleTapTimeout()I
SPLcom/android/server/input/InputManagerService;->getExcludedDeviceNames()[Ljava/lang/String;
SPLcom/android/server/input/InputManagerService;->getHoverTapSlop()I
SPLcom/android/server/input/InputManagerService;->getHoverTapTimeout()I
SPLcom/android/server/input/InputManagerService;->getInputDevices()[Landroid/view/InputDevice;
SPLcom/android/server/input/InputManagerService;->getInputPortAssociations()[Ljava/lang/String;
SPLcom/android/server/input/InputManagerService;->getKeyCodeState(III)I
SPLcom/android/server/input/InputManagerService;->getKeyRepeatDelay()I
SPLcom/android/server/input/InputManagerService;->getKeyRepeatTimeout()I
SPLcom/android/server/input/InputManagerService;->getKeyboardLayoutOverlay(Landroid/hardware/input/InputDeviceIdentifier;)[Ljava/lang/String;
SPLcom/android/server/input/InputManagerService;->getLayoutDescriptor(Landroid/hardware/input/InputDeviceIdentifier;)Ljava/lang/String;
SPLcom/android/server/input/InputManagerService;->getLongPressTimeout()I
SPLcom/android/server/input/InputManagerService;->getPointerDisplayId()I
SPLcom/android/server/input/InputManagerService;->getPointerSpeedSetting()I
SPLcom/android/server/input/InputManagerService;->getScanCodeState(III)I
SPLcom/android/server/input/InputManagerService;->getShowTouchesSetting(I)I
SPLcom/android/server/input/InputManagerService;->getSwitchState(III)I
SPLcom/android/server/input/InputManagerService;->getTouchCalibrationForInputDevice(Ljava/lang/String;I)Landroid/hardware/input/TouchCalibration;
SPLcom/android/server/input/InputManagerService;->getVirtualKeyQuietTimeMillis()I
SPLcom/android/server/input/InputManagerService;->monitor()V
SPLcom/android/server/input/InputManagerService;->monitorInput(Ljava/lang/String;I)Landroid/view/InputChannel;
SPLcom/android/server/input/InputManagerService;->notifyConfigurationChanged(J)V
SPLcom/android/server/input/InputManagerService;->notifyInputDevicesChanged([Landroid/view/InputDevice;)V
SPLcom/android/server/input/InputManagerService;->registerInputChannel(Landroid/view/InputChannel;Landroid/os/IBinder;)V
SPLcom/android/server/input/InputManagerService;->setFocusedApplication(ILandroid/view/InputApplicationHandle;)V
SPLcom/android/server/input/InputManagerService;->setFocusedDisplay(I)V
SPLcom/android/server/input/InputManagerService;->setWindowManagerCallbacks(Lcom/android/server/input/InputManagerService$WindowManagerCallbacks;)V
SPLcom/android/server/input/InputManagerService;->setWiredAccessoryCallbacks(Lcom/android/server/input/InputManagerService$WiredAccessoryCallbacks;)V
SPLcom/android/server/input/InputManagerService;->start()V
SPLcom/android/server/input/InputManagerService;->systemRunning()V
SPLcom/android/server/input/InputManagerService;->updateAccessibilityLargePointerFromSettings()V
SPLcom/android/server/input/InputManagerService;->updateKeyboardLayouts()V
SPLcom/android/server/input/InputManagerService;->updatePointerSpeedFromSettings()V
SPLcom/android/server/input/InputManagerService;->updateShowTouchesFromSettings()V
SPLcom/android/server/input/InputManagerService;->visitAllKeyboardLayouts(Lcom/android/server/input/InputManagerService$KeyboardLayoutVisitor;)V
SPLcom/android/server/input/InputManagerService;->visitKeyboardLayoutsInPackage(Landroid/content/pm/PackageManager;Landroid/content/pm/ActivityInfo;Ljava/lang/String;ILcom/android/server/input/InputManagerService$KeyboardLayoutVisitor;)V
SPLcom/android/server/input/PersistentDataStore;->load()V
SPLcom/android/server/input/PersistentDataStore;->removeUninstalledKeyboardLayouts(Ljava/util/Set;)Z
SPLcom/android/server/inputmethod/AdditionalSubtypeUtils;->load(Landroid/util/ArrayMap;I)V
SPLcom/android/server/inputmethod/InputMethodManagerInternal$1;-><init>()V
SPLcom/android/server/inputmethod/InputMethodManagerService$ClientState;-><init>(Lcom/android/internal/view/IInputMethodClient;Lcom/android/internal/view/IInputContext;IIILcom/android/server/inputmethod/InputMethodManagerService$ClientDeathRecipient;)V
SPLcom/android/server/inputmethod/InputMethodManagerService$DebugFlag;-><init>(Ljava/lang/String;Z)V
SPLcom/android/server/inputmethod/InputMethodManagerService$DebugFlag;->value()Z
SPLcom/android/server/inputmethod/InputMethodManagerService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/inputmethod/InputMethodManagerService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/inputmethod/InputMethodManagerService$Lifecycle;->onStart()V
SPLcom/android/server/inputmethod/InputMethodManagerService$SettingsObserver;->registerContentObserverLocked(I)V
SPLcom/android/server/inputmethod/InputMethodManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/inputmethod/InputMethodManagerService;->addClient(Lcom/android/internal/view/IInputMethodClient;Lcom/android/internal/view/IInputContext;I)V
SPLcom/android/server/inputmethod/InputMethodManagerService;->bindCurrentInputMethodServiceLocked(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z
SPLcom/android/server/inputmethod/InputMethodManagerService;->buildInputMethodListLocked(Z)V
SPLcom/android/server/inputmethod/InputMethodManagerService;->clearCurMethodLocked()V
SPLcom/android/server/inputmethod/InputMethodManagerService;->executeOrSendMessage(Landroid/os/IInterface;Landroid/os/Message;)V
SPLcom/android/server/inputmethod/InputMethodManagerService;->handleMessage(Landroid/os/Message;)Z
SPLcom/android/server/inputmethod/InputMethodManagerService;->hideCurrentInputLocked(ILandroid/os/ResultReceiver;)Z
SPLcom/android/server/inputmethod/InputMethodManagerService;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
SPLcom/android/server/inputmethod/InputMethodManagerService;->queryInputMethodServicesInternal(Landroid/content/Context;ILandroid/util/ArrayMap;Landroid/util/ArrayMap;Ljava/util/ArrayList;)V
SPLcom/android/server/inputmethod/InputMethodManagerService;->setInputMethodEnabledLocked(Ljava/lang/String;Z)Z
SPLcom/android/server/inputmethod/InputMethodManagerService;->setInputMethodLocked(Ljava/lang/String;I)V
SPLcom/android/server/inputmethod/InputMethodManagerService;->setSelectedInputMethodAndSubtypeLocked(Landroid/view/inputmethod/InputMethodInfo;IZ)V
SPLcom/android/server/inputmethod/InputMethodManagerService;->startInputOrWindowGainedFocus(ILcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;IIILandroid/view/inputmethod/EditorInfo;Lcom/android/internal/view/IInputContext;II)Lcom/android/internal/view/InputBindResult;
SPLcom/android/server/inputmethod/InputMethodManagerService;->startInputOrWindowGainedFocusInternalLocked(ILcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;IIILandroid/view/inputmethod/EditorInfo;Lcom/android/internal/view/IInputContext;III)Lcom/android/internal/view/InputBindResult;
SPLcom/android/server/inputmethod/InputMethodManagerService;->startInputUncheckedLocked(Lcom/android/server/inputmethod/InputMethodManagerService$ClientState;Lcom/android/internal/view/IInputContext;ILandroid/view/inputmethod/EditorInfo;II)Lcom/android/internal/view/InputBindResult;
SPLcom/android/server/inputmethod/InputMethodManagerService;->systemRunning(Lcom/android/server/statusbar/StatusBarManagerService;)V
SPLcom/android/server/inputmethod/InputMethodManagerService;->unbindCurrentClientLocked(I)V
SPLcom/android/server/inputmethod/InputMethodManagerService;->unbindCurrentMethodLocked()V
SPLcom/android/server/inputmethod/InputMethodManagerService;->updateCurrentProfileIds()V
SPLcom/android/server/inputmethod/InputMethodManagerService;->updateFromSettingsLocked(Z)V
SPLcom/android/server/inputmethod/InputMethodManagerService;->updateInputMethodsFromSettingsLocked(Z)V
SPLcom/android/server/inputmethod/InputMethodManagerService;->updateKeyboardFromSettingsLocked()V
SPLcom/android/server/inputmethod/InputMethodManagerService;->updateSystemUiLocked(II)V
SPLcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$ControllerImpl;->createFrom(Lcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$ControllerImpl;Ljava/util/List;)Lcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$ControllerImpl;
SPLcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$ControllerImpl;->filterImeSubtypeList(Ljava/util/List;Z)Ljava/util/List;
SPLcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$ImeSubtypeListItem;-><init>(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/view/inputmethod/InputMethodInfo;ILjava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$ImeSubtypeListItem;->equals(Ljava/lang/Object;)Z
SPLcom/android/server/inputmethod/InputMethodSubtypeSwitchingController$InputMethodAndSubtypeList;-><init>(Landroid/content/Context;Lcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;)V
SPLcom/android/server/inputmethod/InputMethodUtils$1;-><init>()V
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;-><init>(Landroid/content/res/Resources;Landroid/content/ContentResolver;Landroid/util/ArrayMap;IZ)V
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->addSubtypeToHistory(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->buildInputMethodsAndSubtypeList(Ljava/lang/String;Landroid/text/TextUtils$SimpleStringSplitter;Landroid/text/TextUtils$SimpleStringSplitter;)Ljava/util/List;
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->createEnabledInputMethodListLocked(Ljava/util/List;)Ljava/util/ArrayList;
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->getCurrentUserId()I
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->getEnabledInputMethodListLocked()Ljava/util/ArrayList;
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->getEnabledInputMethodSubtypeListLocked(Landroid/content/Context;Landroid/view/inputmethod/InputMethodInfo;Z)Ljava/util/List;
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->getEnabledInputMethodsAndSubtypeListLocked()Ljava/util/List;
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->getEnabledInputMethodsStr()Ljava/lang/String;
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->getInt(Ljava/lang/String;I)I
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->getSelectedInputMethod()Ljava/lang/String;
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->getSelectedInputMethodSubtypeId(Ljava/lang/String;)I
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->getString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->isCurrentProfile(I)Z
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->isShowImeWithHardKeyboardEnabled()Z
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->loadInputMethodAndSubtypeHistoryLocked()Ljava/util/List;
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->putInt(Ljava/lang/String;I)V
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->putSelectedInputMethod(Ljava/lang/String;)V
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->putSelectedSubtype(I)V
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->putString(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->saveCurrentInputMethodAndSubtypeToHistory(Ljava/lang/String;Landroid/view/inputmethod/InputMethodSubtype;)V
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->saveSubtypeHistory(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->setCurrentProfileIds([I)V
SPLcom/android/server/inputmethod/InputMethodUtils$InputMethodSettings;->switchCurrentUser(IZ)V
SPLcom/android/server/inputmethod/InputMethodUtils;->checkIfPackageBelongsToUid(Landroid/app/AppOpsManager;ILjava/lang/String;)Z
SPLcom/android/server/inputmethod/InputMethodUtils;->getImplicitlyApplicableSubtypesLocked(Landroid/content/res/Resources;Landroid/view/inputmethod/InputMethodInfo;)Ljava/util/ArrayList;
SPLcom/android/server/inputmethod/InputMethodUtils;->setNonSelectedSystemImesDisabledUntilUsed(Landroid/content/pm/IPackageManager;Ljava/util/List;ILjava/lang/String;)V
SPLcom/android/server/job/-$$Lambda$JobSchedulerService$V6_ZmVmzJutg4w0s0LktDOsRAss;-><init>()V
SPLcom/android/server/job/JobConcurrencyManager$JobCountTracker;->getFgRunningJobCountToNote()I
SPLcom/android/server/job/JobConcurrencyManager$JobCountTracker;->getTotalRunningJobCountToNote()I
SPLcom/android/server/job/JobConcurrencyManager$JobCountTracker;->logStatus()V
SPLcom/android/server/job/JobConcurrencyManager$JobCountTracker;->onCountDone()V
SPLcom/android/server/job/JobConcurrencyManager$JobCountTracker;->reset(III)V
SPLcom/android/server/job/JobConcurrencyManager;-><init>(Lcom/android/server/job/JobSchedulerService;)V
SPLcom/android/server/job/JobConcurrencyManager;->assignJobsToContextsLocked()V
SPLcom/android/server/job/JobConcurrencyManager;->onInteractiveStateChanged(Z)V
SPLcom/android/server/job/JobConcurrencyManager;->onSystemReady()V
SPLcom/android/server/job/JobConcurrencyManager;->refreshSystemStateLocked()V
SPLcom/android/server/job/JobConcurrencyManager;->updateMaxCountsLocked()V
SPLcom/android/server/job/JobPackageTracker$DataSet;-><init>()V
SPLcom/android/server/job/JobPackageTracker;-><init>()V
SPLcom/android/server/job/JobSchedulerService$2;->onUidActive(I)V
SPLcom/android/server/job/JobSchedulerService$2;->onUidGone(IZ)V
SPLcom/android/server/job/JobSchedulerService$2;->onUidIdle(IZ)V
SPLcom/android/server/job/JobSchedulerService$2;->onUidStateChanged(IIJ)V
SPLcom/android/server/job/JobSchedulerService$Constants;-><init>()V
SPLcom/android/server/job/JobSchedulerService$Constants;->updateConstantsLocked(Ljava/lang/String;)V
SPLcom/android/server/job/JobSchedulerService$ConstantsObserver;->start(Landroid/content/ContentResolver;)V
SPLcom/android/server/job/JobSchedulerService$ConstantsObserver;->updateConstants()V
SPLcom/android/server/job/JobSchedulerService$JobHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/job/JobSchedulerService$JobSchedulerStub;->enforceValidJobRequest(ILandroid/app/job/JobInfo;)V
SPLcom/android/server/job/JobSchedulerService$JobSchedulerStub;->getPendingJob(I)Landroid/app/job/JobInfo;
SPLcom/android/server/job/JobSchedulerService$JobSchedulerStub;->schedule(Landroid/app/job/JobInfo;)I
SPLcom/android/server/job/JobSchedulerService$JobSchedulerStub;->validateJobFlags(Landroid/app/job/JobInfo;I)V
SPLcom/android/server/job/JobSchedulerService$LocalService;->baseHeartbeatForApp(Ljava/lang/String;II)J
SPLcom/android/server/job/JobSchedulerService$LocalService;->currentHeartbeat()J
SPLcom/android/server/job/JobSchedulerService$MaxJobCounts;->getMaxBg()I
SPLcom/android/server/job/JobSchedulerService$MaxJobCounts;->getMaxTotal()I
SPLcom/android/server/job/JobSchedulerService$MaxJobCounts;->getMinBg()I
SPLcom/android/server/job/JobSchedulerService$MaxJobCounts;->parse(Landroid/util/KeyValueListParser;)V
SPLcom/android/server/job/JobSchedulerService$MaybeReadyJobQueueFunctor;->postProcess()V
SPLcom/android/server/job/JobSchedulerService$StandbyTracker;->onParoleStateChanged(Z)V
SPLcom/android/server/job/JobSchedulerService$StandbyTracker;->onUserInteractionStarted(Ljava/lang/String;I)V
SPLcom/android/server/job/JobSchedulerService$ThermalStatusListener;->onStatusChange(I)V
SPLcom/android/server/job/JobSchedulerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/job/JobSchedulerService;->areComponentsInPlaceLocked(Lcom/android/server/job/controllers/JobStatus;)Z
SPLcom/android/server/job/JobSchedulerService;->areUsersStartedLocked(Lcom/android/server/job/controllers/JobStatus;)Z
SPLcom/android/server/job/JobSchedulerService;->cancelJobsForNonExistentUsers()V
SPLcom/android/server/job/JobSchedulerService;->getConstants()Lcom/android/server/job/JobSchedulerService$Constants;
SPLcom/android/server/job/JobSchedulerService;->getCurrentHeartbeat()J
SPLcom/android/server/job/JobSchedulerService;->getJobStore()Lcom/android/server/job/JobStore;
SPLcom/android/server/job/JobSchedulerService;->getLock()Ljava/lang/Object;
SPLcom/android/server/job/JobSchedulerService;->getPendingJob(II)Landroid/app/job/JobInfo;
SPLcom/android/server/job/JobSchedulerService;->getTestableContext()Landroid/content/Context;
SPLcom/android/server/job/JobSchedulerService;->isChainedAttributionEnabled()Z
SPLcom/android/server/job/JobSchedulerService;->isCurrentlyActiveLocked(Lcom/android/server/job/controllers/JobStatus;)Z
SPLcom/android/server/job/JobSchedulerService;->maybeQueueReadyJobsForExecutionLocked()V
SPLcom/android/server/job/JobSchedulerService;->maybeRunPendingJobsLocked()V
SPLcom/android/server/job/JobSchedulerService;->noteJobsNonpending(Ljava/util/List;)V
SPLcom/android/server/job/JobSchedulerService;->onBootPhase(I)V
SPLcom/android/server/job/JobSchedulerService;->onControllerStateChanged()V
SPLcom/android/server/job/JobSchedulerService;->onStart()V
SPLcom/android/server/job/JobSchedulerService;->onStartUser(I)V
SPLcom/android/server/job/JobSchedulerService;->scheduleAsPackage(Landroid/app/job/JobInfo;Landroid/app/job/JobWorkItem;ILjava/lang/String;ILjava/lang/String;)I
SPLcom/android/server/job/JobSchedulerService;->standbyBucketForPackage(Ljava/lang/String;IJ)I
SPLcom/android/server/job/JobSchedulerService;->startTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;)V
SPLcom/android/server/job/JobSchedulerService;->stopNonReadyActiveJobsLocked()V
SPLcom/android/server/job/JobSchedulerService;->updateUidState(II)V
SPLcom/android/server/job/JobServiceContext$JobServiceHandler;-><init>(Lcom/android/server/job/JobServiceContext;Landroid/os/Looper;)V
SPLcom/android/server/job/JobStore$JobSet;->add(Lcom/android/server/job/controllers/JobStatus;)Z
SPLcom/android/server/job/JobStore$JobSet;->remove(Lcom/android/server/job/controllers/JobStatus;)Z
SPLcom/android/server/job/JobStore$ReadJobMapFromDiskRunnable;->buildBuilderFromXml(Lorg/xmlpull/v1/XmlPullParser;)Landroid/app/job/JobInfo$Builder;
SPLcom/android/server/job/JobStore$ReadJobMapFromDiskRunnable;->buildConstraintsFromXml(Landroid/app/job/JobInfo$Builder;Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/job/JobStore$ReadJobMapFromDiskRunnable;->buildRtcExecutionTimesFromXml(Lorg/xmlpull/v1/XmlPullParser;)Landroid/util/Pair;
SPLcom/android/server/job/JobStore$ReadJobMapFromDiskRunnable;->maybeBuildBackoffPolicyFromXml(Landroid/app/job/JobInfo$Builder;Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/job/JobStore$ReadJobMapFromDiskRunnable;->run()V
SPLcom/android/server/job/JobStore;-><init>(Landroid/content/Context;Ljava/lang/Object;Ljava/io/File;)V
SPLcom/android/server/job/JobStore;->access$500(Landroid/util/Pair;J)Landroid/util/Pair;
SPLcom/android/server/job/JobStore;->add(Lcom/android/server/job/controllers/JobStatus;)Z
SPLcom/android/server/job/JobStore;->convertRtcBoundsToElapsed(Landroid/util/Pair;J)Landroid/util/Pair;
SPLcom/android/server/job/JobStore;->initAndGet(Lcom/android/server/job/JobSchedulerService;)Lcom/android/server/job/JobStore;
SPLcom/android/server/job/controllers/-$$Lambda$QuotaController$Nr0Q3oPwHBGHfHSdpzIm80t7M7s;->run()V
SPLcom/android/server/job/controllers/-$$Lambda$QuotaController$StandbyTracker$HBosnPX15xU_maD6xbBsC7aJqOU;->run()V
SPLcom/android/server/job/controllers/BackgroundJobsController$1;->updateJobsForUid(IZ)V
SPLcom/android/server/job/controllers/BackgroundJobsController;-><init>(Lcom/android/server/job/JobSchedulerService;)V
SPLcom/android/server/job/controllers/BackgroundJobsController;->maybeStartTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;)V
SPLcom/android/server/job/controllers/BackgroundJobsController;->updateJobRestrictionsLocked(II)V
SPLcom/android/server/job/controllers/BackgroundJobsController;->updateSingleJobRestrictionLocked(Lcom/android/server/job/controllers/JobStatus;I)Z
SPLcom/android/server/job/controllers/BatteryController$ChargingTracker;->startTracking()V
SPLcom/android/server/job/controllers/BatteryController;->maybeStartTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;)V
SPLcom/android/server/job/controllers/ConnectivityController;-><init>(Lcom/android/server/job/JobSchedulerService;)V
SPLcom/android/server/job/controllers/ConnectivityController;->isNetworkAvailable(Lcom/android/server/job/controllers/JobStatus;)Z
SPLcom/android/server/job/controllers/ConnectivityController;->maybeRevokeStandbyExceptionLocked(Lcom/android/server/job/controllers/JobStatus;)V
SPLcom/android/server/job/controllers/ConnectivityController;->maybeStartTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;)V
SPLcom/android/server/job/controllers/ConnectivityController;->onConstantsUpdatedLocked()V
SPLcom/android/server/job/controllers/ConnectivityController;->wouldBeReadyWithConnectivityLocked(Lcom/android/server/job/controllers/JobStatus;)Z
SPLcom/android/server/job/controllers/ContentObserverController;->maybeStartTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;)V
SPLcom/android/server/job/controllers/DeviceIdleJobsController;-><init>(Lcom/android/server/job/JobSchedulerService;)V
SPLcom/android/server/job/controllers/DeviceIdleJobsController;->maybeStartTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;)V
SPLcom/android/server/job/controllers/DeviceIdleJobsController;->setUidActiveLocked(IZ)V
SPLcom/android/server/job/controllers/DeviceIdleJobsController;->updateTaskStateLocked(Lcom/android/server/job/controllers/JobStatus;)Z
SPLcom/android/server/job/controllers/IdleController;->initIdleStateTracking(Landroid/content/Context;)V
SPLcom/android/server/job/controllers/IdleController;->maybeStartTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;)V
SPLcom/android/server/job/controllers/JobStatus;-><init>(Landroid/app/job/JobInfo;IILjava/lang/String;IIJLjava/lang/String;IJJJJI)V
SPLcom/android/server/job/controllers/JobStatus;-><init>(Landroid/app/job/JobInfo;ILjava/lang/String;IIJLjava/lang/String;JJJJLandroid/util/Pair;I)V
SPLcom/android/server/job/controllers/JobStatus;->computeEstimatedNetworkBytesLocked()J
SPLcom/android/server/job/controllers/JobStatus;->createFromJobInfo(Landroid/app/job/JobInfo;ILjava/lang/String;ILjava/lang/String;)Lcom/android/server/job/controllers/JobStatus;
SPLcom/android/server/job/controllers/JobStatus;->maybeAddForegroundExemption(Ljava/util/function/Predicate;)V
SPLcom/android/server/job/controllers/JobStatus;->prepareLocked(Landroid/app/IActivityManager;)V
SPLcom/android/server/job/controllers/JobStatus;->resolveTargetSdkVersion(Landroid/app/job/JobInfo;)I
SPLcom/android/server/job/controllers/JobStatus;->updateEstimatedNetworkBytesLocked()V
SPLcom/android/server/job/controllers/QuotaController$2;->onUidStateChanged(IIJ)V
SPLcom/android/server/job/controllers/QuotaController$ChargingTracker;->startTracking()V
SPLcom/android/server/job/controllers/QuotaController$QcHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/job/controllers/QuotaController$StandbyTracker;->lambda$onParoleStateChanged$1$QuotaController$StandbyTracker()V
SPLcom/android/server/job/controllers/QuotaController$StandbyTracker;->lambda$onParoleStateChanged$1(Lcom/android/server/job/controllers/QuotaController$StandbyTracker;)V
SPLcom/android/server/job/controllers/QuotaController$StandbyTracker;->onParoleStateChanged(Z)V
SPLcom/android/server/job/controllers/QuotaController$UidConstraintUpdater;->accept(Lcom/android/server/job/controllers/JobStatus;)V
SPLcom/android/server/job/controllers/QuotaController$UidConstraintUpdater;->accept(Ljava/lang/Object;)V
SPLcom/android/server/job/controllers/QuotaController$UidConstraintUpdater;->postProcess()V
SPLcom/android/server/job/controllers/QuotaController$UidConstraintUpdater;->reset()V
SPLcom/android/server/job/controllers/QuotaController$UserPackageMap;->add(ILjava/lang/String;Ljava/lang/Object;)V
SPLcom/android/server/job/controllers/QuotaController$UserPackageMap;->clear()V
SPLcom/android/server/job/controllers/QuotaController$UserPackageMap;->indexOfKey(I)I
SPLcom/android/server/job/controllers/QuotaController$UserPackageMap;->numUsers()I
SPLcom/android/server/job/controllers/QuotaController;-><init>(Lcom/android/server/job/JobSchedulerService;)V
SPLcom/android/server/job/controllers/QuotaController;->isUidInForeground(I)Z
SPLcom/android/server/job/controllers/QuotaController;->isWithinQuotaLocked(Lcom/android/server/job/controllers/JobStatus;)Z
SPLcom/android/server/job/controllers/QuotaController;->lambda$onConstantsUpdatedLocked$0$QuotaController()V
SPLcom/android/server/job/controllers/QuotaController;->lambda$onConstantsUpdatedLocked$0(Lcom/android/server/job/controllers/QuotaController;)V
SPLcom/android/server/job/controllers/QuotaController;->maybeStartTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;)V
SPLcom/android/server/job/controllers/QuotaController;->maybeUpdateAllConstraintsLocked()V
SPLcom/android/server/job/controllers/QuotaController;->maybeUpdateConstraintForPkgLocked(ILjava/lang/String;)Z
SPLcom/android/server/job/controllers/QuotaController;->onConstantsUpdatedLocked()V
SPLcom/android/server/job/controllers/QuotaController;->updateExecutionStatsLocked(ILjava/lang/String;Lcom/android/server/job/controllers/QuotaController$ExecutionStats;)V
SPLcom/android/server/job/controllers/StateController;->onConstantsUpdatedLocked()V
SPLcom/android/server/job/controllers/StorageController;->maybeStartTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;Lcom/android/server/job/controllers/JobStatus;)V
SPLcom/android/server/job/controllers/TimeController$2;->onAlarm()V
SPLcom/android/server/job/controllers/TimeController;-><init>(Lcom/android/server/job/JobSchedulerService;)V
SPLcom/android/server/job/controllers/TimeController;->canStopTrackingJobLocked(Lcom/android/server/job/controllers/JobStatus;)Z
SPLcom/android/server/job/controllers/TimeController;->checkExpiredDeadlinesAndResetAlarm()V
SPLcom/android/server/job/controllers/TimeController;->deriveWorkSource(ILjava/lang/String;)Landroid/os/WorkSource;
SPLcom/android/server/job/controllers/TimeController;->onConstantsUpdatedLocked()V
SPLcom/android/server/job/controllers/TimeController;->updateAlarmWithListenerLocked(Ljava/lang/String;Landroid/app/AlarmManager$OnAlarmListener;JLandroid/os/WorkSource;)V
SPLcom/android/server/job/controllers/idle/DeviceIdlenessTracker;->isIdle()Z
SPLcom/android/server/job/controllers/idle/DeviceIdlenessTracker;->startTracking(Landroid/content/Context;Lcom/android/server/job/controllers/idle/IdlenessListener;)V
SPLcom/android/server/lights/LightsService$1;->getLight(I)Lcom/android/server/lights/Light;
SPLcom/android/server/lights/LightsService$LightImpl;->setBrightness(I)V
SPLcom/android/server/lights/LightsService$LightImpl;->setBrightness(II)V
SPLcom/android/server/lights/LightsService$LightImpl;->setColor(I)V
SPLcom/android/server/lights/LightsService$LightImpl;->setFlashing(IIII)V
SPLcom/android/server/lights/LightsService$LightImpl;->setLightLocked(IIIII)V
SPLcom/android/server/lights/LightsService$LightImpl;->turnOff()V
SPLcom/android/server/lights/LightsService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/lights/LightsService;->onBootPhase(I)V
SPLcom/android/server/lights/LightsService;->onStart()V
SPLcom/android/server/location/-$$Lambda$5U-_NhZgxqnYDZhpyacq4qBxh8k;->run()V
SPLcom/android/server/location/-$$Lambda$ContextHubClientBroker$CFacmt7807NhDDkp6CgbkeGnMvQ;->accept(Landroid/hardware/location/IContextHubClientCallback;)V
SPLcom/android/server/location/-$$Lambda$ContextHubClientManager$f15OSYbsSONpkXn7GinnrBPeumw;->accept(Ljava/lang/Object;)V
SPLcom/android/server/location/-$$Lambda$GnssConfiguration$1$384RrX20Mx6OJsRiqsQcSxYdcZc;-><init>()V
SPLcom/android/server/location/-$$Lambda$GnssConfiguration$1$384RrX20Mx6OJsRiqsQcSxYdcZc;->set(I)Z
SPLcom/android/server/location/-$$Lambda$GnssConfiguration$1$5tBf0Ru8L994vqKbXOeOBj2A-CA;-><init>()V
SPLcom/android/server/location/-$$Lambda$GnssConfiguration$1$5tBf0Ru8L994vqKbXOeOBj2A-CA;->set(I)Z
SPLcom/android/server/location/-$$Lambda$GnssConfiguration$1$8lp2ukEzg_Agf73p3ka-dqhWUpE;-><init>()V
SPLcom/android/server/location/-$$Lambda$GnssConfiguration$1$8lp2ukEzg_Agf73p3ka-dqhWUpE;->set(I)Z
SPLcom/android/server/location/-$$Lambda$GnssConfiguration$1$9cfNUAWKKutp5KSqhvHSGJNe0ao;-><init>()V
SPLcom/android/server/location/-$$Lambda$GnssConfiguration$1$9cfNUAWKKutp5KSqhvHSGJNe0ao;->set(I)Z
SPLcom/android/server/location/-$$Lambda$GnssConfiguration$1$aaV8BigB_1Oil1H82EHUb0zvWPo;-><init>()V
SPLcom/android/server/location/-$$Lambda$GnssConfiguration$1$aaV8BigB_1Oil1H82EHUb0zvWPo;->set(I)Z
SPLcom/android/server/location/-$$Lambda$GnssConfiguration$1$rRu0NBMB8DgPt3DY5__6u_WNl7A;-><init>()V
SPLcom/android/server/location/-$$Lambda$GnssConfiguration$1$rRu0NBMB8DgPt3DY5__6u_WNl7A;->set(I)Z
SPLcom/android/server/location/-$$Lambda$GnssConfiguration$1$sKzdHBM7V7DxdhcWx1u8hipJYFo;-><init>()V
SPLcom/android/server/location/-$$Lambda$GnssConfiguration$1$sKzdHBM7V7DxdhcWx1u8hipJYFo;->set(I)Z
SPLcom/android/server/location/-$$Lambda$GnssLocationProvider$DiR2gLZsU3wguaAfx6x4XN_Suhg;->run()V
SPLcom/android/server/location/-$$Lambda$GnssLocationProvider$WbIUWqWbiKrZx6NHwSpsFU1pHKI;->run()V
SPLcom/android/server/location/-$$Lambda$LocationProviderProxy$2$QT3uzVX4fLIc1b7F_cP9P1hzluA;->run(Landroid/os/IBinder;)V
SPLcom/android/server/location/-$$Lambda$LocationProviderProxy$p3DjIvk7Of_sUF4Dc9plMNfdklc;->run(Landroid/os/IBinder;)V
SPLcom/android/server/location/-$$Lambda$RemoteListenerHelper$0Rlnad83RE1JdiVK0ULOLm530JM;->run()V
SPLcom/android/server/location/AbstractLocationProvider;->setEnabled(Z)V
SPLcom/android/server/location/AbstractLocationProvider;->setProperties(Lcom/android/internal/location/ProviderProperties;)V
SPLcom/android/server/location/ActivityRecognitionProxy;-><init>(Landroid/content/Context;ZLandroid/hardware/location/ActivityRecognitionHardware;III)V
SPLcom/android/server/location/ActivityRecognitionProxy;->createAndBind(Landroid/content/Context;ZLandroid/hardware/location/ActivityRecognitionHardware;III)Lcom/android/server/location/ActivityRecognitionProxy;
SPLcom/android/server/location/ComprehensiveCountryDetector$2;->run()V
SPLcom/android/server/location/ComprehensiveCountryDetector;-><init>(Landroid/content/Context;)V
SPLcom/android/server/location/ComprehensiveCountryDetector;->addPhoneStateListener()V
SPLcom/android/server/location/ComprehensiveCountryDetector;->addToLogs(Landroid/location/Country;)V
SPLcom/android/server/location/ComprehensiveCountryDetector;->createLocationBasedCountryDetector()Lcom/android/server/location/CountryDetectorBase;
SPLcom/android/server/location/ComprehensiveCountryDetector;->detectCountry()Landroid/location/Country;
SPLcom/android/server/location/ComprehensiveCountryDetector;->getLastKnownLocationBasedCountry()Landroid/location/Country;
SPLcom/android/server/location/ComprehensiveCountryDetector;->getLocaleCountry()Landroid/location/Country;
SPLcom/android/server/location/ComprehensiveCountryDetector;->getNetworkBasedCountry()Landroid/location/Country;
SPLcom/android/server/location/ComprehensiveCountryDetector;->getSimBasedCountry()Landroid/location/Country;
SPLcom/android/server/location/ComprehensiveCountryDetector;->isAirplaneModeOff()Z
SPLcom/android/server/location/ComprehensiveCountryDetector;->isGeoCoderImplemented()Z
SPLcom/android/server/location/ComprehensiveCountryDetector;->runAfterDetection(Landroid/location/Country;Landroid/location/Country;ZZ)V
SPLcom/android/server/location/ComprehensiveCountryDetector;->runAfterDetectionAsync(Landroid/location/Country;Landroid/location/Country;ZZ)V
SPLcom/android/server/location/ComprehensiveCountryDetector;->scheduleLocationRefresh()V
SPLcom/android/server/location/ComprehensiveCountryDetector;->setCountryListener(Landroid/location/CountryListener;)V
SPLcom/android/server/location/ComprehensiveCountryDetector;->startLocationBasedDetector(Landroid/location/CountryListener;)V
SPLcom/android/server/location/ContextHubClientBroker$PendingIntentRequest;->hasPendingIntent()Z
SPLcom/android/server/location/ContextHubClientBroker;->getAttachedContextHubId()I
SPLcom/android/server/location/ContextHubClientBroker;->invokeCallback(Lcom/android/server/location/ContextHubClientBroker$CallbackConsumer;)V
SPLcom/android/server/location/ContextHubClientBroker;->isRegistered()Z
SPLcom/android/server/location/ContextHubClientBroker;->sendMessageToClient(Landroid/hardware/location/NanoAppMessage;)V
SPLcom/android/server/location/ContextHubClientBroker;->sendMessageToNanoApp(Landroid/hardware/location/NanoAppMessage;)I
SPLcom/android/server/location/ContextHubClientBroker;->sendPendingIntent(Ljava/util/function/Supplier;J)V
SPLcom/android/server/location/ContextHubClientManager;->forEachClientOfHub(ILjava/util/function/Consumer;)V
SPLcom/android/server/location/ContextHubClientManager;->getHostEndPointId()S
SPLcom/android/server/location/ContextHubClientManager;->onMessageFromNanoApp(ILandroid/hardware/contexthub/V1_0/ContextHubMsg;)V
SPLcom/android/server/location/ContextHubClientManager;->registerClient(Landroid/hardware/location/ContextHubInfo;Landroid/hardware/location/IContextHubClientCallback;)Landroid/hardware/location/IContextHubClient;
SPLcom/android/server/location/ContextHubService$1;->onMessageFromNanoApp(Landroid/hardware/location/NanoAppMessage;)V
SPLcom/android/server/location/ContextHubService$4;->onQueryResponse(ILjava/util/List;)V
SPLcom/android/server/location/ContextHubService$ContextHubServiceCallback;->handleAppsInfo(Ljava/util/ArrayList;)V
SPLcom/android/server/location/ContextHubService$ContextHubServiceCallback;->handleClientMsg(Landroid/hardware/contexthub/V1_0/ContextHubMsg;)V
SPLcom/android/server/location/ContextHubService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/location/ContextHubService;->createClient(ILandroid/hardware/location/IContextHubClientCallback;)Landroid/hardware/location/IContextHubClient;
SPLcom/android/server/location/ContextHubService;->getContextHubProxy()Landroid/hardware/contexthub/V1_0/IContexthub;
SPLcom/android/server/location/ContextHubService;->getContextHubs()Ljava/util/List;
SPLcom/android/server/location/ContextHubService;->onMessageReceiptOldApi(III[B)I
SPLcom/android/server/location/ContextHubService;->registerCallback(Landroid/hardware/location/IContextHubCallback;)I
SPLcom/android/server/location/ContextHubServiceTransaction;->getTimeout(Ljava/util/concurrent/TimeUnit;)J
SPLcom/android/server/location/ContextHubServiceTransaction;->getTransactionType()I
SPLcom/android/server/location/ContextHubServiceTransaction;->setComplete()V
SPLcom/android/server/location/ContextHubServiceUtil;->createContextHubInfoMap(Ljava/util/List;)Ljava/util/HashMap;
SPLcom/android/server/location/ContextHubServiceUtil;->createNanoAppStateList(Ljava/util/List;)Ljava/util/List;
SPLcom/android/server/location/ContextHubTransactionManager$5;->onQueryResponse(ILjava/util/List;)V
SPLcom/android/server/location/ContextHubTransactionManager$5;->onTransact()I
SPLcom/android/server/location/ContextHubTransactionManager;-><init>(Landroid/hardware/contexthub/V1_0/IContexthub;Lcom/android/server/location/ContextHubClientManager;Lcom/android/server/location/NanoAppStateManager;)V
SPLcom/android/server/location/ContextHubTransactionManager;->addTransaction(Lcom/android/server/location/ContextHubServiceTransaction;)V
SPLcom/android/server/location/ContextHubTransactionManager;->createQueryTransaction(ILandroid/hardware/location/IContextHubTransactionCallback;)Lcom/android/server/location/ContextHubServiceTransaction;
SPLcom/android/server/location/ContextHubTransactionManager;->onQueryResponse(Ljava/util/List;)V
SPLcom/android/server/location/ContextHubTransactionManager;->startNextTransaction()V
SPLcom/android/server/location/CountryDetectorBase;->setCountryListener(Landroid/location/CountryListener;)V
SPLcom/android/server/location/GeocoderProxy;->createAndBind(Landroid/content/Context;III)Lcom/android/server/location/GeocoderProxy;
SPLcom/android/server/location/GeofenceManager;-><init>(Landroid/content/Context;Lcom/android/server/location/LocationBlacklist;)V
SPLcom/android/server/location/GeofenceProxy$GeofenceProxyServiceConnection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
SPLcom/android/server/location/GeofenceProxy;-><init>(Landroid/content/Context;IIILandroid/location/IGpsGeofenceHardware;Landroid/location/IFusedGeofenceHardware;)V
SPLcom/android/server/location/GeofenceProxy;->createAndBind(Landroid/content/Context;IIILandroid/location/IGpsGeofenceHardware;Landroid/location/IFusedGeofenceHardware;)Lcom/android/server/location/GeofenceProxy;
SPLcom/android/server/location/GnssBatchingProvider$GnssBatchingProviderNative;->initBatching()Z
SPLcom/android/server/location/GnssBatchingProvider;->enable()V
SPLcom/android/server/location/GnssBatchingProvider;->resumeIfStarted()V
SPLcom/android/server/location/GnssConfiguration$1;-><init>(Lcom/android/server/location/GnssConfiguration;Lcom/android/server/location/GnssConfiguration$HalInterfaceVersion;)V
SPLcom/android/server/location/GnssConfiguration$HalInterfaceVersion;-><init>(II)V
SPLcom/android/server/location/GnssConfiguration;->getC2KHost()Ljava/lang/String;
SPLcom/android/server/location/GnssConfiguration;->getC2KPort(I)I
SPLcom/android/server/location/GnssConfiguration;->getEsExtensionSec()I
SPLcom/android/server/location/GnssConfiguration;->getIntConfig(Ljava/lang/String;I)I
SPLcom/android/server/location/GnssConfiguration;->getRangeCheckedConfigEsExtensionSec()I
SPLcom/android/server/location/GnssConfiguration;->getSuplEs(I)I
SPLcom/android/server/location/GnssConfiguration;->getSuplHost()Ljava/lang/String;
SPLcom/android/server/location/GnssConfiguration;->getSuplMode(I)I
SPLcom/android/server/location/GnssConfiguration;->getSuplPort(I)I
SPLcom/android/server/location/GnssConfiguration;->loadPropertiesFromGpsDebugConfig(Ljava/util/Properties;)V
SPLcom/android/server/location/GnssConfiguration;->logConfigurations()V
SPLcom/android/server/location/GnssConfiguration;->reloadGpsProperties()V
SPLcom/android/server/location/GnssConfiguration;->setSatelliteBlacklist([I[I)V
SPLcom/android/server/location/GnssGeofenceProvider$GnssGeofenceProviderNative;->isGeofenceSupported()Z
SPLcom/android/server/location/GnssGeofenceProvider;->isHardwareGeofenceSupported()Z
SPLcom/android/server/location/GnssGeofenceProvider;->resumeIfStarted()V
SPLcom/android/server/location/GnssLocationProvider$4;->isGpsEnabled()Z
SPLcom/android/server/location/GnssLocationProvider$5;->isGpsEnabled()Z
SPLcom/android/server/location/GnssLocationProvider$7;->onChange(Z)V
SPLcom/android/server/location/GnssLocationProvider$ProviderHandler;->handleInitialize()V
SPLcom/android/server/location/GnssLocationProvider$ProviderHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/location/GnssLocationProvider;-><init>(Landroid/content/Context;Lcom/android/server/location/AbstractLocationProvider$LocationProviderManager;Landroid/os/Looper;)V
SPLcom/android/server/location/GnssLocationProvider;->getGnssMetricsProvider()Lcom/android/server/location/GnssLocationProvider$GnssMetricsProvider;
SPLcom/android/server/location/GnssLocationProvider;->getGnssSystemInfoProvider()Lcom/android/server/location/GnssLocationProvider$GnssSystemInfoProvider;
SPLcom/android/server/location/GnssLocationProvider;->handleEnable()Z
SPLcom/android/server/location/GnssLocationProvider;->isEnabled()Z
SPLcom/android/server/location/GnssLocationProvider;->isSupported()Z
SPLcom/android/server/location/GnssLocationProvider;->lambda$onUpdateSatelliteBlacklist$0$GnssLocationProvider([I[I)V
SPLcom/android/server/location/GnssLocationProvider;->lambda$setEngineCapabilities$5$GnssLocationProvider(I)V
SPLcom/android/server/location/GnssLocationProvider;->lambda$setEngineCapabilities$5(Lcom/android/server/location/GnssLocationProvider;I)V
SPLcom/android/server/location/GnssLocationProvider;->onUpdateSatelliteBlacklist([I[I)V
SPLcom/android/server/location/GnssLocationProvider;->reloadGpsProperties()V
SPLcom/android/server/location/GnssLocationProvider;->sendMessage(IILjava/lang/Object;)V
SPLcom/android/server/location/GnssLocationProvider;->setEngineCapabilities(I)V
SPLcom/android/server/location/GnssLocationProvider;->setGnssHardwareModelName(Ljava/lang/String;)V
SPLcom/android/server/location/GnssLocationProvider;->setGnssYearOfHardware(I)V
SPLcom/android/server/location/GnssLocationProvider;->setRequest(Lcom/android/internal/location/ProviderRequest;Landroid/os/WorkSource;)V
SPLcom/android/server/location/GnssLocationProvider;->setSuplHostPort()V
SPLcom/android/server/location/GnssLocationProvider;->stopNavigating()V
SPLcom/android/server/location/GnssLocationProvider;->updateClientUids(Landroid/os/WorkSource;)V
SPLcom/android/server/location/GnssLocationProvider;->updateEnabled()V
SPLcom/android/server/location/GnssLocationProvider;->updateRequirements()V
SPLcom/android/server/location/GnssMeasurementsProvider$GnssMeasurementProviderNative;->isMeasurementSupported()Z
SPLcom/android/server/location/GnssMeasurementsProvider;->isAvailableInPlatform()Z
SPLcom/android/server/location/GnssMeasurementsProvider;->onCapabilitiesUpdated(I)V
SPLcom/android/server/location/GnssMeasurementsProvider;->onGpsEnabledChanged()V
SPLcom/android/server/location/GnssMeasurementsProvider;->resumeIfStarted()V
SPLcom/android/server/location/GnssNavigationMessageProvider$GnssNavigationMessageProviderNative;->isNavigationMessageSupported()Z
SPLcom/android/server/location/GnssNavigationMessageProvider;->getHandlerOperation(I)Lcom/android/server/location/RemoteListenerHelper$ListenerOperation;
SPLcom/android/server/location/GnssNavigationMessageProvider;->isAvailableInPlatform()Z
SPLcom/android/server/location/GnssNavigationMessageProvider;->onCapabilitiesUpdated(Z)V
SPLcom/android/server/location/GnssNavigationMessageProvider;->onGpsEnabledChanged()V
SPLcom/android/server/location/GnssNavigationMessageProvider;->resumeIfStarted()V
SPLcom/android/server/location/GnssNetworkConnectivityHandler;-><init>(Landroid/content/Context;Lcom/android/server/location/GnssNetworkConnectivityHandler$GnssNetworkListener;Landroid/os/Looper;)V
SPLcom/android/server/location/GnssNetworkConnectivityHandler;->registerNetworkCallbacks()V
SPLcom/android/server/location/GnssSatelliteBlacklistHelper;-><init>(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/location/GnssSatelliteBlacklistHelper$GnssSatelliteBlacklistCallback;)V
SPLcom/android/server/location/GnssSatelliteBlacklistHelper;->parseSatelliteBlacklist(Ljava/lang/String;)Ljava/util/List;
SPLcom/android/server/location/GnssSatelliteBlacklistHelper;->updateSatelliteBlacklist()V
SPLcom/android/server/location/LocationBasedCountryDetector;->detectCountry()Landroid/location/Country;
SPLcom/android/server/location/LocationBasedCountryDetector;->getEnabledProviders()Ljava/util/List;
SPLcom/android/server/location/LocationBasedCountryDetector;->getQueryLocationTimeout()J
SPLcom/android/server/location/LocationBasedCountryDetector;->isAcceptableProvider(Ljava/lang/String;)Z
SPLcom/android/server/location/LocationBasedCountryDetector;->registerListener(Ljava/lang/String;Landroid/location/LocationListener;)V
SPLcom/android/server/location/LocationBlacklist;->getStringArrayLocked(Ljava/lang/String;)[Ljava/lang/String;
SPLcom/android/server/location/LocationBlacklist;->reloadBlacklist()V
SPLcom/android/server/location/LocationBlacklist;->reloadBlacklistLocked()V
SPLcom/android/server/location/LocationBlacklist;->switchUser(I)V
SPLcom/android/server/location/LocationFudger;-><init>(Landroid/content/Context;Landroid/os/Handler;)V
SPLcom/android/server/location/LocationFudger;->loadCoarseAccuracy()F
SPLcom/android/server/location/LocationProviderProxy$1;->onSetEnabled(Z)V
SPLcom/android/server/location/LocationProviderProxy$1;->onSetProperties(Lcom/android/internal/location/ProviderProperties;)V
SPLcom/android/server/location/LocationProviderProxy$2;->onBind()V
SPLcom/android/server/location/LocationProviderProxy;-><init>(Landroid/content/Context;Lcom/android/server/location/AbstractLocationProvider$LocationProviderManager;Ljava/lang/String;III)V
SPLcom/android/server/location/LocationProviderProxy;->createAndBind(Landroid/content/Context;Lcom/android/server/location/AbstractLocationProvider$LocationProviderManager;Ljava/lang/String;III)Lcom/android/server/location/LocationProviderProxy;
SPLcom/android/server/location/LocationProviderProxy;->initializeService(Landroid/os/IBinder;)V
SPLcom/android/server/location/LocationProviderProxy;->resetProviderPackages(Ljava/util/List;)V
SPLcom/android/server/location/LocationProviderProxy;->setRequest(Lcom/android/internal/location/ProviderRequest;Landroid/os/WorkSource;)V
SPLcom/android/server/location/LocationRequestStatistics$PackageProviderKey;->equals(Ljava/lang/Object;)Z
SPLcom/android/server/location/LocationRequestStatistics$PackageProviderKey;->hashCode()I
SPLcom/android/server/location/LocationRequestStatistics$PackageStatistics;->startRequesting(J)V
SPLcom/android/server/location/LocationRequestStatistics;->startRequesting(Ljava/lang/String;Ljava/lang/String;JZ)V
SPLcom/android/server/location/NanoAppStateManager;->addNanoAppInstance(IJI)V
SPLcom/android/server/location/NanoAppStateManager;->getNanoAppHandle(IJ)I
SPLcom/android/server/location/NanoAppStateManager;->handleQueryAppEntry(IJI)V
SPLcom/android/server/location/NanoAppStateManager;->removeNanoAppInstance(IJ)V
SPLcom/android/server/location/NanoAppStateManager;->updateCache(ILjava/util/List;)V
SPLcom/android/server/location/NtpTimeHelper;-><init>(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/location/NtpTimeHelper$InjectNtpTimeCallback;Landroid/util/NtpTrustedTime;)V
SPLcom/android/server/location/PassiveProvider;-><init>(Landroid/content/Context;Lcom/android/server/location/AbstractLocationProvider$LocationProviderManager;)V
SPLcom/android/server/location/PassiveProvider;->setRequest(Lcom/android/internal/location/ProviderRequest;Landroid/os/WorkSource;)V
SPLcom/android/server/location/RemoteListenerHelper;-><init>(Landroid/content/Context;Landroid/os/Handler;Ljava/lang/String;)V
SPLcom/android/server/location/RemoteListenerHelper;->calculateCurrentResultUnsafe()I
SPLcom/android/server/location/RemoteListenerHelper;->lambda$tryUnregister$0$RemoteListenerHelper()V
SPLcom/android/server/location/RemoteListenerHelper;->setSupported(Z)V
SPLcom/android/server/location/RemoteListenerHelper;->tryUpdateRegistrationWithService()V
SPLcom/android/server/location/RemoteListenerHelper;->updateResult()V
SPLcom/android/server/locksettings/-$$Lambda$SyntheticPasswordManager$WjMV-qfQ1YUbeAiLzyAhyepqPFI;->onValues(ILandroid/hardware/weaver/V1_0/WeaverConfig;)V
SPLcom/android/server/locksettings/LockSettingsService$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver;->onSystemReady()V
SPLcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver;->updateRegistration()V
SPLcom/android/server/locksettings/LockSettingsService$Injector;->getActivityManager()Landroid/app/IActivityManager;
SPLcom/android/server/locksettings/LockSettingsService$Injector;->getContext()Landroid/content/Context;
SPLcom/android/server/locksettings/LockSettingsService$Injector;->getHandler()Landroid/os/Handler;
SPLcom/android/server/locksettings/LockSettingsService$Injector;->getKeyStore()Landroid/security/KeyStore;
SPLcom/android/server/locksettings/LockSettingsService$Injector;->getLockPatternUtils()Lcom/android/internal/widget/LockPatternUtils;
SPLcom/android/server/locksettings/LockSettingsService$Injector;->getNotificationManager()Landroid/app/NotificationManager;
SPLcom/android/server/locksettings/LockSettingsService$Injector;->getRecoverableKeyStoreManager(Landroid/security/KeyStore;)Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;
SPLcom/android/server/locksettings/LockSettingsService$Injector;->getStorage()Lcom/android/server/locksettings/LockSettingsStorage;
SPLcom/android/server/locksettings/LockSettingsService$Injector;->getStrongAuth()Lcom/android/server/locksettings/LockSettingsStrongAuth;
SPLcom/android/server/locksettings/LockSettingsService$Injector;->getStrongAuthTracker()Lcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker;
SPLcom/android/server/locksettings/LockSettingsService$Injector;->getSyntheticPasswordManager(Lcom/android/server/locksettings/LockSettingsStorage;)Lcom/android/server/locksettings/SyntheticPasswordManager;
SPLcom/android/server/locksettings/LockSettingsService$Injector;->getUserManager()Landroid/os/UserManager;
SPLcom/android/server/locksettings/LockSettingsService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/locksettings/LockSettingsService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/locksettings/LockSettingsService$Lifecycle;->onStart()V
SPLcom/android/server/locksettings/LockSettingsService$Lifecycle;->onStartUser(I)V
SPLcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker;->register(Lcom/android/server/locksettings/LockSettingsStrongAuth;)V
SPLcom/android/server/locksettings/LockSettingsService;-><init>(Lcom/android/server/locksettings/LockSettingsService$Injector;)V
SPLcom/android/server/locksettings/LockSettingsService;->checkPasswordHavePermission(I)V
SPLcom/android/server/locksettings/LockSettingsService;->getBoolean(Ljava/lang/String;ZI)Z
SPLcom/android/server/locksettings/LockSettingsService;->getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService;
SPLcom/android/server/locksettings/LockSettingsService;->getLong(Ljava/lang/String;JI)J
SPLcom/android/server/locksettings/LockSettingsService;->getSeparateProfileChallengeEnabled(I)Z
SPLcom/android/server/locksettings/LockSettingsService;->getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;
SPLcom/android/server/locksettings/LockSettingsService;->getStringUnchecked(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;
SPLcom/android/server/locksettings/LockSettingsService;->havePassword(I)Z
SPLcom/android/server/locksettings/LockSettingsService;->havePattern(I)Z
SPLcom/android/server/locksettings/LockSettingsService;->isSyntheticPasswordBasedCredentialLocked(I)Z
SPLcom/android/server/locksettings/LockSettingsService;->maybeShowEncryptionNotificationForUser(I)V
SPLcom/android/server/locksettings/LockSettingsService;->migrateOldData()V
SPLcom/android/server/locksettings/LockSettingsService;->migrateOldDataAfterSystemReady()V
SPLcom/android/server/locksettings/LockSettingsService;->onStartUser(I)V
SPLcom/android/server/locksettings/LockSettingsService;->registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V
SPLcom/android/server/locksettings/LockSettingsService;->systemReady()V
SPLcom/android/server/locksettings/LockSettingsStorage$Cache$CacheKey;->equals(Ljava/lang/Object;)Z
SPLcom/android/server/locksettings/LockSettingsStorage$Cache;->contains(ILjava/lang/String;I)Z
SPLcom/android/server/locksettings/LockSettingsStorage$Cache;->getVersion()I
SPLcom/android/server/locksettings/LockSettingsStorage$Cache;->hasFile(Ljava/lang/String;)Z
SPLcom/android/server/locksettings/LockSettingsStorage$Cache;->hasKeyValue(Ljava/lang/String;I)Z
SPLcom/android/server/locksettings/LockSettingsStorage$Cache;->isFetched(I)Z
SPLcom/android/server/locksettings/LockSettingsStorage$Cache;->peek(ILjava/lang/String;I)Ljava/lang/Object;
SPLcom/android/server/locksettings/LockSettingsStorage$Cache;->peekFile(Ljava/lang/String;)[B
SPLcom/android/server/locksettings/LockSettingsStorage$Cache;->peekKeyValue(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;
SPLcom/android/server/locksettings/LockSettingsStorage$Cache;->put(ILjava/lang/String;Ljava/lang/Object;I)V
SPLcom/android/server/locksettings/LockSettingsStorage$Cache;->putFileIfUnchanged(Ljava/lang/String;[BI)V
SPLcom/android/server/locksettings/LockSettingsStorage$Cache;->putIfUnchanged(ILjava/lang/String;Ljava/lang/Object;II)V
SPLcom/android/server/locksettings/LockSettingsStorage$Cache;->putKeyValueIfUnchanged(Ljava/lang/String;Ljava/lang/Object;II)V
SPLcom/android/server/locksettings/LockSettingsStorage$Cache;->setFetched(I)V
SPLcom/android/server/locksettings/LockSettingsStorage$CredentialHash;-><init>([BIIZ)V
SPLcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper;->setCallback(Lcom/android/server/locksettings/LockSettingsStorage$Callback;)V
SPLcom/android/server/locksettings/LockSettingsStorage;->getChildProfileLockFile(I)Ljava/lang/String;
SPLcom/android/server/locksettings/LockSettingsStorage;->getLegacyLockPasswordFilename(I)Ljava/lang/String;
SPLcom/android/server/locksettings/LockSettingsStorage;->getLegacyLockPatternFilename(I)Ljava/lang/String;
SPLcom/android/server/locksettings/LockSettingsStorage;->getLockCredentialFilePathForUser(ILjava/lang/String;)Ljava/lang/String;
SPLcom/android/server/locksettings/LockSettingsStorage;->getLockPasswordFilename(I)Ljava/lang/String;
SPLcom/android/server/locksettings/LockSettingsStorage;->getLockPatternFilename(I)Ljava/lang/String;
SPLcom/android/server/locksettings/LockSettingsStorage;->getSynthenticPasswordStateFilePathForUser(IJLjava/lang/String;)Ljava/lang/String;
SPLcom/android/server/locksettings/LockSettingsStorage;->getSyntheticPasswordDirectoryForUser(I)Ljava/io/File;
SPLcom/android/server/locksettings/LockSettingsStorage;->hasChildProfileLock(I)Z
SPLcom/android/server/locksettings/LockSettingsStorage;->prefetchUser(I)V
SPLcom/android/server/locksettings/LockSettingsStorage;->readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash;
SPLcom/android/server/locksettings/LockSettingsStorage;->readFile(Ljava/lang/String;)[B
SPLcom/android/server/locksettings/LockSettingsStorage;->readKeyValue(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;
SPLcom/android/server/locksettings/LockSettingsStorage;->readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash;
SPLcom/android/server/locksettings/LockSettingsStorage;->readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash;
SPLcom/android/server/locksettings/LockSettingsStorage;->readSyntheticPasswordState(IJLjava/lang/String;)[B
SPLcom/android/server/locksettings/LockSettingsStrongAuth$1;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/locksettings/LockSettingsStrongAuth;-><init>(Landroid/content/Context;)V
SPLcom/android/server/locksettings/LockSettingsStrongAuth;->handleAddStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V
SPLcom/android/server/locksettings/LockSettingsStrongAuth;->registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V
SPLcom/android/server/locksettings/LockSettingsStrongAuth;->systemReady()V
SPLcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;->fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;
SPLcom/android/server/locksettings/SyntheticPasswordManager;->getCredentialType(JI)I
SPLcom/android/server/locksettings/SyntheticPasswordManager;->getWeaverService()Landroid/hardware/weaver/V1_0/IWeaver;
SPLcom/android/server/locksettings/SyntheticPasswordManager;->initWeaverService()V
SPLcom/android/server/locksettings/SyntheticPasswordManager;->lambda$initWeaverService$0$SyntheticPasswordManager(ILandroid/hardware/weaver/V1_0/WeaverConfig;)V
SPLcom/android/server/locksettings/SyntheticPasswordManager;->lambda$initWeaverService$0(Lcom/android/server/locksettings/SyntheticPasswordManager;ILandroid/hardware/weaver/V1_0/WeaverConfig;)V
SPLcom/android/server/locksettings/recoverablekeystore/KeyStoreProxyImpl;->getAndLoadAndroidKeyStore()Ljava/security/KeyStore;
SPLcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager;->getAndLoadAndroidKeyStore()Ljava/security/KeyStore;
SPLcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;-><init>(Landroid/content/Context;Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb;Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage;Ljava/util/concurrent/ExecutorService;Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage;Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage;Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager;Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage;Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper;)V
SPLcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;->getInstance(Landroid/content/Context;Landroid/security/KeyStore;)Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;
SPLcom/android/server/media/AudioPlayerStateMonitor;-><init>()V
SPLcom/android/server/media/AudioPlayerStateMonitor;->getSortedAudioPlaybackClientUids()Landroid/util/IntArray;
SPLcom/android/server/media/AudioPlayerStateMonitor;->isPlaybackActive(I)Z
SPLcom/android/server/media/AudioPlayerStateMonitor;->registerListener(Lcom/android/server/media/AudioPlayerStateMonitor$OnAudioPlayerActiveStateChangedListener;Landroid/os/Handler;)V
SPLcom/android/server/media/AudioPlayerStateMonitor;->registerSelfIntoAudioServiceIfNeeded(Landroid/media/IAudioService;)V
SPLcom/android/server/media/MediaResourceMonitorService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/media/MediaResourceMonitorService;->onStart()V
SPLcom/android/server/media/MediaRouterService$3;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/media/MediaRouterService$UserHandler;-><init>(Lcom/android/server/media/MediaRouterService;Lcom/android/server/media/MediaRouterService$UserRecord;)V
SPLcom/android/server/media/MediaRouterService$UserHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/media/MediaRouterService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/media/MediaRouterService;->getState(Landroid/media/IMediaRouterClient;)Landroid/media/MediaRouterClientState;
SPLcom/android/server/media/MediaRouterService;->initializeUserLocked(Lcom/android/server/media/MediaRouterService$UserRecord;)V
SPLcom/android/server/media/MediaRouterService;->isPlaybackActive(Landroid/media/IMediaRouterClient;)Z
SPLcom/android/server/media/MediaRouterService;->monitor()V
SPLcom/android/server/media/MediaRouterService;->registerClientAsUser(Landroid/media/IMediaRouterClient;Ljava/lang/String;I)V
SPLcom/android/server/media/MediaRouterService;->registerClientLocked(Landroid/media/IMediaRouterClient;IILjava/lang/String;IZ)V
SPLcom/android/server/media/MediaRouterService;->setDiscoveryRequest(Landroid/media/IMediaRouterClient;IZ)V
SPLcom/android/server/media/MediaRouterService;->setDiscoveryRequestLocked(Landroid/media/IMediaRouterClient;IZ)V
SPLcom/android/server/media/MediaRouterService;->setSelectedRoute(Landroid/media/IMediaRouterClient;Ljava/lang/String;Z)V
SPLcom/android/server/media/MediaRouterService;->setSelectedRouteLocked(Landroid/media/IMediaRouterClient;Ljava/lang/String;Z)V
SPLcom/android/server/media/MediaRouterService;->switchUser()V
SPLcom/android/server/media/MediaRouterService;->validatePackageName(ILjava/lang/String;)Z
SPLcom/android/server/media/MediaSessionRecord$MessageHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/media/MediaSessionRecord$MessageHandler;->post(I)V
SPLcom/android/server/media/MediaSessionRecord$MessageHandler;->post(ILjava/lang/Object;)V
SPLcom/android/server/media/MediaSessionRecord$SessionStub;->getController()Landroid/media/session/ControllerLink;
SPLcom/android/server/media/MediaSessionRecord$SessionStub;->setFlags(I)V
SPLcom/android/server/media/MediaSessionRecord$SessionStub;->setPlaybackToLocal(Landroid/media/AudioAttributes;)V
SPLcom/android/server/media/MediaSessionRecord;-><init>(IIILjava/lang/String;Landroid/media/session/SessionCallbackLink;Ljava/lang/String;Landroid/os/Bundle;Lcom/android/server/media/MediaSessionService$ServiceImpl;Landroid/os/Looper;)V
SPLcom/android/server/media/MediaSessionRecord;-><init>(IIILjava/lang/String;Landroid/media/session/SessionCallbackLink;Ljava/lang/String;Lcom/android/server/media/MediaSessionService$ServiceImpl;Landroid/os/Looper;)V
SPLcom/android/server/media/MediaSessionRecord;->getSessionBinder()Landroid/media/session/SessionLink;
SPLcom/android/server/media/MediaSessionRecord;->getUserId()I
SPLcom/android/server/media/MediaSessionRecord;->isActive()Z
SPLcom/android/server/media/MediaSessionRecord;->toString()Ljava/lang/String;
SPLcom/android/server/media/MediaSessionService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/media/MediaSessionService;->monitor()V
SPLcom/android/server/media/MediaSessionService;->onStart()V
SPLcom/android/server/media/MediaSessionService;->onStartUser(I)V
SPLcom/android/server/media/MediaSessionServiceImpl$FullUserRecord;-><init>(Lcom/android/server/media/MediaSessionServiceImpl;I)V
SPLcom/android/server/media/MediaSessionServiceImpl$MessageHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->addSessionsListener(Landroid/media/session/IActiveSessionsListener;Landroid/content/ComponentName;I)V
SPLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->createSession(Ljava/lang/String;Landroid/media/session/SessionCallbackLink;Ljava/lang/String;I)Landroid/media/session/SessionLink;
SPLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->createSession(Ljava/lang/String;Landroid/media/session/SessionCallbackLink;Ljava/lang/String;Landroid/os/Bundle;I)Landroid/media/session/SessionLink;
SPLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->getSessions(Landroid/content/ComponentName;I)Ljava/util/List;
SPLcom/android/server/media/MediaSessionServiceImpl$SessionManagerImpl;->setRemoteVolumeController(Landroid/media/IRemoteVolumeController;)V
SPLcom/android/server/media/MediaSessionServiceImpl;-><init>(Landroid/content/Context;)V
SPLcom/android/server/media/MediaSessionServiceImpl;->access$3800(Lcom/android/server/media/MediaSessionServiceImpl;Ljava/lang/String;II)V
SPLcom/android/server/media/MediaSessionServiceImpl;->access$4100(Lcom/android/server/media/MediaSessionServiceImpl;Landroid/content/ComponentName;III)V
SPLcom/android/server/media/MediaSessionServiceImpl;->createSessionInternal(IIILjava/lang/String;Landroid/media/session/SessionCallbackLink;Ljava/lang/String;)Lcom/android/server/media/MediaSessionRecord;
SPLcom/android/server/media/MediaSessionServiceImpl;->createSessionInternal(IIILjava/lang/String;Landroid/media/session/SessionCallbackLink;Ljava/lang/String;Landroid/os/Bundle;)Lcom/android/server/media/MediaSessionRecord;
SPLcom/android/server/media/MediaSessionServiceImpl;->createSessionLocked(IIILjava/lang/String;Landroid/media/session/SessionCallbackLink;Ljava/lang/String;)Lcom/android/server/media/MediaSessionRecord;
SPLcom/android/server/media/MediaSessionServiceImpl;->createSessionLocked(IIILjava/lang/String;Landroid/media/session/SessionCallbackLink;Ljava/lang/String;Landroid/os/Bundle;)Lcom/android/server/media/MediaSessionRecord;
SPLcom/android/server/media/MediaSessionServiceImpl;->enforceMediaPermissions(Landroid/content/ComponentName;III)V
SPLcom/android/server/media/MediaSessionServiceImpl;->enforcePackageName(Ljava/lang/String;I)V
SPLcom/android/server/media/MediaSessionServiceImpl;->enforcePhoneStatePermission(II)V
SPLcom/android/server/media/MediaSessionServiceImpl;->findIndexOfSessionsListenerLocked(Landroid/media/session/IActiveSessionsListener;)I
SPLcom/android/server/media/MediaSessionServiceImpl;->getActiveSessionsLocked(I)Ljava/util/List;
SPLcom/android/server/media/MediaSessionServiceImpl;->getContext()Landroid/content/Context;
SPLcom/android/server/media/MediaSessionServiceImpl;->getServiceBinder()Landroid/os/IBinder;
SPLcom/android/server/media/MediaSessionServiceImpl;->monitor()V
SPLcom/android/server/media/MediaSessionServiceImpl;->onStart()V
SPLcom/android/server/media/MediaSessionServiceImpl;->onStartUser(I)V
SPLcom/android/server/media/MediaSessionServiceImpl;->pushRemoteVolumeUpdateLocked(I)V
SPLcom/android/server/media/MediaSessionServiceImpl;->pushSessionsChanged(I)V
SPLcom/android/server/media/MediaSessionServiceImpl;->setGlobalPrioritySession(Lcom/android/server/media/MediaSessionRecord;)V
SPLcom/android/server/media/MediaSessionServiceImpl;->updateUser()V
SPLcom/android/server/media/MediaSessionStack;->addSession(Lcom/android/server/media/MediaSessionRecord;)V
SPLcom/android/server/media/MediaSessionStack;->contains(Lcom/android/server/media/MediaSessionRecord;)Z
SPLcom/android/server/media/MediaSessionStack;->getActiveSessions(I)Ljava/util/ArrayList;
SPLcom/android/server/media/MediaSessionStack;->getDefaultRemoteSession(I)Lcom/android/server/media/MediaSessionRecord;
SPLcom/android/server/media/MediaSessionStack;->getPriorityList(ZI)Ljava/util/ArrayList;
SPLcom/android/server/media/MediaSessionStack;->removeSession(Lcom/android/server/media/MediaSessionRecord;)V
SPLcom/android/server/media/MediaSessionStack;->updateMediaButtonSessionIfNeeded()V
SPLcom/android/server/media/RemoteDisplayProviderWatcher$2;->run()V
SPLcom/android/server/media/RemoteDisplayProviderWatcher;-><init>(Landroid/content/Context;Lcom/android/server/media/RemoteDisplayProviderWatcher$Callback;Landroid/os/Handler;I)V
SPLcom/android/server/media/RemoteDisplayProviderWatcher;->scanPackages()V
SPLcom/android/server/media/RemoteDisplayProviderWatcher;->start()V
SPLcom/android/server/media/projection/MediaProjectionManagerService$BinderService;->addCallback(Landroid/media/projection/IMediaProjectionWatcherCallback;)V
SPLcom/android/server/media/projection/MediaProjectionManagerService$BinderService;->getActiveProjectionInfo()Landroid/media/projection/MediaProjectionInfo;
SPLcom/android/server/media/projection/MediaProjectionManagerService$CallbackDelegate;-><init>()V
SPLcom/android/server/media/projection/MediaProjectionManagerService$CallbackDelegate;->add(Landroid/media/projection/IMediaProjectionWatcherCallback;)V
SPLcom/android/server/media/projection/MediaProjectionManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/media/projection/MediaProjectionManagerService;->addCallback(Landroid/media/projection/IMediaProjectionWatcherCallback;)V
SPLcom/android/server/media/projection/MediaProjectionManagerService;->getActiveProjectionInfo()Landroid/media/projection/MediaProjectionInfo;
SPLcom/android/server/media/projection/MediaProjectionManagerService;->linkDeathRecipientLocked(Landroid/media/projection/IMediaProjectionWatcherCallback;Landroid/os/IBinder$DeathRecipient;)V
SPLcom/android/server/media/projection/MediaProjectionManagerService;->monitor()V
SPLcom/android/server/media/projection/MediaProjectionManagerService;->onStart()V
SPLcom/android/server/midi/MidiService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/midi/MidiService$Lifecycle;->onStart()V
SPLcom/android/server/midi/MidiService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/net/-$$Lambda$NetworkPolicyManagerService$HDTUqowtgL-W_V0Kq6psXLWC9ws;->run()V
SPLcom/android/server/net/DelayedDiskWrite;-><init>()V
SPLcom/android/server/net/IpConfigStore;-><init>()V
SPLcom/android/server/net/IpConfigStore;-><init>(Lcom/android/server/net/DelayedDiskWrite;)V
SPLcom/android/server/net/IpConfigStore;->readIpConfigurations(Ljava/lang/String;)Landroid/util/ArrayMap;
SPLcom/android/server/net/NetworkPolicyLogger;-><init>()V
SPLcom/android/server/net/NetworkPolicyLogger;->firewallChainEnabled(IZ)V
SPLcom/android/server/net/NetworkPolicyLogger;->firewallRulesChanged(I[I[I)V
SPLcom/android/server/net/NetworkPolicyLogger;->meteredRestrictedPkgsChanged(Ljava/util/Set;)V
SPLcom/android/server/net/NetworkPolicyLogger;->paroleStateChanged(Z)V
SPLcom/android/server/net/NetworkPolicyLogger;->uidFirewallRuleChanged(III)V
SPLcom/android/server/net/NetworkPolicyLogger;->uidStateChanged(IIJ)V
SPLcom/android/server/net/NetworkPolicyManagerService$18;->handleMessage(Landroid/os/Message;)Z
SPLcom/android/server/net/NetworkPolicyManagerService$4;->onUidGone(IZ)V
SPLcom/android/server/net/NetworkPolicyManagerService$4;->onUidStateChanged(IIJ)V
SPLcom/android/server/net/NetworkPolicyManagerService$9;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/net/NetworkPolicyManagerService$AppIdleStateChangeListener;->onParoleStateChanged(Z)V
SPLcom/android/server/net/NetworkPolicyManagerService$NetworkPolicyManagerInternalImpl;->onAdminDataAvailable()V
SPLcom/android/server/net/NetworkPolicyManagerService$NetworkPolicyManagerInternalImpl;->setMeteredRestrictedPackagesAsync(Ljava/util/Set;I)V
SPLcom/android/server/net/NetworkPolicyManagerService;-><init>(Landroid/content/Context;Landroid/app/IActivityManager;Landroid/os/INetworkManagementService;)V
SPLcom/android/server/net/NetworkPolicyManagerService;-><init>(Landroid/content/Context;Landroid/app/IActivityManager;Landroid/os/INetworkManagementService;Landroid/content/pm/IPackageManager;Ljava/time/Clock;Ljava/io/File;Z)V
SPLcom/android/server/net/NetworkPolicyManagerService;->addDefaultRestrictBackgroundWhitelistUidsUL()Z
SPLcom/android/server/net/NetworkPolicyManagerService;->addDefaultRestrictBackgroundWhitelistUidsUL(I)Z
SPLcom/android/server/net/NetworkPolicyManagerService;->bindConnectivityManager(Landroid/net/IConnectivityManager;)V
SPLcom/android/server/net/NetworkPolicyManagerService;->enableFirewallChainUL(IZ)V
SPLcom/android/server/net/NetworkPolicyManagerService;->findRelevantSubIdNL(Landroid/net/NetworkTemplate;)I
SPLcom/android/server/net/NetworkPolicyManagerService;->getRestrictBackground()Z
SPLcom/android/server/net/NetworkPolicyManagerService;->handleRestrictedPackagesChangeUL(Ljava/util/Set;Ljava/util/Set;)V
SPLcom/android/server/net/NetworkPolicyManagerService;->handleUidChanged(IIJ)V
SPLcom/android/server/net/NetworkPolicyManagerService;->handleUidGone(I)V
SPLcom/android/server/net/NetworkPolicyManagerService;->initService(Ljava/util/concurrent/CountDownLatch;)V
SPLcom/android/server/net/NetworkPolicyManagerService;->isBandwidthControlEnabled()Z
SPLcom/android/server/net/NetworkPolicyManagerService;->lambda$networkScoreAndNetworkManagementServiceReady$0$NetworkPolicyManagerService(Ljava/util/concurrent/CountDownLatch;)V
SPLcom/android/server/net/NetworkPolicyManagerService;->networkScoreAndNetworkManagementServiceReady()Ljava/util/concurrent/CountDownLatch;
SPLcom/android/server/net/NetworkPolicyManagerService;->onTetheringChanged(Ljava/lang/String;Z)V
SPLcom/android/server/net/NetworkPolicyManagerService;->readPolicyAL()V
SPLcom/android/server/net/NetworkPolicyManagerService;->registerListener(Landroid/net/INetworkPolicyListener;)V
SPLcom/android/server/net/NetworkPolicyManagerService;->removeUidStateUL(I)V
SPLcom/android/server/net/NetworkPolicyManagerService;->setMeteredRestrictedPackagesInternal(Ljava/util/Set;I)V
SPLcom/android/server/net/NetworkPolicyManagerService;->setNetworkTemplateEnabledInner(Landroid/net/NetworkTemplate;Z)V
SPLcom/android/server/net/NetworkPolicyManagerService;->setRestrictBackgroundUL(Z)V
SPLcom/android/server/net/NetworkPolicyManagerService;->setUidFirewallRule(III)V
SPLcom/android/server/net/NetworkPolicyManagerService;->setUidFirewallRulesUL(ILandroid/util/SparseIntArray;)V
SPLcom/android/server/net/NetworkPolicyManagerService;->setUidPolicyUncheckedUL(IIZ)V
SPLcom/android/server/net/NetworkPolicyManagerService;->systemReady(Ljava/util/concurrent/CountDownLatch;)V
SPLcom/android/server/net/NetworkPolicyManagerService;->updateNetworkEnabledNL()V
SPLcom/android/server/net/NetworkPolicyManagerService;->updateNetworkStats(IZ)V
SPLcom/android/server/net/NetworkPolicyManagerService;->updateNotificationsNL()V
SPLcom/android/server/net/NetworkPolicyManagerService;->updatePowerSaveWhitelistUL()V
SPLcom/android/server/net/NetworkPolicyManagerService;->updateRulesForAppIdleParoleUL()V
SPLcom/android/server/net/NetworkPolicyManagerService;->updateRulesForDeviceIdleUL()V
SPLcom/android/server/net/NetworkPolicyManagerService;->updateRulesForGlobalChangeAL(Z)V
SPLcom/android/server/net/NetworkPolicyManagerService;->updateRulesForPowerSaveUL()V
SPLcom/android/server/net/NetworkPolicyManagerService;->updateRulesForRestrictBackgroundUL()V
SPLcom/android/server/net/NetworkPolicyManagerService;->updateRulesForRestrictPowerUL()V
SPLcom/android/server/net/NetworkPolicyManagerService;->updateRulesForWhitelistedPowerSaveUL(ZILandroid/util/SparseIntArray;)V
SPLcom/android/server/net/NetworkPolicyManagerService;->updateUidStateUL(II)V
SPLcom/android/server/net/NetworkPolicyManagerService;->writePolicyAL()V
SPLcom/android/server/net/NetworkStatsCollection$Key;->equals(Ljava/lang/Object;)Z
SPLcom/android/server/net/NetworkStatsCollection;->getSummary(Landroid/net/NetworkTemplate;JJII)Landroid/net/NetworkStats;
SPLcom/android/server/net/NetworkStatsCollection;->getTotalBytes()J
SPLcom/android/server/net/NetworkStatsCollection;->read(Ljava/io/InputStream;)V
SPLcom/android/server/net/NetworkStatsObservers$1;->handleMessage(Landroid/os/Message;)Z
SPLcom/android/server/net/NetworkStatsObservers;->getHandler()Landroid/os/Handler;
SPLcom/android/server/net/NetworkStatsObservers;->getHandlerLooperLocked()Landroid/os/Looper;
SPLcom/android/server/net/NetworkStatsObservers;->handleUpdateStats(Lcom/android/server/net/NetworkStatsObservers$StatsContext;)V
SPLcom/android/server/net/NetworkStatsObservers;->updateStats(Landroid/net/NetworkStats;Landroid/net/NetworkStats;Landroid/util/ArrayMap;Landroid/util/ArrayMap;[Lcom/android/internal/net/VpnInfo;J)V
SPLcom/android/server/net/NetworkStatsRecorder;-><init>(Lcom/android/internal/util/FileRotator;Landroid/net/NetworkStats$NonMonotonicObserver;Landroid/os/DropBoxManager;Ljava/lang/String;JZ)V
SPLcom/android/server/net/NetworkStatsRecorder;->getOrLoadCompleteLocked()Lcom/android/server/net/NetworkStatsCollection;
SPLcom/android/server/net/NetworkStatsRecorder;->getTotalSinceBootLocked(Landroid/net/NetworkTemplate;)Landroid/net/NetworkStats$Entry;
SPLcom/android/server/net/NetworkStatsRecorder;->loadLocked(JJ)Lcom/android/server/net/NetworkStatsCollection;
SPLcom/android/server/net/NetworkStatsRecorder;->maybePersistLocked(J)V
SPLcom/android/server/net/NetworkStatsRecorder;->recordSnapshotLocked(Landroid/net/NetworkStats;Ljava/util/Map;[Lcom/android/internal/net/VpnInfo;J)V
SPLcom/android/server/net/NetworkStatsRecorder;->setPersistThreshold(J)V
SPLcom/android/server/net/NetworkStatsService$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/net/NetworkStatsService$3;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/net/NetworkStatsService$DefaultNetworkStatsSettings;->getDevConfig()Lcom/android/server/net/NetworkStatsService$NetworkStatsSettings$Config;
SPLcom/android/server/net/NetworkStatsService$DefaultNetworkStatsSettings;->getDevPersistBytes(J)J
SPLcom/android/server/net/NetworkStatsService$DefaultNetworkStatsSettings;->getGlobalAlertBytes(J)J
SPLcom/android/server/net/NetworkStatsService$DefaultNetworkStatsSettings;->getPollInterval()J
SPLcom/android/server/net/NetworkStatsService$DefaultNetworkStatsSettings;->getSampleEnabled()Z
SPLcom/android/server/net/NetworkStatsService$DefaultNetworkStatsSettings;->getUidConfig()Lcom/android/server/net/NetworkStatsService$NetworkStatsSettings$Config;
SPLcom/android/server/net/NetworkStatsService$DefaultNetworkStatsSettings;->getUidPersistBytes(J)J
SPLcom/android/server/net/NetworkStatsService$DefaultNetworkStatsSettings;->getUidTagConfig()Lcom/android/server/net/NetworkStatsService$NetworkStatsSettings$Config;
SPLcom/android/server/net/NetworkStatsService$DefaultNetworkStatsSettings;->getUidTagPersistBytes(J)J
SPLcom/android/server/net/NetworkStatsService$DefaultNetworkStatsSettings;->getXtConfig()Lcom/android/server/net/NetworkStatsService$NetworkStatsSettings$Config;
SPLcom/android/server/net/NetworkStatsService$DefaultNetworkStatsSettings;->getXtPersistBytes(J)J
SPLcom/android/server/net/NetworkStatsService$NetworkStatsManagerInternalImpl;->setUidForeground(IZ)V
SPLcom/android/server/net/NetworkStatsService;-><init>(Landroid/content/Context;Landroid/os/INetworkManagementService;Landroid/app/AlarmManager;Landroid/os/PowerManager$WakeLock;Ljava/time/Clock;Landroid/telephony/TelephonyManager;Lcom/android/server/net/NetworkStatsService$NetworkStatsSettings;Lcom/android/server/net/NetworkStatsObservers;Ljava/io/File;Ljava/io/File;)V
SPLcom/android/server/net/NetworkStatsService;->bindConnectivityManager(Landroid/net/IConnectivityManager;)V
SPLcom/android/server/net/NetworkStatsService;->bootstrapStatsLocked()V
SPLcom/android/server/net/NetworkStatsService;->buildRecorder(Ljava/lang/String;Lcom/android/server/net/NetworkStatsService$NetworkStatsSettings$Config;Z)Lcom/android/server/net/NetworkStatsRecorder;
SPLcom/android/server/net/NetworkStatsService;->create(Landroid/content/Context;Landroid/os/INetworkManagementService;)Lcom/android/server/net/NetworkStatsService;
SPLcom/android/server/net/NetworkStatsService;->getNetworkStatsTethering(I)Landroid/net/NetworkStats;
SPLcom/android/server/net/NetworkStatsService;->getNetworkStatsUidDetail([Ljava/lang/String;)Landroid/net/NetworkStats;
SPLcom/android/server/net/NetworkStatsService;->isBandwidthControlEnabled()Z
SPLcom/android/server/net/NetworkStatsService;->maybeUpgradeLegacyStatsLocked()V
SPLcom/android/server/net/NetworkStatsService;->performPoll(I)V
SPLcom/android/server/net/NetworkStatsService;->performPollLocked(I)V
SPLcom/android/server/net/NetworkStatsService;->performSampleLocked()V
SPLcom/android/server/net/NetworkStatsService;->recordSnapshotLocked(J)V
SPLcom/android/server/net/NetworkStatsService;->registerGlobalAlert()V
SPLcom/android/server/net/NetworkStatsService;->registerPollAlarmLocked()V
SPLcom/android/server/net/NetworkStatsService;->setUidForeground(IZ)V
SPLcom/android/server/net/NetworkStatsService;->systemReady()V
SPLcom/android/server/net/NetworkStatsService;->updatePersistThresholdsLocked()V
SPLcom/android/server/net/ipmemorystore/IpMemoryStoreService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/net/watchlist/-$$Lambda$WatchlistLoggingHandler$GBD0dX6RhipHIkM0Z_B5jLlwfHQ;->apply(Ljava/lang/Object;)Ljava/lang/Object;
SPLcom/android/server/net/watchlist/HarmfulDigests;-><init>(Ljava/util/List;)V
SPLcom/android/server/net/watchlist/NetworkWatchlistService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/net/watchlist/NetworkWatchlistService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/net/watchlist/NetworkWatchlistService$Lifecycle;->onStart()V
SPLcom/android/server/net/watchlist/NetworkWatchlistService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/net/watchlist/NetworkWatchlistService;->startWatchlistLogging()Z
SPLcom/android/server/net/watchlist/NetworkWatchlistService;->startWatchlistLoggingImpl()Z
SPLcom/android/server/net/watchlist/ReportWatchlistJobService;->schedule(Landroid/content/Context;)V
SPLcom/android/server/net/watchlist/WatchlistConfig;-><init>()V
SPLcom/android/server/net/watchlist/WatchlistConfig;->parseHashes(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;Ljava/util/List;)V
SPLcom/android/server/net/watchlist/WatchlistConfig;->reloadConfig()V
SPLcom/android/server/net/watchlist/WatchlistConfig;->removeTestModeConfig()V
SPLcom/android/server/net/watchlist/WatchlistLoggingHandler;-><init>(Landroid/content/Context;Landroid/os/Looper;)V
SPLcom/android/server/net/watchlist/WatchlistLoggingHandler;->getAllDigestsForReport(Lcom/android/server/net/watchlist/WatchlistReportDbHelper$AggregatedResult;)Ljava/util/List;
SPLcom/android/server/net/watchlist/WatchlistLoggingHandler;->getMidnightTimestamp(I)J
SPLcom/android/server/net/watchlist/WatchlistLoggingHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/net/watchlist/WatchlistLoggingHandler;->lambda$getDigestFromUid$0$WatchlistLoggingHandler(ILjava/lang/Integer;)[B
SPLcom/android/server/net/watchlist/WatchlistLoggingHandler;->lambda$getDigestFromUid$0(Lcom/android/server/net/watchlist/WatchlistLoggingHandler;ILjava/lang/Integer;)[B
SPLcom/android/server/net/watchlist/WatchlistLoggingHandler;->reportWatchlistIfNecessary()V
SPLcom/android/server/net/watchlist/WatchlistLoggingHandler;->shouldReportNetworkWatchlist(J)Z
SPLcom/android/server/net/watchlist/WatchlistLoggingHandler;->tryAggregateRecords(J)V
SPLcom/android/server/net/watchlist/WatchlistReportDbHelper;->cleanup(J)Z
SPLcom/android/server/net/watchlist/WatchlistReportDbHelper;->getAggregatedRecords(J)Lcom/android/server/net/watchlist/WatchlistReportDbHelper$AggregatedResult;
SPLcom/android/server/net/watchlist/WatchlistReportDbHelper;->getInstance(Landroid/content/Context;)Lcom/android/server/net/watchlist/WatchlistReportDbHelper;
SPLcom/android/server/net/watchlist/WatchlistSettings;-><init>()V
SPLcom/android/server/net/watchlist/WatchlistSettings;-><init>(Ljava/io/File;)V
SPLcom/android/server/net/watchlist/WatchlistSettings;->parseSecretKey(Lorg/xmlpull/v1/XmlPullParser;)[B
SPLcom/android/server/net/watchlist/WatchlistSettings;->reloadSettings()V
SPLcom/android/server/notification/-$$Lambda$NotificationManagerService$14$hWnH6mjUAxwVmpU3QRoPHh5_FyI;-><init>(II)V
SPLcom/android/server/notification/-$$Lambda$NotificationManagerService$Ehw7Jxsy3ZIwTcAa2DFsHjIULas;->run()V
SPLcom/android/server/notification/-$$Lambda$NotificationManagerService$NotificationListeners$T5BM1IF40aMGtqZZRr6BWGjzNxA;->run()V
SPLcom/android/server/notification/-$$Lambda$ouaYRM5YVYoMkUW8dm6TnIjLfgg;-><init>(Lcom/android/server/notification/NotificationManagerService;)V
SPLcom/android/server/notification/-$$Lambda$ouaYRM5YVYoMkUW8dm6TnIjLfgg;->test(Ljava/lang/Object;)Z
SPLcom/android/server/notification/BadgeExtractor;-><init>()V
SPLcom/android/server/notification/BadgeExtractor;->initialize(Landroid/content/Context;Lcom/android/server/notification/NotificationUsageStats;)V
SPLcom/android/server/notification/BadgeExtractor;->setConfig(Lcom/android/server/notification/RankingConfig;)V
SPLcom/android/server/notification/BadgeExtractor;->setZenHelper(Lcom/android/server/notification/ZenModeHelper;)V
SPLcom/android/server/notification/BubbleExtractor;-><init>()V
SPLcom/android/server/notification/BubbleExtractor;->initialize(Landroid/content/Context;Lcom/android/server/notification/NotificationUsageStats;)V
SPLcom/android/server/notification/BubbleExtractor;->setConfig(Lcom/android/server/notification/RankingConfig;)V
SPLcom/android/server/notification/BubbleExtractor;->setZenHelper(Lcom/android/server/notification/ZenModeHelper;)V
SPLcom/android/server/notification/CalendarTracker$CheckEventResult;-><init>()V
SPLcom/android/server/notification/CalendarTracker;->checkEvent(Landroid/service/notification/ZenModeConfig$EventInfo;J)Lcom/android/server/notification/CalendarTracker$CheckEventResult;
SPLcom/android/server/notification/CalendarTracker;->getCalendarsWithAccess()Landroid/util/ArraySet;
SPLcom/android/server/notification/CalendarTracker;->setCallback(Lcom/android/server/notification/CalendarTracker$Callback;)V
SPLcom/android/server/notification/CalendarTracker;->setRegistered(Z)V
SPLcom/android/server/notification/ConditionProviders;-><init>(Landroid/content/Context;Lcom/android/server/notification/ManagedServices$UserProfiles;Landroid/content/pm/IPackageManager;)V
SPLcom/android/server/notification/ConditionProviders;->addSystemProvider(Lcom/android/server/notification/SystemConditionProviderService;)V
SPLcom/android/server/notification/ConditionProviders;->checkServiceToken(Landroid/service/notification/IConditionProvider;)Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;
SPLcom/android/server/notification/ConditionProviders;->ensureRecordExists(Landroid/content/ComponentName;Landroid/net/Uri;Landroid/service/notification/IConditionProvider;)V
SPLcom/android/server/notification/ConditionProviders;->findCondition(Landroid/content/ComponentName;Landroid/net/Uri;)Landroid/service/notification/Condition;
SPLcom/android/server/notification/ConditionProviders;->findConditionProvider(Landroid/content/ComponentName;)Landroid/service/notification/IConditionProvider;
SPLcom/android/server/notification/ConditionProviders;->getConfig()Lcom/android/server/notification/ManagedServices$Config;
SPLcom/android/server/notification/ConditionProviders;->getRecordLocked(Landroid/net/Uri;Landroid/content/ComponentName;Z)Lcom/android/server/notification/ConditionProviders$ConditionRecord;
SPLcom/android/server/notification/ConditionProviders;->getSystemProviders()Ljava/lang/Iterable;
SPLcom/android/server/notification/ConditionProviders;->isSystemProviderEnabled(Ljava/lang/String;)Z
SPLcom/android/server/notification/ConditionProviders;->notifyConditions(Ljava/lang/String;Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;[Landroid/service/notification/Condition;)V
SPLcom/android/server/notification/ConditionProviders;->onBootPhaseAppsCanStart()V
SPLcom/android/server/notification/ConditionProviders;->onServiceAdded(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;)V
SPLcom/android/server/notification/ConditionProviders;->onUserSwitched(I)V
SPLcom/android/server/notification/ConditionProviders;->removeDuplicateConditions(Ljava/lang/String;[Landroid/service/notification/Condition;)[Landroid/service/notification/Condition;
SPLcom/android/server/notification/ConditionProviders;->setCallback(Lcom/android/server/notification/ConditionProviders$Callback;)V
SPLcom/android/server/notification/ConditionProviders;->subscribeIfNecessary(Landroid/content/ComponentName;Landroid/net/Uri;)Z
SPLcom/android/server/notification/ConditionProviders;->subscribeLocked(Lcom/android/server/notification/ConditionProviders$ConditionRecord;)V
SPLcom/android/server/notification/CountdownConditionProvider;->asInterface()Landroid/service/notification/IConditionProvider;
SPLcom/android/server/notification/CountdownConditionProvider;->attachBase(Landroid/content/Context;)V
SPLcom/android/server/notification/CountdownConditionProvider;->getComponent()Landroid/content/ComponentName;
SPLcom/android/server/notification/CountdownConditionProvider;->isValidConditionId(Landroid/net/Uri;)Z
SPLcom/android/server/notification/CountdownConditionProvider;->onBootComplete()V
SPLcom/android/server/notification/CountdownConditionProvider;->onConnected()V
SPLcom/android/server/notification/CriticalNotificationExtractor;-><init>()V
SPLcom/android/server/notification/CriticalNotificationExtractor;->initialize(Landroid/content/Context;Lcom/android/server/notification/NotificationUsageStats;)V
SPLcom/android/server/notification/CriticalNotificationExtractor;->setConfig(Lcom/android/server/notification/RankingConfig;)V
SPLcom/android/server/notification/CriticalNotificationExtractor;->setZenHelper(Lcom/android/server/notification/ZenModeHelper;)V
SPLcom/android/server/notification/EventConditionProvider$3;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/notification/EventConditionProvider$4;->run()V
SPLcom/android/server/notification/EventConditionProvider;-><init>()V
SPLcom/android/server/notification/EventConditionProvider;->asInterface()Landroid/service/notification/IConditionProvider;
SPLcom/android/server/notification/EventConditionProvider;->attachBase(Landroid/content/Context;)V
SPLcom/android/server/notification/EventConditionProvider;->evaluateSubscriptionsW()V
SPLcom/android/server/notification/EventConditionProvider;->getComponent()Landroid/content/ComponentName;
SPLcom/android/server/notification/EventConditionProvider;->getContextForUser(Landroid/content/Context;Landroid/os/UserHandle;)Landroid/content/Context;
SPLcom/android/server/notification/EventConditionProvider;->isValidConditionId(Landroid/net/Uri;)Z
SPLcom/android/server/notification/EventConditionProvider;->onBootComplete()V
SPLcom/android/server/notification/EventConditionProvider;->onConnected()V
SPLcom/android/server/notification/EventConditionProvider;->onSubscribe(Landroid/net/Uri;)V
SPLcom/android/server/notification/EventConditionProvider;->reloadTrackers()V
SPLcom/android/server/notification/EventConditionProvider;->rescheduleAlarm(JJ)V
SPLcom/android/server/notification/EventConditionProvider;->setRegistered(Z)V
SPLcom/android/server/notification/ImportanceExtractor;-><init>()V
SPLcom/android/server/notification/ImportanceExtractor;->initialize(Landroid/content/Context;Lcom/android/server/notification/NotificationUsageStats;)V
SPLcom/android/server/notification/ImportanceExtractor;->setConfig(Lcom/android/server/notification/RankingConfig;)V
SPLcom/android/server/notification/ImportanceExtractor;->setZenHelper(Lcom/android/server/notification/ZenModeHelper;)V
SPLcom/android/server/notification/ManagedServices$1;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
SPLcom/android/server/notification/ManagedServices$ManagedServiceInfo;-><init>(Lcom/android/server/notification/ManagedServices;Landroid/os/IInterface;Landroid/content/ComponentName;IZLandroid/content/ServiceConnection;I)V
SPLcom/android/server/notification/ManagedServices$ManagedServiceInfo;->enabledAndUserMatches(I)Z
SPLcom/android/server/notification/ManagedServices$ManagedServiceInfo;->isEnabledForCurrentProfiles()Z
SPLcom/android/server/notification/ManagedServices$UserProfiles;->getCurrentProfileIds()Landroid/util/IntArray;
SPLcom/android/server/notification/ManagedServices$UserProfiles;->isManagedProfile(I)Z
SPLcom/android/server/notification/ManagedServices$UserProfiles;->updateCache(Landroid/content/Context;)V
SPLcom/android/server/notification/ManagedServices;-><init>(Landroid/content/Context;Ljava/lang/Object;Lcom/android/server/notification/ManagedServices$UserProfiles;Landroid/content/pm/IPackageManager;)V
SPLcom/android/server/notification/ManagedServices;->addApprovedList(Ljava/lang/String;IZ)V
SPLcom/android/server/notification/ManagedServices;->bindToServices(Landroid/util/SparseArray;)V
SPLcom/android/server/notification/ManagedServices;->checkServiceTokenLocked(Landroid/os/IInterface;)Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;
SPLcom/android/server/notification/ManagedServices;->getAllowedComponents(Landroid/util/IntArray;)Landroid/util/SparseArray;
SPLcom/android/server/notification/ManagedServices;->getAllowedPackages()Ljava/util/Set;
SPLcom/android/server/notification/ManagedServices;->getAllowedPackages(I)Ljava/util/List;
SPLcom/android/server/notification/ManagedServices;->getBindFlags()I
SPLcom/android/server/notification/ManagedServices;->getPackageName(Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/notification/ManagedServices;->getRemovableConnectedServices()Ljava/util/Set;
SPLcom/android/server/notification/ManagedServices;->getServiceFromTokenLocked(Landroid/os/IInterface;)Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;
SPLcom/android/server/notification/ManagedServices;->getServices()Ljava/util/List;
SPLcom/android/server/notification/ManagedServices;->isPackageOrComponentAllowed(Ljava/lang/String;I)Z
SPLcom/android/server/notification/ManagedServices;->loadComponentNamesFromValues(Landroid/util/ArraySet;I)Landroid/util/ArraySet;
SPLcom/android/server/notification/ManagedServices;->onBootPhaseAppsCanStart()V
SPLcom/android/server/notification/ManagedServices;->onUserSwitched(I)V
SPLcom/android/server/notification/ManagedServices;->populateComponentsToBind(Landroid/util/SparseArray;Landroid/util/IntArray;Landroid/util/SparseArray;)V
SPLcom/android/server/notification/ManagedServices;->populateComponentsToUnbind(ZLjava/util/Set;Landroid/util/SparseArray;Landroid/util/SparseArray;)V
SPLcom/android/server/notification/ManagedServices;->queryPackageForServices(Ljava/lang/String;I)Ljava/util/Set;
SPLcom/android/server/notification/ManagedServices;->queryPackageForServices(Ljava/lang/String;II)Ljava/util/Set;
SPLcom/android/server/notification/ManagedServices;->readXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/util/function/Predicate;ZI)V
SPLcom/android/server/notification/ManagedServices;->rebindServices(ZI)V
SPLcom/android/server/notification/ManagedServices;->registerGuestService(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;)V
SPLcom/android/server/notification/ManagedServices;->registerService(Landroid/content/ComponentName;I)V
SPLcom/android/server/notification/ManagedServices;->registerService(Landroid/os/IInterface;Landroid/content/ComponentName;I)V
SPLcom/android/server/notification/ManagedServices;->registerServiceImpl(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;)Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;
SPLcom/android/server/notification/ManagedServices;->registerServiceLocked(Landroid/content/ComponentName;IZ)V
SPLcom/android/server/notification/ManagedServices;->setPackageOrComponentEnabled(Ljava/lang/String;IZZ)V
SPLcom/android/server/notification/ManagedServices;->unbindFromServices(Landroid/util/SparseArray;)V
SPLcom/android/server/notification/ManagedServices;->writeXml(Lorg/xmlpull/v1/XmlSerializer;ZI)V
SPLcom/android/server/notification/NotificationAdjustmentExtractor;-><init>()V
SPLcom/android/server/notification/NotificationAdjustmentExtractor;->initialize(Landroid/content/Context;Lcom/android/server/notification/NotificationUsageStats;)V
SPLcom/android/server/notification/NotificationAdjustmentExtractor;->setConfig(Lcom/android/server/notification/RankingConfig;)V
SPLcom/android/server/notification/NotificationAdjustmentExtractor;->setZenHelper(Lcom/android/server/notification/ZenModeHelper;)V
SPLcom/android/server/notification/NotificationChannelExtractor;-><init>()V
SPLcom/android/server/notification/NotificationChannelExtractor;->initialize(Landroid/content/Context;Lcom/android/server/notification/NotificationUsageStats;)V
SPLcom/android/server/notification/NotificationChannelExtractor;->setConfig(Lcom/android/server/notification/RankingConfig;)V
SPLcom/android/server/notification/NotificationChannelExtractor;->setZenHelper(Lcom/android/server/notification/ZenModeHelper;)V
SPLcom/android/server/notification/NotificationComparator;-><init>(Landroid/content/Context;)V
SPLcom/android/server/notification/NotificationIntrusivenessExtractor;-><init>()V
SPLcom/android/server/notification/NotificationIntrusivenessExtractor;->initialize(Landroid/content/Context;Lcom/android/server/notification/NotificationUsageStats;)V
SPLcom/android/server/notification/NotificationIntrusivenessExtractor;->setConfig(Lcom/android/server/notification/RankingConfig;)V
SPLcom/android/server/notification/NotificationIntrusivenessExtractor;->setZenHelper(Lcom/android/server/notification/ZenModeHelper;)V
SPLcom/android/server/notification/NotificationManagerService$10$1;->run()V
SPLcom/android/server/notification/NotificationManagerService$10;->cancelNotificationWithTag(Ljava/lang/String;Ljava/lang/String;II)V
SPLcom/android/server/notification/NotificationManagerService$10;->createNotificationChannels(Ljava/lang/String;Landroid/content/pm/ParceledListSlice;)V
SPLcom/android/server/notification/NotificationManagerService$10;->createNotificationChannelsImpl(Ljava/lang/String;ILandroid/content/pm/ParceledListSlice;)V
SPLcom/android/server/notification/NotificationManagerService$10;->deleteNotificationChannel(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/notification/NotificationManagerService$10;->getActiveNotificationsFromListener(Landroid/service/notification/INotificationListener;[Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
SPLcom/android/server/notification/NotificationManagerService$10;->getAppActiveNotifications(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
SPLcom/android/server/notification/NotificationManagerService$10;->getConsolidatedNotificationPolicy()Landroid/app/NotificationManager$Policy;
SPLcom/android/server/notification/NotificationManagerService$10;->getEffectsSuppressor()Landroid/content/ComponentName;
SPLcom/android/server/notification/NotificationManagerService$10;->getNotificationChannel(Ljava/lang/String;Ljava/lang/String;)Landroid/app/NotificationChannel;
SPLcom/android/server/notification/NotificationManagerService$10;->getZenMode()I
SPLcom/android/server/notification/NotificationManagerService$10;->getZenModeConfig()Landroid/service/notification/ZenModeConfig;
SPLcom/android/server/notification/NotificationManagerService$10;->notifyConditions(Ljava/lang/String;Landroid/service/notification/IConditionProvider;[Landroid/service/notification/Condition;)V
SPLcom/android/server/notification/NotificationManagerService$10;->registerListener(Landroid/service/notification/INotificationListener;Landroid/content/ComponentName;I)V
SPLcom/android/server/notification/NotificationManagerService$10;->setNotificationListenerAccessGrantedForUser(Landroid/content/ComponentName;IZ)V
SPLcom/android/server/notification/NotificationManagerService$10;->setNotificationPolicyAccessGranted(Ljava/lang/String;Z)V
SPLcom/android/server/notification/NotificationManagerService$10;->setNotificationPolicyAccessGrantedForUser(Ljava/lang/String;IZ)V
SPLcom/android/server/notification/NotificationManagerService$10;->shouldHideSilentStatusIcons(Ljava/lang/String;)Z
SPLcom/android/server/notification/NotificationManagerService$14;->run()V
SPLcom/android/server/notification/NotificationManagerService$1;->onSetDisabled(I)V
SPLcom/android/server/notification/NotificationManagerService$6;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/notification/NotificationManagerService$7;-><init>(Lcom/android/server/notification/NotificationManagerService;)V
SPLcom/android/server/notification/NotificationManagerService$7;->onConfigChanged()V
SPLcom/android/server/notification/NotificationManagerService$7;->onPolicyChanged()V
SPLcom/android/server/notification/NotificationManagerService$7;->onZenModeChanged()V
SPLcom/android/server/notification/NotificationManagerService$Archive;-><init>(I)V
SPLcom/android/server/notification/NotificationManagerService$CancelNotificationRunnable;->run()V
SPLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->asInterface(Landroid/os/IBinder;)Landroid/os/IInterface;
SPLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->ensureAssistant()V
SPLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->getConfig()Lcom/android/server/notification/ManagedServices$Config;
SPLcom/android/server/notification/NotificationManagerService$NotificationAssistants;->onServiceAdded(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;)V
SPLcom/android/server/notification/NotificationManagerService$NotificationListeners;->checkType(Landroid/os/IInterface;)Z
SPLcom/android/server/notification/NotificationManagerService$NotificationListeners;->getBindFlags()I
SPLcom/android/server/notification/NotificationManagerService$NotificationListeners;->getConfig()Lcom/android/server/notification/ManagedServices$Config;
SPLcom/android/server/notification/NotificationManagerService$NotificationListeners;->isListenerPackage(Ljava/lang/String;)Z
SPLcom/android/server/notification/NotificationManagerService$NotificationListeners;->lambda$notifyNotificationChannelChanged$2$NotificationManagerService$NotificationListeners(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannel;I)V
SPLcom/android/server/notification/NotificationManagerService$NotificationListeners;->notifyNotificationChannelChanged(Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannel;I)V
SPLcom/android/server/notification/NotificationManagerService$NotificationListeners;->onServiceAdded(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;)V
SPLcom/android/server/notification/NotificationManagerService$RankingHandlerWorker;-><init>(Lcom/android/server/notification/NotificationManagerService;Landroid/os/Looper;)V
SPLcom/android/server/notification/NotificationManagerService$RankingHandlerWorker;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/notification/NotificationManagerService$RankingHandlerWorker;->requestSort()V
SPLcom/android/server/notification/NotificationManagerService$SettingsObserver;-><init>(Lcom/android/server/notification/NotificationManagerService;Landroid/os/Handler;)V
SPLcom/android/server/notification/NotificationManagerService$SettingsObserver;->observe()V
SPLcom/android/server/notification/NotificationManagerService$SettingsObserver;->update(Landroid/net/Uri;)V
SPLcom/android/server/notification/NotificationManagerService$WorkerHandler;-><init>(Lcom/android/server/notification/NotificationManagerService;Landroid/os/Looper;)V
SPLcom/android/server/notification/NotificationManagerService$WorkerHandler;->scheduleCancelNotification(Lcom/android/server/notification/NotificationManagerService$CancelNotificationRunnable;)V
SPLcom/android/server/notification/NotificationManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/notification/NotificationManagerService;->access$3500(Lcom/android/server/notification/NotificationManagerService;)Lcom/android/server/notification/SnoozeHelper;
SPLcom/android/server/notification/NotificationManagerService;->access$8300(Lcom/android/server/notification/NotificationManagerService;Ljava/util/ArrayList;IILjava/lang/String;ZLjava/lang/String;Lcom/android/server/notification/NotificationManagerService$FlagChecker;ZIZILjava/lang/String;Z)V
SPLcom/android/server/notification/NotificationManagerService;->canUseManagedServices(Ljava/lang/String;)Z
SPLcom/android/server/notification/NotificationManagerService;->cancelAllNotificationsByListLocked(Ljava/util/ArrayList;IILjava/lang/String;ZLjava/lang/String;Lcom/android/server/notification/NotificationManagerService$FlagChecker;ZIZILjava/lang/String;Z)V
SPLcom/android/server/notification/NotificationManagerService;->cancelAllNotificationsInt(IILjava/lang/String;Ljava/lang/String;IIZIILcom/android/server/notification/ManagedServices$ManagedServiceInfo;)V
SPLcom/android/server/notification/NotificationManagerService;->cancelNotification(IILjava/lang/String;Ljava/lang/String;IIIZIIIILcom/android/server/notification/ManagedServices$ManagedServiceInfo;)V
SPLcom/android/server/notification/NotificationManagerService;->cancelNotification(IILjava/lang/String;Ljava/lang/String;IIIZIILcom/android/server/notification/ManagedServices$ManagedServiceInfo;)V
SPLcom/android/server/notification/NotificationManagerService;->checkCallerIsSameApp(Ljava/lang/String;II)V
SPLcom/android/server/notification/NotificationManagerService;->checkCallerIsSystem()V
SPLcom/android/server/notification/NotificationManagerService;->disableNotificationEffects(Lcom/android/server/notification/NotificationRecord;)Ljava/lang/String;
SPLcom/android/server/notification/NotificationManagerService;->findNotificationByListLocked(Ljava/util/ArrayList;Ljava/lang/String;Ljava/lang/String;II)Lcom/android/server/notification/NotificationRecord;
SPLcom/android/server/notification/NotificationManagerService;->findNotificationLocked(Ljava/lang/String;Ljava/lang/String;II)Lcom/android/server/notification/NotificationRecord;
SPLcom/android/server/notification/NotificationManagerService;->getCompanionManager()Landroid/companion/ICompanionDeviceManager;
SPLcom/android/server/notification/NotificationManagerService;->getLongArray(Landroid/content/res/Resources;II[J)[J
SPLcom/android/server/notification/NotificationManagerService;->handleRankingSort()V
SPLcom/android/server/notification/NotificationManagerService;->handleSavePolicyFile()V
SPLcom/android/server/notification/NotificationManagerService;->hasCompanionDevice(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;)Z
SPLcom/android/server/notification/NotificationManagerService;->init(Landroid/os/Looper;Landroid/content/pm/IPackageManager;Landroid/content/pm/PackageManager;Lcom/android/server/lights/LightsManager;Lcom/android/server/notification/NotificationManagerService$NotificationListeners;Lcom/android/server/notification/NotificationManagerService$NotificationAssistants;Lcom/android/server/notification/ConditionProviders;Landroid/companion/ICompanionDeviceManager;Lcom/android/server/notification/SnoozeHelper;Lcom/android/server/notification/NotificationUsageStats;Landroid/util/AtomicFile;Landroid/app/ActivityManager;Lcom/android/server/notification/GroupHelper;Landroid/app/IActivityManager;Landroid/app/usage/UsageStatsManagerInternal;Landroid/app/admin/DevicePolicyManagerInternal;Landroid/app/IUriGrantsManager;Lcom/android/server/uri/UriGrantsManagerInternal;Landroid/app/AppOpsManager;)V
SPLcom/android/server/notification/NotificationManagerService;->isCallerSystemOrPhone()Z
SPLcom/android/server/notification/NotificationManagerService;->isCallingUidSystem()Z
SPLcom/android/server/notification/NotificationManagerService;->isUidSystemOrPhone(I)Z
SPLcom/android/server/notification/NotificationManagerService;->lambda$handleSavePolicyFile$0$NotificationManagerService()V
SPLcom/android/server/notification/NotificationManagerService;->lambda$handleSavePolicyFile$0(Lcom/android/server/notification/NotificationManagerService;)V
SPLcom/android/server/notification/NotificationManagerService;->listenForCallState()V
SPLcom/android/server/notification/NotificationManagerService;->loadPolicyFile()V
SPLcom/android/server/notification/NotificationManagerService;->makeRankingUpdateLocked(Lcom/android/server/notification/ManagedServices$ManagedServiceInfo;)Landroid/service/notification/NotificationRankingUpdate;
SPLcom/android/server/notification/NotificationManagerService;->onBootPhase(I)V
SPLcom/android/server/notification/NotificationManagerService;->onStart()V
SPLcom/android/server/notification/NotificationManagerService;->readPolicyXml(Ljava/io/InputStream;ZI)V
SPLcom/android/server/notification/NotificationManagerService;->sendRegisteredOnlyBroadcast(Ljava/lang/String;)V
SPLcom/android/server/notification/NotificationManagerService;->writePolicyXml(Ljava/io/OutputStream;ZI)V
SPLcom/android/server/notification/NotificationUsageStats$SQLiteLog;-><init>(Landroid/content/Context;)V
SPLcom/android/server/notification/NotificationUsageStats;-><init>(Landroid/content/Context;)V
SPLcom/android/server/notification/PreferencesHelper$PackagePreferences;-><init>()V
SPLcom/android/server/notification/PreferencesHelper;-><init>(Landroid/content/Context;Landroid/content/pm/PackageManager;Lcom/android/server/notification/RankingHandler;Lcom/android/server/notification/ZenModeHelper;)V
SPLcom/android/server/notification/PreferencesHelper;->createDefaultChannelIfNeeded(Lcom/android/server/notification/PreferencesHelper$PackagePreferences;)V
SPLcom/android/server/notification/PreferencesHelper;->createNotificationChannel(Ljava/lang/String;ILandroid/app/NotificationChannel;ZZ)V
SPLcom/android/server/notification/PreferencesHelper;->deleteNotificationChannel(Ljava/lang/String;ILjava/lang/String;)V
SPLcom/android/server/notification/PreferencesHelper;->getNotificationChannel(Ljava/lang/String;ILjava/lang/String;Z)Landroid/app/NotificationChannel;
SPLcom/android/server/notification/PreferencesHelper;->getPackagePreferences(Ljava/lang/String;I)Lcom/android/server/notification/PreferencesHelper$PackagePreferences;
SPLcom/android/server/notification/PreferencesHelper;->onUserSwitched(I)V
SPLcom/android/server/notification/PreferencesHelper;->shouldHideSilentStatusIcons()Z
SPLcom/android/server/notification/PreferencesHelper;->updateBadgingEnabled()V
SPLcom/android/server/notification/PreferencesHelper;->updateBubblesEnabled()V
SPLcom/android/server/notification/PriorityExtractor;-><init>()V
SPLcom/android/server/notification/PriorityExtractor;->initialize(Landroid/content/Context;Lcom/android/server/notification/NotificationUsageStats;)V
SPLcom/android/server/notification/PriorityExtractor;->setConfig(Lcom/android/server/notification/RankingConfig;)V
SPLcom/android/server/notification/PriorityExtractor;->setZenHelper(Lcom/android/server/notification/ZenModeHelper;)V
SPLcom/android/server/notification/RankingHelper;-><init>(Landroid/content/Context;Lcom/android/server/notification/RankingHandler;Lcom/android/server/notification/RankingConfig;Lcom/android/server/notification/ZenModeHelper;Lcom/android/server/notification/NotificationUsageStats;[Ljava/lang/String;)V
SPLcom/android/server/notification/RankingHelper;->sort(Ljava/util/ArrayList;)V
SPLcom/android/server/notification/ScheduleConditionProvider$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/notification/ScheduleConditionProvider;-><init>()V
SPLcom/android/server/notification/ScheduleConditionProvider;->asInterface()Landroid/service/notification/IConditionProvider;
SPLcom/android/server/notification/ScheduleConditionProvider;->attachBase(Landroid/content/Context;)V
SPLcom/android/server/notification/ScheduleConditionProvider;->createCondition(Landroid/net/Uri;ILjava/lang/String;)Landroid/service/notification/Condition;
SPLcom/android/server/notification/ScheduleConditionProvider;->evaluateSubscriptionLocked(Landroid/net/Uri;Landroid/service/notification/ScheduleCalendar;JJ)Landroid/service/notification/Condition;
SPLcom/android/server/notification/ScheduleConditionProvider;->evaluateSubscriptions()V
SPLcom/android/server/notification/ScheduleConditionProvider;->getComponent()Landroid/content/ComponentName;
SPLcom/android/server/notification/ScheduleConditionProvider;->getNextAlarm()J
SPLcom/android/server/notification/ScheduleConditionProvider;->isValidConditionId(Landroid/net/Uri;)Z
SPLcom/android/server/notification/ScheduleConditionProvider;->onBootComplete()V
SPLcom/android/server/notification/ScheduleConditionProvider;->onConnected()V
SPLcom/android/server/notification/ScheduleConditionProvider;->onSubscribe(Landroid/net/Uri;)V
SPLcom/android/server/notification/ScheduleConditionProvider;->readSnoozed()V
SPLcom/android/server/notification/ScheduleConditionProvider;->removeSnoozed(Landroid/net/Uri;)V
SPLcom/android/server/notification/ScheduleConditionProvider;->setRegistered(Z)V
SPLcom/android/server/notification/ScheduleConditionProvider;->updateAlarm(JJ)V
SPLcom/android/server/notification/SnoozeHelper;-><init>(Landroid/content/Context;Lcom/android/server/notification/SnoozeHelper$Callback;Lcom/android/server/notification/ManagedServices$UserProfiles;)V
SPLcom/android/server/notification/SnoozeHelper;->cancel(ILjava/lang/String;)Z
SPLcom/android/server/notification/SnoozeHelper;->cancel(ILjava/lang/String;Ljava/lang/String;I)Z
SPLcom/android/server/notification/SnoozeHelper;->getSnoozed(ILjava/lang/String;)Ljava/util/Collection;
SPLcom/android/server/notification/ValidateNotificationPeople;-><init>()V
SPLcom/android/server/notification/ValidateNotificationPeople;->initialize(Landroid/content/Context;Lcom/android/server/notification/NotificationUsageStats;)V
SPLcom/android/server/notification/ValidateNotificationPeople;->setConfig(Lcom/android/server/notification/RankingConfig;)V
SPLcom/android/server/notification/ValidateNotificationPeople;->setZenHelper(Lcom/android/server/notification/ZenModeHelper;)V
SPLcom/android/server/notification/VisibilityExtractor;-><init>()V
SPLcom/android/server/notification/VisibilityExtractor;->initialize(Landroid/content/Context;Lcom/android/server/notification/NotificationUsageStats;)V
SPLcom/android/server/notification/VisibilityExtractor;->setConfig(Lcom/android/server/notification/RankingConfig;)V
SPLcom/android/server/notification/VisibilityExtractor;->setZenHelper(Lcom/android/server/notification/ZenModeHelper;)V
SPLcom/android/server/notification/ZenLog;->append(ILjava/lang/String;)V
SPLcom/android/server/notification/ZenLog;->traceConfig(Ljava/lang/String;Landroid/service/notification/ZenModeConfig;Landroid/service/notification/ZenModeConfig;)V
SPLcom/android/server/notification/ZenLog;->traceSetRingerModeInternal(IILjava/lang/String;II)V
SPLcom/android/server/notification/ZenModeConditions;-><init>(Lcom/android/server/notification/ZenModeHelper;Lcom/android/server/notification/ConditionProviders;)V
SPLcom/android/server/notification/ZenModeConditions;->evaluateConfig(Landroid/service/notification/ZenModeConfig;Landroid/content/ComponentName;Z)V
SPLcom/android/server/notification/ZenModeConditions;->evaluateRule(Landroid/service/notification/ZenModeConfig$ZenRule;Landroid/util/ArraySet;Landroid/content/ComponentName;Z)V
SPLcom/android/server/notification/ZenModeConditions;->onBootComplete()V
SPLcom/android/server/notification/ZenModeConditions;->onConditionChanged(Landroid/net/Uri;Landroid/service/notification/Condition;)V
SPLcom/android/server/notification/ZenModeConditions;->onUserSwitched()V
SPLcom/android/server/notification/ZenModeConditions;->updateSnoozing(Landroid/service/notification/ZenModeConfig$ZenRule;)Z
SPLcom/android/server/notification/ZenModeExtractor;-><init>()V
SPLcom/android/server/notification/ZenModeExtractor;->initialize(Landroid/content/Context;Lcom/android/server/notification/NotificationUsageStats;)V
SPLcom/android/server/notification/ZenModeExtractor;->setConfig(Lcom/android/server/notification/RankingConfig;)V
SPLcom/android/server/notification/ZenModeExtractor;->setZenHelper(Lcom/android/server/notification/ZenModeHelper;)V
SPLcom/android/server/notification/ZenModeFiltering$RepeatCallers;-><init>(Lcom/android/server/notification/ZenModeFiltering$1;)V
SPLcom/android/server/notification/ZenModeHelper$Callback;->onConsolidatedPolicyChanged()V
SPLcom/android/server/notification/ZenModeHelper$Callback;->onPolicyChanged()V
SPLcom/android/server/notification/ZenModeHelper$H;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/notification/ZenModeHelper$Metrics;->emitDndType()V
SPLcom/android/server/notification/ZenModeHelper$Metrics;->emitRules()V
SPLcom/android/server/notification/ZenModeHelper$Metrics;->emitZenMode()V
SPLcom/android/server/notification/ZenModeHelper$Metrics;->onConfigChanged()V
SPLcom/android/server/notification/ZenModeHelper$Metrics;->onZenModeChanged()V
SPLcom/android/server/notification/ZenModeHelper$RingerModeDelegate;->getRingerModeAffectedStreams(I)I
SPLcom/android/server/notification/ZenModeHelper$RingerModeDelegate;->onSetRingerModeInternal(IILjava/lang/String;ILandroid/media/VolumePolicy;)I
SPLcom/android/server/notification/ZenModeHelper$SettingsObserver;->update(Landroid/net/Uri;)V
SPLcom/android/server/notification/ZenModeHelper;-><init>(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/notification/ConditionProviders;)V
SPLcom/android/server/notification/ZenModeHelper;->addCallback(Lcom/android/server/notification/ZenModeHelper$Callback;)V
SPLcom/android/server/notification/ZenModeHelper;->applyRestrictions()V
SPLcom/android/server/notification/ZenModeHelper;->applyRestrictions(ZI)V
SPLcom/android/server/notification/ZenModeHelper;->applyRestrictions(ZII)V
SPLcom/android/server/notification/ZenModeHelper;->applyZenToRingerMode()V
SPLcom/android/server/notification/ZenModeHelper;->cleanUpZenRules()V
SPLcom/android/server/notification/ZenModeHelper;->computeZenMode()I
SPLcom/android/server/notification/ZenModeHelper;->evaluateZenMode(Ljava/lang/String;Z)V
SPLcom/android/server/notification/ZenModeHelper;->findMatchingRule(Landroid/service/notification/ZenModeConfig;Landroid/net/Uri;Landroid/service/notification/Condition;)Landroid/service/notification/ZenModeConfig$ZenRule;
SPLcom/android/server/notification/ZenModeHelper;->getConfig()Landroid/service/notification/ZenModeConfig;
SPLcom/android/server/notification/ZenModeHelper;->getConsolidatedNotificationPolicy()Landroid/app/NotificationManager$Policy;
SPLcom/android/server/notification/ZenModeHelper;->getNotificationPolicy()Landroid/app/NotificationManager$Policy;
SPLcom/android/server/notification/ZenModeHelper;->getZenMode()I
SPLcom/android/server/notification/ZenModeHelper;->getZenModeListenerInterruptionFilter()I
SPLcom/android/server/notification/ZenModeHelper;->initZenMode()V
SPLcom/android/server/notification/ZenModeHelper;->loadConfigForUser(ILjava/lang/String;)V
SPLcom/android/server/notification/ZenModeHelper;->onSystemReady()V
SPLcom/android/server/notification/ZenModeHelper;->onUserSwitched(I)V
SPLcom/android/server/notification/ZenModeHelper;->readDefaultConfig(Landroid/content/res/Resources;)Landroid/service/notification/ZenModeConfig;
SPLcom/android/server/notification/ZenModeHelper;->readXml(Lorg/xmlpull/v1/XmlPullParser;ZI)V
SPLcom/android/server/notification/ZenModeHelper;->setAutomaticZenRuleState(Landroid/net/Uri;Landroid/service/notification/Condition;)V
SPLcom/android/server/notification/ZenModeHelper;->setConfigLocked(Landroid/service/notification/ZenModeConfig;Landroid/content/ComponentName;Ljava/lang/String;)Z
SPLcom/android/server/notification/ZenModeHelper;->setConfigLocked(Landroid/service/notification/ZenModeConfig;Ljava/lang/String;Landroid/content/ComponentName;Z)Z
SPLcom/android/server/notification/ZenModeHelper;->setZenModeSetting(I)V
SPLcom/android/server/notification/ZenModeHelper;->showZenUpgradeNotification(I)V
SPLcom/android/server/notification/ZenModeHelper;->updateConsolidatedPolicy(Ljava/lang/String;)V
SPLcom/android/server/notification/ZenModeHelper;->updateDefaultAutomaticRuleNames()V
SPLcom/android/server/notification/ZenModeHelper;->updateSnoozing(Landroid/service/notification/ZenModeConfig$ZenRule;)Z
SPLcom/android/server/notification/ZenModeHelper;->writeXml(Lorg/xmlpull/v1/XmlSerializer;ZLjava/lang/Integer;I)V
SPLcom/android/server/oemlock/OemLockService$1;->onUserRestrictionsChanged(ILandroid/os/Bundle;Landroid/os/Bundle;)V
SPLcom/android/server/oemlock/OemLockService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/oemlock/OemLockService;-><init>(Landroid/content/Context;Lcom/android/server/oemlock/OemLock;)V
SPLcom/android/server/oemlock/OemLockService;->onStart()V
SPLcom/android/server/oemlock/VendorLock;->getOemLockHalService()Landroid/hardware/oemlock/V1_0/IOemLock;
SPLcom/android/server/om/-$$Lambda$OverlayManagerService$_WGEV7N0qhntbqqDW3A1O-TVv5o;->run()V
SPLcom/android/server/om/-$$Lambda$OverlayManagerSettings$ATr0DZmWpSWdKD0COw4t2qS-DRk;-><init>()V
SPLcom/android/server/om/-$$Lambda$OverlayManagerSettings$ATr0DZmWpSWdKD0COw4t2qS-DRk;->test(Ljava/lang/Object;)Z
SPLcom/android/server/om/-$$Lambda$OverlayManagerSettings$IkswmT9ZZJXmNAztGRVrD3hODMw;-><init>()V
SPLcom/android/server/om/-$$Lambda$OverlayManagerSettings$IkswmT9ZZJXmNAztGRVrD3hODMw;->test(Ljava/lang/Object;)Z
SPLcom/android/server/om/-$$Lambda$OverlayManagerSettings$WYtPK6Ebqjgxm8_8Cot-ijv_z_8;-><init>()V
SPLcom/android/server/om/-$$Lambda$OverlayManagerSettings$WYtPK6Ebqjgxm8_8Cot-ijv_z_8;->apply(Ljava/lang/Object;)Ljava/lang/Object;
SPLcom/android/server/om/-$$Lambda$OverlayManagerSettings$jZUujzDxrP0hpAqUxnqEf-b-nQc;-><init>()V
SPLcom/android/server/om/-$$Lambda$OverlayManagerSettings$jZUujzDxrP0hpAqUxnqEf-b-nQc;->apply(Ljava/lang/Object;)Ljava/lang/Object;
SPLcom/android/server/om/-$$Lambda$OverlayManagerSettings$sx0Nyvq91kCH_A-4Ctf09G_0u9M;-><init>()V
SPLcom/android/server/om/-$$Lambda$OverlayManagerSettings$sx0Nyvq91kCH_A-4Ctf09G_0u9M;->apply(Ljava/lang/Object;)Ljava/lang/Object;
SPLcom/android/server/om/-$$Lambda$OverlayManagerSettings$vXm2C4y9Q-F5yYZNimB-Lr6w-oI;-><init>()V
SPLcom/android/server/om/-$$Lambda$OverlayManagerSettings$vXm2C4y9Q-F5yYZNimB-Lr6w-oI;->applyAsInt(Ljava/lang/Object;)I
SPLcom/android/server/om/-$$Lambda$bXuJGR0fITXNwGnQfQHv9KS-XgY;-><init>()V
SPLcom/android/server/om/-$$Lambda$bXuJGR0fITXNwGnQfQHv9KS-XgY;->get()Ljava/lang/Object;
SPLcom/android/server/om/IdmapManager;->connectToIdmap2d()V
SPLcom/android/server/om/IdmapManager;->createIdmap(Landroid/content/pm/PackageInfo;Landroid/content/pm/PackageInfo;I)Z
SPLcom/android/server/om/IdmapManager;->determineFulfilledPolicies(Landroid/content/pm/PackageInfo;)I
SPLcom/android/server/om/IdmapManager;->getIdmapPath(Ljava/lang/String;I)Ljava/lang/String;
SPLcom/android/server/om/IdmapManager;->idmapExists(Landroid/content/pm/PackageInfo;I)Z
SPLcom/android/server/om/OverlayManagerService$PackageManagerHelper;->getOverlayPackages(I)Ljava/util/List;
SPLcom/android/server/om/OverlayManagerService$PackageManagerHelper;->getPackageInfo(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;
SPLcom/android/server/om/OverlayManagerService$PackageManagerHelper;->getPackageInfo(Ljava/lang/String;IZ)Landroid/content/pm/PackageInfo;
SPLcom/android/server/om/OverlayManagerService;-><init>(Landroid/content/Context;Lcom/android/server/pm/Installer;)V
SPLcom/android/server/om/OverlayManagerService;->getDefaultOverlayPackages()[Ljava/lang/String;
SPLcom/android/server/om/OverlayManagerService;->initIfNeeded()V
SPLcom/android/server/om/OverlayManagerService;->lambda$schedulePersistSettings$0$OverlayManagerService()V
SPLcom/android/server/om/OverlayManagerService;->lambda$schedulePersistSettings$0(Lcom/android/server/om/OverlayManagerService;)V
SPLcom/android/server/om/OverlayManagerService;->onStart()V
SPLcom/android/server/om/OverlayManagerService;->onSwitchUser(I)V
SPLcom/android/server/om/OverlayManagerService;->restoreSettings()V
SPLcom/android/server/om/OverlayManagerService;->updateAssets(ILjava/util/List;)V
SPLcom/android/server/om/OverlayManagerServiceImpl;->calculateNewState(Landroid/content/pm/PackageInfo;Landroid/content/pm/PackageInfo;II)I
SPLcom/android/server/om/OverlayManagerServiceImpl;->mustReinitializeOverlay(Landroid/content/pm/PackageInfo;Landroid/content/om/OverlayInfo;)Z
SPLcom/android/server/om/OverlayManagerServiceImpl;->updateState(Ljava/lang/String;Ljava/lang/String;II)Z
SPLcom/android/server/om/OverlayManagerSettings$Serializer;->persist(Ljava/util/ArrayList;Ljava/io/OutputStream;)V
SPLcom/android/server/om/OverlayManagerSettings$Serializer;->persistRow(Lcom/android/internal/util/FastXmlSerializer;Lcom/android/server/om/OverlayManagerSettings$SettingsItem;)V
SPLcom/android/server/om/OverlayManagerSettings$Serializer;->restore(Ljava/util/ArrayList;Ljava/io/InputStream;)V
SPLcom/android/server/om/OverlayManagerSettings$Serializer;->restoreRow(Lorg/xmlpull/v1/XmlPullParser;I)Lcom/android/server/om/OverlayManagerSettings$SettingsItem;
SPLcom/android/server/om/OverlayManagerSettings$SettingsItem;-><init>(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;IZZILjava/lang/String;)V
SPLcom/android/server/om/OverlayManagerSettings;->getOverlayInfo(Ljava/lang/String;I)Landroid/content/om/OverlayInfo;
SPLcom/android/server/om/OverlayManagerSettings;->getOverlaysForUser(I)Landroid/util/ArrayMap;
SPLcom/android/server/os/-$$Lambda$SchedulingPolicyService$ao2OiSvvlyzmJ0li0c0nhHy-IDk;->run()V
SPLcom/android/server/os/BugreportManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/os/BugreportManagerService;->onStart()V
SPLcom/android/server/os/DeviceIdentifiersPolicyService$DeviceIdentifiersPolicy;->getSerial()Ljava/lang/String;
SPLcom/android/server/os/DeviceIdentifiersPolicyService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/os/DeviceIdentifiersPolicyService;->onStart()V
SPLcom/android/server/os/SchedulingPolicyService;-><init>()V
SPLcom/android/server/os/SchedulingPolicyService;->disableCpusetBoost(I)I
SPLcom/android/server/os/SchedulingPolicyService;->lambda$new$0$SchedulingPolicyService()V
SPLcom/android/server/os/SchedulingPolicyService;->lambda$new$0(Lcom/android/server/os/SchedulingPolicyService;)V
SPLcom/android/server/os/SchedulingPolicyService;->requestPriority(IIIZ)I
SPLcom/android/server/pm/-$$Lambda$ApexManager$Nr-JVjEMcDAmAF2rSRdMapKh1Go;-><init>()V
SPLcom/android/server/pm/-$$Lambda$ApexManager$Nr-JVjEMcDAmAF2rSRdMapKh1Go;->apply(Ljava/lang/Object;)Ljava/lang/Object;
SPLcom/android/server/pm/-$$Lambda$ComponentResolver$PuHbZd5KEOMGjkH8xDOhOwfLtC0;-><init>()V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$5hSpumAE5maEOgUlkeKZ3EJQUOU;-><init>()V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$9ZEk0HhVZsj2KQghpPxi82zlVQA;->runOrThrow()V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$HNA1AuKrPFdIr9HtUSHHnPIBTTk;->runOrThrow()V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$JUo3M6zuPH65x1voKjSOJvOMHRw;-><init>()V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$JUo3M6zuPH65x1voKjSOJvOMHRw;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$O5iApY07YeJyXA8KUFVcxpCf1NI;->run()V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$PackageParserCallback$xinvBJUpQse3J1IBBKjvYTIW8MQ;-><init>()V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$QuhmYCmH6DQCctkuIoqu3zaZWSE;-><init>()V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$ThH5vuBggVL5a6g8JW6gf8x0jT8;->runOrThrow()V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$YHri1Lu_7U5nzv2NPItDUIuocnY;->run()V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$gOdSzzOoHvFHJbKlJkAgg4fzOH8;-><init>()V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$gOdSzzOoHvFHJbKlJkAgg4fzOH8;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$nmexRk77HBh5Ag-q02zd0jSuaUk;->runOrThrow()V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$sJ5w9GfSftnZPyv5hBDxQkxDJMU;-><init>(Lcom/android/server/pm/PackageManagerService;Ljava/util/List;I)V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$sJ5w9GfSftnZPyv5hBDxQkxDJMU;->run()V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$xJ_pDKPvSH0lgOwva8xeI2zJ2ns;-><init>()V
SPLcom/android/server/pm/-$$Lambda$PackageManagerService$xKFHvZAUir1Y_lClMWZh87peKs8;-><init>()V
SPLcom/android/server/pm/-$$Lambda$ShortcutService$3$WghiV-HLnzJqZabObC5uHCmb960;->run()V
SPLcom/android/server/pm/-$$Lambda$ShortcutService$3$n_VdEzyBcjs0pGZO8GnB0FoTgR0;->run()V
SPLcom/android/server/pm/AbstractStatsBase;-><init>(Ljava/lang/String;Ljava/lang/String;Z)V
SPLcom/android/server/pm/AbstractStatsBase;->getFile()Landroid/util/AtomicFile;
SPLcom/android/server/pm/AbstractStatsBase;->maybeWriteAsync(Ljava/lang/Object;)Z
SPLcom/android/server/pm/AbstractStatsBase;->read(Ljava/lang/Object;)V
SPLcom/android/server/pm/ApexManager;-><init>()V
SPLcom/android/server/pm/ApexManager;-><init>(Landroid/content/Context;)V
SPLcom/android/server/pm/ApexManager;->populateActivePackagesCache()Ljava/util/Map;
SPLcom/android/server/pm/ApexManager;->systemReady()V
SPLcom/android/server/pm/BackgroundDexOptService;->getDowngradeUnusedAppsThresholdInMillis()J
SPLcom/android/server/pm/BackgroundDexOptService;->schedule(Landroid/content/Context;)V
SPLcom/android/server/pm/CompilerStats;-><init>()V
SPLcom/android/server/pm/CompilerStats;->read()V
SPLcom/android/server/pm/CompilerStats;->readInternal(Ljava/lang/Object;)V
SPLcom/android/server/pm/CompilerStats;->readInternal(Ljava/lang/Void;)V
SPLcom/android/server/pm/ComponentResolver$ActionIterGenerator;->generate(Landroid/content/pm/PackageParser$ActivityIntentInfo;)Ljava/util/Iterator;
SPLcom/android/server/pm/ComponentResolver$ActivityIntentResolver;->newResult(Landroid/content/IntentFilter;II)Ljava/lang/Object;
SPLcom/android/server/pm/ComponentResolver$ActivityIntentResolver;->newResult(Landroid/content/pm/PackageParser$ActivityIntentInfo;II)Landroid/content/pm/ResolveInfo;
SPLcom/android/server/pm/ComponentResolver$ActivityIntentResolver;->sortResults(Ljava/util/List;)V
SPLcom/android/server/pm/ComponentResolver$AuthoritiesIterGenerator;->generate(Landroid/content/pm/PackageParser$ActivityIntentInfo;)Ljava/util/Iterator;
SPLcom/android/server/pm/ComponentResolver$CategoriesIterGenerator;->generate(Landroid/content/pm/PackageParser$ActivityIntentInfo;)Ljava/util/Iterator;
SPLcom/android/server/pm/ComponentResolver$ProviderIntentResolver;->newArray(I)[Landroid/content/IntentFilter;
SPLcom/android/server/pm/ComponentResolver$SchemesIterGenerator;->generate(Landroid/content/pm/PackageParser$ActivityIntentInfo;)Ljava/util/Iterator;
SPLcom/android/server/pm/ComponentResolver$ServiceIntentResolver;->newResult(Landroid/content/IntentFilter;II)Ljava/lang/Object;
SPLcom/android/server/pm/ComponentResolver$ServiceIntentResolver;->newResult(Landroid/content/pm/PackageParser$ServiceIntentInfo;II)Landroid/content/pm/ResolveInfo;
SPLcom/android/server/pm/ComponentResolver$ServiceIntentResolver;->sortResults(Ljava/util/List;)V
SPLcom/android/server/pm/ComponentResolver;-><init>(Lcom/android/server/pm/UserManagerService;Landroid/content/pm/PackageManagerInternal;Ljava/lang/Object;)V
SPLcom/android/server/pm/ComponentResolver;->fixProtectedFilterPriorities()V
SPLcom/android/server/pm/ComponentResolver;->getActivity(Landroid/content/ComponentName;)Landroid/content/pm/PackageParser$Activity;
SPLcom/android/server/pm/ComponentResolver;->getReceiver(Landroid/content/ComponentName;)Landroid/content/pm/PackageParser$Activity;
SPLcom/android/server/pm/ComponentResolver;->getService(Landroid/content/ComponentName;)Landroid/content/pm/PackageParser$Service;
SPLcom/android/server/pm/ComponentResolver;->isActivityDefined(Landroid/content/ComponentName;)Z
SPLcom/android/server/pm/ComponentResolver;->queryActivities(Landroid/content/Intent;Ljava/lang/String;II)Ljava/util/List;
SPLcom/android/server/pm/ComponentResolver;->queryActivities(Landroid/content/Intent;Ljava/lang/String;ILjava/util/List;I)Ljava/util/List;
SPLcom/android/server/pm/ComponentResolver;->queryReceivers(Landroid/content/Intent;Ljava/lang/String;II)Ljava/util/List;
SPLcom/android/server/pm/ComponentResolver;->queryReceivers(Landroid/content/Intent;Ljava/lang/String;ILjava/util/List;I)Ljava/util/List;
SPLcom/android/server/pm/ComponentResolver;->queryServices(Landroid/content/Intent;Ljava/lang/String;II)Ljava/util/List;
SPLcom/android/server/pm/ComponentResolver;->queryServices(Landroid/content/Intent;Ljava/lang/String;ILjava/util/List;I)Ljava/util/List;
SPLcom/android/server/pm/CrossProfileAppsService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/pm/CrossProfileAppsService;->onStart()V
SPLcom/android/server/pm/CrossProfileIntentFilter;-><init>(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/pm/CrossProfileIntentFilter;->getIntFromXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;I)I
SPLcom/android/server/pm/CrossProfileIntentFilter;->getStringFromXml(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/pm/CrossProfileIntentFilter;->writeToXml(Lorg/xmlpull/v1/XmlSerializer;)V
SPLcom/android/server/pm/CrossProfileIntentResolver;->newArray(I)[Landroid/content/IntentFilter;
SPLcom/android/server/pm/CrossProfileIntentResolver;->newArray(I)[Lcom/android/server/pm/CrossProfileIntentFilter;
SPLcom/android/server/pm/CrossProfileIntentResolver;->sortResults(Ljava/util/List;)V
SPLcom/android/server/pm/DynamicCodeLoggingService;->schedule(Landroid/content/Context;)V
SPLcom/android/server/pm/Installer$InstallerException;->from(Ljava/lang/Exception;)Lcom/android/server/pm/Installer$InstallerException;
SPLcom/android/server/pm/Installer;-><init>(Landroid/content/Context;)V
SPLcom/android/server/pm/Installer;->assertFsverityRootHashMatches(Ljava/lang/String;[B)V
SPLcom/android/server/pm/Installer;->assertValidInstructionSet(Ljava/lang/String;)V
SPLcom/android/server/pm/Installer;->clearAppProfiles(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/pm/Installer;->connect()V
SPLcom/android/server/pm/Installer;->destroyAppData(Ljava/lang/String;Ljava/lang/String;IIJ)V
SPLcom/android/server/pm/Installer;->destroyAppProfiles(Ljava/lang/String;)V
SPLcom/android/server/pm/Installer;->fixupAppData(Ljava/lang/String;I)V
SPLcom/android/server/pm/Installer;->idmap(Ljava/lang/String;Ljava/lang/String;I)V
SPLcom/android/server/pm/Installer;->invalidateMounts()V
SPLcom/android/server/pm/Installer;->onStart()V
SPLcom/android/server/pm/Installer;->rmPackageDir(Ljava/lang/String;)V
SPLcom/android/server/pm/Installer;->rmdex(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/pm/Installer;->setAppQuota(Ljava/lang/String;IIJ)V
SPLcom/android/server/pm/Installer;->setWarnIfHeld(Ljava/lang/Object;)V
SPLcom/android/server/pm/InstantAppRegistry;-><init>(Lcom/android/server/pm/PackageManagerService;)V
SPLcom/android/server/pm/InstantAppRegistry;->grantInstantAccessLPw(ILandroid/content/Intent;II)V
SPLcom/android/server/pm/InstantAppRegistry;->onPackageUninstalledLPw(Landroid/content/pm/PackageParser$Package;[I)V
SPLcom/android/server/pm/InstantAppResolverConnection;-><init>(Landroid/content/Context;Landroid/content/ComponentName;Ljava/lang/String;)V
SPLcom/android/server/pm/InstructionSets;->getAllDexCodeInstructionSets()[Ljava/lang/String;
SPLcom/android/server/pm/InstructionSets;->getAppDexInstructionSets(Lcom/android/server/pm/PackageSetting;)[Ljava/lang/String;
SPLcom/android/server/pm/InstructionSets;->getDexCodeInstructionSets([Ljava/lang/String;)[Ljava/lang/String;
SPLcom/android/server/pm/KeySetHandle;->decrRefCountLPw()I
SPLcom/android/server/pm/KeySetHandle;->getId()J
SPLcom/android/server/pm/KeySetHandle;->getRefCountLPr()I
SPLcom/android/server/pm/KeySetHandle;->incrRefCountLPw()V
SPLcom/android/server/pm/KeySetHandle;->setRefCountLPw(I)V
SPLcom/android/server/pm/KeySetManagerService$PublicKeyHandle;->decrRefCountLPw()J
SPLcom/android/server/pm/KeySetManagerService$PublicKeyHandle;->incrRefCountLPw()V
SPLcom/android/server/pm/KeySetManagerService;-><init>(Landroid/util/ArrayMap;)V
SPLcom/android/server/pm/KeySetManagerService;->addKeySetLPw(Landroid/util/ArraySet;)Lcom/android/server/pm/KeySetHandle;
SPLcom/android/server/pm/KeySetManagerService;->addPublicKeyLPw(Ljava/security/PublicKey;)J
SPLcom/android/server/pm/KeySetManagerService;->decrementKeySetLPw(J)V
SPLcom/android/server/pm/KeySetManagerService;->encodePublicKey(Ljava/security/PublicKey;)Ljava/lang/String;
SPLcom/android/server/pm/KeySetManagerService;->readKeySetsLPw(Lorg/xmlpull/v1/XmlPullParser;Landroid/util/ArrayMap;)V
SPLcom/android/server/pm/KeySetManagerService;->readPublicKeyLPw(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/pm/KeySetManagerService;->writeKeySetManagerServiceLPr(Lorg/xmlpull/v1/XmlSerializer;)V
SPLcom/android/server/pm/KeySetManagerService;->writePublicKeysLPr(Lorg/xmlpull/v1/XmlSerializer;)V
SPLcom/android/server/pm/LauncherAppsService$LauncherAppsImpl;-><init>(Landroid/content/Context;)V
SPLcom/android/server/pm/LauncherAppsService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/pm/LauncherAppsService;->onStart()V
SPLcom/android/server/pm/ModuleInfoProvider;-><init>(Landroid/content/Context;Landroid/content/pm/IPackageManager;)V
SPLcom/android/server/pm/ModuleInfoProvider;->loadModuleMetadata(Landroid/content/res/XmlResourceParser;Landroid/content/res/Resources;)V
SPLcom/android/server/pm/ModuleInfoProvider;->systemReady()V
SPLcom/android/server/pm/OtaDexoptService;->moveAbArtifacts(Lcom/android/server/pm/Installer;)V
SPLcom/android/server/pm/PackageDexOptimizer;-><init>(Lcom/android/server/pm/Installer;Ljava/lang/Object;Landroid/content/Context;Ljava/lang/String;)V
SPLcom/android/server/pm/PackageDexOptimizer;->systemReady()V
SPLcom/android/server/pm/PackageInstallerService$1;-><init>()V
SPLcom/android/server/pm/PackageInstallerService$1;->accept(Ljava/io/File;Ljava/lang/String;)Z
SPLcom/android/server/pm/PackageInstallerService$Callbacks;->register(Landroid/content/pm/IPackageInstallerCallback;Ljava/util/function/IntPredicate;)V
SPLcom/android/server/pm/PackageInstallerService;-><init>(Landroid/content/Context;Lcom/android/server/pm/PackageManagerService;)V
SPLcom/android/server/pm/PackageInstallerService;-><init>(Landroid/content/Context;Lcom/android/server/pm/PackageManagerService;Lcom/android/server/pm/ApexManager;)V
SPLcom/android/server/pm/PackageInstallerService;->readSessionsLocked()V
SPLcom/android/server/pm/PackageInstallerService;->reconcileStagesLocked(Ljava/lang/String;)V
SPLcom/android/server/pm/PackageInstallerService;->registerCallback(Landroid/content/pm/IPackageInstallerCallback;I)V
SPLcom/android/server/pm/PackageInstallerService;->registerCallback(Landroid/content/pm/IPackageInstallerCallback;Ljava/util/function/IntPredicate;)V
SPLcom/android/server/pm/PackageInstallerService;->restoreAndApplyStagedSessionIfNeeded()V
SPLcom/android/server/pm/PackageInstallerService;->systemReady()V
SPLcom/android/server/pm/PackageInstallerService;->writeSessionsLocked()V
SPLcom/android/server/pm/PackageKeySetData;->addDefinedKeySet(JLjava/lang/String;)V
SPLcom/android/server/pm/PackageKeySetData;->addUpgradeKeySetById(J)V
SPLcom/android/server/pm/PackageKeySetData;->getUpgradeKeySets()[J
SPLcom/android/server/pm/PackageManagerException;-><init>(ILjava/lang/String;)V
SPLcom/android/server/pm/PackageManagerService$1;-><init>(Lcom/android/server/pm/PackageManagerService;)V
SPLcom/android/server/pm/PackageManagerService$2;-><init>(Lcom/android/server/pm/PackageManagerService;)V
SPLcom/android/server/pm/PackageManagerService$2;->onVolumeStateChanged(Landroid/os/storage/VolumeInfo;II)V
SPLcom/android/server/pm/PackageManagerService$3;-><init>(Lcom/android/server/pm/PackageManagerService;)V
SPLcom/android/server/pm/PackageManagerService$6;->onChange(Z)V
SPLcom/android/server/pm/PackageManagerService$FileInstallArgs;-><init>(Lcom/android/server/pm/PackageManagerService;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V
SPLcom/android/server/pm/PackageManagerService$FileInstallArgs;->cleanUp()Z
SPLcom/android/server/pm/PackageManagerService$FileInstallArgs;->cleanUpResourcesLI()V
SPLcom/android/server/pm/PackageManagerService$InstallArgs;-><init>(Lcom/android/server/pm/PackageManagerService$OriginInfo;Lcom/android/server/pm/PackageManagerService$MoveInfo;Landroid/content/pm/IPackageInstallObserver2;ILjava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;ILandroid/content/pm/PackageParser$SigningDetails;ILcom/android/server/pm/PackageManagerService$MultiPackageInstallParams;)V
SPLcom/android/server/pm/PackageManagerService$IntentVerifierProxy;-><init>(Lcom/android/server/pm/PackageManagerService;Landroid/content/Context;Landroid/content/ComponentName;)V
SPLcom/android/server/pm/PackageManagerService$MoveCallbacks;-><init>(Landroid/os/Looper;)V
SPLcom/android/server/pm/PackageManagerService$MoveCallbacks;->register(Landroid/content/pm/IPackageMoveObserver;)V
SPLcom/android/server/pm/PackageManagerService$OnPermissionChangeListeners;-><init>(Landroid/os/Looper;)V
SPLcom/android/server/pm/PackageManagerService$PackageFreezer;-><init>(Lcom/android/server/pm/PackageManagerService;Ljava/lang/String;ILjava/lang/String;)V
SPLcom/android/server/pm/PackageManagerService$PackageFreezer;->close()V
SPLcom/android/server/pm/PackageManagerService$PackageHandler;-><init>(Lcom/android/server/pm/PackageManagerService;Landroid/os/Looper;)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;-><init>(Lcom/android/server/pm/PackageManagerService;Lcom/android/server/pm/PackageManagerService$1;)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->addIsolatedUid(II)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->forEachPackage(Ljava/util/function/Consumer;)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getDefaultHomeActivity(I)Landroid/content/ComponentName;
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getDisabledSystemPackageName(Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getHomeActivitiesAsUser(Ljava/util/List;I)Landroid/content/ComponentName;
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getPackageTargetSdkVersion(Ljava/lang/String;)I
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getPackageUid(Ljava/lang/String;II)I
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getSetupWizardPackageName()Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getSharedUserIdForPackage(Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getSigningDetails(I)Landroid/content/pm/PackageParser$SigningDetails;
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->getUidTargetSdkVersion(I)I
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->grantEphemeralAccess(ILandroid/content/Intent;II)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->hasSignatureCapability(III)Z
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->isInstantApp(Ljava/lang/String;I)Z
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->isOnlyCoreApps()Z
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->isPackagePersistent(Ljava/lang/String;)Z
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->isPackageSuspended(Ljava/lang/String;I)Z
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->isPermissionsReviewRequired(Ljava/lang/String;I)Z
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->notifyPackageUse(Ljava/lang/String;I)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->resolveContentProvider(Ljava/lang/String;II)Landroid/content/pm/ProviderInfo;
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->resolveService(Landroid/content/Intent;Ljava/lang/String;III)Landroid/content/pm/ResolveInfo;
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->setDefaultBrowserProvider(Landroid/content/pm/PackageManagerInternal$DefaultBrowserProvider;)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->setDefaultHomeProvider(Landroid/content/pm/PackageManagerInternal$DefaultHomeProvider;)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->setDeviceAndProfileOwnerPackages(ILjava/lang/String;Landroid/util/SparseArray;)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->setExternalSourcesPolicy(Landroid/content/pm/PackageManagerInternal$ExternalSourcesPolicy;)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->setLocationExtraPackagesProvider(Landroid/content/pm/PackageManagerInternal$PackagesProvider;)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->setLocationPackagesProvider(Landroid/content/pm/PackageManagerInternal$PackagesProvider;)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->setSyncAdapterPackagesprovider(Landroid/content/pm/PackageManagerInternal$SyncAdapterPackagesProvider;)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->setUseOpenWifiAppPackagesProvider(Landroid/content/pm/PackageManagerInternal$PackagesProvider;)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->setVoiceInteractionPackagesProvider(Landroid/content/pm/PackageManagerInternal$PackagesProvider;)V
SPLcom/android/server/pm/PackageManagerService$PackageManagerInternalImpl;->userNeedsBadging(I)Z
SPLcom/android/server/pm/PackageManagerService$PackageManagerNative;->getInstallerForPackage(Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService$PackageManagerNative;->getNamesForUids([I)[Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService$PackageParserCallback;-><init>(Lcom/android/server/pm/PackageManagerService;)V
SPLcom/android/server/pm/PackageManagerService$PackageParserCallback;->hasFeature(Ljava/lang/String;)Z
SPLcom/android/server/pm/PackageManagerService$PackageRemovedInfo;->sendPackageRemovedBroadcastInternal(Z)V
SPLcom/android/server/pm/PackageManagerService$PackageRemovedInfo;->sendSystemPackageAppearedBroadcasts()V
SPLcom/android/server/pm/PackageManagerService$PackageRemovedInfo;->sendSystemPackageUpdatedBroadcasts()V
SPLcom/android/server/pm/PackageManagerService$ParallelPackageParserCallback;-><init>(Lcom/android/server/pm/PackageManagerService;)V
SPLcom/android/server/pm/PackageManagerService$ParallelPackageParserCallback;->findStaticOverlayPackages()V
SPLcom/android/server/pm/PackageManagerService$PendingPackageBroadcasts;-><init>()V
SPLcom/android/server/pm/PackageManagerService;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
SPLcom/android/server/pm/PackageManagerService;->addBuiltInSharedLibraryLocked(Ljava/lang/String;Ljava/lang/String;)Z
SPLcom/android/server/pm/PackageManagerService;->addOnPermissionsChangeListener(Landroid/content/pm/IOnPermissionsChangeListener;)V
SPLcom/android/server/pm/PackageManagerService;->addSharedLibraryToPackageVersionMap(Ljava/util/Map;Landroid/content/pm/SharedLibraryInfo;)Z
SPLcom/android/server/pm/PackageManagerService;->adjustCpuAbisForSharedUserLPw(Ljava/util/Set;Landroid/content/pm/PackageParser$Package;)Ljava/util/List;
SPLcom/android/server/pm/PackageManagerService;->applyPostResolutionFilter(Ljava/util/List;Ljava/lang/String;ZIZILandroid/content/Intent;)Ljava/util/List;
SPLcom/android/server/pm/PackageManagerService;->applyPostServiceResolutionFilter(Ljava/util/List;Ljava/lang/String;)Ljava/util/List;
SPLcom/android/server/pm/PackageManagerService;->canSkipForcedApkVerification(Ljava/lang/String;)Z
SPLcom/android/server/pm/PackageManagerService;->canSkipForcedPackageVerification(Landroid/content/pm/PackageParser$Package;)Z
SPLcom/android/server/pm/PackageManagerService;->canViewInstantApps(II)Z
SPLcom/android/server/pm/PackageManagerService;->checkPackageStartable(Ljava/lang/String;I)V
SPLcom/android/server/pm/PackageManagerService;->checkPermission(Ljava/lang/String;Ljava/lang/String;I)I
SPLcom/android/server/pm/PackageManagerService;->checkSignatures(Ljava/lang/String;Ljava/lang/String;)I
SPLcom/android/server/pm/PackageManagerService;->chooseBestActivity(Landroid/content/Intent;Ljava/lang/String;ILjava/util/List;I)Landroid/content/pm/ResolveInfo;
SPLcom/android/server/pm/PackageManagerService;->clearAppProfilesLIF(Landroid/content/pm/PackageParser$Package;I)V
SPLcom/android/server/pm/PackageManagerService;->clearPackagePreferredActivitiesLPw(Ljava/lang/String;I)Z
SPLcom/android/server/pm/PackageManagerService;->clearPackagePreferredActivitiesLPw(Ljava/lang/String;ZI)Z
SPLcom/android/server/pm/PackageManagerService;->clearPackageStateForUserLIF(Lcom/android/server/pm/PackageSetting;ILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;I)V
SPLcom/android/server/pm/PackageManagerService;->commitSharedLibraryInfoLocked(Landroid/content/pm/SharedLibraryInfo;)V
SPLcom/android/server/pm/PackageManagerService;->createInstallArgsForExisting(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Lcom/android/server/pm/PackageManagerService$InstallArgs;
SPLcom/android/server/pm/PackageManagerService;->decompressSystemApplications(Ljava/util/List;I)V
SPLcom/android/server/pm/PackageManagerService;->deletePackageLIF(Ljava/lang/String;Landroid/os/UserHandle;Z[IILcom/android/server/pm/PackageManagerService$PackageRemovedInfo;ZLandroid/content/pm/PackageParser$Package;)Z
SPLcom/android/server/pm/PackageManagerService;->deletePackageVersioned(Landroid/content/pm/VersionedPackage;Landroid/content/pm/IPackageDeleteObserver2;II)V
SPLcom/android/server/pm/PackageManagerService;->deletePackageX(Ljava/lang/String;JII)I
SPLcom/android/server/pm/PackageManagerService;->deleteTempPackageFiles()V
SPLcom/android/server/pm/PackageManagerService;->destroyAppDataLIF(Landroid/content/pm/PackageParser$Package;II)V
SPLcom/android/server/pm/PackageManagerService;->destroyAppDataLeafLIF(Landroid/content/pm/PackageParser$Package;II)V
SPLcom/android/server/pm/PackageManagerService;->destroyAppProfilesLIF(Landroid/content/pm/PackageParser$Package;I)V
SPLcom/android/server/pm/PackageManagerService;->destroyAppProfilesLeafLIF(Landroid/content/pm/PackageParser$Package;)V
SPLcom/android/server/pm/PackageManagerService;->disableSkuSpecificApps()V
SPLcom/android/server/pm/PackageManagerService;->doSendBroadcast(Landroid/app/IActivityManager;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;ILjava/lang/String;Landroid/content/IIntentReceiver;[IZ)V
SPLcom/android/server/pm/PackageManagerService;->enableSystemUserPackages()V
SPLcom/android/server/pm/PackageManagerService;->enforceSystemOrPhoneCaller(Ljava/lang/String;)V
SPLcom/android/server/pm/PackageManagerService;->executeDeletePackageLIF(Lcom/android/server/pm/PackageManagerService$DeletePackageAction;Ljava/lang/String;Z[IZLandroid/content/pm/PackageParser$Package;)V
SPLcom/android/server/pm/PackageManagerService;->filterAppAccessLPr(Lcom/android/server/pm/PackageSetting;II)Z
SPLcom/android/server/pm/PackageManagerService;->filterIfNotSystemUser(Ljava/util/List;I)Ljava/util/List;
SPLcom/android/server/pm/PackageManagerService;->findPersistentPreferredActivityLP(Landroid/content/Intent;Ljava/lang/String;ILjava/util/List;ZI)Landroid/content/pm/ResolveInfo;
SPLcom/android/server/pm/PackageManagerService;->findPreferredActivity(Landroid/content/Intent;Ljava/lang/String;ILjava/util/List;IZZZI)Landroid/content/pm/ResolveInfo;
SPLcom/android/server/pm/PackageManagerService;->freezePackage(Ljava/lang/String;ILjava/lang/String;)Lcom/android/server/pm/PackageManagerService$PackageFreezer;
SPLcom/android/server/pm/PackageManagerService;->freezePackageForDelete(Ljava/lang/String;IILjava/lang/String;)Lcom/android/server/pm/PackageManagerService$PackageFreezer;
SPLcom/android/server/pm/PackageManagerService;->getActivityInfo(Landroid/content/ComponentName;II)Landroid/content/pm/ActivityInfo;
SPLcom/android/server/pm/PackageManagerService;->getActivityInfoInternal(Landroid/content/ComponentName;III)Landroid/content/pm/ActivityInfo;
SPLcom/android/server/pm/PackageManagerService;->getAllPermissionGroups(I)Landroid/content/pm/ParceledListSlice;
SPLcom/android/server/pm/PackageManagerService;->getAppPredictionServicePackageName()Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->getBlockUninstallForUser(Ljava/lang/String;I)Z
SPLcom/android/server/pm/PackageManagerService;->getDefaultBrowserPackageName(I)Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->getDefaultDisplayMetrics(Landroid/content/Context;Landroid/util/DisplayMetrics;)V
SPLcom/android/server/pm/PackageManagerService;->getDefaultHomeActivity(I)Landroid/content/ComponentName;
SPLcom/android/server/pm/PackageManagerService;->getDocumenterPackageName()Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->getHarmfulAppWarning(Ljava/lang/String;I)Ljava/lang/CharSequence;
SPLcom/android/server/pm/PackageManagerService;->getHomeActivitiesAsUser(Ljava/util/List;I)Landroid/content/ComponentName;
SPLcom/android/server/pm/PackageManagerService;->getIncidentReportApproverPackageName()Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->getInstalledApplications(II)Landroid/content/pm/ParceledListSlice;
SPLcom/android/server/pm/PackageManagerService;->getInstantAppInstallerLPr()Landroid/content/pm/ActivityInfo;
SPLcom/android/server/pm/PackageManagerService;->getInstantAppResolverLPr()Landroid/util/Pair;
SPLcom/android/server/pm/PackageManagerService;->getInstantAppResolverSettingsLPr(Landroid/content/ComponentName;)Landroid/content/ComponentName;
SPLcom/android/server/pm/PackageManagerService;->getIntentFilterVerifierComponentNameLPr()Landroid/content/ComponentName;
SPLcom/android/server/pm/PackageManagerService;->getMatchingCrossProfileIntentFilters(Landroid/content/Intent;Ljava/lang/String;I)Ljava/util/List;
SPLcom/android/server/pm/PackageManagerService;->getNamesForUids([I)[Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->getPackageGids(Ljava/lang/String;II)[I
SPLcom/android/server/pm/PackageManagerService;->getPackageInfo(Ljava/lang/String;II)Landroid/content/pm/PackageInfo;
SPLcom/android/server/pm/PackageManagerService;->getPackageInfoInternal(Ljava/lang/String;JIII)Landroid/content/pm/PackageInfo;
SPLcom/android/server/pm/PackageManagerService;->getPackageInstaller()Landroid/content/pm/IPackageInstaller;
SPLcom/android/server/pm/PackageManagerService;->getPermissionControllerPackageName()Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->getPermissionFlags(Ljava/lang/String;Ljava/lang/String;I)I
SPLcom/android/server/pm/PackageManagerService;->getPermissionInfo(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/PermissionInfo;
SPLcom/android/server/pm/PackageManagerService;->getPersistentApplications(I)Landroid/content/pm/ParceledListSlice;
SPLcom/android/server/pm/PackageManagerService;->getReceiverInfo(Landroid/content/ComponentName;II)Landroid/content/pm/ActivityInfo;
SPLcom/android/server/pm/PackageManagerService;->getRequiredButNotReallyRequiredVerifierLPr()Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->getRequiredInstallerLPr()Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->getRequiredPermissionControllerLPr()Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->getRequiredSharedLibraryLPr(Ljava/lang/String;I)Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->getRequiredUninstallerLPr()Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->getServiceInfo(Landroid/content/ComponentName;II)Landroid/content/pm/ServiceInfo;
SPLcom/android/server/pm/PackageManagerService;->getSetupWizardPackageName()Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->getSharedLibraryInfoLPr(Ljava/lang/String;J)Landroid/content/pm/SharedLibraryInfo;
SPLcom/android/server/pm/PackageManagerService;->getStorageManagerPackageName()Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->getSystemTextClassifierPackageName()Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->getUidTargetSdkVersionLockedLPr(I)I
SPLcom/android/server/pm/PackageManagerService;->getWellbeingPackageName()Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerService;->grantDefaultPermissionsToEnabledImsServices([Ljava/lang/String;I)V
SPLcom/android/server/pm/PackageManagerService;->grantDefaultPermissionsToEnabledTelephonyDataServices([Ljava/lang/String;I)V
SPLcom/android/server/pm/PackageManagerService;->grantRuntimePermission(Ljava/lang/String;Ljava/lang/String;I)V
SPLcom/android/server/pm/PackageManagerService;->hasNonNegativePriority(Ljava/util/List;)Z
SPLcom/android/server/pm/PackageManagerService;->hasSystemFeature(Ljava/lang/String;I)Z
SPLcom/android/server/pm/PackageManagerService;->hasSystemUidErrors()Z
SPLcom/android/server/pm/PackageManagerService;->isFirstBoot()Z
SPLcom/android/server/pm/PackageManagerService;->isHomeIntent(Landroid/content/Intent;)Z
SPLcom/android/server/pm/PackageManagerService;->isInstantApp(Ljava/lang/String;I)Z
SPLcom/android/server/pm/PackageManagerService;->isInstantAppResolutionAllowed(Landroid/content/Intent;Ljava/util/List;IZ)Z
SPLcom/android/server/pm/PackageManagerService;->isOnlyCoreApps()Z
SPLcom/android/server/pm/PackageManagerService;->isOrphaned(Ljava/lang/String;)Z
SPLcom/android/server/pm/PackageManagerService;->isPackageAvailable(Ljava/lang/String;I)Z
SPLcom/android/server/pm/PackageManagerService;->isPackageDeviceAdmin(Ljava/lang/String;I)Z
SPLcom/android/server/pm/PackageManagerService;->isPackageSuspendedForUser(Ljava/lang/String;I)Z
SPLcom/android/server/pm/PackageManagerService;->isProtectedBroadcast(Ljava/lang/String;)Z
SPLcom/android/server/pm/PackageManagerService;->isUserRestricted(ILjava/lang/String;)Z
SPLcom/android/server/pm/PackageManagerService;->killApplication(Ljava/lang/String;IILjava/lang/String;)V
SPLcom/android/server/pm/PackageManagerService;->lambda$deletePackageVersioned$19$PackageManagerService(Ljava/lang/String;IZZJII[ILandroid/content/pm/IPackageDeleteObserver2;Ljava/lang/String;)V
SPLcom/android/server/pm/PackageManagerService;->lambda$grantDefaultPermissionsToEnabledTelephonyDataServices$33$PackageManagerService([Ljava/lang/String;I)V
SPLcom/android/server/pm/PackageManagerService;->lambda$revokeDefaultPermissionsFromDisabledTelephonyDataServices$34$PackageManagerService([Ljava/lang/String;I)V
SPLcom/android/server/pm/PackageManagerService;->lambda$sendPackageBroadcast$7$PackageManagerService([ILjava/lang/String;Ljava/lang/String;Landroid/os/Bundle;ILjava/lang/String;Landroid/content/IIntentReceiver;[I)V
SPLcom/android/server/pm/PackageManagerService;->locationIsPrivileged(Ljava/lang/String;)Z
SPLcom/android/server/pm/PackageManagerService;->logAppProcessStartIfNeeded(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;I)V
SPLcom/android/server/pm/PackageManagerService;->main(Landroid/content/Context;Lcom/android/server/pm/Installer;ZZ)Lcom/android/server/pm/PackageManagerService;
SPLcom/android/server/pm/PackageManagerService;->markPackageUninstalledForUserLPw(Lcom/android/server/pm/PackageSetting;Landroid/os/UserHandle;)V
SPLcom/android/server/pm/PackageManagerService;->mayDeletePackageLocked(Lcom/android/server/pm/PackageManagerService$PackageRemovedInfo;Lcom/android/server/pm/PackageSetting;Lcom/android/server/pm/PackageSetting;[Lcom/android/server/pm/PackageSetting;ILandroid/os/UserHandle;)Lcom/android/server/pm/PackageManagerService$DeletePackageAction;
SPLcom/android/server/pm/PackageManagerService;->maybeThrowExceptionForMultiArchCopy(Ljava/lang/String;I)V
SPLcom/android/server/pm/PackageManagerService;->notifyDexLoad(Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/lang/String;)V
SPLcom/android/server/pm/PackageManagerService;->notifyPackageUse(Ljava/lang/String;I)V
SPLcom/android/server/pm/PackageManagerService;->performFstrimIfNeeded()V
SPLcom/android/server/pm/PackageManagerService;->prepareAppDataAndMigrateLIF(Landroid/content/pm/PackageParser$Package;IIZ)V
SPLcom/android/server/pm/PackageManagerService;->preparePackageParserCache()Ljava/io/File;
SPLcom/android/server/pm/PackageManagerService;->queryContentProviders(Ljava/lang/String;IILjava/lang/String;)Landroid/content/pm/ParceledListSlice;
SPLcom/android/server/pm/PackageManagerService;->queryCrossProfileIntents(Ljava/util/List;Landroid/content/Intent;Ljava/lang/String;IIZ)Landroid/content/pm/ResolveInfo;
SPLcom/android/server/pm/PackageManagerService;->queryIntentActivities(Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ParceledListSlice;
SPLcom/android/server/pm/PackageManagerService;->queryIntentActivitiesInternal(Landroid/content/Intent;Ljava/lang/String;IIIZZ)Ljava/util/List;
SPLcom/android/server/pm/PackageManagerService;->queryIntentReceivers(Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ParceledListSlice;
SPLcom/android/server/pm/PackageManagerService;->queryIntentReceiversInternal(Landroid/content/Intent;Ljava/lang/String;IIZ)Ljava/util/List;
SPLcom/android/server/pm/PackageManagerService;->queryIntentServices(Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ParceledListSlice;
SPLcom/android/server/pm/PackageManagerService;->queryIntentServicesInternal(Landroid/content/Intent;Ljava/lang/String;IIIZ)Ljava/util/List;
SPLcom/android/server/pm/PackageManagerService;->queryPermissionsByGroup(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;
SPLcom/android/server/pm/PackageManagerService;->querySkipCurrentProfileIntents(Ljava/util/List;Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ResolveInfo;
SPLcom/android/server/pm/PackageManagerService;->registerMoveCallback(Landroid/content/pm/IPackageMoveObserver;)V
SPLcom/android/server/pm/PackageManagerService;->removeCodePathLI(Ljava/io/File;)V
SPLcom/android/server/pm/PackageManagerService;->removeDexFiles(Ljava/util/List;[Ljava/lang/String;)V
SPLcom/android/server/pm/PackageManagerService;->removeKeystoreDataIfNeeded(II)V
SPLcom/android/server/pm/PackageManagerService;->reportSettingsProblem(ILjava/lang/String;)V
SPLcom/android/server/pm/PackageManagerService;->resetUserChangesToRuntimePermissionsAndFlagsLPw(Lcom/android/server/pm/PackageSetting;I)V
SPLcom/android/server/pm/PackageManagerService;->resolveIntent(Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ResolveInfo;
SPLcom/android/server/pm/PackageManagerService;->resolveIntentInternal(Landroid/content/Intent;Ljava/lang/String;IIZI)Landroid/content/pm/ResolveInfo;
SPLcom/android/server/pm/PackageManagerService;->resolveService(Landroid/content/Intent;Ljava/lang/String;II)Landroid/content/pm/ResolveInfo;
SPLcom/android/server/pm/PackageManagerService;->resolveServiceInternal(Landroid/content/Intent;Ljava/lang/String;III)Landroid/content/pm/ResolveInfo;
SPLcom/android/server/pm/PackageManagerService;->revokeDefaultPermissionsFromDisabledTelephonyDataServices([Ljava/lang/String;I)V
SPLcom/android/server/pm/PackageManagerService;->scanDirTracedLI(Ljava/io/File;IIJ)V
SPLcom/android/server/pm/PackageManagerService;->scheduleWritePackageRestrictionsLocked(I)V
SPLcom/android/server/pm/PackageManagerService;->scheduleWritePackageRestrictionsLocked(Landroid/os/UserHandle;)V
SPLcom/android/server/pm/PackageManagerService;->sendPackageBroadcast(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;ILjava/lang/String;Landroid/content/IIntentReceiver;[I[I)V
SPLcom/android/server/pm/PackageManagerService;->setBundledAppAbi(Landroid/content/pm/PackageParser$Package;Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/pm/PackageManagerService;->setBundledAppAbisAndRoots(Landroid/content/pm/PackageParser$Package;Lcom/android/server/pm/PackageSetting;)V
SPLcom/android/server/pm/PackageManagerService;->setComponentEnabledSetting(Landroid/content/ComponentName;III)V
SPLcom/android/server/pm/PackageManagerService;->setEnabledSetting(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V
SPLcom/android/server/pm/PackageManagerService;->setPackageStoppedState(Ljava/lang/String;ZI)V
SPLcom/android/server/pm/PackageManagerService;->setSystemAppHiddenUntilInstalled(Ljava/lang/String;Z)V
SPLcom/android/server/pm/PackageManagerService;->setSystemAppInstallState(Ljava/lang/String;ZI)Z
SPLcom/android/server/pm/PackageManagerService;->setUpInstantAppInstallerActivityLP(Landroid/content/pm/ActivityInfo;)V
SPLcom/android/server/pm/PackageManagerService;->systemReady()V
SPLcom/android/server/pm/PackageManagerService;->unsuspendForNonSystemSuspendingPackages(Landroid/util/ArraySet;)V
SPLcom/android/server/pm/PackageManagerService;->updateInstantAppInstallerLocked(Ljava/lang/String;)V
SPLcom/android/server/pm/PackageManagerService;->updateIntentForResolve(Landroid/content/Intent;)Landroid/content/Intent;
SPLcom/android/server/pm/PackageManagerService;->updatePackagesIfNeeded()V
SPLcom/android/server/pm/PackageManagerService;->updatePermissionFlags(Ljava/lang/String;Ljava/lang/String;IIZI)V
SPLcom/android/server/pm/PackageManagerService;->updateSequenceNumberLP(Lcom/android/server/pm/PackageSetting;[I)V
SPLcom/android/server/pm/PackageManagerService;->userNeedsBadging(I)Z
SPLcom/android/server/pm/PackageManagerService;->waitForAppDataPrepared()V
SPLcom/android/server/pm/PackageManagerServiceCompilerMapping;->checkProperties()V
SPLcom/android/server/pm/PackageManagerServiceCompilerMapping;->getAndCheckValidity(I)Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerServiceCompilerMapping;->getSystemPropertyName(I)Ljava/lang/String;
SPLcom/android/server/pm/PackageManagerServiceUtils;->enforceShellRestriction(Ljava/lang/String;II)V
SPLcom/android/server/pm/PackageManagerServiceUtils;->logCriticalInfo(ILjava/lang/String;)V
SPLcom/android/server/pm/PackageSetting;->updateFrom(Lcom/android/server/pm/PackageSetting;)V
SPLcom/android/server/pm/PackageSettingBase;->disableComponentLPw(Ljava/lang/String;I)Z
SPLcom/android/server/pm/PackageSettingBase;->enableComponentLPw(Ljava/lang/String;I)Z
SPLcom/android/server/pm/PackageSettingBase;->getInstalled(I)Z
SPLcom/android/server/pm/PackageSettingBase;->getInstantApp(I)Z
SPLcom/android/server/pm/PackageSettingBase;->modifyUserStateComponents(IZZ)Landroid/content/pm/PackageUserState;
SPLcom/android/server/pm/PackageSettingBase;->queryInstalledUsers([IZ)[I
SPLcom/android/server/pm/PackageSettingBase;->restoreComponentLPw(Ljava/lang/String;I)Z
SPLcom/android/server/pm/PackageSettingBase;->setIntentFilterVerificationInfo(Landroid/content/pm/IntentFilterVerificationInfo;)V
SPLcom/android/server/pm/PackageUsage;-><init>()V
SPLcom/android/server/pm/PackageUsage;->readInternal(Ljava/lang/Object;)V
SPLcom/android/server/pm/PackageUsage;->readInternal(Ljava/util/Map;)V
SPLcom/android/server/pm/ParallelPackageParser;-><init>([Ljava/lang/String;ZLandroid/util/DisplayMetrics;Ljava/io/File;Landroid/content/pm/PackageParser$Callback;)V
SPLcom/android/server/pm/ParallelPackageParser;->close()V
SPLcom/android/server/pm/Policy$PolicyBuilder;->addSignature(Ljava/lang/String;)Lcom/android/server/pm/Policy$PolicyBuilder;
SPLcom/android/server/pm/Policy$PolicyBuilder;->build()Lcom/android/server/pm/Policy;
SPLcom/android/server/pm/Policy$PolicyBuilder;->setGlobalSeinfoOrThrow(Ljava/lang/String;)Lcom/android/server/pm/Policy$PolicyBuilder;
SPLcom/android/server/pm/PolicyComparator;->compare(Lcom/android/server/pm/Policy;Lcom/android/server/pm/Policy;)I
SPLcom/android/server/pm/PolicyComparator;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
SPLcom/android/server/pm/PreferredActivity;->onReadTag(Ljava/lang/String;Lorg/xmlpull/v1/XmlPullParser;)Z
SPLcom/android/server/pm/PreferredActivity;->writeToXml(Lorg/xmlpull/v1/XmlSerializer;Z)V
SPLcom/android/server/pm/PreferredComponent;->getParseError()Ljava/lang/String;
SPLcom/android/server/pm/PreferredComponent;->sameSet(Ljava/util/List;Z)Z
SPLcom/android/server/pm/PreferredComponent;->writeToXml(Lorg/xmlpull/v1/XmlSerializer;Z)V
SPLcom/android/server/pm/PreferredIntentResolver;->newArray(I)[Landroid/content/IntentFilter;
SPLcom/android/server/pm/PreferredIntentResolver;->newArray(I)[Lcom/android/server/pm/PreferredActivity;
SPLcom/android/server/pm/ProcessLoggingHandler;-><init>()V
SPLcom/android/server/pm/ProtectedPackages;-><init>(Landroid/content/Context;)V
SPLcom/android/server/pm/ProtectedPackages;->hasDeviceOwnerOrProfileOwner(ILjava/lang/String;)Z
SPLcom/android/server/pm/ProtectedPackages;->isPackageStateProtected(ILjava/lang/String;)Z
SPLcom/android/server/pm/ProtectedPackages;->isProtectedPackage(Ljava/lang/String;)Z
SPLcom/android/server/pm/ProtectedPackages;->setDeviceAndProfileOwnerPackages(ILjava/lang/String;Landroid/util/SparseArray;)V
SPLcom/android/server/pm/SELinuxMMAC;->readInstallPolicy()Z
SPLcom/android/server/pm/SELinuxMMAC;->readSignerOrThrow(Lorg/xmlpull/v1/XmlPullParser;)Lcom/android/server/pm/Policy;
SPLcom/android/server/pm/Settings$RuntimePermissionPersistence$MyHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/pm/Settings$RuntimePermissionPersistence;-><init>(Lcom/android/server/pm/Settings;Ljava/lang/Object;)V
SPLcom/android/server/pm/Settings$RuntimePermissionPersistence;->parseRestoredRuntimePermissionsLPr(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;I)V
SPLcom/android/server/pm/Settings$RuntimePermissionPersistence;->readStateForUserSyncLPr(I)V
SPLcom/android/server/pm/Settings$RuntimePermissionPersistence;->rememberRestoredUserGrantLPr(Ljava/lang/String;Ljava/lang/String;ZII)V
SPLcom/android/server/pm/Settings;-><init>(Ljava/io/File;Lcom/android/server/pm/permission/PermissionSettings;Ljava/lang/Object;)V
SPLcom/android/server/pm/Settings;->addSharedUserLPw(Ljava/lang/String;III)Lcom/android/server/pm/SharedUserSetting;
SPLcom/android/server/pm/Settings;->createNewSetting(Ljava/lang/String;Lcom/android/server/pm/PackageSetting;Lcom/android/server/pm/PackageSetting;Ljava/lang/String;Lcom/android/server/pm/SharedUserSetting;Ljava/io/File;Ljava/io/File;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JIILandroid/os/UserHandle;ZZZLjava/lang/String;Ljava/util/List;Lcom/android/server/pm/UserManagerService;[Ljava/lang/String;[J)Lcom/android/server/pm/PackageSetting;
SPLcom/android/server/pm/Settings;->enableSystemPackageLPw(Ljava/lang/String;)Lcom/android/server/pm/PackageSetting;
SPLcom/android/server/pm/Settings;->getAllSharedUsersLPw()Ljava/util/Collection;
SPLcom/android/server/pm/Settings;->getChildSettingsLPr(Lcom/android/server/pm/PackageSetting;)[Lcom/android/server/pm/PackageSetting;
SPLcom/android/server/pm/Settings;->getHarmfulAppWarningLPr(Ljava/lang/String;I)Ljava/lang/String;
SPLcom/android/server/pm/Settings;->getInternalVersion()Lcom/android/server/pm/Settings$VersionInfo;
SPLcom/android/server/pm/Settings;->getSharedUserLPw(Ljava/lang/String;IIZ)Lcom/android/server/pm/SharedUserSetting;
SPLcom/android/server/pm/Settings;->getUserPackagesStateBackupFile(I)Ljava/io/File;
SPLcom/android/server/pm/Settings;->getUserPackagesStateFile(I)Ljava/io/File;
SPLcom/android/server/pm/Settings;->isOrphaned(Ljava/lang/String;)Z
SPLcom/android/server/pm/Settings;->pruneSharedUsersLPw()V
SPLcom/android/server/pm/Settings;->readBlockUninstallPackagesLPw(Lorg/xmlpull/v1/XmlPullParser;I)V
SPLcom/android/server/pm/Settings;->readDefaultAppsLPw(Lorg/xmlpull/v1/XmlPullParser;I)V
SPLcom/android/server/pm/Settings;->readDisabledSysPackageLPw(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/pm/Settings;->readDomainVerificationLPw(Lorg/xmlpull/v1/XmlPullParser;Lcom/android/server/pm/PackageSettingBase;)V
SPLcom/android/server/pm/Settings;->readPersistentPreferredActivitiesLPw(Lorg/xmlpull/v1/XmlPullParser;I)V
SPLcom/android/server/pm/Settings;->readPreferredActivitiesLPw(Lorg/xmlpull/v1/XmlPullParser;I)V
SPLcom/android/server/pm/Settings;->readRestoredIntentFilterVerifications(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/pm/Settings;->readSharedUserLPw(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/pm/Settings;->registerAppIdLPw(Lcom/android/server/pm/PackageSetting;)V
SPLcom/android/server/pm/Settings;->setPackageStoppedStateLPw(Lcom/android/server/pm/PackageManagerService;Ljava/lang/String;ZZII)Z
SPLcom/android/server/pm/Settings;->writeAllUsersPackageRestrictionsLPr()V
SPLcom/android/server/pm/Settings;->writeBlockUninstallPackagesLPr(Lorg/xmlpull/v1/XmlSerializer;I)V
SPLcom/android/server/pm/Settings;->writeCrossProfileIntentFiltersLPr(Lorg/xmlpull/v1/XmlSerializer;I)V
SPLcom/android/server/pm/Settings;->writeDefaultAppsLPr(Lorg/xmlpull/v1/XmlSerializer;I)V
SPLcom/android/server/pm/Settings;->writeDisabledSysPackageLPr(Lorg/xmlpull/v1/XmlSerializer;Lcom/android/server/pm/PackageSetting;)V
SPLcom/android/server/pm/Settings;->writePersistentPreferredActivitiesLPr(Lorg/xmlpull/v1/XmlSerializer;I)V
SPLcom/android/server/pm/Settings;->writePreferredActivitiesLPr(Lorg/xmlpull/v1/XmlSerializer;IZ)V
SPLcom/android/server/pm/SharedUserSetting;->addPackage(Lcom/android/server/pm/PackageSetting;)V
SPLcom/android/server/pm/SharedUserSetting;->fixSeInfoLocked()V
SPLcom/android/server/pm/SharedUserSetting;->getPackages()Ljava/util/List;
SPLcom/android/server/pm/SharedUserSetting;->isPrivileged()Z
SPLcom/android/server/pm/SharedUserSetting;->removePackage(Lcom/android/server/pm/PackageSetting;)Z
SPLcom/android/server/pm/ShortcutBitmapSaver;-><init>(Lcom/android/server/pm/ShortcutService;)V
SPLcom/android/server/pm/ShortcutService$1;-><init>()V
SPLcom/android/server/pm/ShortcutService$2;-><init>()V
SPLcom/android/server/pm/ShortcutService$3;->lambda$onUidGone$1$ShortcutService$3(I)V
SPLcom/android/server/pm/ShortcutService$3;->lambda$onUidStateChanged$0$ShortcutService$3(II)V
SPLcom/android/server/pm/ShortcutService$3;->onUidGone(IZ)V
SPLcom/android/server/pm/ShortcutService$3;->onUidStateChanged(IIJ)V
SPLcom/android/server/pm/ShortcutService$5;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/pm/ShortcutService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/pm/ShortcutService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/pm/ShortcutService$Lifecycle;->onStart()V
SPLcom/android/server/pm/ShortcutService$LocalService;->addListener(Landroid/content/pm/ShortcutServiceInternal$ShortcutChangeListener;)V
SPLcom/android/server/pm/ShortcutService;-><init>(Landroid/content/Context;Landroid/os/Looper;Z)V
SPLcom/android/server/pm/ShortcutService;->getLastResetTimeLocked()J
SPLcom/android/server/pm/ShortcutService;->handleOnUidStateChanged(II)V
SPLcom/android/server/pm/ShortcutService;->initialize()V
SPLcom/android/server/pm/ShortcutService;->injectClearCallingIdentity()J
SPLcom/android/server/pm/ShortcutService;->injectCurrentTimeMillis()J
SPLcom/android/server/pm/ShortcutService;->injectDipToPixel(I)I
SPLcom/android/server/pm/ShortcutService;->injectElapsedRealtime()J
SPLcom/android/server/pm/ShortcutService;->injectIsLowRamDevice()Z
SPLcom/android/server/pm/ShortcutService;->injectPostToHandler(Ljava/lang/Runnable;)V
SPLcom/android/server/pm/ShortcutService;->injectRegisterUidObserver(Landroid/app/IUidObserver;I)V
SPLcom/android/server/pm/ShortcutService;->injectRestoreCallingIdentity(J)V
SPLcom/android/server/pm/ShortcutService;->injectShortcutManagerConstants()Ljava/lang/String;
SPLcom/android/server/pm/ShortcutService;->injectSystemDataPath()Ljava/io/File;
SPLcom/android/server/pm/ShortcutService;->isUserUnlockedL(I)Z
SPLcom/android/server/pm/ShortcutService;->loadBaseStateLocked()V
SPLcom/android/server/pm/ShortcutService;->onBootPhase(I)V
SPLcom/android/server/pm/ShortcutService;->parseLongAttribute(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;J)J
SPLcom/android/server/pm/ShortcutService;->updateConfigurationLocked(Ljava/lang/String;)Z
SPLcom/android/server/pm/ShortcutService;->updateTimesLocked()V
SPLcom/android/server/pm/StagingManager;-><init>(Lcom/android/server/pm/PackageManagerService;Lcom/android/server/pm/PackageInstallerService;Lcom/android/server/pm/ApexManager;Landroid/content/Context;)V
SPLcom/android/server/pm/UserDataPreparer;-><init>(Lcom/android/server/pm/Installer;Ljava/lang/Object;Landroid/content/Context;Z)V
SPLcom/android/server/pm/UserDataPreparer;->enforceSerialNumber(Ljava/io/File;I)V
SPLcom/android/server/pm/UserDataPreparer;->getSerialNumber(Ljava/io/File;)I
SPLcom/android/server/pm/UserDataPreparer;->isFileEncryptedEmulatedOnly()Z
SPLcom/android/server/pm/UserDataPreparer;->reconcileUsers(Ljava/lang/String;Ljava/util/List;)V
SPLcom/android/server/pm/UserDataPreparer;->reconcileUsers(Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V
SPLcom/android/server/pm/UserManagerService$2;->run()V
SPLcom/android/server/pm/UserManagerService$3;->run()V
SPLcom/android/server/pm/UserManagerService$LifeCycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/pm/UserManagerService$LifeCycle;->onBootPhase(I)V
SPLcom/android/server/pm/UserManagerService$LifeCycle;->onStart()V
SPLcom/android/server/pm/UserManagerService$LifeCycle;->onStartUser(I)V
SPLcom/android/server/pm/UserManagerService$LocalService;->addUserRestrictionsListener(Landroid/os/UserManagerInternal$UserRestrictionsListener;)V
SPLcom/android/server/pm/UserManagerService$LocalService;->getUserIds()[I
SPLcom/android/server/pm/UserManagerService$LocalService;->getUserRestriction(ILjava/lang/String;)Z
SPLcom/android/server/pm/UserManagerService$LocalService;->isSettingRestrictedForUser(Ljava/lang/String;ILjava/lang/String;I)Z
SPLcom/android/server/pm/UserManagerService$LocalService;->isUserRunning(I)Z
SPLcom/android/server/pm/UserManagerService$LocalService;->isUserUnlocked(I)Z
SPLcom/android/server/pm/UserManagerService$LocalService;->setDeviceManaged(Z)V
SPLcom/android/server/pm/UserManagerService$LocalService;->setDevicePolicyUserRestrictions(ILandroid/os/Bundle;ZI)V
SPLcom/android/server/pm/UserManagerService$LocalService;->setUserManaged(IZ)V
SPLcom/android/server/pm/UserManagerService$UserData;-><init>()V
SPLcom/android/server/pm/UserManagerService;-><init>(Landroid/content/Context;Lcom/android/server/pm/PackageManagerService;Lcom/android/server/pm/UserDataPreparer;Ljava/lang/Object;)V
SPLcom/android/server/pm/UserManagerService;-><init>(Landroid/content/Context;Lcom/android/server/pm/PackageManagerService;Lcom/android/server/pm/UserDataPreparer;Ljava/lang/Object;Ljava/io/File;)V
SPLcom/android/server/pm/UserManagerService;->applyUserRestrictionsLR(I)V
SPLcom/android/server/pm/UserManagerService;->checkManageOrInteractPermIfCallerInOtherProfileGroup(ILjava/lang/String;)V
SPLcom/android/server/pm/UserManagerService;->checkManageUserAndAcrossUsersFullPermission(Ljava/lang/String;)V
SPLcom/android/server/pm/UserManagerService;->cleanupPartialUsers()V
SPLcom/android/server/pm/UserManagerService;->computeEffectiveUserRestrictionsLR(I)Landroid/os/Bundle;
SPLcom/android/server/pm/UserManagerService;->findCurrentGuestUser()Landroid/content/pm/UserInfo;
SPLcom/android/server/pm/UserManagerService;->getCredentialOwnerProfile(I)I
SPLcom/android/server/pm/UserManagerService;->getEffectiveUserRestrictions(I)Landroid/os/Bundle;
SPLcom/android/server/pm/UserManagerService;->getPrimaryUser()Landroid/content/pm/UserInfo;
SPLcom/android/server/pm/UserManagerService;->getProfileIds(IZ)[I
SPLcom/android/server/pm/UserManagerService;->getProfileIdsLU(IZ)Landroid/util/IntArray;
SPLcom/android/server/pm/UserManagerService;->getProfileParent(I)Landroid/content/pm/UserInfo;
SPLcom/android/server/pm/UserManagerService;->getProfiles(IZ)Ljava/util/List;
SPLcom/android/server/pm/UserManagerService;->getProfilesLU(IZZ)Ljava/util/List;
SPLcom/android/server/pm/UserManagerService;->getUserAccount(I)Ljava/lang/String;
SPLcom/android/server/pm/UserManagerService;->getUserDataNoChecks(I)Lcom/android/server/pm/UserManagerService$UserData;
SPLcom/android/server/pm/UserManagerService;->getUserHandle(I)I
SPLcom/android/server/pm/UserManagerService;->getUserIcon(I)Landroid/os/ParcelFileDescriptor;
SPLcom/android/server/pm/UserManagerService;->getUserInfo(I)Landroid/content/pm/UserInfo;
SPLcom/android/server/pm/UserManagerService;->getUserRestrictionSources(Ljava/lang/String;I)Ljava/util/List;
SPLcom/android/server/pm/UserManagerService;->getUserRestrictions(I)Landroid/os/Bundle;
SPLcom/android/server/pm/UserManagerService;->getUserSerialNumber(I)I
SPLcom/android/server/pm/UserManagerService;->hasBaseUserRestriction(Ljava/lang/String;I)Z
SPLcom/android/server/pm/UserManagerService;->hasUserRestriction(Ljava/lang/String;I)Z
SPLcom/android/server/pm/UserManagerService;->initDefaultGuestRestrictions()V
SPLcom/android/server/pm/UserManagerService;->isManagedProfile(I)Z
SPLcom/android/server/pm/UserManagerService;->isQuietModeEnabled(I)Z
SPLcom/android/server/pm/UserManagerService;->isSameProfileGroup(II)Z
SPLcom/android/server/pm/UserManagerService;->isSameProfileGroupNoChecks(II)Z
SPLcom/android/server/pm/UserManagerService;->isUserRunning(I)Z
SPLcom/android/server/pm/UserManagerService;->isUserUnlocked(I)Z
SPLcom/android/server/pm/UserManagerService;->isUserUnlockingOrUnlocked(I)Z
SPLcom/android/server/pm/UserManagerService;->readIntAttribute(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;I)I
SPLcom/android/server/pm/UserManagerService;->readLongAttribute(Lorg/xmlpull/v1/XmlPullParser;Ljava/lang/String;J)J
SPLcom/android/server/pm/UserManagerService;->readUserLP(I)Lcom/android/server/pm/UserManagerService$UserData;
SPLcom/android/server/pm/UserManagerService;->readUserLP(ILjava/io/InputStream;)Lcom/android/server/pm/UserManagerService$UserData;
SPLcom/android/server/pm/UserManagerService;->readUserListLP()V
SPLcom/android/server/pm/UserManagerService;->reconcileUsers(Ljava/lang/String;)V
SPLcom/android/server/pm/UserManagerService;->setDevicePolicyUserRestrictionsInner(ILandroid/os/Bundle;ZI)V
SPLcom/android/server/pm/UserManagerService;->setUserRestriction(Ljava/lang/String;ZI)V
SPLcom/android/server/pm/UserManagerService;->systemReady()V
SPLcom/android/server/pm/UserManagerService;->updateUserIds()V
SPLcom/android/server/pm/UserManagerService;->updateUserRestrictionsInternalLR(Landroid/os/Bundle;I)V
SPLcom/android/server/pm/UserManagerService;->upgradeIfNecessaryLP(Landroid/os/Bundle;)V
SPLcom/android/server/pm/UserRestrictionsUtils;->applyUserRestriction(Landroid/content/Context;ILjava/lang/String;Z)V
SPLcom/android/server/pm/UserRestrictionsUtils;->applyUserRestrictions(Landroid/content/Context;ILandroid/os/Bundle;Landroid/os/Bundle;)V
SPLcom/android/server/pm/UserRestrictionsUtils;->areEqual(Landroid/os/Bundle;Landroid/os/Bundle;)Z
SPLcom/android/server/pm/UserRestrictionsUtils;->isSettingRestrictedForUser(Landroid/content/Context;Ljava/lang/String;ILjava/lang/String;I)Z
SPLcom/android/server/pm/UserRestrictionsUtils;->isValidRestriction(Ljava/lang/String;)Z
SPLcom/android/server/pm/UserRestrictionsUtils;->merge(Landroid/os/Bundle;Landroid/os/Bundle;)V
SPLcom/android/server/pm/UserRestrictionsUtils;->mergeAll(Landroid/util/SparseArray;)Landroid/os/Bundle;
SPLcom/android/server/pm/UserRestrictionsUtils;->newSetWithUniqueCheck([Ljava/lang/String;)Ljava/util/Set;
SPLcom/android/server/pm/UserRestrictionsUtils;->readRestrictions(Lorg/xmlpull/v1/XmlPullParser;)Landroid/os/Bundle;
SPLcom/android/server/pm/UserRestrictionsUtils;->sortToGlobalAndLocal(Landroid/os/Bundle;ZILandroid/os/Bundle;Landroid/os/Bundle;)V
SPLcom/android/server/pm/dex/ArtManagerService;-><init>(Landroid/content/Context;Landroid/content/pm/IPackageManager;Lcom/android/server/pm/Installer;Ljava/lang/Object;)V
SPLcom/android/server/pm/dex/ArtManagerService;->clearAppProfiles(Landroid/content/pm/PackageParser$Package;)V
SPLcom/android/server/pm/dex/ArtManagerService;->getCompilationReasonTronValue(Ljava/lang/String;)I
SPLcom/android/server/pm/dex/ArtManagerService;->getPackageProfileNames(Landroid/content/pm/PackageParser$Package;)Landroid/util/ArrayMap;
SPLcom/android/server/pm/dex/ArtManagerService;->verifyTronLoggingConstants()V
SPLcom/android/server/pm/dex/DexLogger;->readAndSync(Ljava/util/Map;)V
SPLcom/android/server/pm/dex/DexLogger;->recordDex(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/pm/dex/DexManager;-><init>(Landroid/content/Context;Landroid/content/pm/IPackageManager;Lcom/android/server/pm/PackageDexOptimizer;Lcom/android/server/pm/Installer;Ljava/lang/Object;)V
SPLcom/android/server/pm/dex/DexManager;->isPackageSelectedToRunOob(Ljava/util/Collection;)Z
SPLcom/android/server/pm/dex/DexManager;->isPackageSelectedToRunOobInternal(ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Collection;)Z
SPLcom/android/server/pm/dex/DexManager;->load(Ljava/util/Map;)V
SPLcom/android/server/pm/dex/DexManager;->notifyDexLoad(Landroid/content/pm/ApplicationInfo;Ljava/util/List;Ljava/util/List;Ljava/lang/String;I)V
SPLcom/android/server/pm/dex/DexManager;->notifyDexLoadInternal(Landroid/content/pm/ApplicationInfo;Ljava/util/List;Ljava/util/List;Ljava/lang/String;I)V
SPLcom/android/server/pm/dex/DexManager;->notifyPackageDataDestroyed(Ljava/lang/String;I)V
SPLcom/android/server/pm/dex/DexoptUtils;->encodeClassLoader(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/pm/dex/DexoptUtils;->encodeClassLoaderChain(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/pm/dex/DexoptUtils;->encodeClasspath([Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/pm/dex/DexoptUtils;->processContextForDexLoad(Ljava/util/List;Ljava/util/List;)[Ljava/lang/String;
SPLcom/android/server/pm/dex/DynamicCodeLogger;->readAndSync(Ljava/util/Map;)V
SPLcom/android/server/pm/dex/DynamicCodeLogger;->removeUserPackage(Ljava/lang/String;I)V
SPLcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;-><init>()V
SPLcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;->isAnyCodePathUsedByOtherApps()Z
SPLcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo;->mergeCodePathUsedByOtherApps(Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;)Z
SPLcom/android/server/pm/dex/PackageDexUsage;->maybeReadLoadingPackages(Ljava/io/BufferedReader;I)Ljava/util/Set;
SPLcom/android/server/pm/dex/PackageDexUsage;->read()V
SPLcom/android/server/pm/dex/PackageDexUsage;->read(Ljava/io/Reader;)V
SPLcom/android/server/pm/dex/PackageDexUsage;->readBoolean(Ljava/lang/String;)Z
SPLcom/android/server/pm/dex/PackageDexUsage;->readInternal(Ljava/lang/Object;)V
SPLcom/android/server/pm/dex/PackageDexUsage;->readInternal(Ljava/lang/Void;)V
SPLcom/android/server/pm/dex/PackageDexUsage;->record(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;ZZLjava/lang/String;Ljava/lang/String;)Z
SPLcom/android/server/pm/dex/PackageDexUsage;->removeUserPackage(Ljava/lang/String;I)Z
SPLcom/android/server/pm/dex/PackageDexUsage;->syncData(Ljava/util/Map;Ljava/util/Map;)V
SPLcom/android/server/pm/dex/PackageDynamicCodeLoading$PackageDynamicCode;->add(Ljava/lang/String;CILjava/lang/String;)Z
SPLcom/android/server/pm/dex/PackageDynamicCodeLoading;->maybeWriteAsync()V
SPLcom/android/server/pm/dex/PackageDynamicCodeLoading;->read()V
SPLcom/android/server/pm/dex/PackageDynamicCodeLoading;->read(Ljava/io/InputStream;)V
SPLcom/android/server/pm/dex/PackageDynamicCodeLoading;->read(Ljava/io/InputStream;Ljava/util/Map;)V
SPLcom/android/server/pm/dex/PackageDynamicCodeLoading;->readFileInfo(Ljava/lang/String;Lcom/android/server/pm/dex/PackageDynamicCodeLoading$PackageDynamicCode;)V
SPLcom/android/server/pm/dex/PackageDynamicCodeLoading;->readInternal(Ljava/lang/Object;)V
SPLcom/android/server/pm/dex/PackageDynamicCodeLoading;->readInternal(Ljava/lang/Void;)V
SPLcom/android/server/pm/dex/PackageDynamicCodeLoading;->record(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)Z
SPLcom/android/server/pm/dex/PackageDynamicCodeLoading;->removeUserPackage(Ljava/lang/String;I)Z
SPLcom/android/server/pm/dex/PackageDynamicCodeLoading;->syncData(Ljava/util/Map;)V
SPLcom/android/server/pm/dex/PackageDynamicCodeLoading;->unescape(Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/pm/dex/ViewCompiler;-><init>(Ljava/lang/Object;Lcom/android/server/pm/Installer;)V
SPLcom/android/server/pm/permission/BasePermission;->enforceDeclaredUsedAndRuntimeOrDevelopment(Landroid/content/pm/PackageParser$Package;)V
SPLcom/android/server/pm/permission/BasePermission;->generatePermissionInfo(II)Landroid/content/pm/PermissionInfo;
SPLcom/android/server/pm/permission/BasePermission;->updateDynamicPermission(Ljava/util/Collection;)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy$1;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;-><init>(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/pm/permission/DefaultPermissionGrantPolicy$DefaultPermissionGrantedCallback;Lcom/android/server/pm/permission/PermissionManagerService;)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->getDefaultPermissionFiles()[Ljava/io/File;
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->getPackageInfo(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->grantDefaultPermissionsToEnabledImsServices([Ljava/lang/String;I)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->grantDefaultPermissionsToEnabledTelephonyDataServices([Ljava/lang/String;I)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->isSysComponentOrPersistentPlatformSignedPrivApp(Landroid/content/pm/PackageInfo;)Z
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->parse(Lorg/xmlpull/v1/XmlPullParser;Ljava/util/Map;)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->parseExceptions(Lorg/xmlpull/v1/XmlPullParser;Ljava/util/Map;)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->parsePermission(Lorg/xmlpull/v1/XmlPullParser;Ljava/util/List;)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->readDefaultPermissionExceptionsLocked()Landroid/util/ArrayMap;
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->revokeDefaultPermissionsFromDisabledTelephonyDataServices([Ljava/lang/String;I)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->setDialerAppPackagesProvider(Landroid/content/pm/PackageManagerInternal$PackagesProvider;)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->setLocationExtraPackagesProvider(Landroid/content/pm/PackageManagerInternal$PackagesProvider;)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->setLocationPackagesProvider(Landroid/content/pm/PackageManagerInternal$PackagesProvider;)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->setSimCallManagerPackagesProvider(Landroid/content/pm/PackageManagerInternal$PackagesProvider;)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->setSmsAppPackagesProvider(Landroid/content/pm/PackageManagerInternal$PackagesProvider;)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->setSyncAdapterPackagesProvider(Landroid/content/pm/PackageManagerInternal$SyncAdapterPackagesProvider;)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->setUseOpenWifiAppPackagesProvider(Landroid/content/pm/PackageManagerInternal$PackagesProvider;)V
SPLcom/android/server/pm/permission/DefaultPermissionGrantPolicy;->setVoiceInteractionPackagesProvider(Landroid/content/pm/PackageManagerInternal$PackagesProvider;)V
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->checkPermission(Ljava/lang/String;Ljava/lang/String;II)I
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->enforceCrossUserPermission(IIZZZLjava/lang/String;)V
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->getDefaultPermissionGrantPolicy()Lcom/android/server/pm/permission/DefaultPermissionGrantPolicy;
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->getPermissionFlags(Ljava/lang/String;Ljava/lang/String;II)I
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->getPermissionInfo(Ljava/lang/String;Ljava/lang/String;II)Landroid/content/pm/PermissionInfo;
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->getPermissionSettings()Lcom/android/server/pm/permission/PermissionSettings;
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->grantRuntimePermission(Ljava/lang/String;Ljava/lang/String;ZIILcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->isPermissionsReviewRequired(Landroid/content/pm/PackageParser$Package;I)Z
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->systemReady()V
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerInternalImpl;->updateAllPermissions(Ljava/lang/String;ZLjava/util/Collection;Lcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->checkPermission(Ljava/lang/String;Ljava/lang/String;II)I
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->enforceCrossUserPermission(IIZZZLjava/lang/String;)V
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->getAllPermissionGroups(II)Ljava/util/List;
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->getDefaultPermissionGrantPolicy()Lcom/android/server/pm/permission/DefaultPermissionGrantPolicy;
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->getPermissionFlags(Ljava/lang/String;Ljava/lang/String;II)I
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->getPermissionInfo(Ljava/lang/String;Ljava/lang/String;II)Landroid/content/pm/PermissionInfo;
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->getPermissionInfoByGroup(Ljava/lang/String;II)Ljava/util/List;
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->getPermissionSettings()Lcom/android/server/pm/permission/PermissionSettings;
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->getPermissionTEMP(Ljava/lang/String;)Lcom/android/server/pm/permission/BasePermission;
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->grantRuntimePermission(Ljava/lang/String;Ljava/lang/String;ZIILcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->isPermissionsReviewRequired(Landroid/content/pm/PackageParser$Package;I)Z
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->systemReady()V
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->updateAllPermissions(Ljava/lang/String;ZLjava/util/Collection;Lcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
SPLcom/android/server/pm/permission/PermissionManagerService$PermissionManagerServiceInternalImpl;->updatePermissionFlags(Ljava/lang/String;Ljava/lang/String;IIIIZLcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
SPLcom/android/server/pm/permission/PermissionManagerService;-><init>(Landroid/content/Context;Lcom/android/server/pm/permission/DefaultPermissionGrantPolicy$DefaultPermissionGrantedCallback;Ljava/lang/Object;)V
SPLcom/android/server/pm/permission/PermissionManagerService;->adjustPermissionProtectionFlagsLocked(ILjava/lang/String;I)I
SPLcom/android/server/pm/permission/PermissionManagerService;->checkPermission(Ljava/lang/String;Ljava/lang/String;II)I
SPLcom/android/server/pm/permission/PermissionManagerService;->create(Landroid/content/Context;Lcom/android/server/pm/permission/DefaultPermissionGrantPolicy$DefaultPermissionGrantedCallback;Ljava/lang/Object;)Lcom/android/server/pm/permission/PermissionManagerInternal;
SPLcom/android/server/pm/permission/PermissionManagerService;->create(Landroid/content/Context;Lcom/android/server/pm/permission/DefaultPermissionGrantPolicy$DefaultPermissionGrantedCallback;Ljava/lang/Object;)Lcom/android/server/pm/permission/PermissionManagerServiceInternal;
SPLcom/android/server/pm/permission/PermissionManagerService;->enforceGrantRevokeRuntimePermissionPermissions(Ljava/lang/String;)V
SPLcom/android/server/pm/permission/PermissionManagerService;->getAllPermissionGroups(II)Ljava/util/List;
SPLcom/android/server/pm/permission/PermissionManagerService;->getPermissionFlags(Ljava/lang/String;Ljava/lang/String;II)I
SPLcom/android/server/pm/permission/PermissionManagerService;->getPermissionInfo(Ljava/lang/String;Ljava/lang/String;II)Landroid/content/pm/PermissionInfo;
SPLcom/android/server/pm/permission/PermissionManagerService;->grantRuntimePermission(Ljava/lang/String;Ljava/lang/String;ZIILcom/android/server/pm/permission/PermissionManagerInternal$PermissionCallback;)V
SPLcom/android/server/pm/permission/PermissionManagerService;->grantRuntimePermission(Ljava/lang/String;Ljava/lang/String;ZIILcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
SPLcom/android/server/pm/permission/PermissionManagerService;->inheritPermissionStateToNewImplicitPermissionLocked(Landroid/util/ArraySet;Ljava/lang/String;Lcom/android/server/pm/permission/PermissionsState;Landroid/content/pm/PackageParser$Package;I)V
SPLcom/android/server/pm/permission/PermissionManagerService;->systemReady()V
SPLcom/android/server/pm/permission/PermissionManagerService;->updatePermissionFlags(Ljava/lang/String;Ljava/lang/String;IIIIZLcom/android/server/pm/permission/PermissionManagerServiceInternal$PermissionCallback;)V
SPLcom/android/server/pm/permission/PermissionManagerService;->updatePermissionTrees(Ljava/lang/String;Landroid/content/pm/PackageParser$Package;I)I
SPLcom/android/server/pm/permission/PermissionSettings;-><init>(Ljava/lang/Object;)V
SPLcom/android/server/pm/permission/PermissionSettings;->addAppOpPackage(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/pm/permission/PermissionSettings;->getAllPermissionsLocked()Ljava/util/Collection;
SPLcom/android/server/pm/permission/PermissionSettings;->getPermissionTreeLocked(Ljava/lang/String;)Lcom/android/server/pm/permission/BasePermission;
SPLcom/android/server/pm/permission/PermissionSettings;->putPermissionTreeLocked(Ljava/lang/String;Lcom/android/server/pm/permission/BasePermission;)V
SPLcom/android/server/pm/permission/PermissionSettings;->readPermissionTrees(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/pm/permission/PermissionSettings;->readPermissions(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/pm/permission/PermissionSettings;->writePermissionTrees(Lorg/xmlpull/v1/XmlSerializer;)V
SPLcom/android/server/pm/permission/PermissionsState$PermissionData;->revoke(I)Z
SPLcom/android/server/pm/permission/PermissionsState;->enforceValidUserId(I)V
SPLcom/android/server/pm/permission/PermissionsState;->ensureNoPermissionData(Ljava/lang/String;)V
SPLcom/android/server/pm/permission/PermissionsState;->hasRequestedPermission(Landroid/util/ArraySet;)Z
SPLcom/android/server/policy/GlobalKeyManager;->loadGlobalKeys(Landroid/content/Context;)V
SPLcom/android/server/policy/IconUtilities;-><init>(Landroid/content/Context;)V
SPLcom/android/server/policy/PhoneWindowManager$12;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/policy/PhoneWindowManager$13;->run()V
SPLcom/android/server/policy/PhoneWindowManager$7;->onAppTransitionStartingLocked(IJJJ)I
SPLcom/android/server/policy/PhoneWindowManager$8;->onShowingChanged()V
SPLcom/android/server/policy/PhoneWindowManager$8;->onTrustedChanged()V
SPLcom/android/server/policy/PhoneWindowManager$HdmiVideoExtconUEventObserver;->init()Z
SPLcom/android/server/policy/PhoneWindowManager$SettingsObserver;->observe()V
SPLcom/android/server/policy/PhoneWindowManager$SettingsObserver;->onChange(Z)V
SPLcom/android/server/policy/PhoneWindowManager;-><init>()V
SPLcom/android/server/policy/PhoneWindowManager;->adjustConfigurationLw(Landroid/content/res/Configuration;II)V
SPLcom/android/server/policy/PhoneWindowManager;->bindKeyguard()V
SPLcom/android/server/policy/PhoneWindowManager;->canDismissBootAnimation()Z
SPLcom/android/server/policy/PhoneWindowManager;->checkAddPermission(Landroid/view/WindowManager$LayoutParams;[I)I
SPLcom/android/server/policy/PhoneWindowManager;->checkShowToOwnerOnly(Landroid/view/WindowManager$LayoutParams;)Z
SPLcom/android/server/policy/PhoneWindowManager;->getUiMode()I
SPLcom/android/server/policy/PhoneWindowManager;->init(Landroid/content/Context;Landroid/view/IWindowManager;Lcom/android/server/policy/WindowManagerPolicy$WindowManagerFuncs;)V
SPLcom/android/server/policy/PhoneWindowManager;->initializeHdmiState()V
SPLcom/android/server/policy/PhoneWindowManager;->initializeHdmiStateInternal()V
SPLcom/android/server/policy/PhoneWindowManager;->isKeyguardLocked()Z
SPLcom/android/server/policy/PhoneWindowManager;->isKeyguardOccluded()Z
SPLcom/android/server/policy/PhoneWindowManager;->isKeyguardShowingAndNotOccluded()Z
SPLcom/android/server/policy/PhoneWindowManager;->isScreenOn()Z
SPLcom/android/server/policy/PhoneWindowManager;->keyguardOn()Z
SPLcom/android/server/policy/PhoneWindowManager;->onDefaultDisplayFocusChangedLw(Lcom/android/server/policy/WindowManagerPolicy$WindowState;)V
SPLcom/android/server/policy/PhoneWindowManager;->onSystemUiStarted()V
SPLcom/android/server/policy/PhoneWindowManager;->readConfigurationDependentBehaviors()V
SPLcom/android/server/policy/PhoneWindowManager;->readLidState()V
SPLcom/android/server/policy/PhoneWindowManager;->registerShortcutKey(JLcom/android/internal/policy/IShortcutService;)V
SPLcom/android/server/policy/PhoneWindowManager;->screenTurnedOn()V
SPLcom/android/server/policy/PhoneWindowManager;->screenTurningOn(Lcom/android/server/policy/WindowManagerPolicy$ScreenOnListener;)V
SPLcom/android/server/policy/PhoneWindowManager;->setAllowLockscreenWhenOn(IZ)V
SPLcom/android/server/policy/PhoneWindowManager;->setAodShowing(Z)Z
SPLcom/android/server/policy/PhoneWindowManager;->setDefaultDisplay(Lcom/android/server/policy/WindowManagerPolicy$DisplayContentInfo;)V
SPLcom/android/server/policy/PhoneWindowManager;->setKeyguardCandidateLw(Lcom/android/server/policy/WindowManagerPolicy$WindowState;)V
SPLcom/android/server/policy/PhoneWindowManager;->setKeyguardOccludedLw(ZZ)Z
SPLcom/android/server/policy/PhoneWindowManager;->setSafeMode(Z)V
SPLcom/android/server/policy/PhoneWindowManager;->setTopFocusedDisplay(I)V
SPLcom/android/server/policy/PhoneWindowManager;->shouldBeHiddenByKeyguard(Lcom/android/server/policy/WindowManagerPolicy$WindowState;Lcom/android/server/policy/WindowManagerPolicy$WindowState;)Z
SPLcom/android/server/policy/PhoneWindowManager;->shouldEnableWakeGestureLp()Z
SPLcom/android/server/policy/PhoneWindowManager;->startedWakingUp(I)V
SPLcom/android/server/policy/PhoneWindowManager;->systemBooted()V
SPLcom/android/server/policy/PhoneWindowManager;->systemReady()V
SPLcom/android/server/policy/PhoneWindowManager;->updateLockScreenTimeout()V
SPLcom/android/server/policy/PhoneWindowManager;->updateRotation(Z)V
SPLcom/android/server/policy/PhoneWindowManager;->updateSettings()V
SPLcom/android/server/policy/PhoneWindowManager;->updateUiMode()V
SPLcom/android/server/policy/ShortcutManager;->loadShortcuts()V
SPLcom/android/server/policy/WakeGestureListener;-><init>(Landroid/content/Context;Landroid/os/Handler;)V
SPLcom/android/server/policy/WakeGestureListener;->cancelWakeUpTrigger()V
SPLcom/android/server/policy/WakeGestureListener;->isSupported()Z
SPLcom/android/server/policy/WindowManagerPolicy;->getWindowLayerFromTypeLw(I)I
SPLcom/android/server/policy/WindowManagerPolicy;->getWindowLayerLw(Lcom/android/server/policy/WindowManagerPolicy$WindowState;)I
SPLcom/android/server/policy/WindowOrientationListener;-><init>(Landroid/content/Context;Landroid/os/Handler;I)V
SPLcom/android/server/policy/WindowOrientationListener;->canDetectOrientation()Z
SPLcom/android/server/policy/WindowOrientationListener;->setCurrentRotation(I)V
SPLcom/android/server/policy/keyguard/KeyguardServiceDelegate$1;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
SPLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->bindService(Landroid/content/Context;)V
SPLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->hasKeyguard()Z
SPLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->hasLockscreenWallpaper()Z
SPLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->isShowing()Z
SPLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->onBootCompleted()V
SPLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->onScreenTurnedOn()V
SPLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->onScreenTurningOn(Lcom/android/server/policy/keyguard/KeyguardServiceDelegate$DrawnListener;)V
SPLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->onStartedWakingUp()V
SPLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->onSystemReady()V
SPLcom/android/server/policy/keyguard/KeyguardServiceDelegate;->setOccluded(ZZ)V
SPLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->isShowing()Z
SPLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->onBootCompleted()V
SPLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->onScreenTurnedOn()V
SPLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->onScreenTurningOn(Lcom/android/internal/policy/IKeyguardDrawnCallback;)V
SPLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->onStartedWakingUp()V
SPLcom/android/server/policy/keyguard/KeyguardServiceWrapper;->onSystemReady()V
SPLcom/android/server/policy/keyguard/KeyguardStateMonitor;-><init>(Landroid/content/Context;Lcom/android/internal/policy/IKeyguardService;Lcom/android/server/policy/keyguard/KeyguardStateMonitor$StateCallback;)V
SPLcom/android/server/policy/keyguard/KeyguardStateMonitor;->isShowing()Z
SPLcom/android/server/policy/keyguard/KeyguardStateMonitor;->onHasLockscreenWallpaperChanged(Z)V
SPLcom/android/server/policy/keyguard/KeyguardStateMonitor;->onInputRestrictedStateChanged(Z)V
SPLcom/android/server/policy/keyguard/KeyguardStateMonitor;->onShowingStateChanged(Z)V
SPLcom/android/server/policy/keyguard/KeyguardStateMonitor;->onSimSecureStateChanged(Z)V
SPLcom/android/server/policy/keyguard/KeyguardStateMonitor;->onTrustedChanged(Z)V
SPLcom/android/server/policy/role/LegacyRoleResolutionPolicy;-><init>(Landroid/content/Context;)V
SPLcom/android/server/power/-$$Lambda$ThermalManagerService$ThermalHal20Wrapper$R9S8YWn8x1F3V2TOvXtmky1V44Q;->onValues(Landroid/hardware/thermal/V1_0/ThermalStatus;Ljava/util/ArrayList;)V
SPLcom/android/server/power/-$$Lambda$ThermalManagerService$ZPQKzo9ZjU-hL4QYH693hWuTqjk;->run()V
SPLcom/android/server/power/-$$Lambda$ThermalManagerService$x5obtNvJKZxnpguOiQsFBDmBZ4k;->run()V
SPLcom/android/server/power/AttentionDetector;->isAttentionServiceSupported()Z
SPLcom/android/server/power/AttentionDetector;->systemReady(Landroid/content/Context;)V
SPLcom/android/server/power/AttentionDetector;->updateUserActivity(J)J
SPLcom/android/server/power/Notifier;-><init>(Landroid/os/Looper;Landroid/content/Context;Lcom/android/internal/app/IBatteryStats;Lcom/android/server/power/SuspendBlocker;Lcom/android/server/policy/WindowManagerPolicy;)V
SPLcom/android/server/power/Notifier;->getBatteryStatsWakeLockMonitorType(I)I
SPLcom/android/server/power/Notifier;->onWakeLockAcquired(ILjava/lang/String;Ljava/lang/String;IILandroid/os/WorkSource;Ljava/lang/String;)V
SPLcom/android/server/power/Notifier;->onWakeLockChanging(ILjava/lang/String;Ljava/lang/String;IILandroid/os/WorkSource;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;IILandroid/os/WorkSource;Ljava/lang/String;)V
SPLcom/android/server/power/Notifier;->onWakeLockReleased(ILjava/lang/String;Ljava/lang/String;IILandroid/os/WorkSource;Ljava/lang/String;)V
SPLcom/android/server/power/PowerManagerService$1;->acquireSuspendBlocker()V
SPLcom/android/server/power/PowerManagerService$1;->onDisplayStateChange(I)V
SPLcom/android/server/power/PowerManagerService$1;->onStateChanged()V
SPLcom/android/server/power/PowerManagerService$1;->releaseSuspendBlocker()V
SPLcom/android/server/power/PowerManagerService$BatteryReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/power/PowerManagerService$BinderService;->acquireWakeLock(Landroid/os/IBinder;ILjava/lang/String;Ljava/lang/String;Landroid/os/WorkSource;Ljava/lang/String;)V
SPLcom/android/server/power/PowerManagerService$BinderService;->getLastShutdownReason()I
SPLcom/android/server/power/PowerManagerService$BinderService;->getPowerSaveState(I)Landroid/os/PowerSaveState;
SPLcom/android/server/power/PowerManagerService$BinderService;->isDeviceIdleMode()Z
SPLcom/android/server/power/PowerManagerService$BinderService;->isInteractive()Z
SPLcom/android/server/power/PowerManagerService$BinderService;->isLightDeviceIdleMode()Z
SPLcom/android/server/power/PowerManagerService$BinderService;->isPowerSaveMode()Z
SPLcom/android/server/power/PowerManagerService$BinderService;->isWakeLockLevelSupported(I)Z
SPLcom/android/server/power/PowerManagerService$BinderService;->releaseWakeLock(Landroid/os/IBinder;I)V
SPLcom/android/server/power/PowerManagerService$BinderService;->setDozeAfterScreenOff(Z)V
SPLcom/android/server/power/PowerManagerService$BinderService;->updateWakeLockWorkSource(Landroid/os/IBinder;Landroid/os/WorkSource;Ljava/lang/String;)V
SPLcom/android/server/power/PowerManagerService$BinderService;->userActivity(JII)V
SPLcom/android/server/power/PowerManagerService$Constants;->updateConstants()V
SPLcom/android/server/power/PowerManagerService$Injector;->createBatterySaverPolicy(Ljava/lang/Object;Landroid/content/Context;Lcom/android/server/power/batterysaver/BatterySavingStats;)Lcom/android/server/power/batterysaver/BatterySaverPolicy;
SPLcom/android/server/power/PowerManagerService$Injector;->createNativeWrapper()Lcom/android/server/power/PowerManagerService$NativeWrapper;
SPLcom/android/server/power/PowerManagerService$Injector;->createNotifier(Landroid/os/Looper;Landroid/content/Context;Lcom/android/internal/app/IBatteryStats;Lcom/android/server/power/SuspendBlocker;Lcom/android/server/policy/WindowManagerPolicy;)Lcom/android/server/power/Notifier;
SPLcom/android/server/power/PowerManagerService$Injector;->createSuspendBlocker(Lcom/android/server/power/PowerManagerService;Ljava/lang/String;)Lcom/android/server/power/SuspendBlocker;
SPLcom/android/server/power/PowerManagerService$LocalService;->getLowPowerState(I)Landroid/os/PowerSaveState;
SPLcom/android/server/power/PowerManagerService$LocalService;->powerHint(II)V
SPLcom/android/server/power/PowerManagerService$LocalService;->registerLowPowerModeObserver(Landroid/os/PowerManagerInternal$LowPowerModeListener;)V
SPLcom/android/server/power/PowerManagerService$LocalService;->setDeviceIdleWhitelist([I)V
SPLcom/android/server/power/PowerManagerService$LocalService;->setMaximumScreenOffTimeoutFromDeviceAdmin(IJ)V
SPLcom/android/server/power/PowerManagerService$LocalService;->setScreenBrightnessOverrideFromWindowManager(I)V
SPLcom/android/server/power/PowerManagerService$LocalService;->setUserActivityTimeoutOverrideFromWindowManager(J)V
SPLcom/android/server/power/PowerManagerService$LocalService;->uidActive(I)V
SPLcom/android/server/power/PowerManagerService$LocalService;->uidGone(I)V
SPLcom/android/server/power/PowerManagerService$LocalService;->uidIdle(I)V
SPLcom/android/server/power/PowerManagerService$LocalService;->updateUidProcState(II)V
SPLcom/android/server/power/PowerManagerService$NativeWrapper;->nativeAcquireSuspendBlocker(Ljava/lang/String;)V
SPLcom/android/server/power/PowerManagerService$NativeWrapper;->nativeInit(Lcom/android/server/power/PowerManagerService;)V
SPLcom/android/server/power/PowerManagerService$NativeWrapper;->nativeReleaseSuspendBlocker(Ljava/lang/String;)V
SPLcom/android/server/power/PowerManagerService$NativeWrapper;->nativeSendPowerHint(II)V
SPLcom/android/server/power/PowerManagerService$NativeWrapper;->nativeSetAutoSuspend(Z)V
SPLcom/android/server/power/PowerManagerService$NativeWrapper;->nativeSetFeature(II)V
SPLcom/android/server/power/PowerManagerService$NativeWrapper;->nativeSetInteractive(Z)V
SPLcom/android/server/power/PowerManagerService$PowerManagerHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/power/PowerManagerService$SuspendBlockerImpl;->acquire()V
SPLcom/android/server/power/PowerManagerService$SuspendBlockerImpl;->release()V
SPLcom/android/server/power/PowerManagerService$UserSwitchedReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/power/PowerManagerService$WakeLock;->hasSameWorkSource(Landroid/os/WorkSource;)Z
SPLcom/android/server/power/PowerManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/power/PowerManagerService;-><init>(Landroid/content/Context;Lcom/android/server/power/PowerManagerService$Injector;)V
SPLcom/android/server/power/PowerManagerService;->access$3500(Landroid/os/WorkSource;)Landroid/os/WorkSource;
SPLcom/android/server/power/PowerManagerService;->access$3600(Landroid/os/WorkSource;)Landroid/os/WorkSource;
SPLcom/android/server/power/PowerManagerService;->adjustWakeLockSummaryLocked(I)I
SPLcom/android/server/power/PowerManagerService;->applyWakeLockFlagsOnAcquireLocked(Lcom/android/server/power/PowerManagerService$WakeLock;I)V
SPLcom/android/server/power/PowerManagerService;->finishWakefulnessChangeIfNeededLocked()V
SPLcom/android/server/power/PowerManagerService;->getDesiredScreenPolicyLocked()I
SPLcom/android/server/power/PowerManagerService;->getLastShutdownReasonInternal(Ljava/lang/String;)I
SPLcom/android/server/power/PowerManagerService;->getNextProfileTimeoutLocked(J)J
SPLcom/android/server/power/PowerManagerService;->getScreenOffTimeoutLocked(J)J
SPLcom/android/server/power/PowerManagerService;->handleSandman()V
SPLcom/android/server/power/PowerManagerService;->incrementBootCount()V
SPLcom/android/server/power/PowerManagerService;->isDeviceIdleModeInternal()Z
SPLcom/android/server/power/PowerManagerService;->isInteractiveInternal()Z
SPLcom/android/server/power/PowerManagerService;->isLightDeviceIdleModeInternal()Z
SPLcom/android/server/power/PowerManagerService;->isWakeLockLevelSupportedInternal(I)Z
SPLcom/android/server/power/PowerManagerService;->monitor()V
SPLcom/android/server/power/PowerManagerService;->needDisplaySuspendBlockerLocked()Z
SPLcom/android/server/power/PowerManagerService;->notifyWakeLockAcquiredLocked(Lcom/android/server/power/PowerManagerService$WakeLock;)V
SPLcom/android/server/power/PowerManagerService;->notifyWakeLockChangingLocked(Lcom/android/server/power/PowerManagerService$WakeLock;ILjava/lang/String;Ljava/lang/String;IILandroid/os/WorkSource;Ljava/lang/String;)V
SPLcom/android/server/power/PowerManagerService;->notifyWakeLockReleasedLocked(Lcom/android/server/power/PowerManagerService$WakeLock;)V
SPLcom/android/server/power/PowerManagerService;->onBootPhase(I)V
SPLcom/android/server/power/PowerManagerService;->onStart()V
SPLcom/android/server/power/PowerManagerService;->readConfigurationLocked()V
SPLcom/android/server/power/PowerManagerService;->releaseWakeLockInternal(Landroid/os/IBinder;I)V
SPLcom/android/server/power/PowerManagerService;->removeWakeLockLocked(Lcom/android/server/power/PowerManagerService$WakeLock;I)V
SPLcom/android/server/power/PowerManagerService;->restartNofifyLongTimerLocked(Lcom/android/server/power/PowerManagerService$WakeLock;)V
SPLcom/android/server/power/PowerManagerService;->setDeviceIdleWhitelistInternal([I)V
SPLcom/android/server/power/PowerManagerService;->setDozeAfterScreenOffInternal(Z)V
SPLcom/android/server/power/PowerManagerService;->setHalAutoSuspendModeLocked(Z)V
SPLcom/android/server/power/PowerManagerService;->setHalInteractiveModeLocked(Z)V
SPLcom/android/server/power/PowerManagerService;->setMaximumScreenOffTimeoutFromDeviceAdminInternal(IJ)V
SPLcom/android/server/power/PowerManagerService;->setScreenBrightnessOverrideFromWindowManagerInternal(I)V
SPLcom/android/server/power/PowerManagerService;->setUserActivityTimeoutOverrideFromWindowManagerInternal(J)V
SPLcom/android/server/power/PowerManagerService;->setWakeLockDisabledStateLocked(Lcom/android/server/power/PowerManagerService$WakeLock;)Z
SPLcom/android/server/power/PowerManagerService;->shouldWakeUpWhenPluggedOrUnpluggedLocked(ZIZ)Z
SPLcom/android/server/power/PowerManagerService;->systemReady(Lcom/android/internal/app/IAppOpsService;)V
SPLcom/android/server/power/PowerManagerService;->uidActiveInternal(I)V
SPLcom/android/server/power/PowerManagerService;->uidGoneInternal(I)V
SPLcom/android/server/power/PowerManagerService;->uidIdleInternal(I)V
SPLcom/android/server/power/PowerManagerService;->updateDisplayPowerStateLocked(I)Z
SPLcom/android/server/power/PowerManagerService;->updateIsPoweredLocked(I)V
SPLcom/android/server/power/PowerManagerService;->updatePowerStateLocked()V
SPLcom/android/server/power/PowerManagerService;->updateProfilesLocked(J)V
SPLcom/android/server/power/PowerManagerService;->updateScreenBrightnessBoostLocked(I)V
SPLcom/android/server/power/PowerManagerService;->updateSettingsLocked()V
SPLcom/android/server/power/PowerManagerService;->updateStayOnLocked(I)V
SPLcom/android/server/power/PowerManagerService;->updateSuspendBlockerLocked()V
SPLcom/android/server/power/PowerManagerService;->updateUidProcStateInternal(II)V
SPLcom/android/server/power/PowerManagerService;->updateUserActivitySummaryLocked(JI)V
SPLcom/android/server/power/PowerManagerService;->updateWakeLockWorkSourceInternal(Landroid/os/IBinder;Landroid/os/WorkSource;Ljava/lang/String;I)V
SPLcom/android/server/power/PowerManagerService;->updateWakefulnessLocked(I)Z
SPLcom/android/server/power/PowerManagerService;->userActivityFromNative(JII)V
SPLcom/android/server/power/PowerManagerService;->userActivityInternal(JIII)V
SPLcom/android/server/power/PowerManagerService;->userActivityNoUpdateLocked(JIII)Z
SPLcom/android/server/power/PowerManagerService;->wakeUpNoUpdateLocked(JILjava/lang/String;ILjava/lang/String;I)Z
SPLcom/android/server/power/ThermalManagerService$1;->registerThermalEventListenerWithType(Landroid/os/IThermalEventListener;I)Z
SPLcom/android/server/power/ThermalManagerService$1;->registerThermalStatusListener(Landroid/os/IThermalStatusListener;)Z
SPLcom/android/server/power/ThermalManagerService$ThermalHal20Wrapper;->connectToHal()Z
SPLcom/android/server/power/ThermalManagerService$ThermalHal20Wrapper;->getCurrentTemperatures(ZI)Ljava/util/List;
SPLcom/android/server/power/ThermalManagerService$ThermalHal20Wrapper;->lambda$getCurrentTemperatures$0(Ljava/util/List;Landroid/hardware/thermal/V1_0/ThermalStatus;Ljava/util/ArrayList;)V
SPLcom/android/server/power/ThermalManagerService$ThermalHalWrapper;->setCallback(Lcom/android/server/power/ThermalManagerService$ThermalHalWrapper$TemperatureChangedCallback;)V
SPLcom/android/server/power/ThermalManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/power/ThermalManagerService;-><init>(Landroid/content/Context;Lcom/android/server/power/ThermalManagerService$ThermalHalWrapper;)V
SPLcom/android/server/power/ThermalManagerService;->lambda$postEventListener$1(Landroid/os/IThermalEventListener;Landroid/os/Temperature;)V
SPLcom/android/server/power/ThermalManagerService;->lambda$postStatusListener$0$ThermalManagerService(Landroid/os/IThermalStatusListener;)V
SPLcom/android/server/power/ThermalManagerService;->lambda$postStatusListener$0(Lcom/android/server/power/ThermalManagerService;Landroid/os/IThermalStatusListener;)V
SPLcom/android/server/power/ThermalManagerService;->notifyEventListenersLocked(Landroid/os/Temperature;)V
SPLcom/android/server/power/ThermalManagerService;->notifyStatusListenersLocked()V
SPLcom/android/server/power/ThermalManagerService;->onActivityManagerReady()V
SPLcom/android/server/power/ThermalManagerService;->onBootPhase(I)V
SPLcom/android/server/power/ThermalManagerService;->onStart()V
SPLcom/android/server/power/ThermalManagerService;->onTemperatureChanged(Landroid/os/Temperature;Z)V
SPLcom/android/server/power/ThermalManagerService;->onTemperatureMapChangedLocked()V
SPLcom/android/server/power/ThermalManagerService;->postEventListener(Landroid/os/Temperature;Landroid/os/IThermalEventListener;Ljava/lang/Integer;)V
SPLcom/android/server/power/ThermalManagerService;->postEventListenerCurrentTemperatures(Landroid/os/IThermalEventListener;Ljava/lang/Integer;)V
SPLcom/android/server/power/ThermalManagerService;->shutdownIfNeededLocked(Landroid/os/Temperature;)V
SPLcom/android/server/power/WirelessChargerDetector;-><init>(Landroid/hardware/SensorManager;Lcom/android/server/power/SuspendBlocker;Landroid/os/Handler;)V
SPLcom/android/server/power/WirelessChargerDetector;->update(ZI)Z
SPLcom/android/server/power/batterysaver/BatterySaverController$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/power/batterysaver/BatterySaverController$MyHandler;->dispatchMessage(Landroid/os/Message;)V
SPLcom/android/server/power/batterysaver/BatterySaverController$MyHandler;->postSystemReady()V
SPLcom/android/server/power/batterysaver/BatterySaverController;-><init>(Ljava/lang/Object;Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/power/batterysaver/BatterySaverPolicy;Lcom/android/server/power/batterysaver/BatterySavingStats;)V
SPLcom/android/server/power/batterysaver/BatterySaverController;->addListener(Landroid/os/PowerManagerInternal$LowPowerModeListener;)V
SPLcom/android/server/power/batterysaver/BatterySaverController;->getBatterySaverPolicy()Lcom/android/server/power/batterysaver/BatterySaverPolicy;
SPLcom/android/server/power/batterysaver/BatterySaverController;->isEnabled()Z
SPLcom/android/server/power/batterysaver/BatterySaverController;->isLaunchBoostDisabled()Z
SPLcom/android/server/power/batterysaver/BatterySaverController;->isPolicyEnabled()Z
SPLcom/android/server/power/batterysaver/BatterySaverController;->systemReady()V
SPLcom/android/server/power/batterysaver/BatterySaverController;->updateBatterySavingStats()V
SPLcom/android/server/power/batterysaver/BatterySaverLocationPlugin;->onSystemReady(Lcom/android/server/power/batterysaver/BatterySaverController;)V
SPLcom/android/server/power/batterysaver/BatterySaverLocationPlugin;->updateLocationState(Lcom/android/server/power/batterysaver/BatterySaverController;)V
SPLcom/android/server/power/batterysaver/BatterySaverPolicy$Policy;-><init>(FZZZZZZZZZZZZZZLandroid/util/ArrayMap;Landroid/util/ArrayMap;ZZI)V
SPLcom/android/server/power/batterysaver/BatterySaverPolicy$Policy;->fromSettings(Ljava/lang/String;Ljava/lang/String;Lcom/android/server/power/batterysaver/BatterySaverPolicy$Policy;)Lcom/android/server/power/batterysaver/BatterySaverPolicy$Policy;
SPLcom/android/server/power/batterysaver/BatterySaverPolicy;-><init>(Ljava/lang/Object;Landroid/content/Context;Lcom/android/server/power/batterysaver/BatterySavingStats;)V
SPLcom/android/server/power/batterysaver/BatterySaverPolicy;->addListener(Lcom/android/server/power/batterysaver/BatterySaverPolicy$BatterySaverPolicyListener;)V
SPLcom/android/server/power/batterysaver/BatterySaverPolicy;->getBatterySaverPolicy(I)Landroid/os/PowerSaveState;
SPLcom/android/server/power/batterysaver/BatterySaverPolicy;->getDeviceSpecificConfigResId()I
SPLcom/android/server/power/batterysaver/BatterySaverPolicy;->getGlobalSetting(Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/power/batterysaver/BatterySaverPolicy;->getGpsMode()I
SPLcom/android/server/power/batterysaver/BatterySaverPolicy;->onChange(ZLandroid/net/Uri;)V
SPLcom/android/server/power/batterysaver/BatterySaverPolicy;->refreshSettings()V
SPLcom/android/server/power/batterysaver/BatterySaverPolicy;->systemReady()V
SPLcom/android/server/power/batterysaver/BatterySaverPolicy;->updateConstantsLocked(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
SPLcom/android/server/power/batterysaver/BatterySaverPolicy;->updatePolicyDependenciesLocked()V
SPLcom/android/server/power/batterysaver/BatterySaverStateMachine;-><init>(Ljava/lang/Object;Landroid/content/Context;Lcom/android/server/power/batterysaver/BatterySaverController;)V
SPLcom/android/server/power/batterysaver/BatterySaverStateMachine;->doAutoBatterySaverLocked()V
SPLcom/android/server/power/batterysaver/BatterySaverStateMachine;->setBatteryStatus(ZIZ)V
SPLcom/android/server/power/batterysaver/BatterySavingStats;-><init>(Ljava/lang/Object;)V
SPLcom/android/server/power/batterysaver/BatterySavingStats;->endLastStateLocked(JII)V
SPLcom/android/server/power/batterysaver/BatterySavingStats;->getStat(I)Lcom/android/server/power/batterysaver/BatterySavingStats$Stat;
SPLcom/android/server/power/batterysaver/BatterySavingStats;->injectBatteryLevel()I
SPLcom/android/server/power/batterysaver/BatterySavingStats;->injectBatteryPercent()I
SPLcom/android/server/power/batterysaver/BatterySavingStats;->injectCurrentTime()J
SPLcom/android/server/power/batterysaver/BatterySavingStats;->transitionState(III)V
SPLcom/android/server/power/batterysaver/BatterySavingStats;->transitionStateLocked(I)V
SPLcom/android/server/power/batterysaver/CpuFrequencies;-><init>()V
SPLcom/android/server/power/batterysaver/CpuFrequencies;->addToSysFileMap(Ljava/util/Map;)V
SPLcom/android/server/power/batterysaver/CpuFrequencies;->parseString(Ljava/lang/String;)Lcom/android/server/power/batterysaver/CpuFrequencies;
SPLcom/android/server/power/batterysaver/CpuFrequencies;->toSysFileMap()Landroid/util/ArrayMap;
SPLcom/android/server/power/batterysaver/FileUpdater;-><init>(Landroid/content/Context;Landroid/os/Looper;II)V
SPLcom/android/server/power/batterysaver/FileUpdater;->injectDefaultValuesFilename()Ljava/io/File;
SPLcom/android/server/power/batterysaver/FileUpdater;->loadDefaultValuesLocked()Z
SPLcom/android/server/power/batterysaver/FileUpdater;->systemReady(Z)V
SPLcom/android/server/print/PrintManagerService$PrintManagerImpl$2;->onPackageRemoved(Ljava/lang/String;I)V
SPLcom/android/server/print/PrintManagerService$PrintManagerImpl;-><init>(Lcom/android/server/print/PrintManagerService;Landroid/content/Context;)V
SPLcom/android/server/print/PrintManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/print/PrintManagerService;->onStart()V
SPLcom/android/server/restrictions/RestrictionsManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/restrictions/RestrictionsManagerService;->onStart()V
SPLcom/android/server/role/-$$Lambda$RemoteRoleControllerService$Connection$yJ60VDeVaOyaxXiM-qb5uWJhTkw;-><init>()V
SPLcom/android/server/role/-$$Lambda$RemoteRoleControllerService$Connection$yJ60VDeVaOyaxXiM-qb5uWJhTkw;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/role/-$$Lambda$awRgkWhcVYhq1r1FVyYMnmMSXMs;-><init>()V
SPLcom/android/server/role/-$$Lambda$awRgkWhcVYhq1r1FVyYMnmMSXMs;->execute(Landroid/rolecontrollerservice/IRoleControllerService;Landroid/app/role/IRoleManagerCallback;)V
SPLcom/android/server/role/RemoteRoleControllerService$Connection$Call;->execute(Landroid/rolecontrollerservice/IRoleControllerService;)V
SPLcom/android/server/role/RemoteRoleControllerService$Connection;->ensureBound()V
SPLcom/android/server/role/RemoteRoleControllerService$Connection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
SPLcom/android/server/role/RemoteRoleControllerService;->onGrantDefaultRoles(Landroid/app/role/IRoleManagerCallback;)V
SPLcom/android/server/role/RoleManagerService$DefaultBrowserProvider;->getDefaultBrowser(I)Ljava/lang/String;
SPLcom/android/server/role/RoleManagerService$DefaultHomeProvider;->getDefaultHome(I)Ljava/lang/String;
SPLcom/android/server/role/RoleManagerService$Stub;->addOnRoleHoldersChangedListenerAsUser(Landroid/app/role/IOnRoleHoldersChangedListener;I)V
SPLcom/android/server/role/RoleManagerService$Stub;->getDefaultSmsPackage(I)Ljava/lang/String;
SPLcom/android/server/role/RoleManagerService$Stub;->getRoleHoldersAsUser(Ljava/lang/String;I)Ljava/util/List;
SPLcom/android/server/role/RoleManagerService$Stub;->isRoleAvailable(Ljava/lang/String;)Z
SPLcom/android/server/role/RoleManagerService$Stub;->setRoleNamesFromController(Ljava/util/List;)V
SPLcom/android/server/role/RoleManagerService;-><init>(Landroid/content/Context;Lcom/android/server/role/RoleManagerService$RoleHoldersResolver;)V
SPLcom/android/server/role/RoleManagerService;->computeComponentStateHash(I)Ljava/lang/String;
SPLcom/android/server/role/RoleManagerService;->getOrCreateControllerService(I)Lcom/android/server/role/RemoteRoleControllerService;
SPLcom/android/server/role/RoleManagerService;->getOrCreateListeners(I)Landroid/os/RemoteCallbackList;
SPLcom/android/server/role/RoleManagerService;->getOrCreateUserState(I)Lcom/android/server/role/RoleUserState;
SPLcom/android/server/role/RoleManagerService;->migrateRoleIfNecessary(Ljava/lang/String;I)V
SPLcom/android/server/role/RoleManagerService;->onStart()V
SPLcom/android/server/role/RoleManagerService;->onStartUser(I)V
SPLcom/android/server/role/RoleManagerService;->performInitialGrantsIfNecessary(I)V
SPLcom/android/server/role/RoleUserState;-><init>(ILcom/android/server/role/RoleUserState$Callback;)V
SPLcom/android/server/role/RoleUserState;->addRoleName(Ljava/lang/String;)Z
SPLcom/android/server/role/RoleUserState;->getPackagesHash()Ljava/lang/String;
SPLcom/android/server/role/RoleUserState;->getRoleHolders(Ljava/lang/String;)Landroid/util/ArraySet;
SPLcom/android/server/role/RoleUserState;->isRoleAvailable(Ljava/lang/String;)Z
SPLcom/android/server/role/RoleUserState;->parseRoleHoldersLocked(Lorg/xmlpull/v1/XmlPullParser;)Landroid/util/ArraySet;
SPLcom/android/server/role/RoleUserState;->parseRolesLocked(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/role/RoleUserState;->parseXmlLocked(Lorg/xmlpull/v1/XmlPullParser;)V
SPLcom/android/server/role/RoleUserState;->readFile()V
SPLcom/android/server/role/RoleUserState;->setRoleNames(Ljava/util/List;)V
SPLcom/android/server/role/RoleUserState;->throwIfDestroyedLocked()V
SPLcom/android/server/rollback/-$$Lambda$RollbackManagerServiceImpl$2_NDf9EpLcTKkJVpkadZhudKips;->run()V
SPLcom/android/server/rollback/-$$Lambda$RollbackManagerServiceImpl$9jRyv0ATJ7l2lc6xAd3tmkVmx7g;->run()V
SPLcom/android/server/rollback/RollbackManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/rollback/RollbackManagerService;->onBootPhase(I)V
SPLcom/android/server/rollback/RollbackManagerService;->onStart()V
SPLcom/android/server/rollback/RollbackManagerServiceImpl$4;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/rollback/RollbackManagerServiceImpl;-><init>(Landroid/content/Context;)V
SPLcom/android/server/rollback/RollbackManagerServiceImpl;->ensureRollbackDataLoaded()V
SPLcom/android/server/rollback/RollbackManagerServiceImpl;->lambda$new$0$RollbackManagerServiceImpl()V
SPLcom/android/server/rollback/RollbackManagerServiceImpl;->loadAllRollbackDataLocked()V
SPLcom/android/server/rollback/RollbackManagerServiceImpl;->runExpiration()V
SPLcom/android/server/rollback/RollbackPackageHealthObserver;->getName()Ljava/lang/String;
SPLcom/android/server/rollback/RollbackStore;->loadAvailableRollbacks()Ljava/util/List;
SPLcom/android/server/rollback/RollbackStore;->loadRecentlyExecutedRollbacks()Ljava/util/List;
SPLcom/android/server/search/SearchManagerService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/search/SearchManagerService$Lifecycle;->onStart()V
SPLcom/android/server/search/SearchManagerService$MyPackageMonitor;->onSomePackagesChanged()V
SPLcom/android/server/search/SearchManagerService$MyPackageMonitor;->updateSearchables()V
SPLcom/android/server/search/SearchManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/security/KeyAttestationApplicationIdProviderService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/security/KeyChainSystemService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/security/KeyChainSystemService;->onStart()V
SPLcom/android/server/signedconfig/SignedConfigService;->registerUpdateReceiver(Landroid/content/Context;)V
SPLcom/android/server/slice/-$$Lambda$PinnedSliceState$TZdoqC_LDA8If7sQ7WXz9LM6VHg;->run()V
SPLcom/android/server/slice/-$$Lambda$SliceManagerService$LkusK1jmu9JKJTiMRWqWxNGEGbY;->get()Ljava/lang/Object;
SPLcom/android/server/slice/-$$Lambda$SliceManagerService$ic_PW16x_KcVi-NszMwHhErqI0s;->get()Ljava/lang/Object;
SPLcom/android/server/slice/-$$Lambda$SliceManagerService$pJ39TkC3AEVezLFEPuJgSQSTDJM;->run()V
SPLcom/android/server/slice/PinnedSliceState;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
SPLcom/android/server/slice/PinnedSliceState;-><init>(Lcom/android/server/slice/SliceManagerService;Landroid/net/Uri;Ljava/lang/String;)V
SPLcom/android/server/slice/PinnedSliceState;->getClient()Landroid/content/ContentProviderClient;
SPLcom/android/server/slice/PinnedSliceState;->handleSendPinned()V
SPLcom/android/server/slice/PinnedSliceState;->mergeSpecs([Landroid/app/slice/SliceSpec;)V
SPLcom/android/server/slice/PinnedSliceState;->pin(Ljava/lang/String;[Landroid/app/slice/SliceSpec;Landroid/os/IBinder;)V
SPLcom/android/server/slice/PinnedSliceState;->setSlicePinned(Z)V
SPLcom/android/server/slice/SliceClientPermissions;->clear()V
SPLcom/android/server/slice/SliceClientPermissions;->getAuthority(Lcom/android/server/slice/SlicePermissionManager$PkgUser;)Lcom/android/server/slice/SliceClientPermissions$SliceAuthority;
SPLcom/android/server/slice/SliceClientPermissions;->hasFullAccess()Z
SPLcom/android/server/slice/SliceClientPermissions;->hasPermission(Landroid/net/Uri;I)Z
SPLcom/android/server/slice/SliceManagerService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/slice/SliceManagerService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/slice/SliceManagerService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/slice/SliceManagerService$Lifecycle;->onStart()V
SPLcom/android/server/slice/SliceManagerService$PackageMatchingCache;->matches(Ljava/lang/String;)Z
SPLcom/android/server/slice/SliceManagerService;-><init>(Landroid/content/Context;Landroid/os/Looper;)V
SPLcom/android/server/slice/SliceManagerService;->checkAccess(Ljava/lang/String;Landroid/net/Uri;II)I
SPLcom/android/server/slice/SliceManagerService;->checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I
SPLcom/android/server/slice/SliceManagerService;->createPinnedSlice(Landroid/net/Uri;Ljava/lang/String;)Lcom/android/server/slice/PinnedSliceState;
SPLcom/android/server/slice/SliceManagerService;->enforceAccess(Ljava/lang/String;Landroid/net/Uri;)V
SPLcom/android/server/slice/SliceManagerService;->getContext()Landroid/content/Context;
SPLcom/android/server/slice/SliceManagerService;->getDefaultHome(I)Ljava/lang/String;
SPLcom/android/server/slice/SliceManagerService;->getHandler()Landroid/os/Handler;
SPLcom/android/server/slice/SliceManagerService;->getLock()Ljava/lang/Object;
SPLcom/android/server/slice/SliceManagerService;->getOrCreatePinnedSlice(Landroid/net/Uri;Ljava/lang/String;)Lcom/android/server/slice/PinnedSliceState;
SPLcom/android/server/slice/SliceManagerService;->getPinnedSlices(Ljava/lang/String;)[Landroid/net/Uri;
SPLcom/android/server/slice/SliceManagerService;->getProviderPkg(Landroid/net/Uri;I)Ljava/lang/String;
SPLcom/android/server/slice/SliceManagerService;->hasFullSliceAccess(Ljava/lang/String;I)Z
SPLcom/android/server/slice/SliceManagerService;->lambda$getAssistantMatcher$2$SliceManagerService(I)Ljava/lang/String;
SPLcom/android/server/slice/SliceManagerService;->lambda$getHomeMatcher$3$SliceManagerService(I)Ljava/lang/String;
SPLcom/android/server/slice/SliceManagerService;->lambda$pinSlice$1$SliceManagerService(Ljava/lang/String;Ljava/lang/String;I)V
SPLcom/android/server/slice/SliceManagerService;->pinSlice(Ljava/lang/String;Landroid/net/Uri;[Landroid/app/slice/SliceSpec;Landroid/os/IBinder;)V
SPLcom/android/server/slice/SlicePermissionManager$PkgUser;->equals(Ljava/lang/Object;)Z
SPLcom/android/server/slice/SlicePermissionManager$PkgUser;->hashCode()I
SPLcom/android/server/slice/SlicePermissionManager$PkgUser;->toString()Ljava/lang/String;
SPLcom/android/server/slice/SlicePermissionManager;-><init>(Landroid/content/Context;Landroid/os/Looper;Ljava/io/File;)V
SPLcom/android/server/slice/SlicePermissionManager;->getClient(Lcom/android/server/slice/SlicePermissionManager$PkgUser;)Lcom/android/server/slice/SliceClientPermissions;
SPLcom/android/server/slice/SlicePermissionManager;->getParser(Ljava/lang/String;)Lcom/android/server/slice/SlicePermissionManager$ParserHolder;
SPLcom/android/server/slice/SlicePermissionManager;->getProvider(Lcom/android/server/slice/SlicePermissionManager$PkgUser;)Lcom/android/server/slice/SliceProviderPermissions;
SPLcom/android/server/slice/SlicePermissionManager;->hasFullAccess(Ljava/lang/String;I)Z
SPLcom/android/server/slice/SlicePermissionManager;->hasPermission(Ljava/lang/String;ILandroid/net/Uri;)Z
SPLcom/android/server/slice/SlicePermissionManager;->removePkg(Ljava/lang/String;I)V
SPLcom/android/server/slice/SliceProviderPermissions;->getAuthorities()Ljava/util/Collection;
SPLcom/android/server/soundtrigger/SoundTriggerHelper;-><init>(Landroid/content/Context;)V
SPLcom/android/server/soundtrigger/SoundTriggerService$LocalSoundTriggerService;->setSoundTriggerHelper(Lcom/android/server/soundtrigger/SoundTriggerHelper;)V
SPLcom/android/server/soundtrigger/SoundTriggerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/soundtrigger/SoundTriggerService;->initSoundTriggerHelper()V
SPLcom/android/server/soundtrigger/SoundTriggerService;->onBootPhase(I)V
SPLcom/android/server/soundtrigger/SoundTriggerService;->onStart()V
SPLcom/android/server/soundtrigger/SoundTriggerService;->onStartUser(I)V
SPLcom/android/server/stats/StatsCompanionService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/stats/StatsCompanionService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/stats/StatsCompanionService$Lifecycle;->onStart()V
SPLcom/android/server/stats/StatsCompanionService$ThermalEventListener;->notifyThrottling(Landroid/os/Temperature;)V
SPLcom/android/server/stats/StatsCompanionService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/stats/StatsCompanionService;->sayHiToStatsd()V
SPLcom/android/server/stats/StatsCompanionService;->setAlarmForSubscriberTriggering(J)V
SPLcom/android/server/stats/StatsCompanionService;->setAnomalyAlarm(J)V
SPLcom/android/server/stats/StatsCompanionService;->setPullingAlarm(J)V
SPLcom/android/server/statusbar/-$$Lambda$StatusBarManagerService$Ex4WQoiXjzWDsRHD7oXCkXIQBB4;->run()V
SPLcom/android/server/statusbar/-$$Lambda$StatusBarManagerService$QO0p6KVnf0wFwF8hglhodfvx26s;->run()V
SPLcom/android/server/statusbar/-$$Lambda$StatusBarManagerService$UR67Ud0NgV9VHyelUmYzZNtR6O4;->run()V
SPLcom/android/server/statusbar/-$$Lambda$StatusBarManagerService$yr21OX4Hyd_XfExwnVnVIn3Jfe4;->run()V
SPLcom/android/server/statusbar/StatusBarManagerService$1;->appTransitionFinished(I)V
SPLcom/android/server/statusbar/StatusBarManagerService$1;->setNotificationDelegate(Lcom/android/server/notification/NotificationDelegate;)V
SPLcom/android/server/statusbar/StatusBarManagerService$1;->setSystemUiVisibility(IIIIILandroid/graphics/Rect;Landroid/graphics/Rect;Ljava/lang/String;)V
SPLcom/android/server/statusbar/StatusBarManagerService$1;->setTopAppHidesStatusBar(Z)V
SPLcom/android/server/statusbar/StatusBarManagerService$1;->topAppWindowChanged(IZ)V
SPLcom/android/server/statusbar/StatusBarManagerService$DeathRecipient;->linkToDeath()V
SPLcom/android/server/statusbar/StatusBarManagerService$DisableRecord;-><init>(Lcom/android/server/statusbar/StatusBarManagerService;ILandroid/os/IBinder;)V
SPLcom/android/server/statusbar/StatusBarManagerService$DisableRecord;->getFlags(I)I
SPLcom/android/server/statusbar/StatusBarManagerService$DisableRecord;->isEmpty()Z
SPLcom/android/server/statusbar/StatusBarManagerService$DisableRecord;->setFlags(IILjava/lang/String;)V
SPLcom/android/server/statusbar/StatusBarManagerService$DisableRecord;->toString()Ljava/lang/String;
SPLcom/android/server/statusbar/StatusBarManagerService$UiState;-><init>(Lcom/android/server/statusbar/StatusBarManagerService;)V
SPLcom/android/server/statusbar/StatusBarManagerService;-><init>(Landroid/content/Context;Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/statusbar/StatusBarManagerService;->disableForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V
SPLcom/android/server/statusbar/StatusBarManagerService;->disableLocked(IIILandroid/os/IBinder;Ljava/lang/String;I)V
SPLcom/android/server/statusbar/StatusBarManagerService;->findMatchingRecordLocked(Landroid/os/IBinder;I)Landroid/util/Pair;
SPLcom/android/server/statusbar/StatusBarManagerService;->gatherDisableActionsLocked(II)I
SPLcom/android/server/statusbar/StatusBarManagerService;->lambda$disableLocked$0$StatusBarManagerService(I)V
SPLcom/android/server/statusbar/StatusBarManagerService;->lambda$notifyBarAttachChanged$4$StatusBarManagerService()V
SPLcom/android/server/statusbar/StatusBarManagerService;->lambda$topAppWindowChanged$1$StatusBarManagerService(IZ)V
SPLcom/android/server/statusbar/StatusBarManagerService;->lambda$topAppWindowChanged$1(Lcom/android/server/statusbar/StatusBarManagerService;IZ)V
SPLcom/android/server/statusbar/StatusBarManagerService;->lambda$updateUiVisibilityLocked$3$StatusBarManagerService(IIIIILandroid/graphics/Rect;Landroid/graphics/Rect;)V
SPLcom/android/server/statusbar/StatusBarManagerService;->lambda$updateUiVisibilityLocked$3(Lcom/android/server/statusbar/StatusBarManagerService;IIIIILandroid/graphics/Rect;Landroid/graphics/Rect;)V
SPLcom/android/server/statusbar/StatusBarManagerService;->manageDisableListLocked(IILandroid/os/IBinder;Ljava/lang/String;I)V
SPLcom/android/server/statusbar/StatusBarManagerService;->onDisplayChanged(I)V
SPLcom/android/server/statusbar/StatusBarManagerService;->registerStatusBar(Lcom/android/internal/statusbar/IStatusBar;Ljava/util/List;Ljava/util/List;[ILjava/util/List;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
SPLcom/android/server/statusbar/StatusBarManagerService;->setIconVisibility(Ljava/lang/String;Z)V
SPLcom/android/server/statusbar/StatusBarManagerService;->setSystemUiVisibility(IIIIILandroid/graphics/Rect;Landroid/graphics/Rect;Ljava/lang/String;)V
SPLcom/android/server/statusbar/StatusBarManagerService;->topAppWindowChanged(IZ)V
SPLcom/android/server/statusbar/StatusBarManagerService;->updateUiVisibilityLocked(IIIIILandroid/graphics/Rect;Landroid/graphics/Rect;)V
SPLcom/android/server/storage/CacheQuotaStrategy;-><init>(Landroid/content/Context;Landroid/app/usage/UsageStatsManagerInternal;Lcom/android/server/pm/Installer;Landroid/util/ArrayMap;)V
SPLcom/android/server/storage/CacheQuotaStrategy;->getRequestFromXml(Lorg/xmlpull/v1/XmlPullParser;)Landroid/app/usage/CacheQuotaHint;
SPLcom/android/server/storage/CacheQuotaStrategy;->pushProcessedQuotas(Ljava/util/List;)V
SPLcom/android/server/storage/CacheQuotaStrategy;->readFromXml(Ljava/io/InputStream;)Landroid/util/Pair;
SPLcom/android/server/storage/CacheQuotaStrategy;->setupQuotasFromFile()J
SPLcom/android/server/storage/DeviceStorageMonitorService$1;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/storage/DeviceStorageMonitorService$State;-><init>()V
SPLcom/android/server/storage/DeviceStorageMonitorService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/storage/DeviceStorageMonitorService;->check()V
SPLcom/android/server/storage/DeviceStorageMonitorService;->onStart()V
SPLcom/android/server/storage/DeviceStorageMonitorService;->updateBroadcasts(Landroid/os/storage/VolumeInfo;III)V
SPLcom/android/server/storage/DeviceStorageMonitorService;->updateNotifications(Landroid/os/storage/VolumeInfo;II)V
SPLcom/android/server/storage/DiskStatsLoggingService;->schedule(Landroid/content/Context;)V
SPLcom/android/server/telecom/TelecomLoaderService$TelecomServiceConnection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
SPLcom/android/server/telecom/TelecomLoaderService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/telecom/TelecomLoaderService;->connectToTelecom()V
SPLcom/android/server/telecom/TelecomLoaderService;->onBootPhase(I)V
SPLcom/android/server/telecom/TelecomLoaderService;->onStart()V
SPLcom/android/server/telecom/TelecomLoaderService;->registerDefaultAppNotifier()V
SPLcom/android/server/testharness/TestHarnessModeService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/testharness/TestHarnessModeService;->onBootPhase(I)V
SPLcom/android/server/testharness/TestHarnessModeService;->onStart()V
SPLcom/android/server/testharness/TestHarnessModeService;->setUpTestHarnessMode()V
SPLcom/android/server/textclassifier/TextClassificationManagerService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/textclassifier/TextClassificationManagerService$Lifecycle;->onStart()V
SPLcom/android/server/textclassifier/TextClassificationManagerService$Lifecycle;->onStartUser(I)V
SPLcom/android/server/textclassifier/TextClassificationManagerService$Lifecycle;->processAnyPendingWork(I)V
SPLcom/android/server/textclassifier/TextClassificationManagerService$UserState;-><init>(ILandroid/content/Context;Ljava/lang/Object;)V
SPLcom/android/server/textservices/-$$Lambda$TextServicesManagerService$otJ1a5fe5mYJvLrIEr3o1Ia1kSo;->applyAsInt(I)I
SPLcom/android/server/textservices/TextServicesManagerInternal$1;-><init>()V
SPLcom/android/server/textservices/TextServicesManagerService$Lifecycle$1;->getCurrentSpellCheckerForUser(I)Landroid/view/textservice/SpellCheckerInfo;
SPLcom/android/server/textservices/TextServicesManagerService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/textservices/TextServicesManagerService$Lifecycle;->onStart()V
SPLcom/android/server/textservices/TextServicesManagerService$TextServicesMonitor;->onSomePackagesChanged()V
SPLcom/android/server/textservices/TextServicesManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/textservices/TextServicesManagerService;->getCurrentSpellCheckerForUser(I)Landroid/view/textservice/SpellCheckerInfo;
SPLcom/android/server/textservices/TextServicesManagerService;->lambda$new$0$TextServicesManagerService(I)I
SPLcom/android/server/textservices/TextServicesManagerService;->lambda$new$0(Lcom/android/server/textservices/TextServicesManagerService;I)I
SPLcom/android/server/timedetector/SimpleTimeDetectorStrategy;->adjustAndSetDeviceSystemClock(Landroid/util/TimestampedValue;ZJJLjava/lang/String;)V
SPLcom/android/server/timedetector/SimpleTimeDetectorStrategy;->setSystemClockIfRequired(Landroid/util/TimestampedValue;Z)V
SPLcom/android/server/timedetector/SimpleTimeDetectorStrategy;->suggestTime(Landroid/app/timedetector/TimeSignal;)V
SPLcom/android/server/timedetector/SimpleTimeDetectorStrategy;->validateNewNitzTime(Landroid/util/TimestampedValue;Landroid/util/TimestampedValue;)Z
SPLcom/android/server/timedetector/TimeDetectorService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/timedetector/TimeDetectorService$Lifecycle;->onStart()V
SPLcom/android/server/timedetector/TimeDetectorService;-><init>(Landroid/content/Context;Lcom/android/server/timedetector/TimeDetectorStrategy$Callback;Lcom/android/server/timedetector/TimeDetectorStrategy;)V
SPLcom/android/server/timedetector/TimeDetectorService;->create(Landroid/content/Context;)Lcom/android/server/timedetector/TimeDetectorService;
SPLcom/android/server/timedetector/TimeDetectorService;->suggestTime(Landroid/app/timedetector/TimeSignal;)V
SPLcom/android/server/timedetector/TimeDetectorStrategyCallbackImpl;-><init>(Landroid/content/Context;)V
SPLcom/android/server/timedetector/TimeDetectorStrategyCallbackImpl;->acquireWakeLock()V
SPLcom/android/server/timedetector/TimeDetectorStrategyCallbackImpl;->checkWakeLockHeld()V
SPLcom/android/server/timedetector/TimeDetectorStrategyCallbackImpl;->elapsedRealtimeMillis()J
SPLcom/android/server/timedetector/TimeDetectorStrategyCallbackImpl;->isTimeDetectionEnabled()Z
SPLcom/android/server/timedetector/TimeDetectorStrategyCallbackImpl;->releaseWakeLock()V
SPLcom/android/server/timedetector/TimeDetectorStrategyCallbackImpl;->sendStickyBroadcast(Landroid/content/Intent;)V
SPLcom/android/server/timedetector/TimeDetectorStrategyCallbackImpl;->setSystemClock(J)V
SPLcom/android/server/timedetector/TimeDetectorStrategyCallbackImpl;->systemClockMillis()J
SPLcom/android/server/timedetector/TimeDetectorStrategyCallbackImpl;->systemClockUpdateThresholdMillis()I
SPLcom/android/server/trust/-$$Lambda$TrustManagerService$1$98HKBkg-C1PLlz_Q1vJz1OJtw4c;-><init>()V
SPLcom/android/server/trust/-$$Lambda$TrustManagerService$1$98HKBkg-C1PLlz_Q1vJz1OJtw4c;->run()V
SPLcom/android/server/trust/TrustManagerService$1;->isDeviceSecure(I)Z
SPLcom/android/server/trust/TrustManagerService$1;->registerTrustListener(Landroid/app/trust/ITrustListener;)V
SPLcom/android/server/trust/TrustManagerService$1;->reportKeyguardShowingChanged()V
SPLcom/android/server/trust/TrustManagerService$2;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/trust/TrustManagerService$AgentInfo;->hashCode()I
SPLcom/android/server/trust/TrustManagerService$Receiver;->register(Landroid/content/Context;)V
SPLcom/android/server/trust/TrustManagerService$SettingsObserver;-><init>(Lcom/android/server/trust/TrustManagerService;Landroid/os/Handler;)V
SPLcom/android/server/trust/TrustManagerService$SettingsObserver;->onChange(ZLandroid/net/Uri;)V
SPLcom/android/server/trust/TrustManagerService$SettingsObserver;->updateContentObserver()V
SPLcom/android/server/trust/TrustManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/trust/TrustManagerService;->addListener(Landroid/app/trust/ITrustListener;)V
SPLcom/android/server/trust/TrustManagerService;->aggregateIsTrustManaged(I)Z
SPLcom/android/server/trust/TrustManagerService;->aggregateIsTrusted(I)Z
SPLcom/android/server/trust/TrustManagerService;->dispatchOnTrustChanged(ZII)V
SPLcom/android/server/trust/TrustManagerService;->dispatchOnTrustManagedChanged(ZI)V
SPLcom/android/server/trust/TrustManagerService;->getSettingsAttrs(Landroid/content/pm/PackageManager;Landroid/content/pm/ResolveInfo;)Lcom/android/server/trust/TrustManagerService$SettingsAttrs;
SPLcom/android/server/trust/TrustManagerService;->isDeviceLockedInner(I)Z
SPLcom/android/server/trust/TrustManagerService;->onBootPhase(I)V
SPLcom/android/server/trust/TrustManagerService;->onStart()V
SPLcom/android/server/trust/TrustManagerService;->onStartUser(I)V
SPLcom/android/server/trust/TrustManagerService;->refreshAgentList(I)V
SPLcom/android/server/trust/TrustManagerService;->refreshDeviceLockedForUser(I)V
SPLcom/android/server/trust/TrustManagerService;->resolveAllowedTrustAgents(Landroid/content/pm/PackageManager;I)Ljava/util/List;
SPLcom/android/server/trust/TrustManagerService;->resolveProfileParent(I)I
SPLcom/android/server/trust/TrustManagerService;->setDeviceLockedForUser(IZ)V
SPLcom/android/server/trust/TrustManagerService;->updateTrust(II)V
SPLcom/android/server/trust/TrustManagerService;->updateTrust(IIZ)V
SPLcom/android/server/twilight/TwilightService$1;->getLastTwilightState()Lcom/android/server/twilight/TwilightState;
SPLcom/android/server/twilight/TwilightService$1;->unregisterListener(Lcom/android/server/twilight/TwilightListener;)V
SPLcom/android/server/twilight/TwilightService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/twilight/TwilightService;->onBootPhase(I)V
SPLcom/android/server/twilight/TwilightService;->onStart()V
SPLcom/android/server/uri/UriGrantsManagerService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/uri/UriGrantsManagerService$Lifecycle;->onStart()V
SPLcom/android/server/uri/UriGrantsManagerService$LocalService;->checkAuthorityGrants(ILandroid/content/pm/ProviderInfo;IZ)Z
SPLcom/android/server/uri/UriGrantsManagerService$LocalService;->checkGrantUriPermissionFromIntent(ILjava/lang/String;Landroid/content/Intent;ILcom/android/server/uri/NeededUriGrants;I)Lcom/android/server/uri/NeededUriGrants;
SPLcom/android/server/uri/UriGrantsManagerService$LocalService;->checkUriPermission(Lcom/android/server/uri/GrantUri;II)Z
SPLcom/android/server/uri/UriGrantsManagerService$LocalService;->grantUriPermissionFromIntent(ILjava/lang/String;Landroid/content/Intent;Lcom/android/server/uri/UriPermissionOwner;I)V
SPLcom/android/server/uri/UriGrantsManagerService$LocalService;->newUriPermissionOwner(Ljava/lang/String;)Landroid/os/IBinder;
SPLcom/android/server/uri/UriGrantsManagerService$LocalService;->onActivityManagerInternalAdded()V
SPLcom/android/server/uri/UriGrantsManagerService$LocalService;->onSystemReady()V
SPLcom/android/server/uri/UriGrantsManagerService$LocalService;->removeUriPermissionsForPackage(Ljava/lang/String;IZZ)V
SPLcom/android/server/uri/UriGrantsManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/uri/UriGrantsManagerService;->checkAuthorityGrants(ILandroid/content/pm/ProviderInfo;IZ)Z
SPLcom/android/server/uri/UriGrantsManagerService;->checkGrantUriPermissionFromIntent(ILjava/lang/String;Landroid/content/Intent;ILcom/android/server/uri/NeededUriGrants;I)Lcom/android/server/uri/NeededUriGrants;
SPLcom/android/server/uri/UriGrantsManagerService;->checkUriPermission(Lcom/android/server/uri/GrantUri;II)Z
SPLcom/android/server/uri/UriGrantsManagerService;->enforceNotIsolatedCaller(Ljava/lang/String;)V
SPLcom/android/server/uri/UriGrantsManagerService;->grantUriPermissionFromIntent(ILjava/lang/String;Landroid/content/Intent;Lcom/android/server/uri/UriPermissionOwner;I)V
SPLcom/android/server/uri/UriGrantsManagerService;->onActivityManagerInternalAdded()V
SPLcom/android/server/uri/UriGrantsManagerService;->readGrantedUriPermissions()V
SPLcom/android/server/uri/UriGrantsManagerService;->removeUriPermissionsForPackage(Ljava/lang/String;IZZ)V
SPLcom/android/server/usage/AppIdleHistory;->clearUsage(Ljava/lang/String;I)V
SPLcom/android/server/usage/AppIdleHistory;->getAppStandbyBucket(Ljava/lang/String;IJ)I
SPLcom/android/server/usage/AppIdleHistory;->getScreenOnTimeFile()Ljava/io/File;
SPLcom/android/server/usage/AppIdleHistory;->getTimeSinceLastJobRun(Ljava/lang/String;IJ)J
SPLcom/android/server/usage/AppIdleHistory;->getUserFile(I)Ljava/io/File;
SPLcom/android/server/usage/AppIdleHistory;->readScreenOnTime()V
SPLcom/android/server/usage/AppIdleHistory;->reportUsage(Lcom/android/server/usage/AppIdleHistory$AppUsageHistory;Ljava/lang/String;IIJJ)Lcom/android/server/usage/AppIdleHistory$AppUsageHistory;
SPLcom/android/server/usage/AppIdleHistory;->updateDisplay(ZJ)V
SPLcom/android/server/usage/AppStandbyController$2;->onDisplayChanged(I)V
SPLcom/android/server/usage/AppStandbyController$DeviceStateReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/usage/AppStandbyController$Injector;->elapsedRealtime()J
SPLcom/android/server/usage/AppStandbyController$Injector;->getAppIdleSettings()Ljava/lang/String;
SPLcom/android/server/usage/AppStandbyController$Injector;->getBootPhase()I
SPLcom/android/server/usage/AppStandbyController$Injector;->getContext()Landroid/content/Context;
SPLcom/android/server/usage/AppStandbyController$Injector;->getDataSystemDirectory()Ljava/io/File;
SPLcom/android/server/usage/AppStandbyController$Injector;->getLooper()Landroid/os/Looper;
SPLcom/android/server/usage/AppStandbyController$Injector;->getRunningUserIds()[I
SPLcom/android/server/usage/AppStandbyController$Injector;->isAppIdleEnabled()Z
SPLcom/android/server/usage/AppStandbyController$Injector;->isDefaultDisplayOn()Z
SPLcom/android/server/usage/AppStandbyController$Injector;->noteEvent(ILjava/lang/String;I)V
SPLcom/android/server/usage/AppStandbyController$Injector;->onBootPhase(I)V
SPLcom/android/server/usage/AppStandbyController$Injector;->registerDisplayListener(Landroid/hardware/display/DisplayManager$DisplayListener;Landroid/os/Handler;)V
SPLcom/android/server/usage/AppStandbyController$PackageReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/usage/AppStandbyController$SettingsObserver;->parseLongArray(Ljava/lang/String;[J)[J
SPLcom/android/server/usage/AppStandbyController$SettingsObserver;->registerObserver()V
SPLcom/android/server/usage/AppStandbyController$SettingsObserver;->updateSettings()V
SPLcom/android/server/usage/AppStandbyController;-><init>(Lcom/android/server/usage/AppStandbyController$Injector;)V
SPLcom/android/server/usage/AppStandbyController;->addListener(Landroid/app/usage/UsageStatsManagerInternal$AppIdleStateChangeListener;)V
SPLcom/android/server/usage/AppStandbyController;->clearAppIdleForPackage(Ljava/lang/String;I)V
SPLcom/android/server/usage/AppStandbyController;->getAppStandbyBucket(Ljava/lang/String;IJZ)I
SPLcom/android/server/usage/AppStandbyController;->getTimeSinceLastJobRun(Ljava/lang/String;I)J
SPLcom/android/server/usage/AppStandbyController;->informParoleStateChanged()V
SPLcom/android/server/usage/AppStandbyController;->isDisplayOn()Z
SPLcom/android/server/usage/AppStandbyController;->isParoledOrCharging()Z
SPLcom/android/server/usage/AppStandbyController;->notifyBatteryStats(Ljava/lang/String;IZ)V
SPLcom/android/server/usage/AppStandbyController;->onAdminDataAvailable()V
SPLcom/android/server/usage/AppStandbyController;->onBootPhase(I)V
SPLcom/android/server/usage/AppStandbyController;->postCheckIdleStates(I)V
SPLcom/android/server/usage/AppStandbyController;->postOneTimeCheckIdleStates()V
SPLcom/android/server/usage/AppStandbyController;->postReportContentProviderUsage(Ljava/lang/String;Ljava/lang/String;I)V
SPLcom/android/server/usage/AppStandbyController;->reportContentProviderUsage(Ljava/lang/String;Ljava/lang/String;I)V
SPLcom/android/server/usage/AppStandbyController;->setActiveAdminApps(Ljava/util/Set;I)V
SPLcom/android/server/usage/AppStandbyController;->setAppIdleEnabled(Z)V
SPLcom/android/server/usage/AppStandbyController;->setChargingState(Z)V
SPLcom/android/server/usage/AppStandbyController;->usageEventToSubReason(I)I
SPLcom/android/server/usage/AppTimeLimitController;-><init>(Lcom/android/server/usage/AppTimeLimitController$TimeLimitCallbackListener;Landroid/os/Looper;)V
SPLcom/android/server/usage/AppTimeLimitController;->getUptimeMillis()J
SPLcom/android/server/usage/AppTimeLimitController;->noteUsageStart(Ljava/lang/String;I)V
SPLcom/android/server/usage/AppTimeLimitController;->noteUsageStart(Ljava/lang/String;IJ)V
SPLcom/android/server/usage/AppTimeLimitController;->noteUsageStop(Ljava/lang/String;I)V
SPLcom/android/server/usage/IntervalStats;-><init>()V
SPLcom/android/server/usage/IntervalStats;->getOrCreateConfigurationStats(Landroid/content/res/Configuration;)Landroid/app/usage/ConfigurationStats;
SPLcom/android/server/usage/IntervalStats;->incrementAppLaunchCount(Ljava/lang/String;)V
SPLcom/android/server/usage/IntervalStats;->updateConfigurationStats(Landroid/content/res/Configuration;J)V
SPLcom/android/server/usage/IntervalStats;->updateKeyguardShown(J)V
SPLcom/android/server/usage/IntervalStats;->updateScreenInteractive(J)V
SPLcom/android/server/usage/IntervalStats;->upgradeIfNeeded()V
SPLcom/android/server/usage/StorageStatsService$1;->onVolumeStateChanged(Landroid/os/storage/VolumeInfo;II)V
SPLcom/android/server/usage/StorageStatsService$H;-><init>(Lcom/android/server/usage/StorageStatsService;Landroid/os/Looper;)V
SPLcom/android/server/usage/StorageStatsService$H;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/usage/StorageStatsService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/usage/StorageStatsService$Lifecycle;->onStart()V
SPLcom/android/server/usage/StorageStatsService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/usage/StorageStatsService;->invalidateMounts()V
SPLcom/android/server/usage/UnixCalendar;->addDays(I)V
SPLcom/android/server/usage/UnixCalendar;->setTimeInMillis(J)V
SPLcom/android/server/usage/UsageStatsDatabase$1;->accept(Ljava/io/File;Ljava/lang/String;)Z
SPLcom/android/server/usage/UsageStatsDatabase;->$closeResource(Ljava/lang/Throwable;Ljava/lang/AutoCloseable;)V
SPLcom/android/server/usage/UsageStatsDatabase;-><init>(Ljava/io/File;I)V
SPLcom/android/server/usage/UsageStatsDatabase;->checkVersionAndBuildLocked()V
SPLcom/android/server/usage/UsageStatsDatabase;->getBuildFingerprint()Ljava/lang/String;
SPLcom/android/server/usage/UsageStatsDatabase;->getLatestUsageStats(I)Lcom/android/server/usage/IntervalStats;
SPLcom/android/server/usage/UsageStatsDatabase;->indexFilesLocked()V
SPLcom/android/server/usage/UsageStatsDatabase;->init(J)V
SPLcom/android/server/usage/UsageStatsDatabase;->isNewUpdate()Z
SPLcom/android/server/usage/UsageStatsDatabase;->onTimeChanged(J)V
SPLcom/android/server/usage/UsageStatsDatabase;->putUsageStats(ILcom/android/server/usage/IntervalStats;)V
SPLcom/android/server/usage/UsageStatsDatabase;->readLocked(Ljava/io/InputStream;Lcom/android/server/usage/IntervalStats;I)V
SPLcom/android/server/usage/UsageStatsDatabase;->writeLocked(Landroid/util/AtomicFile;Lcom/android/server/usage/IntervalStats;I)V
SPLcom/android/server/usage/UsageStatsDatabase;->writeLocked(Ljava/io/OutputStream;Lcom/android/server/usage/IntervalStats;I)V
SPLcom/android/server/usage/UsageStatsProto;->loadChooserCounts(Landroid/util/proto/ProtoInputStream;Landroid/app/usage/UsageStats;)V
SPLcom/android/server/usage/UsageStatsProto;->loadCountAndTime(Landroid/util/proto/ProtoInputStream;JLcom/android/server/usage/IntervalStats$EventTracker;)V
SPLcom/android/server/usage/UsageStatsProto;->loadCountsForAction(Landroid/util/proto/ProtoInputStream;Landroid/util/ArrayMap;)V
SPLcom/android/server/usage/UsageStatsProto;->writeConfigStats(Landroid/util/proto/ProtoOutputStream;JLcom/android/server/usage/IntervalStats;Landroid/app/usage/ConfigurationStats;Z)V
SPLcom/android/server/usage/UsageStatsProto;->writeCountsForAction(Landroid/util/proto/ProtoOutputStream;Landroid/util/ArrayMap;)V
SPLcom/android/server/usage/UsageStatsService$1;->onParoleStateChanged(Z)V
SPLcom/android/server/usage/UsageStatsService$3;->onUidGone(IZ)V
SPLcom/android/server/usage/UsageStatsService$3;->onUidStateChanged(IIJ)V
SPLcom/android/server/usage/UsageStatsService$LocalService;->addAppIdleStateChangeListener(Landroid/app/usage/UsageStatsManagerInternal$AppIdleStateChangeListener;)V
SPLcom/android/server/usage/UsageStatsService$LocalService;->getAppStandbyBucket(Ljava/lang/String;IJ)I
SPLcom/android/server/usage/UsageStatsService$LocalService;->getIdleUidsForUser(I)[I
SPLcom/android/server/usage/UsageStatsService$LocalService;->getTimeSinceLastJobRun(Ljava/lang/String;I)J
SPLcom/android/server/usage/UsageStatsService$LocalService;->isAppIdleParoleOn()Z
SPLcom/android/server/usage/UsageStatsService$LocalService;->onAdminDataAvailable()V
SPLcom/android/server/usage/UsageStatsService$LocalService;->reportConfigurationChange(Landroid/content/res/Configuration;I)V
SPLcom/android/server/usage/UsageStatsService$LocalService;->reportContentProviderUsage(Ljava/lang/String;Ljava/lang/String;I)V
SPLcom/android/server/usage/UsageStatsService$LocalService;->reportEvent(Landroid/content/ComponentName;IIILandroid/content/ComponentName;)V
SPLcom/android/server/usage/UsageStatsService$LocalService;->reportEvent(Ljava/lang/String;II)V
SPLcom/android/server/usage/UsageStatsService$LocalService;->setActiveAdminApps(Ljava/util/Set;I)V
SPLcom/android/server/usage/UsageStatsService$UserActionsReceiver;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/usage/UsageStatsService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/usage/UsageStatsService;->cleanUpRemovedUsersLocked()V
SPLcom/android/server/usage/UsageStatsService;->onBootPhase(I)V
SPLcom/android/server/usage/UsageStatsService;->onStart()V
SPLcom/android/server/usage/UsageStatsService;->onStatsReloaded()V
SPLcom/android/server/usage/UsageStatsService;->onStatsUpdated()V
SPLcom/android/server/usage/UsageStatsService;->readUsageSourceSetting()V
SPLcom/android/server/usage/UserUsageStatsService$1;-><init>()V
SPLcom/android/server/usage/UserUsageStatsService$2;-><init>()V
SPLcom/android/server/usage/UserUsageStatsService$3;-><init>()V
SPLcom/android/server/usage/UserUsageStatsService;-><init>(Landroid/content/Context;ILjava/io/File;Lcom/android/server/usage/UserUsageStatsService$StatsUpdatedListener;)V
SPLcom/android/server/usage/UserUsageStatsService;->init(J)V
SPLcom/android/server/usage/UserUsageStatsService;->loadActiveStats(J)V
SPLcom/android/server/usage/UserUsageStatsService;->onTimeChanged(JJ)V
SPLcom/android/server/usage/UserUsageStatsService;->persistActiveStats()V
SPLcom/android/server/usage/UserUsageStatsService;->updateRolloverDeadline()V
SPLcom/android/server/usb/-$$Lambda$UsbHostManager$XT3F5aQci4H6VWSBYBQQNSzpnvs;->run()V
SPLcom/android/server/usb/-$$Lambda$UsbPortManager$FUqGOOupcl6RrRkZBk-BnrRQyPI;->run()V
SPLcom/android/server/usb/UsbAlsaManager;-><init>(Landroid/content/Context;)V
SPLcom/android/server/usb/UsbDeviceManager$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/usb/UsbDeviceManager$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/usb/UsbDeviceManager$UsbHandler;-><init>(Landroid/os/Looper;Landroid/content/Context;Lcom/android/server/usb/UsbDeviceManager;Lcom/android/server/usb/UsbAlsaManager;Lcom/android/server/usb/UsbSettingsManager;)V
SPLcom/android/server/usb/UsbDeviceManager$UsbHandler;->finishBoot()V
SPLcom/android/server/usb/UsbDeviceManager$UsbHandler;->getPinnedSharedPrefs(Landroid/content/Context;)Landroid/content/SharedPreferences;
SPLcom/android/server/usb/UsbDeviceManager$UsbHandler;->getSystemProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/usb/UsbDeviceManager$UsbHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/usb/UsbDeviceManager$UsbHandler;->isAdbEnabled()Z
SPLcom/android/server/usb/UsbDeviceManager$UsbHandler;->sendMessage(IZ)V
SPLcom/android/server/usb/UsbDeviceManager$UsbHandler;->updateAdbNotification(Z)V
SPLcom/android/server/usb/UsbDeviceManager$UsbHandler;->updateHostState(Landroid/hardware/usb/UsbPort;Landroid/hardware/usb/UsbPortStatus;)V
SPLcom/android/server/usb/UsbDeviceManager$UsbHandler;->updateState(Ljava/lang/String;)V
SPLcom/android/server/usb/UsbDeviceManager$UsbHandler;->updateUsbNotification(Z)V
SPLcom/android/server/usb/UsbDeviceManager$UsbHandlerHal$ServiceNotification;->onRegistration(Ljava/lang/String;Ljava/lang/String;Z)V
SPLcom/android/server/usb/UsbDeviceManager$UsbHandlerHal$UsbGadgetCallback;->getCurrentUsbFunctionsCb(JI)V
SPLcom/android/server/usb/UsbDeviceManager$UsbHandlerHal;-><init>(Landroid/os/Looper;Landroid/content/Context;Lcom/android/server/usb/UsbDeviceManager;Lcom/android/server/usb/UsbAlsaManager;Lcom/android/server/usb/UsbSettingsManager;)V
SPLcom/android/server/usb/UsbDeviceManager$UsbHandlerHal;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/usb/UsbDeviceManager;-><init>(Landroid/content/Context;Lcom/android/server/usb/UsbAlsaManager;Lcom/android/server/usb/UsbSettingsManager;)V
SPLcom/android/server/usb/UsbDeviceManager;->initRndisAddress()V
SPLcom/android/server/usb/UsbDeviceManager;->onKeyguardStateChanged(Z)V
SPLcom/android/server/usb/UsbDeviceManager;->setCurrentUser(ILcom/android/server/usb/UsbProfileGroupSettingsManager;)V
SPLcom/android/server/usb/UsbDeviceManager;->systemReady()V
SPLcom/android/server/usb/UsbHostManager;-><init>(Landroid/content/Context;Lcom/android/server/usb/UsbAlsaManager;Lcom/android/server/usb/UsbSettingsManager;)V
SPLcom/android/server/usb/UsbHostManager;->setCurrentUserSettings(Lcom/android/server/usb/UsbProfileGroupSettingsManager;)V
SPLcom/android/server/usb/UsbHostManager;->setUsbDeviceConnectionHandler(Landroid/content/ComponentName;)V
SPLcom/android/server/usb/UsbHostManager;->systemReady()V
SPLcom/android/server/usb/UsbPortManager$1;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/usb/UsbPortManager$HALCallback;->notifyPortStatusChange_1_1(Ljava/util/ArrayList;I)V
SPLcom/android/server/usb/UsbPortManager$PortInfo;-><init>(Landroid/hardware/usb/UsbManager;Ljava/lang/String;IIZZ)V
SPLcom/android/server/usb/UsbPortManager$PortInfo;->setStatus(IZIZIZIII)Z
SPLcom/android/server/usb/UsbPortManager$PortInfo;->toString()Ljava/lang/String;
SPLcom/android/server/usb/UsbPortManager$RawPortInfo$1;-><init>()V
SPLcom/android/server/usb/UsbPortManager$ServiceNotification;->onRegistration(Ljava/lang/String;Ljava/lang/String;Z)V
SPLcom/android/server/usb/UsbPortManager;-><init>(Landroid/content/Context;)V
SPLcom/android/server/usb/UsbPortManager;->addOrUpdatePortLocked(Ljava/lang/String;IIIZIZIZZIZILcom/android/internal/util/IndentingPrintWriter;)V
SPLcom/android/server/usb/UsbPortManager;->connectToProxy(Lcom/android/internal/util/IndentingPrintWriter;)V
SPLcom/android/server/usb/UsbPortManager;->lambda$sendPortChangedBroadcastLocked$0$UsbPortManager(Landroid/content/Intent;)V
SPLcom/android/server/usb/UsbPortManager;->sendPortChangedBroadcastLocked(Lcom/android/server/usb/UsbPortManager$PortInfo;)V
SPLcom/android/server/usb/UsbPortManager;->systemReady()V
SPLcom/android/server/usb/UsbPortManager;->updateContaminantNotification()V
SPLcom/android/server/usb/UsbPortManager;->updatePortsLocked(Lcom/android/internal/util/IndentingPrintWriter;Ljava/util/ArrayList;)V
SPLcom/android/server/usb/UsbProfileGroupSettingsManager$MyPackageMonitor;->onPackageRemoved(Ljava/lang/String;I)V
SPLcom/android/server/usb/UsbProfileGroupSettingsManager;-><init>(Landroid/content/Context;Landroid/os/UserHandle;Lcom/android/server/usb/UsbSettingsManager;Lcom/android/server/usb/UsbHandlerManager;)V
SPLcom/android/server/usb/UsbProfileGroupSettingsManager;->clearDefaults(Ljava/lang/String;Landroid/os/UserHandle;)V
SPLcom/android/server/usb/UsbProfileGroupSettingsManager;->clearPackageDefaultsLocked(Lcom/android/server/usb/UsbProfileGroupSettingsManager$UserPackage;)Z
SPLcom/android/server/usb/UsbProfileGroupSettingsManager;->readSettingsLocked()V
SPLcom/android/server/usb/UsbProfileGroupSettingsManager;->upgradeSingleUserLocked()V
SPLcom/android/server/usb/UsbService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/usb/UsbService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/usb/UsbService$Lifecycle;->onStart()V
SPLcom/android/server/usb/UsbService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/usb/UsbService;->onSwitchUser(I)V
SPLcom/android/server/usb/UsbService;->systemReady()V
SPLcom/android/server/usb/UsbSettingsManager;-><init>(Landroid/content/Context;)V
SPLcom/android/server/usb/UsbSettingsManager;->getSettingsForProfileGroup(Landroid/os/UserHandle;)Lcom/android/server/usb/UsbProfileGroupSettingsManager;
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$RoleObserver;-><init>(Lcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;Ljava/util/concurrent/Executor;)V
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->activeServiceSupportsLaunchFromKeyguard()Z
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->enforceCallingPermission(Ljava/lang/String;)V
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->getActiveServiceComponentName()Landroid/content/ComponentName;
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->getCurRecognizer(I)Landroid/content/ComponentName;
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->initForUser(I)V
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->registerVoiceInteractionSessionListener(Lcom/android/internal/app/IVoiceInteractionSessionListener;)V
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->switchImplementationIfNeededLocked(Z)V
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->systemRunning(Z)V
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService$VoiceInteractionManagerServiceStub;->unloadAllKeyphraseModels()V
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService;->onBootPhase(I)V
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService;->onStart()V
SPLcom/android/server/voiceinteraction/VoiceInteractionManagerService;->onStartUser(I)V
SPLcom/android/server/vr/EnabledComponentsObserver;-><init>(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/util/Collection;)V
SPLcom/android/server/vr/EnabledComponentsObserver;->build(Landroid/content/Context;Landroid/os/Handler;Ljava/lang/String;Landroid/os/Looper;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/util/Collection;)Lcom/android/server/vr/EnabledComponentsObserver;
SPLcom/android/server/vr/EnabledComponentsObserver;->getEnabled(I)Landroid/util/ArraySet;
SPLcom/android/server/vr/EnabledComponentsObserver;->loadComponentNames(Landroid/content/pm/PackageManager;ILjava/lang/String;Ljava/lang/String;)Landroid/util/ArraySet;
SPLcom/android/server/vr/EnabledComponentsObserver;->loadComponentNamesFromSetting(Ljava/lang/String;I)Landroid/util/ArraySet;
SPLcom/android/server/vr/EnabledComponentsObserver;->onUsersChanged()V
SPLcom/android/server/vr/EnabledComponentsObserver;->rebuildAll()V
SPLcom/android/server/vr/SettingsObserver;-><init>(Landroid/content/Context;Landroid/os/Handler;Landroid/net/Uri;Ljava/lang/String;)V
SPLcom/android/server/vr/Vr2dDisplay;-><init>(Landroid/hardware/display/DisplayManager;Landroid/app/ActivityManagerInternal;Lcom/android/server/wm/WindowManagerInternal;Landroid/service/vr/IVrManager;)V
SPLcom/android/server/vr/Vr2dDisplay;->init(Landroid/content/Context;Z)V
SPLcom/android/server/vr/Vr2dDisplay;->startVrModeListener()V
SPLcom/android/server/vr/VrManagerService$3;-><init>()V
SPLcom/android/server/vr/VrManagerService$4;->getVrModeState()Z
SPLcom/android/server/vr/VrManagerService$4;->registerListener(Landroid/service/vr/IVrStateCallbacks;)V
SPLcom/android/server/vr/VrManagerService$4;->registerPersistentVrStateListener(Landroid/service/vr/IPersistentVrStateCallbacks;)V
SPLcom/android/server/vr/VrManagerService$LocalService;->addPersistentVrModeStateListener(Landroid/service/vr/IPersistentVrStateCallbacks;)V
SPLcom/android/server/vr/VrManagerService$LocalService;->onScreenStateChanged(Z)V
SPLcom/android/server/vr/VrManagerService$LocalService;->setVrMode(ZLandroid/content/ComponentName;IILandroid/content/ComponentName;)V
SPLcom/android/server/vr/VrManagerService$NotificationAccessManager;->update(Ljava/util/Collection;)V
SPLcom/android/server/vr/VrManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/vr/VrManagerService;->enforceCallerPermissionAnyOf([Ljava/lang/String;)V
SPLcom/android/server/vr/VrManagerService;->getVrMode()Z
SPLcom/android/server/vr/VrManagerService;->grantCoarseLocationPermissionIfNeeded(Ljava/lang/String;I)V
SPLcom/android/server/vr/VrManagerService;->grantNotificationListenerAccess(Ljava/lang/String;I)V
SPLcom/android/server/vr/VrManagerService;->isDefaultAllowed(Ljava/lang/String;)Z
SPLcom/android/server/vr/VrManagerService;->onBootPhase(I)V
SPLcom/android/server/vr/VrManagerService;->onEnabledComponentChanged()V
SPLcom/android/server/vr/VrManagerService;->onKeyguardStateChanged(Z)V
SPLcom/android/server/vr/VrManagerService;->onStart()V
SPLcom/android/server/vr/VrManagerService;->onStartUser(I)V
SPLcom/android/server/vr/VrManagerService;->setSystemState(IZ)V
SPLcom/android/server/vr/VrManagerService;->setVrMode(ZLandroid/content/ComponentName;IILandroid/content/ComponentName;)V
SPLcom/android/server/vr/VrManagerService;->updateVrModeAllowedLocked()V
SPLcom/android/server/wallpaper/-$$Lambda$WallpaperManagerService$SxaUJpgTTfzUoz6u3AWuAOQdoNw;->test(Ljava/lang/Object;)Z
SPLcom/android/server/wallpaper/-$$Lambda$WallpaperManagerService$UhAlBGB5jhuZrLndUPRmIvoHRZc;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wallpaper/-$$Lambda$WallpaperManagerService$WallpaperConnection$NrNkceFJLqjCb8eAxErUhpLd5c8;->test(Ljava/lang/Object;)Z
SPLcom/android/server/wallpaper/-$$Lambda$WallpaperManagerService$la7x4YHA-l88Cd6HFTscnLBbKfI;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wallpaper/-$$Lambda$WallpaperManagerService$xeJGAwCI8tssclwKFf8jMsYdoKQ;->run()V
SPLcom/android/server/wallpaper/WallpaperManagerService$1;->onDisplayChanged(I)V
SPLcom/android/server/wallpaper/WallpaperManagerService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wallpaper/WallpaperManagerService$Lifecycle;->onBootPhase(I)V
SPLcom/android/server/wallpaper/WallpaperManagerService$Lifecycle;->onStart()V
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection$DisplayConnector;->connectLocked(Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection;Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;)V
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection$DisplayConnector;->ensureStatusHandled()V
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection;->appendConnectorWithCondition(Ljava/util/function/Predicate;)V
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection;->attachEngine(Landroid/service/wallpaper/IWallpaperEngine;I)V
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection;->containsDisplay(I)Z
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection;->engineShown(Landroid/service/wallpaper/IWallpaperEngine;)V
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection;->forEachDisplayConnector(Ljava/util/function/Consumer;)V
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection;->getDisplayConnectorOrCreate(I)Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection$DisplayConnector;
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection;->initDisplayState()V
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection;->onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection;->onWallpaperColorsChanged(Landroid/app/WallpaperColors;I)V
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;-><init>(ILjava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;->cropExists()Z
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperObserver;-><init>(Lcom/android/server/wallpaper/WallpaperManagerService;Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;)V
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperObserver;->dataForEvent(ZZ)Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;
SPLcom/android/server/wallpaper/WallpaperManagerService$WallpaperObserver;->onEvent(ILjava/lang/String;)V
SPLcom/android/server/wallpaper/WallpaperManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->bindWallpaperComponentLocked(Landroid/content/ComponentName;ZZLcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;Landroid/os/IRemoteCallback;)Z
SPLcom/android/server/wallpaper/WallpaperManagerService;->checkPermission(Ljava/lang/String;)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->enforceCallingOrSelfPermissionAndAppOp(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->ensureSaneWallpaperData(Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;I)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->getMaximumSizeDimension(I)I
SPLcom/android/server/wallpaper/WallpaperManagerService;->getWallpaper(Ljava/lang/String;Landroid/app/IWallpaperManagerCallback;ILandroid/os/Bundle;I)Landroid/os/ParcelFileDescriptor;
SPLcom/android/server/wallpaper/WallpaperManagerService;->getWallpaperColors(III)Landroid/app/WallpaperColors;
SPLcom/android/server/wallpaper/WallpaperManagerService;->getWallpaperInfo(I)Landroid/app/WallpaperInfo;
SPLcom/android/server/wallpaper/WallpaperManagerService;->getWallpaperSafeLocked(II)Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;
SPLcom/android/server/wallpaper/WallpaperManagerService;->initialize()V
SPLcom/android/server/wallpaper/WallpaperManagerService;->initializeFallbackWallpaper()V
SPLcom/android/server/wallpaper/WallpaperManagerService;->isWallpaperSupported(Ljava/lang/String;)Z
SPLcom/android/server/wallpaper/WallpaperManagerService;->lambda$notifyWallpaperColorsChanged$0$WallpaperManagerService(Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;ILcom/android/server/wallpaper/WallpaperManagerService$WallpaperConnection$DisplayConnector;)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->lambda$switchUser$4$WallpaperManagerService(Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->loadSettingsLocked(IZ)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->makeJournaledFile(I)Lcom/android/internal/util/JournaledFile;
SPLcom/android/server/wallpaper/WallpaperManagerService;->makeWallpaperIdLocked()I
SPLcom/android/server/wallpaper/WallpaperManagerService;->migrateFromOld()V
SPLcom/android/server/wallpaper/WallpaperManagerService;->notifyColorListeners(Landroid/app/WallpaperColors;III)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->notifyWallpaperColorsChangedOnDisplay(Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;II)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->onBootPhase(I)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->parseWallpaperAttributes(Lorg/xmlpull/v1/XmlPullParser;Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;Z)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->registerWallpaperColorsCallback(Landroid/app/IWallpaperManagerCallback;II)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->saveSettingsLocked(I)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->setInAmbientMode(ZJ)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->setLockWallpaperCallback(Landroid/app/IWallpaperManagerCallback;)Z
SPLcom/android/server/wallpaper/WallpaperManagerService;->switchUser(ILandroid/os/IRemoteCallback;)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->switchWallpaper(Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;Landroid/os/IRemoteCallback;)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->systemReady()V
SPLcom/android/server/wallpaper/WallpaperManagerService;->unregisterWallpaperColorsCallback(Landroid/app/IWallpaperManagerCallback;II)V
SPLcom/android/server/wallpaper/WallpaperManagerService;->updateFallbackConnection()V
SPLcom/android/server/wallpaper/WallpaperManagerService;->writeWallpaperAttributes(Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Lcom/android/server/wallpaper/WallpaperManagerService$WallpaperData;)V
SPLcom/android/server/webkit/SystemImpl;-><init>()V
SPLcom/android/server/webkit/SystemImpl;-><init>(Lcom/android/server/webkit/SystemImpl$1;)V
SPLcom/android/server/webkit/SystemImpl;->getFactoryPackageVersion(Ljava/lang/String;)J
SPLcom/android/server/webkit/SystemImpl;->getMultiProcessSetting(Landroid/content/Context;)I
SPLcom/android/server/webkit/SystemImpl;->getPackageInfoForProvider(Landroid/webkit/WebViewProviderInfo;)Landroid/content/pm/PackageInfo;
SPLcom/android/server/webkit/SystemImpl;->getPackageInfoForProviderAllUsers(Landroid/content/Context;Landroid/webkit/WebViewProviderInfo;)Ljava/util/List;
SPLcom/android/server/webkit/SystemImpl;->getUserChosenWebViewProvider(Landroid/content/Context;)Ljava/lang/String;
SPLcom/android/server/webkit/SystemImpl;->getWebViewPackages()[Landroid/webkit/WebViewProviderInfo;
SPLcom/android/server/webkit/SystemImpl;->isFallbackLogicEnabled()Z
SPLcom/android/server/webkit/SystemImpl;->isMultiProcessDefaultEnabled()Z
SPLcom/android/server/webkit/SystemImpl;->notifyZygote(Z)V
SPLcom/android/server/webkit/SystemImpl;->onWebViewProviderChanged(Landroid/content/pm/PackageInfo;)I
SPLcom/android/server/webkit/SystemImpl;->readSignatures(Landroid/content/res/XmlResourceParser;)[Ljava/lang/String;
SPLcom/android/server/webkit/SystemImpl;->systemIsDebuggable()Z
SPLcom/android/server/webkit/SystemImpl;->updateUserSetting(Landroid/content/Context;Ljava/lang/String;)V
SPLcom/android/server/webkit/WebViewUpdateService$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/webkit/WebViewUpdateService$BinderService;->notifyRelroCreationCompleted()V
SPLcom/android/server/webkit/WebViewUpdateService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/webkit/WebViewUpdateService;->onStart()V
SPLcom/android/server/webkit/WebViewUpdateService;->prepareWebViewInSystemServer()V
SPLcom/android/server/webkit/WebViewUpdateServiceImpl;->existsValidNonFallbackProvider([Landroid/webkit/WebViewProviderInfo;)Z
SPLcom/android/server/webkit/WebViewUpdateServiceImpl;->getWebViewPackages()[Landroid/webkit/WebViewProviderInfo;
SPLcom/android/server/webkit/WebViewUpdateServiceImpl;->handleNewUser(I)V
SPLcom/android/server/webkit/WebViewUpdateServiceImpl;->isMultiProcessEnabled()Z
SPLcom/android/server/webkit/WebViewUpdateServiceImpl;->notifyRelroCreationCompleted()V
SPLcom/android/server/webkit/WebViewUpdateServiceImpl;->prepareWebViewInSystemServer()V
SPLcom/android/server/webkit/WebViewUpdateServiceImpl;->updateFallbackState([Landroid/webkit/WebViewProviderInfo;)V
SPLcom/android/server/webkit/WebViewUpdater;-><init>(Landroid/content/Context;Lcom/android/server/webkit/SystemInterface;)V
SPLcom/android/server/webkit/WebViewUpdater;->checkIfRelrosDoneLocked()V
SPLcom/android/server/webkit/WebViewUpdater;->findPreferredWebViewPackage()Landroid/content/pm/PackageInfo;
SPLcom/android/server/webkit/WebViewUpdater;->getMinimumVersionCode()J
SPLcom/android/server/webkit/WebViewUpdater;->getValidWebViewPackagesAndInfos()[Lcom/android/server/webkit/WebViewUpdater$ProviderAndPackageInfo;
SPLcom/android/server/webkit/WebViewUpdater;->isInstalledAndEnabledForAllUsers(Ljava/util/List;)Z
SPLcom/android/server/webkit/WebViewUpdater;->isValidProvider(Landroid/webkit/WebViewProviderInfo;Landroid/content/pm/PackageInfo;)Z
SPLcom/android/server/webkit/WebViewUpdater;->notifyRelroCreationCompleted()V
SPLcom/android/server/webkit/WebViewUpdater;->onWebViewProviderChanged(Landroid/content/pm/PackageInfo;)V
SPLcom/android/server/webkit/WebViewUpdater;->prepareWebViewInSystemServer()V
SPLcom/android/server/webkit/WebViewUpdater;->providerHasValidSignature(Landroid/webkit/WebViewProviderInfo;Landroid/content/pm/PackageInfo;Lcom/android/server/webkit/SystemInterface;)Z
SPLcom/android/server/webkit/WebViewUpdater;->validityResult(Landroid/webkit/WebViewProviderInfo;Landroid/content/pm/PackageInfo;)I
SPLcom/android/server/wifi/-$$Lambda$AvailableNetworkNotifier$uFi1H-bLBjC8591OGivQMgKmiaU;-><init>(Lcom/android/server/wifi/AvailableNetworkNotifier;)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$0fExlzrQXvHvboqrhwLsuIEN8sQ;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/IWifiStaIface;)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$BkJ-u2mnM7l_bsdJ9qDxHZJRcVM;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/IWifiNanIface;)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$ErxCpEghr4yhQpGHX1NQPumvouc;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;I)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$GV5vgwCMe-GctE92pSijMSntP7M;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$G_a1DJorXSzwXeeGcyX-nUw44LU;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$InterfaceRttControllerLifecycleCallbackProxy$Jq3jiK0PF_ihQmDGnOqjWGZKR74;->run()V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$InterfaceRttControllerLifecycleCallbackProxy$Vt8Gvz01jOxC1TqVEIeBuJ45xAg;->run()V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$J6ItBAiUMCzTjCuPD7lYSuJSIGU;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$J_rq9pD25U5x_bgsE9o4bIVv6Rs;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/IWifiChip;)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$ListenerProxy$EUZ7m5GXHY27oKauEW_8pihGjbw;->run()V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$ListenerProxy$YGLSZf58sxTORRCaSB1wOY_oquo;->run()V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$NbsSOlQ2rIfa_a-hKmLVOeqJ0sk;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/IWifiStaIface;)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$WPv-AGl6UabBR2Zo5mjPN7Pljlo;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$X9vx2J4m1oo365x_oO3URsq_nqo;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/IWifiRttController;)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$bTmsDoAj9faJCBOTeT1Q3Ww5yNM;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/lang/String;)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$eCjBY_x53LlceEqam19pM9GP8Hg;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$hzrxXx9RDE1QCGSaFElLzJYP5ag;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/IWifiNanIface;)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$kKpeJmcjHk7E6pKqNwVTgOU76EA;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;I)V
SPLcom/android/server/wifi/-$$Lambda$HalDeviceManager$yPcf5jFsIHD8FLJVWQLrQ1Z9fSc;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
SPLcom/android/server/wifi/-$$Lambda$SarManager$cF1vmoM2QYZACA-YzJsns9WSQI4;->run()V
SPLcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$jt86rUfXpbjU1MKB5KeL4Iv2b0k;->onValues(Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface;)V
SPLcom/android/server/wifi/-$$Lambda$SupplicantStaIfaceHal$kPu1HFl0FicFP9N2B4hh_sincE8;->onValues(Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface;)V
SPLcom/android/server/wifi/-$$Lambda$WifiLockManager$1$CkMHEvkkoNUZsaBQmCb9B-0F8lI;->run()V
SPLcom/android/server/wifi/-$$Lambda$WifiNative$NetworkObserverInternal$x2MXZjJ72D1RHdyNl7XjvdO7CHI;->run()V
SPLcom/android/server/wifi/-$$Lambda$WifiServiceImpl$WH1yXObMcpzajFG1KwwEOakTA7o;->run()V
SPLcom/android/server/wifi/-$$Lambda$WifiServiceImpl$ck1sc9jNKsBP5gycroIN0Rn-f5Q;->run()V
SPLcom/android/server/wifi/-$$Lambda$WifiVendorHal$XwdlM1fW3hc4x8NTlPEdTo9qP_w;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;I)V
SPLcom/android/server/wifi/-$$Lambda$WifiVendorHal$qPUuRnlo2XMDrsA1gI_KLrbvPAI;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/StaBackgroundScanCapabilities;)V
SPLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ClientModeActiveState$ClientListener;->onStateChanged(I)V
SPLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ClientModeActiveState;->enter()V
SPLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ModeActiveState;->onModeActivationComplete()V
SPLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ModeActiveState;->updateScanMode()V
SPLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ScanOnlyModeActiveState$ScanOnlyListener;->onStateChanged(I)V
SPLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ScanOnlyModeActiveState;->enter()V
SPLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ScanOnlyModeActiveState;->exit()V
SPLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$ScanOnlyModeActiveState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$WifiDisabledState;->enter()V
SPLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$WifiDisabledState;->exit()V
SPLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine$WifiDisabledState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine;-><init>(Lcom/android/server/wifi/ActiveModeWarden;)V
SPLcom/android/server/wifi/ActiveModeWarden$ModeStateMachine;->checkForAndHandleModeChange(Landroid/os/Message;)Z
SPLcom/android/server/wifi/ActiveModeWarden;-><init>(Lcom/android/server/wifi/WifiInjector;Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/wifi/WifiNative;Lcom/android/server/wifi/DefaultModeManager;Lcom/android/internal/app/IBatteryStats;)V
SPLcom/android/server/wifi/ActiveModeWarden;->disableWifi()V
SPLcom/android/server/wifi/ActiveModeWarden;->enterClientMode()V
SPLcom/android/server/wifi/ActiveModeWarden;->enterScanOnlyMode()V
SPLcom/android/server/wifi/ActiveModeWarden;->registerClientModeCallback(Lcom/android/server/wifi/ClientModeManager$Listener;)V
SPLcom/android/server/wifi/ActiveModeWarden;->registerScanOnlyCallback(Lcom/android/server/wifi/ScanOnlyModeManager$Listener;)V
SPLcom/android/server/wifi/ActiveModeWarden;->registerSoftApCallback(Landroid/net/wifi/WifiManager$SoftApCallback;)V
SPLcom/android/server/wifi/ActiveModeWarden;->updateBatteryStatsScanModeActive()V
SPLcom/android/server/wifi/ActiveModeWarden;->updateBatteryStatsWifiState(Z)V
SPLcom/android/server/wifi/AvailableNetworkNotifier$1;-><init>(Lcom/android/server/wifi/AvailableNetworkNotifier;)V
SPLcom/android/server/wifi/AvailableNetworkNotifier$AvailableNetworkNotifierStoreData;-><init>(Lcom/android/server/wifi/AvailableNetworkNotifier;Lcom/android/server/wifi/AvailableNetworkNotifier$1;)V
SPLcom/android/server/wifi/AvailableNetworkNotifier$NotificationEnabledSettingObserver;-><init>(Lcom/android/server/wifi/AvailableNetworkNotifier;Landroid/os/Handler;)V
SPLcom/android/server/wifi/AvailableNetworkNotifier$NotificationEnabledSettingObserver;->getValue()Z
SPLcom/android/server/wifi/AvailableNetworkNotifier$NotificationEnabledSettingObserver;->register()V
SPLcom/android/server/wifi/AvailableNetworkNotifier;-><init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILandroid/content/Context;Landroid/os/Looper;Lcom/android/server/wifi/FrameworkFacade;Lcom/android/server/wifi/Clock;Lcom/android/server/wifi/WifiMetrics;Lcom/android/server/wifi/WifiConfigManager;Lcom/android/server/wifi/WifiConfigStore;Lcom/android/server/wifi/ClientModeImpl;Lcom/android/server/wifi/ConnectToNetworkNotificationBuilder;)V
SPLcom/android/server/wifi/AvailableNetworkNotifier;->handleScreenStateChanged(Z)V
SPLcom/android/server/wifi/BackupManagerProxy;-><init>()V
SPLcom/android/server/wifi/CarrierNetworkConfig;-><init>(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/wifi/FrameworkFacade;)V
SPLcom/android/server/wifi/CarrierNetworkConfig;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/CarrierNetworkConfig;->updateNetworkConfig(Landroid/content/Context;)V
SPLcom/android/server/wifi/CarrierNetworkConfig;->verifyCarrierImsiEncryptionInfoIsAvailable(Landroid/content/Context;)Z
SPLcom/android/server/wifi/CarrierNetworkEvaluator;-><init>(Lcom/android/server/wifi/WifiConfigManager;Lcom/android/server/wifi/CarrierNetworkConfig;Landroid/util/LocalLog;)V
SPLcom/android/server/wifi/ClientModeImpl$1;-><init>(Lcom/android/server/wifi/ClientModeImpl;)V
SPLcom/android/server/wifi/ClientModeImpl$2;-><init>(Lcom/android/server/wifi/ClientModeImpl;Landroid/os/Handler;)V
SPLcom/android/server/wifi/ClientModeImpl$3;-><init>(Lcom/android/server/wifi/ClientModeImpl;)V
SPLcom/android/server/wifi/ClientModeImpl$ConnectModeState;-><init>(Lcom/android/server/wifi/ClientModeImpl;)V
SPLcom/android/server/wifi/ClientModeImpl$ConnectModeState;->enter()V
SPLcom/android/server/wifi/ClientModeImpl$ConnectedState;-><init>(Lcom/android/server/wifi/ClientModeImpl;)V
SPLcom/android/server/wifi/ClientModeImpl$DefaultState;-><init>(Lcom/android/server/wifi/ClientModeImpl;)V
SPLcom/android/server/wifi/ClientModeImpl$DefaultState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/ClientModeImpl$DisconnectedState;-><init>(Lcom/android/server/wifi/ClientModeImpl;)V
SPLcom/android/server/wifi/ClientModeImpl$DisconnectingState;-><init>(Lcom/android/server/wifi/ClientModeImpl;)V
SPLcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;-><init>(Lcom/android/server/wifi/ClientModeImpl;)V
SPLcom/android/server/wifi/ClientModeImpl$IpClientCallbacksImpl;->awaitCreation()Z
SPLcom/android/server/wifi/ClientModeImpl$L2ConnectedState$RssiEventHandler;-><init>(Lcom/android/server/wifi/ClientModeImpl$L2ConnectedState;)V
SPLcom/android/server/wifi/ClientModeImpl$L2ConnectedState;-><init>(Lcom/android/server/wifi/ClientModeImpl;)V
SPLcom/android/server/wifi/ClientModeImpl$McastLockManagerFilterController;-><init>(Lcom/android/server/wifi/ClientModeImpl;)V
SPLcom/android/server/wifi/ClientModeImpl$ObtainingIpState;-><init>(Lcom/android/server/wifi/ClientModeImpl;)V
SPLcom/android/server/wifi/ClientModeImpl$RoamingState;-><init>(Lcom/android/server/wifi/ClientModeImpl;)V
SPLcom/android/server/wifi/ClientModeImpl;-><init>(Landroid/content/Context;Lcom/android/server/wifi/FrameworkFacade;Landroid/os/Looper;Landroid/os/UserManager;Lcom/android/server/wifi/WifiInjector;Lcom/android/server/wifi/BackupManagerProxy;Lcom/android/server/wifi/WifiCountryCode;Lcom/android/server/wifi/WifiNative;Lcom/android/server/wifi/WifiScoreCard;Lcom/android/server/wifi/WrongPasswordNotifier;Lcom/android/server/wifi/SarManager;Lcom/android/server/wifi/WifiTrafficPoller;Lcom/android/server/wifi/LinkProbeManager;)V
SPLcom/android/server/wifi/ClientModeImpl;-><init>(Landroid/content/Context;Lcom/android/server/wifi/FrameworkFacade;Landroid/os/Looper;Landroid/os/UserManager;Lcom/android/server/wifi/WifiInjector;Lcom/android/server/wifi/BackupManagerProxy;Lcom/android/server/wifi/WifiCountryCode;Lcom/android/server/wifi/WifiNative;Lcom/android/server/wifi/WrongPasswordNotifier;Lcom/android/server/wifi/SarManager;Lcom/android/server/wifi/WifiTrafficPoller;Lcom/android/server/wifi/LinkProbeManager;)V
SPLcom/android/server/wifi/ClientModeImpl;->access$1200(Lcom/android/server/wifi/ClientModeImpl;Landroid/os/Message;II)V
SPLcom/android/server/wifi/ClientModeImpl;->access$1502(Lcom/android/server/wifi/ClientModeImpl;Z)Z
SPLcom/android/server/wifi/ClientModeImpl;->access$1600(Lcom/android/server/wifi/ClientModeImpl;IZ)V
SPLcom/android/server/wifi/ClientModeImpl;->access$1700(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/WifiNative;
SPLcom/android/server/wifi/ClientModeImpl;->access$1800(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/WifiInjector;
SPLcom/android/server/wifi/ClientModeImpl;->access$1900(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/hotspot2/PasspointManager;
SPLcom/android/server/wifi/ClientModeImpl;->enableRssiPolling(Z)V
SPLcom/android/server/wifi/ClientModeImpl;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/ClientModeImpl;->getLogRecString(Landroid/os/Message;)Ljava/lang/String;
SPLcom/android/server/wifi/ClientModeImpl;->getMcastLockManagerFilterController()Lcom/android/server/wifi/WifiMulticastLockManager$FilterController;
SPLcom/android/server/wifi/ClientModeImpl;->getWifiInfo()Landroid/net/wifi/WifiInfo;
SPLcom/android/server/wifi/ClientModeImpl;->getWifiLinkLayerStats()Lcom/android/server/wifi/WifiLinkLayerStats;
SPLcom/android/server/wifi/ClientModeImpl;->handleScreenStateChanged(Z)V
SPLcom/android/server/wifi/ClientModeImpl;->logStateAndMessage(Landroid/os/Message;Lcom/android/internal/util/State;)V
SPLcom/android/server/wifi/ClientModeImpl;->loge(Ljava/lang/String;)V
SPLcom/android/server/wifi/ClientModeImpl;->recordLogRec(Landroid/os/Message;)Z
SPLcom/android/server/wifi/ClientModeImpl;->replyToMessage(Landroid/os/Message;ILjava/lang/Object;)V
SPLcom/android/server/wifi/ClientModeImpl;->setHighPerfModeEnabled(Z)V
SPLcom/android/server/wifi/ClientModeImpl;->setOperationalMode(ILjava/lang/String;)V
SPLcom/android/server/wifi/ClientModeImpl;->setSupplicantLogLevel()V
SPLcom/android/server/wifi/ClientModeImpl;->setSuspendOptimizations(IZ)V
SPLcom/android/server/wifi/ClientModeImpl;->setWifiStateForApiCalls(I)V
SPLcom/android/server/wifi/ClientModeImpl;->setupClientMode()V
SPLcom/android/server/wifi/ClientModeImpl;->syncGetSupportedFeatures(Lcom/android/internal/util/AsyncChannel;)J
SPLcom/android/server/wifi/ClientModeImpl;->syncGetWifiState()I
SPLcom/android/server/wifi/ClientModeImpl;->syncInitialize(Lcom/android/internal/util/AsyncChannel;)Z
SPLcom/android/server/wifi/ClientModeManager$ClientModeStateMachine$1;->onUp(Ljava/lang/String;)V
SPLcom/android/server/wifi/ClientModeManager$ClientModeStateMachine$IdleState;->enter()V
SPLcom/android/server/wifi/ClientModeManager$ClientModeStateMachine$IdleState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/ClientModeManager$ClientModeStateMachine$StartedState;->enter()V
SPLcom/android/server/wifi/ClientModeManager$ClientModeStateMachine$StartedState;->onUpChanged(Z)V
SPLcom/android/server/wifi/ClientModeManager$ClientModeStateMachine;-><init>(Lcom/android/server/wifi/ClientModeManager;Landroid/os/Looper;)V
SPLcom/android/server/wifi/ClientModeManager;->getScanMode()I
SPLcom/android/server/wifi/ClientModeManager;->start()V
SPLcom/android/server/wifi/ClientModeManager;->updateWifiState(II)V
SPLcom/android/server/wifi/Clock;-><init>()V
SPLcom/android/server/wifi/Clock;->getElapsedSinceBootMillis()J
SPLcom/android/server/wifi/Clock;->getUptimeSinceBootMillis()J
SPLcom/android/server/wifi/CompatibiltyScorer;->getIdentifier()Ljava/lang/String;
SPLcom/android/server/wifi/ConfigurationMap;-><init>(Landroid/os/UserManager;)V
SPLcom/android/server/wifi/DefaultModeManager;-><init>(Landroid/content/Context;Landroid/os/Looper;)V
SPLcom/android/server/wifi/DeletedEphemeralSsidsStoreData;-><init>()V
SPLcom/android/server/wifi/DeletedEphemeralSsidsStoreData;-><init>(Lcom/android/server/wifi/Clock;)V
SPLcom/android/server/wifi/DeletedEphemeralSsidsStoreData;->getStoreFileId()I
SPLcom/android/server/wifi/DppManager;-><init>(Landroid/os/Looper;Lcom/android/server/wifi/WifiNative;Lcom/android/server/wifi/WifiConfigManager;Landroid/content/Context;Lcom/android/server/wifi/DppMetrics;)V
SPLcom/android/server/wifi/DppManager;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/DppMetrics;-><init>()V
SPLcom/android/server/wifi/DummyLogMessage;-><init>()V
SPLcom/android/server/wifi/DummyLogMessage;->c(J)Lcom/android/server/wifi/WifiLog$LogMessage;
SPLcom/android/server/wifi/DummyLogMessage;->c(Ljava/lang/String;)Lcom/android/server/wifi/WifiLog$LogMessage;
SPLcom/android/server/wifi/DummyLogMessage;->flush()V
SPLcom/android/server/wifi/ExtendedWifiInfo;-><init>()V
SPLcom/android/server/wifi/ExtendedWifiInfo;->setEnableConnectedMacRandomization(Z)V
SPLcom/android/server/wifi/FakeWifiLog;-><init>()V
SPLcom/android/server/wifi/FakeWifiLog;->d(Ljava/lang/String;)V
SPLcom/android/server/wifi/FakeWifiLog;->i(Ljava/lang/String;)V
SPLcom/android/server/wifi/FakeWifiLog;->info(Ljava/lang/String;)Lcom/android/server/wifi/WifiLog$LogMessage;
SPLcom/android/server/wifi/FrameworkFacade;-><init>()V
SPLcom/android/server/wifi/FrameworkFacade;->getBatteryService()Lcom/android/internal/app/IBatteryStats;
SPLcom/android/server/wifi/FrameworkFacade;->getIntegerSetting(Landroid/content/Context;Ljava/lang/String;I)I
SPLcom/android/server/wifi/FrameworkFacade;->getLongSetting(Landroid/content/Context;Ljava/lang/String;J)J
SPLcom/android/server/wifi/FrameworkFacade;->getService(Ljava/lang/String;)Landroid/os/IBinder;
SPLcom/android/server/wifi/FrameworkFacade;->getStringSetting(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;
SPLcom/android/server/wifi/FrameworkFacade;->inStorageManagerCryptKeeperBounce()Z
SPLcom/android/server/wifi/FrameworkFacade;->makeIpClient(Landroid/content/Context;Ljava/lang/String;Landroid/net/ip/IpClientCallbacks;)V
SPLcom/android/server/wifi/FrameworkFacade;->makeSupplicantStateTracker(Landroid/content/Context;Lcom/android/server/wifi/WifiConfigManager;Landroid/os/Handler;)Lcom/android/server/wifi/SupplicantStateTracker;
SPLcom/android/server/wifi/FrameworkFacade;->makeWifiAsyncChannel(Ljava/lang/String;)Lcom/android/server/wifi/util/WifiAsyncChannel;
SPLcom/android/server/wifi/FrameworkFacade;->registerContentObserver(Landroid/content/Context;Landroid/net/Uri;ZLandroid/database/ContentObserver;)V
SPLcom/android/server/wifi/HalDeviceManager$1;-><init>(Lcom/android/server/wifi/HalDeviceManager;)V
SPLcom/android/server/wifi/HalDeviceManager$1;->onRegistration(Ljava/lang/String;Ljava/lang/String;Z)V
SPLcom/android/server/wifi/HalDeviceManager$InterfaceAvailableForRequestListenerProxy;->actionWithArg(Z)V
SPLcom/android/server/wifi/HalDeviceManager$InterfaceDestroyedListenerProxy;->action()V
SPLcom/android/server/wifi/HalDeviceManager$InterfaceRttControllerLifecycleCallbackProxy;->equals(Ljava/lang/Object;)Z
SPLcom/android/server/wifi/HalDeviceManager$InterfaceRttControllerLifecycleCallbackProxy;->hashCode()I
SPLcom/android/server/wifi/HalDeviceManager$InterfaceRttControllerLifecycleCallbackProxy;->lambda$onNewRttController$0$HalDeviceManager$InterfaceRttControllerLifecycleCallbackProxy(Landroid/hardware/wifi/V1_0/IWifiRttController;)V
SPLcom/android/server/wifi/HalDeviceManager$InterfaceRttControllerLifecycleCallbackProxy;->lambda$onRttControllerDestroyed$1$HalDeviceManager$InterfaceRttControllerLifecycleCallbackProxy()V
SPLcom/android/server/wifi/HalDeviceManager$InterfaceRttControllerLifecycleCallbackProxy;->onNewRttController(Landroid/hardware/wifi/V1_0/IWifiRttController;)V
SPLcom/android/server/wifi/HalDeviceManager$InterfaceRttControllerLifecycleCallbackProxy;->onRttControllerDestroyed()V
SPLcom/android/server/wifi/HalDeviceManager$ListenerProxy;-><init>(Lcom/android/server/wifi/HalDeviceManager;Ljava/lang/Object;Landroid/os/Handler;Ljava/lang/String;)V
SPLcom/android/server/wifi/HalDeviceManager$ListenerProxy;->equals(Ljava/lang/Object;)Z
SPLcom/android/server/wifi/HalDeviceManager$ListenerProxy;->hashCode()I
SPLcom/android/server/wifi/HalDeviceManager$ListenerProxy;->lambda$trigger$0$HalDeviceManager$ListenerProxy()V
SPLcom/android/server/wifi/HalDeviceManager$ListenerProxy;->lambda$triggerWithArg$1$HalDeviceManager$ListenerProxy(Z)V
SPLcom/android/server/wifi/HalDeviceManager$ListenerProxy;->trigger()V
SPLcom/android/server/wifi/HalDeviceManager$ListenerProxy;->triggerWithArg(Z)V
SPLcom/android/server/wifi/HalDeviceManager$ManagerStatusListenerProxy;->action()V
SPLcom/android/server/wifi/HalDeviceManager$WifiChipInfo;-><init>(Lcom/android/server/wifi/HalDeviceManager;)V
SPLcom/android/server/wifi/HalDeviceManager$WifiEventCallback;->onStart()V
SPLcom/android/server/wifi/HalDeviceManager$WifiEventCallback;->onStop()V
SPLcom/android/server/wifi/HalDeviceManager;-><init>(Lcom/android/server/wifi/Clock;)V
SPLcom/android/server/wifi/HalDeviceManager;->access$200(Lcom/android/server/wifi/HalDeviceManager;)Ljava/lang/Object;
SPLcom/android/server/wifi/HalDeviceManager;->access$300(Lcom/android/server/wifi/HalDeviceManager;)V
SPLcom/android/server/wifi/HalDeviceManager;->allowedToDeleteIfaceTypeForRequestedType(II[[Lcom/android/server/wifi/HalDeviceManager$WifiIfaceInfo;I)Z
SPLcom/android/server/wifi/HalDeviceManager;->canIfaceComboSupportRequest(Lcom/android/server/wifi/HalDeviceManager$WifiChipInfo;Landroid/hardware/wifi/V1_0/IWifiChip$ChipMode;[IIZ)Lcom/android/server/wifi/HalDeviceManager$IfaceCreationData;
SPLcom/android/server/wifi/HalDeviceManager;->compareIfaceCreationData(Lcom/android/server/wifi/HalDeviceManager$IfaceCreationData;Lcom/android/server/wifi/HalDeviceManager$IfaceCreationData;)Z
SPLcom/android/server/wifi/HalDeviceManager;->createIface(IZLcom/android/server/wifi/HalDeviceManager$InterfaceDestroyedListener;Landroid/os/Handler;)Landroid/hardware/wifi/V1_0/IWifiIface;
SPLcom/android/server/wifi/HalDeviceManager;->createIfaceIfPossible([Lcom/android/server/wifi/HalDeviceManager$WifiChipInfo;IZLcom/android/server/wifi/HalDeviceManager$InterfaceDestroyedListener;Landroid/os/Handler;)Landroid/hardware/wifi/V1_0/IWifiIface;
SPLcom/android/server/wifi/HalDeviceManager;->createNanIface(Lcom/android/server/wifi/HalDeviceManager$InterfaceDestroyedListener;Landroid/os/Handler;)Landroid/hardware/wifi/V1_0/IWifiNanIface;
SPLcom/android/server/wifi/HalDeviceManager;->createRttControllerIfPossible()Landroid/hardware/wifi/V1_0/IWifiRttController;
SPLcom/android/server/wifi/HalDeviceManager;->createStaIface(ZLcom/android/server/wifi/HalDeviceManager$InterfaceDestroyedListener;Landroid/os/Handler;)Landroid/hardware/wifi/V1_0/IWifiStaIface;
SPLcom/android/server/wifi/HalDeviceManager;->dispatchAllDestroyedListeners()V
SPLcom/android/server/wifi/HalDeviceManager;->dispatchAvailableForRequestListeners()Z
SPLcom/android/server/wifi/HalDeviceManager;->dispatchAvailableForRequestListenersForType(I[Lcom/android/server/wifi/HalDeviceManager$WifiChipInfo;)V
SPLcom/android/server/wifi/HalDeviceManager;->dispatchDestroyedListeners(Ljava/lang/String;I)V
SPLcom/android/server/wifi/HalDeviceManager;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/HalDeviceManager;->executeChipReconfiguration(Lcom/android/server/wifi/HalDeviceManager$IfaceCreationData;I)Landroid/hardware/wifi/V1_0/IWifiIface;
SPLcom/android/server/wifi/HalDeviceManager;->expandIfaceCombos(Landroid/hardware/wifi/V1_0/IWifiChip$ChipIfaceCombination;)[[I
SPLcom/android/server/wifi/HalDeviceManager;->getAllChipInfo()[Lcom/android/server/wifi/HalDeviceManager$WifiChipInfo;
SPLcom/android/server/wifi/HalDeviceManager;->getChip(Landroid/hardware/wifi/V1_0/IWifiIface;)Landroid/hardware/wifi/V1_0/IWifiChip;
SPLcom/android/server/wifi/HalDeviceManager;->getName(Landroid/hardware/wifi/V1_0/IWifiIface;)Ljava/lang/String;
SPLcom/android/server/wifi/HalDeviceManager;->getServiceManagerMockable()Landroid/hidl/manager/V1_2/IServiceManager;
SPLcom/android/server/wifi/HalDeviceManager;->getSupportedIfaceTypes()Ljava/util/Set;
SPLcom/android/server/wifi/HalDeviceManager;->getSupportedIfaceTypesInternal(Landroid/hardware/wifi/V1_0/IWifiChip;)Ljava/util/Set;
SPLcom/android/server/wifi/HalDeviceManager;->getType(Landroid/hardware/wifi/V1_0/IWifiIface;)I
SPLcom/android/server/wifi/HalDeviceManager;->getWifiServiceMockable()Landroid/hardware/wifi/V1_0/IWifi;
SPLcom/android/server/wifi/HalDeviceManager;->initIServiceManagerIfNecessary()V
SPLcom/android/server/wifi/HalDeviceManager;->initIWifiIfNecessary()V
SPLcom/android/server/wifi/HalDeviceManager;->initialize()V
SPLcom/android/server/wifi/HalDeviceManager;->isItPossibleToCreateIface([Lcom/android/server/wifi/HalDeviceManager$WifiChipInfo;I)Z
SPLcom/android/server/wifi/HalDeviceManager;->isReady()Z
SPLcom/android/server/wifi/HalDeviceManager;->isStarted()Z
SPLcom/android/server/wifi/HalDeviceManager;->isSupported()Z
SPLcom/android/server/wifi/HalDeviceManager;->isSupportedInternal()Z
SPLcom/android/server/wifi/HalDeviceManager;->isWifiStarted()Z
SPLcom/android/server/wifi/HalDeviceManager;->lambda$createRttControllerIfPossible$22(Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/IWifiRttController;)V
SPLcom/android/server/wifi/HalDeviceManager;->lambda$getAllChipInfo$10$HalDeviceManager(Landroid/util/MutableBoolean;Ljava/lang/String;[Lcom/android/server/wifi/HalDeviceManager$WifiIfaceInfo;Landroid/util/MutableInt;Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/IWifiStaIface;)V
SPLcom/android/server/wifi/HalDeviceManager;->lambda$getAllChipInfo$10(Lcom/android/server/wifi/HalDeviceManager;Landroid/util/MutableBoolean;Ljava/lang/String;[Lcom/android/server/wifi/HalDeviceManager$WifiIfaceInfo;Landroid/util/MutableInt;Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/IWifiStaIface;)V
SPLcom/android/server/wifi/HalDeviceManager;->lambda$getAllChipInfo$11(Landroid/util/MutableBoolean;Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
SPLcom/android/server/wifi/HalDeviceManager;->lambda$getAllChipInfo$13(Landroid/util/MutableBoolean;Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
SPLcom/android/server/wifi/HalDeviceManager;->lambda$getAllChipInfo$15(Landroid/util/MutableBoolean;Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
SPLcom/android/server/wifi/HalDeviceManager;->lambda$getAllChipInfo$16$HalDeviceManager(Landroid/util/MutableBoolean;Ljava/lang/String;[Lcom/android/server/wifi/HalDeviceManager$WifiIfaceInfo;Landroid/util/MutableInt;Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/IWifiNanIface;)V
SPLcom/android/server/wifi/HalDeviceManager;->lambda$getAllChipInfo$16(Lcom/android/server/wifi/HalDeviceManager;Landroid/util/MutableBoolean;Ljava/lang/String;[Lcom/android/server/wifi/HalDeviceManager$WifiIfaceInfo;Landroid/util/MutableInt;Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/IWifiNanIface;)V
SPLcom/android/server/wifi/HalDeviceManager;->lambda$getAllChipInfo$5(Landroid/util/MutableBoolean;Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
SPLcom/android/server/wifi/HalDeviceManager;->lambda$getAllChipInfo$6(Landroid/util/MutableBoolean;Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/IWifiChip;)V
SPLcom/android/server/wifi/HalDeviceManager;->lambda$getAllChipInfo$7(Landroid/util/MutableBoolean;Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
SPLcom/android/server/wifi/HalDeviceManager;->lambda$getAllChipInfo$8(Landroid/util/MutableBoolean;Landroid/util/MutableBoolean;Landroid/util/MutableInt;Landroid/hardware/wifi/V1_0/WifiStatus;I)V
SPLcom/android/server/wifi/HalDeviceManager;->lambda$getAllChipInfo$9(Landroid/util/MutableBoolean;Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/util/ArrayList;)V
SPLcom/android/server/wifi/HalDeviceManager;->lambda$getName$0(Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/V1_0/WifiStatus;Ljava/lang/String;)V
SPLcom/android/server/wifi/HalDeviceManager;->lambda$getType$23(Landroid/util/MutableInt;Landroid/hardware/wifi/V1_0/WifiStatus;I)V
SPLcom/android/server/wifi/HalDeviceManager;->managerStatusListenerDispatch()V
SPLcom/android/server/wifi/HalDeviceManager;->registerInterfaceAvailableForRequestListener(ILcom/android/server/wifi/HalDeviceManager$InterfaceAvailableForRequestListener;Landroid/os/Handler;)V
SPLcom/android/server/wifi/HalDeviceManager;->registerRttControllerLifecycleCallback(Lcom/android/server/wifi/HalDeviceManager$InterfaceRttControllerLifecycleCallback;Landroid/os/Handler;)V
SPLcom/android/server/wifi/HalDeviceManager;->registerStatusListener(Lcom/android/server/wifi/HalDeviceManager$ManagerStatusListener;Landroid/os/Handler;)V
SPLcom/android/server/wifi/HalDeviceManager;->removeIface(Landroid/hardware/wifi/V1_0/IWifiIface;)Z
SPLcom/android/server/wifi/HalDeviceManager;->removeIfaceInternal(Landroid/hardware/wifi/V1_0/IWifiIface;)Z
SPLcom/android/server/wifi/HalDeviceManager;->selectInterfacesToDelete(I[Lcom/android/server/wifi/HalDeviceManager$WifiIfaceInfo;)Ljava/util/List;
SPLcom/android/server/wifi/HalDeviceManager;->start()Z
SPLcom/android/server/wifi/HalDeviceManager;->startWifi()Z
SPLcom/android/server/wifi/HalDeviceManager;->stop()V
SPLcom/android/server/wifi/HalDeviceManager;->stopWifi()V
SPLcom/android/server/wifi/HalDeviceManager;->teardownInternal()V
SPLcom/android/server/wifi/HalDeviceManager;->updateRttControllerOnModeChange()V
SPLcom/android/server/wifi/HalDeviceManager;->validateInterfaceCache([Lcom/android/server/wifi/HalDeviceManager$WifiChipInfo;)Z
SPLcom/android/server/wifi/HostapdHal$1;-><init>(Lcom/android/server/wifi/HostapdHal;)V
SPLcom/android/server/wifi/HostapdHal;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wifi/HostapdHal;-><init>(Landroid/content/Context;Landroid/os/Looper;)V
SPLcom/android/server/wifi/HostapdHal;->toAcsChannelRanges(Ljava/lang/String;)Ljava/util/List;
SPLcom/android/server/wifi/LastMileLogger;-><init>(Lcom/android/server/wifi/WifiInjector;)V
SPLcom/android/server/wifi/LinkProbeManager;-><init>(Lcom/android/server/wifi/Clock;Lcom/android/server/wifi/WifiNative;Lcom/android/server/wifi/WifiMetrics;Lcom/android/server/wifi/FrameworkFacade;Landroid/os/Looper;Landroid/content/Context;)V
SPLcom/android/server/wifi/LinkProbeManager;->enableVerboseLogging(Z)V
SPLcom/android/server/wifi/LinkProbeManager;->reset()V
SPLcom/android/server/wifi/LogcatLog$RealLogMessage;->c(J)Lcom/android/server/wifi/WifiLog$LogMessage;
SPLcom/android/server/wifi/LogcatLog$RealLogMessage;->c(Ljava/lang/String;)Lcom/android/server/wifi/WifiLog$LogMessage;
SPLcom/android/server/wifi/LogcatLog$RealLogMessage;->c(Z)Lcom/android/server/wifi/WifiLog$LogMessage;
SPLcom/android/server/wifi/LogcatLog$RealLogMessage;->copyUntilPlaceholder()V
SPLcom/android/server/wifi/LogcatLog$RealLogMessage;->flush()V
SPLcom/android/server/wifi/LogcatLog;->d(Ljava/lang/String;)V
SPLcom/android/server/wifi/LogcatLog;->info(Ljava/lang/String;)Lcom/android/server/wifi/WifiLog$LogMessage;
SPLcom/android/server/wifi/LogcatLog;->trace(Ljava/lang/String;)Lcom/android/server/wifi/WifiLog$LogMessage;
SPLcom/android/server/wifi/LogcatLog;->wC(Ljava/lang/String;)V
SPLcom/android/server/wifi/NetworkListSharedStoreData;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wifi/NetworkListSharedStoreData;->getStoreFileId()I
SPLcom/android/server/wifi/NetworkListUserStoreData;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wifi/NetworkListUserStoreData;->getStoreFileId()I
SPLcom/android/server/wifi/NetworkRequestStoreData;->getStoreFileId()I
SPLcom/android/server/wifi/NetworkSuggestionEvaluator;-><init>(Lcom/android/server/wifi/WifiNetworkSuggestionsManager;Lcom/android/server/wifi/WifiConfigManager;Landroid/util/LocalLog;)V
SPLcom/android/server/wifi/NetworkSuggestionStoreData;->getStoreFileId()I
SPLcom/android/server/wifi/RandomizedMacStoreData;-><init>()V
SPLcom/android/server/wifi/RandomizedMacStoreData;->getStoreFileId()I
SPLcom/android/server/wifi/SIMAccessor;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wifi/SarInfo;-><init>()V
SPLcom/android/server/wifi/SarInfo;->reportingSuccessful()V
SPLcom/android/server/wifi/SarInfo;->resetSarScenarioNeeded()Z
SPLcom/android/server/wifi/SarInfo;->setSarScenarioNeeded(I)Z
SPLcom/android/server/wifi/SarInfo;->shouldReport()Z
SPLcom/android/server/wifi/SarManager$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/wifi/SarManager;-><init>(Landroid/content/Context;Landroid/telephony/TelephonyManager;Landroid/os/Looper;Lcom/android/server/wifi/WifiNative;Landroid/hardware/SensorManager;Lcom/android/server/wifi/WifiMetrics;)V
SPLcom/android/server/wifi/SarManager;->checkAudioDevice()V
SPLcom/android/server/wifi/SarManager;->handleScreenStateChanged(Z)V
SPLcom/android/server/wifi/SarManager;->lambda$handleScreenStateChanged$0$SarManager()V
SPLcom/android/server/wifi/SarManager;->readSarConfigs()V
SPLcom/android/server/wifi/SarManager;->registerListeners()V
SPLcom/android/server/wifi/SarManager;->setScanOnlyWifiState(I)V
SPLcom/android/server/wifi/SarManager;->updateSarScenario()V
SPLcom/android/server/wifi/SavedNetworkEvaluator;-><init>(Landroid/content/Context;Lcom/android/server/wifi/ScoringParams;Lcom/android/server/wifi/WifiConfigManager;Lcom/android/server/wifi/Clock;Landroid/util/LocalLog;Lcom/android/server/wifi/WifiConnectivityHelper;)V
SPLcom/android/server/wifi/ScanOnlyModeManager$ScanOnlyModeStateMachine$1;->onDestroyed(Ljava/lang/String;)V
SPLcom/android/server/wifi/ScanOnlyModeManager$ScanOnlyModeStateMachine$1;->onUp(Ljava/lang/String;)V
SPLcom/android/server/wifi/ScanOnlyModeManager$ScanOnlyModeStateMachine$IdleState;->enter()V
SPLcom/android/server/wifi/ScanOnlyModeManager$ScanOnlyModeStateMachine$IdleState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/ScanOnlyModeManager$ScanOnlyModeStateMachine$StartedState;->enter()V
SPLcom/android/server/wifi/ScanOnlyModeManager$ScanOnlyModeStateMachine$StartedState;->exit()V
SPLcom/android/server/wifi/ScanOnlyModeManager$ScanOnlyModeStateMachine$StartedState;->onUpChanged(Z)V
SPLcom/android/server/wifi/ScanOnlyModeManager$ScanOnlyModeStateMachine;-><init>(Lcom/android/server/wifi/ScanOnlyModeManager;Landroid/os/Looper;)V
SPLcom/android/server/wifi/ScanOnlyModeManager;->getScanMode()I
SPLcom/android/server/wifi/ScanOnlyModeManager;->start()V
SPLcom/android/server/wifi/ScanOnlyModeManager;->stop()V
SPLcom/android/server/wifi/ScanOnlyModeManager;->updateWifiState(I)V
SPLcom/android/server/wifi/ScanRequestProxy$GlobalScanListener;->onSuccess()V
SPLcom/android/server/wifi/ScanRequestProxy$ThrottleEnabledSettingObserver;->initialize()V
SPLcom/android/server/wifi/ScanRequestProxy;-><init>(Landroid/content/Context;Landroid/app/AppOpsManager;Landroid/app/ActivityManager;Lcom/android/server/wifi/WifiInjector;Lcom/android/server/wifi/WifiConfigManager;Lcom/android/server/wifi/util/WifiPermissionsUtil;Lcom/android/server/wifi/WifiMetrics;Lcom/android/server/wifi/Clock;Lcom/android/server/wifi/FrameworkFacade;Landroid/os/Handler;)V
SPLcom/android/server/wifi/ScanRequestProxy;->enableScanning(ZZ)V
SPLcom/android/server/wifi/ScanRequestProxy;->enableScanningInternal(Z)V
SPLcom/android/server/wifi/ScanRequestProxy;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/ScanRequestProxy;->retrieveWifiScannerIfNecessary()Z
SPLcom/android/server/wifi/ScanRequestProxy;->sendScanAvailableBroadcast(Landroid/content/Context;Z)V
SPLcom/android/server/wifi/ScoreCardBasedScorer;->getIdentifier()Ljava/lang/String;
SPLcom/android/server/wifi/ScoredNetworkEvaluator$1;->onChange(Z)V
SPLcom/android/server/wifi/ScoredNetworkEvaluator;-><init>(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/wifi/FrameworkFacade;Landroid/net/NetworkScoreManager;Lcom/android/server/wifi/WifiConfigManager;Landroid/util/LocalLog;Landroid/net/wifi/WifiNetworkScoreCache;Lcom/android/server/wifi/util/WifiPermissionsUtil;)V
SPLcom/android/server/wifi/ScoringParams$1;->onChange(Z)V
SPLcom/android/server/wifi/ScoringParams$Values;-><init>(Lcom/android/server/wifi/ScoringParams;)V
SPLcom/android/server/wifi/ScoringParams$Values;-><init>(Lcom/android/server/wifi/ScoringParams;Lcom/android/server/wifi/ScoringParams$Values;)V
SPLcom/android/server/wifi/ScoringParams$Values;->parseString(Ljava/lang/String;)V
SPLcom/android/server/wifi/ScoringParams$Values;->toString()Ljava/lang/String;
SPLcom/android/server/wifi/ScoringParams$Values;->updateInt(Landroid/util/KeyValueListParser;Ljava/lang/String;I)I
SPLcom/android/server/wifi/ScoringParams$Values;->updateIntArray([ILandroid/util/KeyValueListParser;Ljava/lang/String;)V
SPLcom/android/server/wifi/ScoringParams$Values;->validate()V
SPLcom/android/server/wifi/ScoringParams;-><init>(Landroid/content/Context;Lcom/android/server/wifi/FrameworkFacade;Landroid/os/Handler;)V
SPLcom/android/server/wifi/ScoringParams;->getEntryRssi(I)I
SPLcom/android/server/wifi/ScoringParams;->getGoodRssi(I)I
SPLcom/android/server/wifi/ScoringParams;->loadResources(Landroid/content/Context;)V
SPLcom/android/server/wifi/ScoringParams;->toString()Ljava/lang/String;
SPLcom/android/server/wifi/ScoringParams;->update(Ljava/lang/String;)Z
SPLcom/android/server/wifi/SelfRecovery;-><init>(Lcom/android/server/wifi/WifiController;Lcom/android/server/wifi/Clock;)V
SPLcom/android/server/wifi/SsidSetStoreData;-><init>(Ljava/lang/String;Lcom/android/server/wifi/SsidSetStoreData$DataSource;)V
SPLcom/android/server/wifi/SsidSetStoreData;->getStoreFileId()I
SPLcom/android/server/wifi/SupplicantStaIfaceHal$1;-><init>(Lcom/android/server/wifi/SupplicantStaIfaceHal;)V
SPLcom/android/server/wifi/SupplicantStaIfaceHal$1;->onRegistration(Ljava/lang/String;Ljava/lang/String;Z)V
SPLcom/android/server/wifi/SupplicantStaIfaceHal;-><init>(Landroid/content/Context;Lcom/android/server/wifi/WifiMonitor;Lcom/android/server/wifi/PropertyService;)V
SPLcom/android/server/wifi/SupplicantStaIfaceHal;-><init>(Landroid/content/Context;Lcom/android/server/wifi/WifiMonitor;Lcom/android/server/wifi/PropertyService;Landroid/os/Looper;)V
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->access$000(Lcom/android/server/wifi/SupplicantStaIfaceHal;)Ljava/lang/Object;
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->access$100(Lcom/android/server/wifi/SupplicantStaIfaceHal;)Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->access$200(Lcom/android/server/wifi/SupplicantStaIfaceHal;)Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->addIfaceV1_1(Ljava/lang/String;)Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface;
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->checkHalVersionByInterfaceName(Ljava/lang/String;)Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->checkStatusAndLogFailure(Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;Ljava/lang/String;)Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->checkSupplicantAndLogFailure(Ljava/lang/String;)Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->checkSupplicantStaIfaceAndLogFailure(Ljava/lang/String;Ljava/lang/String;)Landroid/hardware/wifi/supplicant/V1_0/ISupplicantStaIface;
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->enableVerboseLogging(Z)V
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->getAdvancedKeyMgmtCapabilities(Ljava/lang/String;)I
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->getKeyMgmtCapabilities(Ljava/lang/String;)I
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->getServiceManagerMockable()Landroid/hidl/manager/V1_0/IServiceManager;
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->getStaIfaceMockableV1_2(Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface;)Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface;
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->getSupplicantMockable()Landroid/hardware/wifi/supplicant/V1_0/ISupplicant;
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->getSupplicantMockableV1_1()Landroid/hardware/wifi/supplicant/V1_1/ISupplicant;
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->initSupplicantService()Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->initialize()Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->isInitializationComplete()Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->isInitializationStarted()Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->lambda$addIfaceV1_1$2(Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface;)V
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->lambda$addIfaceV1_1$4(Landroid/os/HidlSupport$Mutable;Landroid/hardware/wifi/supplicant/V1_0/SupplicantStatus;Landroid/hardware/wifi/supplicant/V1_0/ISupplicantIface;)V
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->linkToServiceManagerDeath()Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->linkToSupplicantDeath()Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->registerCallbackV1_2(Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIface;Landroid/hardware/wifi/supplicant/V1_2/ISupplicantStaIfaceCallback;)Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->registerDeathHandler(Lcom/android/server/wifi/WifiNative$SupplicantDeathEventHandler;)Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->registerDppCallback(Lcom/android/server/wifi/WifiNative$DppEventCallback;)V
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->setDebugParams(IZZ)Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->setLogLevel(Z)Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->setupIface(Ljava/lang/String;)Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->startDaemon()Z
SPLcom/android/server/wifi/SupplicantStaIfaceHal;->startDaemon_V1_1()Z
SPLcom/android/server/wifi/SupplicantStateTracker$DefaultState;->enter()V
SPLcom/android/server/wifi/SupplicantStateTracker$UninitializedState;->enter()V
SPLcom/android/server/wifi/SupplicantStateTracker;-><init>(Landroid/content/Context;Lcom/android/server/wifi/WifiConfigManager;Lcom/android/server/wifi/FrameworkFacade;Landroid/os/Handler;)V
SPLcom/android/server/wifi/SupplicantStateTracker;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/SystemBuildProperties;-><init>()V
SPLcom/android/server/wifi/SystemBuildProperties;->isUserBuild()Z
SPLcom/android/server/wifi/SystemPropertyService;-><init>()V
SPLcom/android/server/wifi/SystemPropertyService;->getBoolean(Ljava/lang/String;Z)Z
SPLcom/android/server/wifi/SystemPropertyService;->set(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/wifi/VelocityBasedConnectedScore;-><init>(Lcom/android/server/wifi/ScoringParams;Lcom/android/server/wifi/Clock;)V
SPLcom/android/server/wifi/WakeupConfigStoreData;->getStoreFileId()I
SPLcom/android/server/wifi/WakeupConfigStoreData;->hasBeenRead()Z
SPLcom/android/server/wifi/WakeupController$1;->onSuccess()V
SPLcom/android/server/wifi/WakeupController;-><init>(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/wifi/WakeupLock;Lcom/android/server/wifi/WakeupEvaluator;Lcom/android/server/wifi/WakeupOnboarding;Lcom/android/server/wifi/WifiConfigManager;Lcom/android/server/wifi/WifiConfigStore;Lcom/android/server/wifi/WifiWakeMetrics;Lcom/android/server/wifi/WifiInjector;Lcom/android/server/wifi/FrameworkFacade;Lcom/android/server/wifi/Clock;)V
SPLcom/android/server/wifi/WakeupController;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/WakeupController;->isEnabled()Z
SPLcom/android/server/wifi/WakeupController;->readWifiWakeupEnabledFromSettings()V
SPLcom/android/server/wifi/WakeupController;->setActive(Z)V
SPLcom/android/server/wifi/WakeupController;->start()V
SPLcom/android/server/wifi/WakeupController;->stop()V
SPLcom/android/server/wifi/WakeupEvaluator;-><init>(Lcom/android/server/wifi/ScoringParams;)V
SPLcom/android/server/wifi/WakeupEvaluator;->fromContext(Landroid/content/Context;)Lcom/android/server/wifi/WakeupEvaluator;
SPLcom/android/server/wifi/WakeupLock;-><init>(Lcom/android/server/wifi/WifiConfigManager;Lcom/android/server/wifi/WifiWakeMetrics;Lcom/android/server/wifi/Clock;)V
SPLcom/android/server/wifi/WakeupLock;->enableVerboseLogging(Z)V
SPLcom/android/server/wifi/WakeupLock;->getDataSource()Lcom/android/server/wifi/WakeupConfigStoreData$DataSource;
SPLcom/android/server/wifi/WakeupNotificationFactory;-><init>(Landroid/content/Context;Lcom/android/server/wifi/FrameworkFacade;)V
SPLcom/android/server/wifi/WakeupOnboarding;-><init>(Landroid/content/Context;Lcom/android/server/wifi/WifiConfigManager;Landroid/os/Looper;Lcom/android/server/wifi/FrameworkFacade;Lcom/android/server/wifi/WakeupNotificationFactory;)V
SPLcom/android/server/wifi/WakeupOnboarding;->getIsOnboadedDataSource()Lcom/android/server/wifi/WakeupConfigStoreData$DataSource;
SPLcom/android/server/wifi/WakeupOnboarding;->getNotificationsDataSource()Lcom/android/server/wifi/WakeupConfigStoreData$DataSource;
SPLcom/android/server/wifi/WakeupOnboarding;->onStop()V
SPLcom/android/server/wifi/WifiApConfigStore;-><init>(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/wifi/BackupManagerProxy;Lcom/android/server/wifi/FrameworkFacade;)V
SPLcom/android/server/wifi/WifiApConfigStore;-><init>(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/wifi/BackupManagerProxy;Lcom/android/server/wifi/FrameworkFacade;Ljava/lang/String;)V
SPLcom/android/server/wifi/WifiApConfigStore;->loadApConfiguration(Ljava/lang/String;)Landroid/net/wifi/WifiConfiguration;
SPLcom/android/server/wifi/WifiBackupRestore;-><init>(Lcom/android/server/wifi/util/WifiPermissionsUtil;)V
SPLcom/android/server/wifi/WifiBackupRestore;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/WifiConfigManager$1;-><init>()V
SPLcom/android/server/wifi/WifiConfigManager$2;-><init>(Lcom/android/server/wifi/WifiConfigManager;Landroid/os/Handler;)V
SPLcom/android/server/wifi/WifiConfigManager$3;-><init>(Lcom/android/server/wifi/WifiConfigManager;Landroid/os/Handler;)V
SPLcom/android/server/wifi/WifiConfigManager;-><init>(Landroid/content/Context;Lcom/android/server/wifi/Clock;Landroid/os/UserManager;Landroid/telephony/TelephonyManager;Lcom/android/server/wifi/WifiKeyStore;Lcom/android/server/wifi/WifiConfigStore;Lcom/android/server/wifi/WifiConfigStoreLegacy;Lcom/android/server/wifi/util/WifiPermissionsUtil;Lcom/android/server/wifi/util/WifiPermissionsWrapper;Lcom/android/server/wifi/NetworkListSharedStoreData;Lcom/android/server/wifi/NetworkListUserStoreData;Lcom/android/server/wifi/DeletedEphemeralSsidsStoreData;Lcom/android/server/wifi/RandomizedMacStoreData;Lcom/android/server/wifi/FrameworkFacade;Landroid/os/Looper;)V
SPLcom/android/server/wifi/WifiConfigManager;-><init>(Landroid/content/Context;Lcom/android/server/wifi/Clock;Landroid/os/UserManager;Landroid/telephony/TelephonyManager;Lcom/android/server/wifi/WifiKeyStore;Lcom/android/server/wifi/WifiConfigStore;Lcom/android/server/wifi/util/WifiPermissionsUtil;Lcom/android/server/wifi/util/WifiPermissionsWrapper;Lcom/android/server/wifi/NetworkListSharedStoreData;Lcom/android/server/wifi/NetworkListUserStoreData;Lcom/android/server/wifi/DeletedEphemeralSsidsStoreData;Lcom/android/server/wifi/RandomizedMacStoreData;Lcom/android/server/wifi/FrameworkFacade;Landroid/os/Looper;)V
SPLcom/android/server/wifi/WifiConfigManager;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/WifiConfigManager;->saveToStore(Z)Z
SPLcom/android/server/wifi/WifiConfigManager;->setOnSavedNetworkUpdateListener(Lcom/android/server/wifi/WifiConfigManager$OnSavedNetworkUpdateListener;)V
SPLcom/android/server/wifi/WifiConfigManager;->updatePnoFrequencyCullingSetting()V
SPLcom/android/server/wifi/WifiConfigManager;->updatePnoRecencySortingSetting()V
SPLcom/android/server/wifi/WifiConfigStore$1;-><init>()V
SPLcom/android/server/wifi/WifiConfigStore$StoreFile;-><init>(Ljava/io/File;I)V
SPLcom/android/server/wifi/WifiConfigStore;-><init>(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/wifi/Clock;Lcom/android/server/wifi/WifiConfigStore$StoreFile;)V
SPLcom/android/server/wifi/WifiConfigStore;-><init>(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/wifi/Clock;Lcom/android/server/wifi/WifiMetrics;Lcom/android/server/wifi/WifiConfigStore$StoreFile;)V
SPLcom/android/server/wifi/WifiConfigStore;->createFile(Ljava/io/File;I)Lcom/android/server/wifi/WifiConfigStore$StoreFile;
SPLcom/android/server/wifi/WifiConfigStore;->createSharedFile()Lcom/android/server/wifi/WifiConfigStore$StoreFile;
SPLcom/android/server/wifi/WifiConfigStore;->enableVerboseLogging(Z)V
SPLcom/android/server/wifi/WifiConfigStore;->registerStoreData(Lcom/android/server/wifi/WifiConfigStore$StoreData;)Z
SPLcom/android/server/wifi/WifiConfigStoreLegacy$IpConfigStoreWrapper;-><init>()V
SPLcom/android/server/wifi/WifiConfigStoreLegacy;-><init>(Lcom/android/server/wifi/WifiNetworkHistory;Lcom/android/server/wifi/WifiNative;Lcom/android/server/wifi/WifiConfigStoreLegacy$IpConfigStoreWrapper;Lcom/android/server/wifi/hotspot2/LegacyPasspointConfigParser;)V
SPLcom/android/server/wifi/WifiConnectivityHelper;-><init>(Lcom/android/server/wifi/WifiNative;)V
SPLcom/android/server/wifi/WifiConnectivityManager$1;-><init>(Lcom/android/server/wifi/WifiConnectivityManager;)V
SPLcom/android/server/wifi/WifiConnectivityManager$2;-><init>(Lcom/android/server/wifi/WifiConnectivityManager;)V
SPLcom/android/server/wifi/WifiConnectivityManager$3;-><init>(Lcom/android/server/wifi/WifiConnectivityManager;)V
SPLcom/android/server/wifi/WifiConnectivityManager$AllSingleScanListener;-><init>(Lcom/android/server/wifi/WifiConnectivityManager;Lcom/android/server/wifi/WifiConnectivityManager$1;)V
SPLcom/android/server/wifi/WifiConnectivityManager$OnSavedNetworkUpdateListener;-><init>(Lcom/android/server/wifi/WifiConnectivityManager;Lcom/android/server/wifi/WifiConnectivityManager$1;)V
SPLcom/android/server/wifi/WifiConnectivityManager$PnoScanListener;-><init>(Lcom/android/server/wifi/WifiConnectivityManager;Lcom/android/server/wifi/WifiConnectivityManager$1;)V
SPLcom/android/server/wifi/WifiConnectivityManager;-><init>(Landroid/content/Context;Lcom/android/server/wifi/ScoringParams;Lcom/android/server/wifi/ClientModeImpl;Lcom/android/server/wifi/WifiInjector;Lcom/android/server/wifi/WifiConfigManager;Landroid/net/wifi/WifiInfo;Lcom/android/server/wifi/WifiNetworkSelector;Lcom/android/server/wifi/WifiConnectivityHelper;Lcom/android/server/wifi/WifiLastResortWatchdog;Lcom/android/server/wifi/OpenNetworkNotifier;Lcom/android/server/wifi/CarrierNetworkNotifier;Lcom/android/server/wifi/CarrierNetworkConfig;Lcom/android/server/wifi/WifiMetrics;Landroid/os/Looper;Lcom/android/server/wifi/Clock;Landroid/util/LocalLog;Lcom/android/server/wifi/SavedNetworkEvaluator;Lcom/android/server/wifi/ScoredNetworkEvaluator;Lcom/android/server/wifi/hotspot2/PasspointNetworkEvaluator;Lcom/android/server/wifi/NetworkSuggestionEvaluator;Lcom/android/server/wifi/CarrierNetworkEvaluator;)V
SPLcom/android/server/wifi/WifiConnectivityManager;->handleScreenStateChanged(Z)V
SPLcom/android/server/wifi/WifiConnectivityManager;->initialScoreMax()I
SPLcom/android/server/wifi/WifiConnectivityManager;->localLog(Ljava/lang/String;)V
SPLcom/android/server/wifi/WifiConnectivityManager;->startConnectivityScan(Z)V
SPLcom/android/server/wifi/WifiController$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/wifi/WifiController$DefaultState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/WifiController$StaDisabledState;->doDeferEnable(Landroid/os/Message;)Z
SPLcom/android/server/wifi/WifiController$StaDisabledState;->enter()V
SPLcom/android/server/wifi/WifiController$StaDisabledState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/WifiController$StaDisabledWithScanState;->doDeferEnable(Landroid/os/Message;)Z
SPLcom/android/server/wifi/WifiController$StaDisabledWithScanState;->enter()V
SPLcom/android/server/wifi/WifiController$StaDisabledWithScanState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/WifiController$StaEnabledState;->enter()V
SPLcom/android/server/wifi/WifiController$StaEnabledState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/WifiController;-><init>(Landroid/content/Context;Lcom/android/server/wifi/ClientModeImpl;Landroid/os/Looper;Lcom/android/server/wifi/WifiSettingsStore;Landroid/os/Looper;Lcom/android/server/wifi/FrameworkFacade;Lcom/android/server/wifi/ActiveModeWarden;)V
SPLcom/android/server/wifi/WifiCountryCode;-><init>(Lcom/android/server/wifi/WifiNative;Ljava/lang/String;Z)V
SPLcom/android/server/wifi/WifiCountryCode;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/WifiDataStall;-><init>(Landroid/content/Context;Lcom/android/server/wifi/FrameworkFacade;Lcom/android/server/wifi/WifiMetrics;)V
SPLcom/android/server/wifi/WifiDataStall;->loadSettings()V
SPLcom/android/server/wifi/WifiDiagnostics;-><init>(Landroid/content/Context;Lcom/android/server/wifi/WifiInjector;Lcom/android/server/wifi/WifiNative;Lcom/android/server/wifi/BuildProperties;Lcom/android/server/wifi/LastMileLogger;Lcom/android/server/wifi/Clock;)V
SPLcom/android/server/wifi/WifiDiagnostics;->clearVerboseLogs()V
SPLcom/android/server/wifi/WifiDiagnostics;->fetchRingBuffers()Z
SPLcom/android/server/wifi/WifiDiagnostics;->startLogging(Z)V
SPLcom/android/server/wifi/WifiInjector;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wifi/WifiInjector;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/WifiInjector;->getActiveModeWarden()Lcom/android/server/wifi/ActiveModeWarden;
SPLcom/android/server/wifi/WifiInjector;->getBuildProperties()Lcom/android/server/wifi/BuildProperties;
SPLcom/android/server/wifi/WifiInjector;->getClientModeImpl()Lcom/android/server/wifi/ClientModeImpl;
SPLcom/android/server/wifi/WifiInjector;->getClientModeImplHandler()Landroid/os/Handler;
SPLcom/android/server/wifi/WifiInjector;->getClock()Lcom/android/server/wifi/Clock;
SPLcom/android/server/wifi/WifiInjector;->getDppManager()Lcom/android/server/wifi/DppManager;
SPLcom/android/server/wifi/WifiInjector;->getFrameworkFacade()Lcom/android/server/wifi/FrameworkFacade;
SPLcom/android/server/wifi/WifiInjector;->getHalDeviceManager()Lcom/android/server/wifi/HalDeviceManager;
SPLcom/android/server/wifi/WifiInjector;->getJavaRuntime()Ljava/lang/Runtime;
SPLcom/android/server/wifi/WifiInjector;->getPasspointManager()Lcom/android/server/wifi/hotspot2/PasspointManager;
SPLcom/android/server/wifi/WifiInjector;->getPowerProfile()Lcom/android/internal/os/PowerProfile;
SPLcom/android/server/wifi/WifiInjector;->getPropertyService()Lcom/android/server/wifi/PropertyService;
SPLcom/android/server/wifi/WifiInjector;->getRttHandlerThread()Landroid/os/HandlerThread;
SPLcom/android/server/wifi/WifiInjector;->getScanRequestProxy()Lcom/android/server/wifi/ScanRequestProxy;
SPLcom/android/server/wifi/WifiInjector;->getScoringParams()Lcom/android/server/wifi/ScoringParams;
SPLcom/android/server/wifi/WifiInjector;->getSelfRecovery()Lcom/android/server/wifi/SelfRecovery;
SPLcom/android/server/wifi/WifiInjector;->getUserManager()Landroid/os/UserManager;
SPLcom/android/server/wifi/WifiInjector;->getWifiApConfigStore()Lcom/android/server/wifi/WifiApConfigStore;
SPLcom/android/server/wifi/WifiInjector;->getWifiAwareHandlerThread()Landroid/os/HandlerThread;
SPLcom/android/server/wifi/WifiInjector;->getWifiBackupRestore()Lcom/android/server/wifi/WifiBackupRestore;
SPLcom/android/server/wifi/WifiInjector;->getWifiConfigManager()Lcom/android/server/wifi/WifiConfigManager;
SPLcom/android/server/wifi/WifiInjector;->getWifiController()Lcom/android/server/wifi/WifiController;
SPLcom/android/server/wifi/WifiInjector;->getWifiCountryCode()Lcom/android/server/wifi/WifiCountryCode;
SPLcom/android/server/wifi/WifiInjector;->getWifiDataStall()Lcom/android/server/wifi/WifiDataStall;
SPLcom/android/server/wifi/WifiInjector;->getWifiDiagnostics()Lcom/android/server/wifi/BaseWifiDiagnostics;
SPLcom/android/server/wifi/WifiInjector;->getWifiLockManager()Lcom/android/server/wifi/WifiLockManager;
SPLcom/android/server/wifi/WifiInjector;->getWifiMetrics()Lcom/android/server/wifi/WifiMetrics;
SPLcom/android/server/wifi/WifiInjector;->getWifiMonitor()Lcom/android/server/wifi/WifiMonitor;
SPLcom/android/server/wifi/WifiInjector;->getWifiMulticastLockManager()Lcom/android/server/wifi/WifiMulticastLockManager;
SPLcom/android/server/wifi/WifiInjector;->getWifiNative()Lcom/android/server/wifi/WifiNative;
SPLcom/android/server/wifi/WifiInjector;->getWifiNetworkSuggestionsManager()Lcom/android/server/wifi/WifiNetworkSuggestionsManager;
SPLcom/android/server/wifi/WifiInjector;->getWifiP2pMetrics()Lcom/android/server/wifi/p2p/WifiP2pMetrics;
SPLcom/android/server/wifi/WifiInjector;->getWifiP2pMonitor()Lcom/android/server/wifi/p2p/WifiP2pMonitor;
SPLcom/android/server/wifi/WifiInjector;->getWifiP2pNative()Lcom/android/server/wifi/p2p/WifiP2pNative;
SPLcom/android/server/wifi/WifiInjector;->getWifiP2pServiceHandlerThread()Landroid/os/HandlerThread;
SPLcom/android/server/wifi/WifiInjector;->getWifiPermissionsUtil()Lcom/android/server/wifi/util/WifiPermissionsUtil;
SPLcom/android/server/wifi/WifiInjector;->getWifiPermissionsWrapper()Lcom/android/server/wifi/util/WifiPermissionsWrapper;
SPLcom/android/server/wifi/WifiInjector;->getWifiScanner()Landroid/net/wifi/WifiScanner;
SPLcom/android/server/wifi/WifiInjector;->getWifiScoreCard()Lcom/android/server/wifi/WifiScoreCard;
SPLcom/android/server/wifi/WifiInjector;->getWifiServiceHandlerThread()Landroid/os/HandlerThread;
SPLcom/android/server/wifi/WifiInjector;->getWifiSettingsStore()Lcom/android/server/wifi/WifiSettingsStore;
SPLcom/android/server/wifi/WifiInjector;->getWifiStateTracker()Lcom/android/server/wifi/WifiStateTracker;
SPLcom/android/server/wifi/WifiInjector;->getWifiTrafficPoller()Lcom/android/server/wifi/WifiTrafficPoller;
SPLcom/android/server/wifi/WifiInjector;->makeClientModeManager(Lcom/android/server/wifi/ClientModeManager$Listener;)Lcom/android/server/wifi/ClientModeManager;
SPLcom/android/server/wifi/WifiInjector;->makeLog(Ljava/lang/String;)Lcom/android/server/wifi/WifiLog;
SPLcom/android/server/wifi/WifiInjector;->makeNetworkRequestStoreData(Lcom/android/server/wifi/NetworkRequestStoreData$DataSource;)Lcom/android/server/wifi/NetworkRequestStoreData;
SPLcom/android/server/wifi/WifiInjector;->makeNetworkSuggestionStoreData(Lcom/android/server/wifi/NetworkSuggestionStoreData$DataSource;)Lcom/android/server/wifi/NetworkSuggestionStoreData;
SPLcom/android/server/wifi/WifiInjector;->makeScanOnlyModeManager(Lcom/android/server/wifi/ScanOnlyModeManager$Listener;)Lcom/android/server/wifi/ScanOnlyModeManager;
SPLcom/android/server/wifi/WifiInjector;->makeTelephonyManager()Landroid/telephony/TelephonyManager;
SPLcom/android/server/wifi/WifiInjector;->makeUntrustedWifiNetworkFactory(Landroid/net/NetworkCapabilities;Lcom/android/server/wifi/WifiConnectivityManager;)Lcom/android/server/wifi/UntrustedWifiNetworkFactory;
SPLcom/android/server/wifi/WifiInjector;->makeWifiConnectivityManager(Lcom/android/server/wifi/ClientModeImpl;)Lcom/android/server/wifi/WifiConnectivityManager;
SPLcom/android/server/wifi/WifiInjector;->makeWifiNetworkFactory(Landroid/net/NetworkCapabilities;Lcom/android/server/wifi/WifiConnectivityManager;)Lcom/android/server/wifi/WifiNetworkFactory;
SPLcom/android/server/wifi/WifiInjector;->makeWificond()Landroid/net/wifi/IWificond;
SPLcom/android/server/wifi/WifiKeyStore;-><init>(Landroid/security/KeyStore;)V
SPLcom/android/server/wifi/WifiKeyStore;->enableVerboseLogging(Z)V
SPLcom/android/server/wifi/WifiLastResortWatchdog;-><init>(Lcom/android/server/wifi/WifiInjector;Lcom/android/server/wifi/Clock;Lcom/android/server/wifi/WifiMetrics;Lcom/android/server/wifi/ClientModeImpl;Landroid/os/Looper;)V
SPLcom/android/server/wifi/WifiLastResortWatchdog;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/WifiLockManager$1;->lambda$onUidImportance$0$WifiLockManager$1(II)V
SPLcom/android/server/wifi/WifiLockManager$1;->lambda$onUidImportance$0(Lcom/android/server/wifi/WifiLockManager$1;II)V
SPLcom/android/server/wifi/WifiLockManager$1;->onUidImportance(II)V
SPLcom/android/server/wifi/WifiLockManager$ClientModeImplInterfaceHandler;-><init>(Lcom/android/server/wifi/WifiLockManager;Landroid/os/Looper;)V
SPLcom/android/server/wifi/WifiLockManager$ClientModeImplInterfaceHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/wifi/WifiLockManager;-><init>(Landroid/content/Context;Lcom/android/internal/app/IBatteryStats;Lcom/android/server/wifi/ClientModeImpl;Lcom/android/server/wifi/FrameworkFacade;Landroid/os/Looper;)V
SPLcom/android/server/wifi/WifiLockManager;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/WifiMetrics;-><init>(Landroid/content/Context;Lcom/android/server/wifi/FrameworkFacade;Lcom/android/server/wifi/Clock;Landroid/os/Looper;Lcom/android/server/wifi/aware/WifiAwareMetrics;Lcom/android/server/wifi/rtt/RttMetrics;Lcom/android/server/wifi/WifiPowerMetrics;Lcom/android/server/wifi/p2p/WifiP2pMetrics;Lcom/android/server/wifi/DppMetrics;)V
SPLcom/android/server/wifi/WifiMetrics;->getRttMetrics()Lcom/android/server/wifi/rtt/RttMetrics;
SPLcom/android/server/wifi/WifiMetrics;->getWakeupMetrics()Lcom/android/server/wifi/WifiWakeMetrics;
SPLcom/android/server/wifi/WifiMetrics;->getWifiAwareMetrics()Lcom/android/server/wifi/aware/WifiAwareMetrics;
SPLcom/android/server/wifi/WifiMetrics;->incrementScanReturnEntry(II)V
SPLcom/android/server/wifi/WifiMetrics;->loadSettings()V
SPLcom/android/server/wifi/WifiMetrics;->setIsMacRandomizationOn(Z)V
SPLcom/android/server/wifi/WifiMetrics;->setIsWifiNetworksAvailableNotificationEnabled(Ljava/lang/String;Z)V
SPLcom/android/server/wifi/WifiMetrics;->setLinkSpeedCountsLoggingEnabled(Z)V
SPLcom/android/server/wifi/WifiMetrics;->setPasspointManager(Lcom/android/server/wifi/hotspot2/PasspointManager;)V
SPLcom/android/server/wifi/WifiMetrics;->setScoringParams(Lcom/android/server/wifi/ScoringParams;)V
SPLcom/android/server/wifi/WifiMetrics;->setScreenState(Z)V
SPLcom/android/server/wifi/WifiMetrics;->setWifiConfigManager(Lcom/android/server/wifi/WifiConfigManager;)V
SPLcom/android/server/wifi/WifiMetrics;->setWifiDataStall(Lcom/android/server/wifi/WifiDataStall;)V
SPLcom/android/server/wifi/WifiMetrics;->setWifiDataStallMinRxWithoutTx(I)V
SPLcom/android/server/wifi/WifiMetrics;->setWifiDataStallMinTxBad(I)V
SPLcom/android/server/wifi/WifiMetrics;->setWifiIsUnusableLoggingEnabled(Z)V
SPLcom/android/server/wifi/WifiMetrics;->setWifiNetworkSelector(Lcom/android/server/wifi/WifiNetworkSelector;)V
SPLcom/android/server/wifi/WifiMonitor;-><init>(Lcom/android/server/wifi/WifiInjector;)V
SPLcom/android/server/wifi/WifiMonitor;->broadcastSupplicantConnectionEvent(Ljava/lang/String;)V
SPLcom/android/server/wifi/WifiMonitor;->broadcastSupplicantDisconnectionEvent(Ljava/lang/String;)V
SPLcom/android/server/wifi/WifiMonitor;->deregisterHandler(Ljava/lang/String;ILandroid/os/Handler;)V
SPLcom/android/server/wifi/WifiMonitor;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/WifiMonitor;->registerHandler(Ljava/lang/String;ILandroid/os/Handler;)V
SPLcom/android/server/wifi/WifiMonitor;->sendMessage(Ljava/lang/String;Landroid/os/Message;)V
SPLcom/android/server/wifi/WifiMonitor;->setMonitoring(Ljava/lang/String;Z)V
SPLcom/android/server/wifi/WifiMonitor;->startMonitoring(Ljava/lang/String;)V
SPLcom/android/server/wifi/WifiMonitor;->stopMonitoring(Ljava/lang/String;)V
SPLcom/android/server/wifi/WifiMulticastLockManager;-><init>(Lcom/android/server/wifi/WifiMulticastLockManager$FilterController;Lcom/android/internal/app/IBatteryStats;)V
SPLcom/android/server/wifi/WifiMulticastLockManager;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/WifiNative$Iface;->toString()Ljava/lang/String;
SPLcom/android/server/wifi/WifiNative$IfaceManager;->getIface(Ljava/lang/String;)Lcom/android/server/wifi/WifiNative$Iface;
SPLcom/android/server/wifi/WifiNative$InterfaceDestoyedListenerInternal;->onDestroyed(Ljava/lang/String;)V
SPLcom/android/server/wifi/WifiNative$NetworkObserverInternal;->interfaceLinkStateChanged(Ljava/lang/String;Z)V
SPLcom/android/server/wifi/WifiNative$NetworkObserverInternal;->lambda$interfaceLinkStateChanged$0$WifiNative$NetworkObserverInternal(Ljava/lang/String;)V
SPLcom/android/server/wifi/WifiNative$NetworkObserverInternal;->lambda$interfaceLinkStateChanged$0(Lcom/android/server/wifi/WifiNative$NetworkObserverInternal;Ljava/lang/String;)V
SPLcom/android/server/wifi/WifiNative;-><init>(Lcom/android/server/wifi/WifiVendorHal;Lcom/android/server/wifi/SupplicantStaIfaceHal;Lcom/android/server/wifi/HostapdHal;Lcom/android/server/wifi/WificondControl;Lcom/android/server/wifi/WifiMonitor;Landroid/os/INetworkManagementService;Lcom/android/server/wifi/PropertyService;Lcom/android/server/wifi/WifiMetrics;Landroid/os/Handler;Ljava/util/Random;)V
SPLcom/android/server/wifi/WifiNative;->createStaIface(Lcom/android/server/wifi/WifiNative$Iface;Z)Ljava/lang/String;
SPLcom/android/server/wifi/WifiNative;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/WifiNative;->getBgScanCapabilities(Ljava/lang/String;Lcom/android/server/wifi/WifiNative$ScanCapabilities;)Z
SPLcom/android/server/wifi/WifiNative;->getChannelsForBand(I)[I
SPLcom/android/server/wifi/WifiNative;->getClientInterfaceName()Ljava/lang/String;
SPLcom/android/server/wifi/WifiNative;->getDriverVersion()Ljava/lang/String;
SPLcom/android/server/wifi/WifiNative;->getFirmwareVersion()Ljava/lang/String;
SPLcom/android/server/wifi/WifiNative;->getRingBufferStatus()[Lcom/android/server/wifi/WifiNative$RingBufferStatus;
SPLcom/android/server/wifi/WifiNative;->getSupportedFeatureSet(Ljava/lang/String;)J
SPLcom/android/server/wifi/WifiNative;->getSupportedLoggerFeatureSet()I
SPLcom/android/server/wifi/WifiNative;->initialize()Z
SPLcom/android/server/wifi/WifiNative;->initializeNwParamsForClientInterface(Ljava/lang/String;)V
SPLcom/android/server/wifi/WifiNative;->isInterfaceUp(Ljava/lang/String;)Z
SPLcom/android/server/wifi/WifiNative;->onClientInterfaceForScanDestroyed(Lcom/android/server/wifi/WifiNative$Iface;)V
SPLcom/android/server/wifi/WifiNative;->onInterfaceDestroyed(Lcom/android/server/wifi/WifiNative$Iface;)V
SPLcom/android/server/wifi/WifiNative;->onInterfaceStateChanged(Lcom/android/server/wifi/WifiNative$Iface;Z)V
SPLcom/android/server/wifi/WifiNative;->registerDppEventCallback(Lcom/android/server/wifi/WifiNative$DppEventCallback;)V
SPLcom/android/server/wifi/WifiNative;->registerNetworkObserver(Lcom/android/server/wifi/WifiNative$NetworkObserverInternal;)Z
SPLcom/android/server/wifi/WifiNative;->registerStatusListener(Lcom/android/server/wifi/WifiNative$StatusListener;)V
SPLcom/android/server/wifi/WifiNative;->removeStaIface(Lcom/android/server/wifi/WifiNative$Iface;)Z
SPLcom/android/server/wifi/WifiNative;->selectTxPowerScenario(Lcom/android/server/wifi/SarInfo;)Z
SPLcom/android/server/wifi/WifiNative;->setLoggingEventHandler(Lcom/android/server/wifi/WifiNative$WifiLoggerEventHandler;)Z
SPLcom/android/server/wifi/WifiNative;->setSupplicantLogLevel(Z)V
SPLcom/android/server/wifi/WifiNative;->setupInterfaceForClientInConnectivityMode(Lcom/android/server/wifi/WifiNative$InterfaceCallback;)Ljava/lang/String;
SPLcom/android/server/wifi/WifiNative;->setupInterfaceForClientInScanMode(Lcom/android/server/wifi/WifiNative$InterfaceCallback;)Ljava/lang/String;
SPLcom/android/server/wifi/WifiNative;->startAndWaitForSupplicantConnection()Z
SPLcom/android/server/wifi/WifiNative;->startHal()Z
SPLcom/android/server/wifi/WifiNative;->startPktFateMonitoring(Ljava/lang/String;)Z
SPLcom/android/server/wifi/WifiNative;->startSupplicant()Z
SPLcom/android/server/wifi/WifiNative;->stopHalAndWificondIfNecessary()V
SPLcom/android/server/wifi/WifiNative;->stopPnoScan(Ljava/lang/String;)Z
SPLcom/android/server/wifi/WifiNative;->teardownInterface(Ljava/lang/String;)V
SPLcom/android/server/wifi/WifiNative;->unregisterNetworkObserver(Lcom/android/server/wifi/WifiNative$NetworkObserverInternal;)Z
SPLcom/android/server/wifi/WifiNetworkFactory$ConnectionTimeoutAlarmListener;-><init>(Lcom/android/server/wifi/WifiNetworkFactory;)V
SPLcom/android/server/wifi/WifiNetworkFactory$NetworkFactoryScanListener;-><init>(Lcom/android/server/wifi/WifiNetworkFactory;)V
SPLcom/android/server/wifi/WifiNetworkFactory$NetworkRequestDataSource;-><init>(Lcom/android/server/wifi/WifiNetworkFactory;)V
SPLcom/android/server/wifi/WifiNetworkFactory$PeriodicScanAlarmListener;-><init>(Lcom/android/server/wifi/WifiNetworkFactory;)V
SPLcom/android/server/wifi/WifiNetworkFactory;-><init>(Landroid/os/Looper;Landroid/content/Context;Landroid/net/NetworkCapabilities;Landroid/app/ActivityManager;Landroid/app/AlarmManager;Landroid/app/AppOpsManager;Lcom/android/server/wifi/Clock;Lcom/android/server/wifi/WifiInjector;Lcom/android/server/wifi/WifiConnectivityManager;Lcom/android/server/wifi/WifiConfigManager;Lcom/android/server/wifi/WifiConfigStore;Lcom/android/server/wifi/util/WifiPermissionsUtil;)V
SPLcom/android/server/wifi/WifiNetworkFactory;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/WifiNetworkFactory;->handleScreenStateChanged(Z)V
SPLcom/android/server/wifi/WifiNetworkHistory;-><init>(Landroid/content/Context;Lcom/android/server/net/DelayedDiskWrite;)V
SPLcom/android/server/wifi/WifiNetworkSelector;-><init>(Landroid/content/Context;Lcom/android/server/wifi/WifiScoreCard;Lcom/android/server/wifi/ScoringParams;Lcom/android/server/wifi/WifiConfigManager;Lcom/android/server/wifi/Clock;Landroid/util/LocalLog;)V
SPLcom/android/server/wifi/WifiNetworkSelector;-><init>(Landroid/content/Context;Lcom/android/server/wifi/WifiScoreCard;Lcom/android/server/wifi/ScoringParams;Lcom/android/server/wifi/WifiConfigManager;Lcom/android/server/wifi/Clock;Landroid/util/LocalLog;Lcom/android/server/wifi/WifiMetrics;)V
SPLcom/android/server/wifi/WifiNetworkSelector;->registerCandidateScorer(Lcom/android/server/wifi/WifiCandidates$CandidateScorer;)V
SPLcom/android/server/wifi/WifiNetworkSelector;->registerNetworkEvaluator(Lcom/android/server/wifi/WifiNetworkSelector$NetworkEvaluator;)V
SPLcom/android/server/wifi/WifiNetworkSuggestionsManager;-><init>(Landroid/content/Context;Landroid/os/Handler;Lcom/android/server/wifi/WifiInjector;Lcom/android/server/wifi/util/WifiPermissionsUtil;Lcom/android/server/wifi/WifiConfigManager;Lcom/android/server/wifi/WifiConfigStore;)V
SPLcom/android/server/wifi/WifiNetworkSuggestionsManager;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/WifiPowerMetrics;-><init>()V
SPLcom/android/server/wifi/WifiScoreCard$PerBssid;-><init>(Lcom/android/server/wifi/WifiScoreCard;Ljava/lang/String;Landroid/net/MacAddress;)V
SPLcom/android/server/wifi/WifiScoreCard;-><init>(Lcom/android/server/wifi/Clock;Ljava/lang/String;)V
SPLcom/android/server/wifi/WifiScoreCard;->computeHashLong(Ljava/lang/String;Landroid/net/MacAddress;)J
SPLcom/android/server/wifi/WifiScoreCard;->computeHashedL2Key(Ljava/lang/String;Landroid/net/MacAddress;)Ljava/util/UUID;
SPLcom/android/server/wifi/WifiScoreReport;-><init>(Lcom/android/server/wifi/ScoringParams;Lcom/android/server/wifi/Clock;)V
SPLcom/android/server/wifi/WifiScoreReport;->enableVerboseLogging(Z)V
SPLcom/android/server/wifi/WifiService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wifi/WifiService;->onBootPhase(I)V
SPLcom/android/server/wifi/WifiService;->onStart()V
SPLcom/android/server/wifi/WifiServiceImpl$ClientModeImplHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/wifi/WifiServiceImpl;-><init>(Landroid/content/Context;Lcom/android/server/wifi/WifiInjector;Lcom/android/internal/util/AsyncChannel;)V
SPLcom/android/server/wifi/WifiServiceImpl;->checkAndStartWifi()V
SPLcom/android/server/wifi/WifiServiceImpl;->enableVerboseLoggingInternal(I)V
SPLcom/android/server/wifi/WifiServiceImpl;->getSupportedFeatures()J
SPLcom/android/server/wifi/WifiServiceImpl;->getVerboseLoggingLevel()I
SPLcom/android/server/wifi/WifiServiceImpl;->getWifiEnabledState()I
SPLcom/android/server/wifi/WifiServiceImpl;->lambda$registerSoftApCallback$3$WifiServiceImpl(Landroid/os/IBinder;Landroid/net/wifi/ISoftApCallback;I)V
SPLcom/android/server/wifi/WifiServiceImpl;->lambda$registerTrafficStateCallback$12$WifiServiceImpl(Landroid/os/IBinder;Landroid/net/wifi/ITrafficStateCallback;I)V
SPLcom/android/server/wifi/WifiServiceImpl;->registerForBroadcasts()V
SPLcom/android/server/wifi/WifiServiceImpl;->registerSoftApCallback(Landroid/os/IBinder;Landroid/net/wifi/ISoftApCallback;I)V
SPLcom/android/server/wifi/WifiServiceImpl;->registerTrafficStateCallback(Landroid/os/IBinder;Landroid/net/wifi/ITrafficStateCallback;I)V
SPLcom/android/server/wifi/WifiServiceImpl;->setWifiEnabled(Ljava/lang/String;Z)Z
SPLcom/android/server/wifi/WifiSettingsStore;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wifi/WifiSettingsStore;->getLocationModeSetting(Landroid/content/Context;)I
SPLcom/android/server/wifi/WifiSettingsStore;->getPersistedWifiState()I
SPLcom/android/server/wifi/WifiSettingsStore;->getWifiSavedState()I
SPLcom/android/server/wifi/WifiSettingsStore;->handleWifiToggled(Z)Z
SPLcom/android/server/wifi/WifiSettingsStore;->isAirplaneModeOn()Z
SPLcom/android/server/wifi/WifiSettingsStore;->isScanAlwaysAvailable()Z
SPLcom/android/server/wifi/WifiSettingsStore;->isWifiToggleEnabled()Z
SPLcom/android/server/wifi/WifiSettingsStore;->setWifiSavedState(I)V
SPLcom/android/server/wifi/WifiStateTracker;-><init>(Lcom/android/internal/app/IBatteryStats;)V
SPLcom/android/server/wifi/WifiStateTracker;->updateState(I)V
SPLcom/android/server/wifi/WifiTrafficPoller;-><init>(Landroid/os/Looper;)V
SPLcom/android/server/wifi/WifiTrafficPoller;->addCallback(Landroid/os/IBinder;Landroid/net/wifi/ITrafficStateCallback;I)V
SPLcom/android/server/wifi/WifiVendorHal$ChipEventCallback;->onIfaceAdded(ILjava/lang/String;)V
SPLcom/android/server/wifi/WifiVendorHal$ChipEventCallback;->onIfaceRemoved(ILjava/lang/String;)V
SPLcom/android/server/wifi/WifiVendorHal$ChipEventCallbackV12;->onIfaceAdded(ILjava/lang/String;)V
SPLcom/android/server/wifi/WifiVendorHal$ChipEventCallbackV12;->onIfaceRemoved(ILjava/lang/String;)V
SPLcom/android/server/wifi/WifiVendorHal$HalDeviceManagerStatusListener;->onStatusChanged()V
SPLcom/android/server/wifi/WifiVendorHal$StaInterfaceDestroyedListenerInternal;->onDestroyed(Ljava/lang/String;)V
SPLcom/android/server/wifi/WifiVendorHal;-><init>(Lcom/android/server/wifi/HalDeviceManager;Landroid/os/Looper;)V
SPLcom/android/server/wifi/WifiVendorHal;->boolResult(Z)Z
SPLcom/android/server/wifi/WifiVendorHal;->createStaIface(ZLcom/android/server/wifi/HalDeviceManager$InterfaceDestroyedListener;)Ljava/lang/String;
SPLcom/android/server/wifi/WifiVendorHal;->enableLinkLayerStats(Landroid/hardware/wifi/V1_0/IWifiStaIface;)V
SPLcom/android/server/wifi/WifiVendorHal;->enableVerboseLogging(Z)V
SPLcom/android/server/wifi/WifiVendorHal;->getBgScanCapabilities(Ljava/lang/String;Lcom/android/server/wifi/WifiNative$ScanCapabilities;)Z
SPLcom/android/server/wifi/WifiVendorHal;->getDriverVersion()Ljava/lang/String;
SPLcom/android/server/wifi/WifiVendorHal;->getFirmwareVersion()Ljava/lang/String;
SPLcom/android/server/wifi/WifiVendorHal;->getRingBufferStatus()[Lcom/android/server/wifi/WifiNative$RingBufferStatus;
SPLcom/android/server/wifi/WifiVendorHal;->getStaIface(Ljava/lang/String;)Landroid/hardware/wifi/V1_0/IWifiStaIface;
SPLcom/android/server/wifi/WifiVendorHal;->getSupportedFeatureSet(Ljava/lang/String;)J
SPLcom/android/server/wifi/WifiVendorHal;->getSupportedLoggerFeatureSet()I
SPLcom/android/server/wifi/WifiVendorHal;->getWifiChipForV1_2Mockable()Landroid/hardware/wifi/V1_2/IWifiChip;
SPLcom/android/server/wifi/WifiVendorHal;->getWifiChipForV1_3Mockable()Landroid/hardware/wifi/V1_3/IWifiChip;
SPLcom/android/server/wifi/WifiVendorHal;->initialize(Lcom/android/server/wifi/WifiNative$VendorHalDeathEventHandler;)Z
SPLcom/android/server/wifi/WifiVendorHal;->isVendorHalSupported()Z
SPLcom/android/server/wifi/WifiVendorHal;->lambda$getBgScanCapabilities$0$WifiVendorHal(Lcom/android/server/wifi/WifiNative$ScanCapabilities;Landroid/util/MutableBoolean;Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/StaBackgroundScanCapabilities;)V
SPLcom/android/server/wifi/WifiVendorHal;->lambda$getBgScanCapabilities$0(Lcom/android/server/wifi/WifiVendorHal;Lcom/android/server/wifi/WifiNative$ScanCapabilities;Landroid/util/MutableBoolean;Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/StaBackgroundScanCapabilities;)V
SPLcom/android/server/wifi/WifiVendorHal;->lambda$getSupportedFeatureSet$3$WifiVendorHal(Landroid/util/MutableLong;Landroid/hardware/wifi/V1_0/WifiStatus;I)V
SPLcom/android/server/wifi/WifiVendorHal;->ok(Landroid/hardware/wifi/V1_0/WifiStatus;)Z
SPLcom/android/server/wifi/WifiVendorHal;->registerChipCallback()Z
SPLcom/android/server/wifi/WifiVendorHal;->registerRadioModeChangeHandler(Lcom/android/server/wifi/WifiNative$VendorHalRadioModeChangeEventHandler;)V
SPLcom/android/server/wifi/WifiVendorHal;->registerStaIfaceCallback(Landroid/hardware/wifi/V1_0/IWifiStaIface;)Z
SPLcom/android/server/wifi/WifiVendorHal;->removeStaIface(Ljava/lang/String;)Z
SPLcom/android/server/wifi/WifiVendorHal;->requestChipDebugInfo()V
SPLcom/android/server/wifi/WifiVendorHal;->retrieveWifiChip(Landroid/hardware/wifi/V1_0/IWifiIface;)Z
SPLcom/android/server/wifi/WifiVendorHal;->sarPowerBackoffRequired_1_2(Lcom/android/server/wifi/SarInfo;)Z
SPLcom/android/server/wifi/WifiVendorHal;->selectTxPowerScenario(Lcom/android/server/wifi/SarInfo;)Z
SPLcom/android/server/wifi/WifiVendorHal;->selectTxPowerScenario_1_2(Landroid/hardware/wifi/V1_2/IWifiChip;Lcom/android/server/wifi/SarInfo;)Z
SPLcom/android/server/wifi/WifiVendorHal;->setLoggingEventHandler(Lcom/android/server/wifi/WifiNative$WifiLoggerEventHandler;)Z
SPLcom/android/server/wifi/WifiVendorHal;->startPktFateMonitoring(Ljava/lang/String;)Z
SPLcom/android/server/wifi/WifiVendorHal;->startVendorHal()Z
SPLcom/android/server/wifi/WifiVendorHal;->stopVendorHal()V
SPLcom/android/server/wifi/WifiVendorHal;->wifiFeatureMaskFromChipCapabilities(I)I
SPLcom/android/server/wifi/WifiVendorHal;->wifiFeatureMaskFromChipCapabilities_1_3(I)J
SPLcom/android/server/wifi/WificondControl;-><init>(Lcom/android/server/wifi/WifiInjector;Lcom/android/server/wifi/WifiMonitor;Lcom/android/server/wifi/CarrierNetworkConfig;Landroid/app/AlarmManager;Landroid/os/Looper;Lcom/android/server/wifi/Clock;)V
SPLcom/android/server/wifi/WificondControl;->clearState()V
SPLcom/android/server/wifi/WificondControl;->enableVerboseLogging(Z)V
SPLcom/android/server/wifi/WificondControl;->getChannelsForBand(I)[I
SPLcom/android/server/wifi/WificondControl;->initialize(Lcom/android/server/wifi/WifiNative$WificondDeathEventHandler;)Z
SPLcom/android/server/wifi/WificondControl;->retrieveWificondAndRegisterForDeath()Z
SPLcom/android/server/wifi/WificondControl;->setupInterfaceForClientMode(Ljava/lang/String;)Landroid/net/wifi/IClientInterface;
SPLcom/android/server/wifi/WificondControl;->stopPnoScan(Ljava/lang/String;)Z
SPLcom/android/server/wifi/WificondControl;->tearDownClientInterface(Ljava/lang/String;)Z
SPLcom/android/server/wifi/WificondControl;->tearDownInterfaces()Z
SPLcom/android/server/wifi/WrongPasswordNotifier;-><init>(Landroid/content/Context;Lcom/android/server/wifi/FrameworkFacade;)V
SPLcom/android/server/wifi/aware/WifiAwareDataPathStateManager;->start(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/wifi/aware/WifiAwareMetrics;Lcom/android/server/wifi/util/WifiPermissionsUtil;Lcom/android/server/wifi/util/WifiPermissionsWrapper;)V
SPLcom/android/server/wifi/aware/WifiAwareMetrics;-><init>(Lcom/android/server/wifi/Clock;)V
SPLcom/android/server/wifi/aware/WifiAwareMetrics;->recordDisableUsage()V
SPLcom/android/server/wifi/aware/WifiAwareMetrics;->recordEnableUsage()V
SPLcom/android/server/wifi/aware/WifiAwareNativeApi;->disable(S)Z
SPLcom/android/server/wifi/aware/WifiAwareNativeApi;->getCapabilities(S)Z
SPLcom/android/server/wifi/aware/WifiAwareNativeApi;->onReset()V
SPLcom/android/server/wifi/aware/WifiAwareNativeCallback;->notifyCapabilitiesResponse(SLandroid/hardware/wifi/V1_0/WifiNanStatus;Landroid/hardware/wifi/V1_0/NanCapabilities;)V
SPLcom/android/server/wifi/aware/WifiAwareNativeManager$InterfaceDestroyedListener;->onDestroyed(Ljava/lang/String;)V
SPLcom/android/server/wifi/aware/WifiAwareNativeManager;-><init>(Lcom/android/server/wifi/aware/WifiAwareStateManager;Lcom/android/server/wifi/HalDeviceManager;Lcom/android/server/wifi/aware/WifiAwareNativeCallback;)V
SPLcom/android/server/wifi/aware/WifiAwareNativeManager;->getWifiNanIface()Landroid/hardware/wifi/V1_0/IWifiNanIface;
SPLcom/android/server/wifi/aware/WifiAwareNativeManager;->mockableCastTo_1_2(Landroid/hardware/wifi/V1_0/IWifiNanIface;)Landroid/hardware/wifi/V1_2/IWifiNanIface;
SPLcom/android/server/wifi/aware/WifiAwareNativeManager;->releaseAware()V
SPLcom/android/server/wifi/aware/WifiAwareNativeManager;->tryToGetAware()V
SPLcom/android/server/wifi/aware/WifiAwareService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wifi/aware/WifiAwareService;->onBootPhase(I)V
SPLcom/android/server/wifi/aware/WifiAwareService;->onStart()V
SPLcom/android/server/wifi/aware/WifiAwareServiceImpl;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wifi/aware/WifiAwareServiceImpl;->enableVerboseLogging(ILcom/android/server/wifi/aware/WifiAwareStateManager;Lcom/android/server/wifi/aware/WifiAwareNativeManager;Lcom/android/server/wifi/aware/WifiAwareNativeApi;Lcom/android/server/wifi/aware/WifiAwareNativeCallback;)V
SPLcom/android/server/wifi/aware/WifiAwareServiceImpl;->start(Landroid/os/HandlerThread;Lcom/android/server/wifi/aware/WifiAwareStateManager;Lcom/android/server/wifi/aware/WifiAwareShellCommand;Lcom/android/server/wifi/aware/WifiAwareMetrics;Lcom/android/server/wifi/util/WifiPermissionsUtil;Lcom/android/server/wifi/util/WifiPermissionsWrapper;Lcom/android/server/wifi/FrameworkFacade;Lcom/android/server/wifi/aware/WifiAwareNativeManager;Lcom/android/server/wifi/aware/WifiAwareNativeApi;Lcom/android/server/wifi/aware/WifiAwareNativeCallback;)V
SPLcom/android/server/wifi/aware/WifiAwareShellCommand;->register(Ljava/lang/String;Lcom/android/server/wifi/aware/WifiAwareShellCommand$DelegatedShellCommand;)V
SPLcom/android/server/wifi/aware/WifiAwareStateManager$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/wifi/aware/WifiAwareStateManager$3;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/wifi/aware/WifiAwareStateManager$WifiAwareStateMachine$WaitForResponseState;->enter()V
SPLcom/android/server/wifi/aware/WifiAwareStateManager$WifiAwareStateMachine$WaitForResponseState;->exit()V
SPLcom/android/server/wifi/aware/WifiAwareStateManager$WifiAwareStateMachine$WaitForResponseState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/aware/WifiAwareStateManager$WifiAwareStateMachine$WaitState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/aware/WifiAwareStateManager$WifiAwareStateMachine;-><init>(Lcom/android/server/wifi/aware/WifiAwareStateManager;Ljava/lang/String;Landroid/os/Looper;)V
SPLcom/android/server/wifi/aware/WifiAwareStateManager$WifiAwareStateMachine;->getLogRecString(Landroid/os/Message;)Ljava/lang/String;
SPLcom/android/server/wifi/aware/WifiAwareStateManager$WifiAwareStateMachine;->processCommand(Landroid/os/Message;)Z
SPLcom/android/server/wifi/aware/WifiAwareStateManager$WifiAwareStateMachine;->processResponse(Landroid/os/Message;)V
SPLcom/android/server/wifi/aware/WifiAwareStateManager;-><init>()V
SPLcom/android/server/wifi/aware/WifiAwareStateManager;->disableUsage()V
SPLcom/android/server/wifi/aware/WifiAwareStateManager;->disableUsageLocal(S)Z
SPLcom/android/server/wifi/aware/WifiAwareStateManager;->enableUsage()V
SPLcom/android/server/wifi/aware/WifiAwareStateManager;->getAwareInterface()V
SPLcom/android/server/wifi/aware/WifiAwareStateManager;->messageToString(Landroid/os/Message;)Ljava/lang/String;
SPLcom/android/server/wifi/aware/WifiAwareStateManager;->onAwareDownLocal()V
SPLcom/android/server/wifi/aware/WifiAwareStateManager;->onCapabilitiesUpdateResponse(SLcom/android/server/wifi/aware/Capabilities;)V
SPLcom/android/server/wifi/aware/WifiAwareStateManager;->onReset()V
SPLcom/android/server/wifi/aware/WifiAwareStateManager;->queryCapabilities()V
SPLcom/android/server/wifi/aware/WifiAwareStateManager;->releaseAwareInterface()V
SPLcom/android/server/wifi/aware/WifiAwareStateManager;->sendAwareStateChangedBroadcast(Z)V
SPLcom/android/server/wifi/aware/WifiAwareStateManager;->start(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/wifi/aware/WifiAwareMetrics;Lcom/android/server/wifi/util/WifiPermissionsUtil;Lcom/android/server/wifi/util/WifiPermissionsWrapper;)V
SPLcom/android/server/wifi/hotspot2/-$$Lambda$PasspointProvisioner$8fmJnU9XPoTzX8nPAlmJHjKftJw;->run()V
SPLcom/android/server/wifi/hotspot2/LegacyPasspointConfigParser;-><init>()V
SPLcom/android/server/wifi/hotspot2/OsuNetworkConnection$1;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/wifi/hotspot2/OsuNetworkConnection;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/hotspot2/OsuNetworkConnection;->init(Landroid/os/Handler;)V
SPLcom/android/server/wifi/hotspot2/OsuServerConnection;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/hotspot2/OsuServerConnection;->init(Ljavax/net/ssl/SSLContext;Lcom/android/org/conscrypt/TrustManagerImpl;)V
SPLcom/android/server/wifi/hotspot2/PasspointConfigSharedStoreData;->getStoreFileId()I
SPLcom/android/server/wifi/hotspot2/PasspointConfigUserStoreData;->getStoreFileId()I
SPLcom/android/server/wifi/hotspot2/PasspointManager;-><init>(Landroid/content/Context;Lcom/android/server/wifi/WifiNative;Lcom/android/server/wifi/WifiKeyStore;Lcom/android/server/wifi/Clock;Lcom/android/server/wifi/SIMAccessor;Lcom/android/server/wifi/hotspot2/PasspointObjectFactory;Lcom/android/server/wifi/WifiConfigManager;Lcom/android/server/wifi/WifiConfigStore;Lcom/android/server/wifi/WifiMetrics;)V
SPLcom/android/server/wifi/hotspot2/PasspointManager;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/hotspot2/PasspointManager;->initializeProvisioner(Landroid/os/Looper;)V
SPLcom/android/server/wifi/hotspot2/PasspointNetworkEvaluator;-><init>(Lcom/android/server/wifi/hotspot2/PasspointManager;Lcom/android/server/wifi/WifiConfigManager;Landroid/util/LocalLog;Lcom/android/server/wifi/CarrierNetworkConfig;Landroid/telephony/TelephonyManager;)V
SPLcom/android/server/wifi/hotspot2/PasspointObjectFactory;-><init>()V
SPLcom/android/server/wifi/hotspot2/PasspointObjectFactory;->getSSLContext(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;
SPLcom/android/server/wifi/hotspot2/PasspointObjectFactory;->getSystemInfo(Landroid/content/Context;Lcom/android/server/wifi/WifiNative;)Lcom/android/server/wifi/hotspot2/SystemInfo;
SPLcom/android/server/wifi/hotspot2/PasspointObjectFactory;->getTrustManagerImpl(Ljava/security/KeyStore;)Lcom/android/org/conscrypt/TrustManagerImpl;
SPLcom/android/server/wifi/hotspot2/PasspointObjectFactory;->makeANQPRequestManager(Lcom/android/server/wifi/hotspot2/PasspointEventHandler;Lcom/android/server/wifi/Clock;)Lcom/android/server/wifi/hotspot2/ANQPRequestManager;
SPLcom/android/server/wifi/hotspot2/PasspointObjectFactory;->makeAnqpCache(Lcom/android/server/wifi/Clock;)Lcom/android/server/wifi/hotspot2/AnqpCache;
SPLcom/android/server/wifi/hotspot2/PasspointObjectFactory;->makeCertificateVerifier()Lcom/android/server/wifi/hotspot2/CertificateVerifier;
SPLcom/android/server/wifi/hotspot2/PasspointObjectFactory;->makeOsuNetworkConnection(Landroid/content/Context;)Lcom/android/server/wifi/hotspot2/OsuNetworkConnection;
SPLcom/android/server/wifi/hotspot2/PasspointObjectFactory;->makeOsuServerConnection()Lcom/android/server/wifi/hotspot2/OsuServerConnection;
SPLcom/android/server/wifi/hotspot2/PasspointObjectFactory;->makePasspointConfigSharedStoreData(Lcom/android/server/wifi/hotspot2/PasspointConfigSharedStoreData$DataSource;)Lcom/android/server/wifi/hotspot2/PasspointConfigSharedStoreData;
SPLcom/android/server/wifi/hotspot2/PasspointObjectFactory;->makePasspointConfigUserStoreData(Lcom/android/server/wifi/WifiKeyStore;Lcom/android/server/wifi/SIMAccessor;Lcom/android/server/wifi/hotspot2/PasspointConfigUserStoreData$DataSource;)Lcom/android/server/wifi/hotspot2/PasspointConfigUserStoreData;
SPLcom/android/server/wifi/hotspot2/PasspointObjectFactory;->makePasspointEventHandler(Lcom/android/server/wifi/WifiNative;Lcom/android/server/wifi/hotspot2/PasspointEventHandler$Callbacks;)Lcom/android/server/wifi/hotspot2/PasspointEventHandler;
SPLcom/android/server/wifi/hotspot2/PasspointObjectFactory;->makePasspointProvisioner(Landroid/content/Context;Lcom/android/server/wifi/WifiNative;Lcom/android/server/wifi/hotspot2/PasspointManager;)Lcom/android/server/wifi/hotspot2/PasspointProvisioner;
SPLcom/android/server/wifi/hotspot2/PasspointObjectFactory;->makeWfaKeyStore()Lcom/android/server/wifi/hotspot2/WfaKeyStore;
SPLcom/android/server/wifi/hotspot2/PasspointProvisioner$ProvisioningStateMachine;->getHandler()Landroid/os/Handler;
SPLcom/android/server/wifi/hotspot2/PasspointProvisioner$ProvisioningStateMachine;->start(Landroid/os/Handler;)V
SPLcom/android/server/wifi/hotspot2/PasspointProvisioner;-><init>(Landroid/content/Context;Lcom/android/server/wifi/WifiNative;Lcom/android/server/wifi/hotspot2/PasspointObjectFactory;Lcom/android/server/wifi/hotspot2/PasspointManager;)V
SPLcom/android/server/wifi/hotspot2/PasspointProvisioner;->enableVerboseLogging(I)V
SPLcom/android/server/wifi/hotspot2/PasspointProvisioner;->init(Landroid/os/Looper;)V
SPLcom/android/server/wifi/hotspot2/PasspointProvisioner;->lambda$init$0$PasspointProvisioner(Landroid/os/Looper;)V
SPLcom/android/server/wifi/hotspot2/PasspointProvisioner;->lambda$init$0(Lcom/android/server/wifi/hotspot2/PasspointProvisioner;Landroid/os/Looper;)V
SPLcom/android/server/wifi/hotspot2/WfaCertBuilder;->loadCertsFromDisk(Ljava/lang/String;)Ljava/util/Set;
SPLcom/android/server/wifi/hotspot2/WfaKeyStore;->get()Ljava/security/KeyStore;
SPLcom/android/server/wifi/hotspot2/WfaKeyStore;->load()V
SPLcom/android/server/wifi/hotspot2/anqp/Constants$ANQPElementType;-><init>(Ljava/lang/String;I)V
SPLcom/android/server/wifi/hotspot2/soap/RedirectListener;-><init>(Landroid/os/Looper;Landroid/os/Looper;I)V
SPLcom/android/server/wifi/hotspot2/soap/RedirectListener;->createInstance(Landroid/os/Looper;)Lcom/android/server/wifi/hotspot2/soap/RedirectListener;
SPLcom/android/server/wifi/p2p/-$$Lambda$WifiP2pNative$OugPqsliuKv73AxYwflB8JKX3Gg;->onStatusChanged()V
SPLcom/android/server/wifi/p2p/-$$Lambda$WifiP2pServiceImpl$P2pStateMachine$zMDJmVHxNOQccRUsy4cDbijFDbc;->onAvailabilityChanged(Z)V
SPLcom/android/server/wifi/p2p/SupplicantP2pIfaceHal$1;-><init>(Lcom/android/server/wifi/p2p/SupplicantP2pIfaceHal;)V
SPLcom/android/server/wifi/p2p/SupplicantP2pIfaceHal;-><init>(Lcom/android/server/wifi/p2p/WifiP2pMonitor;)V
SPLcom/android/server/wifi/p2p/WifiP2pMetrics;-><init>(Lcom/android/server/wifi/Clock;)V
SPLcom/android/server/wifi/p2p/WifiP2pMonitor;-><init>(Lcom/android/server/wifi/WifiInjector;)V
SPLcom/android/server/wifi/p2p/WifiP2pNative$InterfaceAvailableListenerInternal;->onAvailabilityChanged(Z)V
SPLcom/android/server/wifi/p2p/WifiP2pNative;-><init>(Lcom/android/server/wifi/WifiVendorHal;Lcom/android/server/wifi/p2p/SupplicantP2pIfaceHal;Lcom/android/server/wifi/HalDeviceManager;)V
SPLcom/android/server/wifi/p2p/WifiP2pNative;-><init>(Lcom/android/server/wifi/WifiVendorHal;Lcom/android/server/wifi/p2p/SupplicantP2pIfaceHal;Lcom/android/server/wifi/HalDeviceManager;Lcom/android/server/wifi/PropertyService;)V
SPLcom/android/server/wifi/p2p/WifiP2pNative;->isHalInterfaceSupported()Z
SPLcom/android/server/wifi/p2p/WifiP2pNative;->lambda$registerInterfaceAvailableListener$0$WifiP2pNative(Landroid/os/Handler;)V
SPLcom/android/server/wifi/p2p/WifiP2pNative;->registerInterfaceAvailableListener(Lcom/android/server/wifi/HalDeviceManager$InterfaceAvailableForRequestListener;Landroid/os/Handler;)V
SPLcom/android/server/wifi/p2p/WifiP2pService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wifi/p2p/WifiP2pService;->onBootPhase(I)V
SPLcom/android/server/wifi/p2p/WifiP2pService;->onStart()V
SPLcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$2;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$3;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$DefaultState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$P2pDisabledState;->enter()V
SPLcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine$P2pDisabledState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine;-><init>(Lcom/android/server/wifi/p2p/WifiP2pServiceImpl;Ljava/lang/String;Landroid/os/Looper;Z)V
SPLcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine;->checkAndReEnableP2p()V
SPLcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine;->checkAndSendP2pStateChangedBroadcast()V
SPLcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine;->lambda$new$0$WifiP2pServiceImpl$P2pStateMachine(Z)V
SPLcom/android/server/wifi/p2p/WifiP2pServiceImpl$P2pStateMachine;->sendP2pStateChangedBroadcast(Z)V
SPLcom/android/server/wifi/p2p/WifiP2pServiceImpl;-><init>(Landroid/content/Context;Lcom/android/server/wifi/WifiInjector;)V
SPLcom/android/server/wifi/p2p/WifiP2pServiceImpl;->connectivityServiceReady()V
SPLcom/android/server/wifi/rtt/-$$Lambda$RttNative$nRSOFcP2WhqxmfStf2OeZAekTCY;->onValues(Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/RttCapabilities;)V
SPLcom/android/server/wifi/rtt/-$$Lambda$RttNative$rJS9dcQwV7YDCbGMGmH46AVDmws;->onStatusChanged()V
SPLcom/android/server/wifi/rtt/-$$Lambda$RttServiceImpl$ehyq-_xe9BYccoyltP3Gc2lh51g;->run()V
SPLcom/android/server/wifi/rtt/-$$Lambda$RttServiceImpl$q9ANpyRqIip_-lKXLzaUsSwgxFs;->run()V
SPLcom/android/server/wifi/rtt/-$$Lambda$RttServiceImpl$wP--CWXsaxeveXsy_7abZeA-Q-w;->run()V
SPLcom/android/server/wifi/rtt/RttMetrics$PerPeerTypeInfo;-><init>(Lcom/android/server/wifi/rtt/RttMetrics;)V
SPLcom/android/server/wifi/rtt/RttMetrics;-><init>(Lcom/android/server/wifi/Clock;)V
SPLcom/android/server/wifi/rtt/RttNative$1;->onNewRttController(Landroid/hardware/wifi/V1_0/IWifiRttController;)V
SPLcom/android/server/wifi/rtt/RttNative$1;->onRttControllerDestroyed()V
SPLcom/android/server/wifi/rtt/RttNative;->isReady()Z
SPLcom/android/server/wifi/rtt/RttNative;->lambda$start$0$RttNative(Landroid/os/Handler;)V
SPLcom/android/server/wifi/rtt/RttNative;->lambda$updateRttCapabilities$1$RttNative(Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/RttCapabilities;)V
SPLcom/android/server/wifi/rtt/RttNative;->lambda$updateRttCapabilities$1(Lcom/android/server/wifi/rtt/RttNative;Landroid/hardware/wifi/V1_0/WifiStatus;Landroid/hardware/wifi/V1_0/RttCapabilities;)V
SPLcom/android/server/wifi/rtt/RttNative;->start(Landroid/os/Handler;)V
SPLcom/android/server/wifi/rtt/RttNative;->updateRttCapabilities()V
SPLcom/android/server/wifi/rtt/RttService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wifi/rtt/RttService;->onBootPhase(I)V
SPLcom/android/server/wifi/rtt/RttService;->onStart()V
SPLcom/android/server/wifi/rtt/RttServiceImpl$4;->onReceive(Landroid/content/Context;Landroid/content/Intent;)V
SPLcom/android/server/wifi/rtt/RttServiceImpl$RttServiceSynchronized;-><init>(Lcom/android/server/wifi/rtt/RttServiceImpl;Landroid/os/Looper;Lcom/android/server/wifi/rtt/RttNative;)V
SPLcom/android/server/wifi/rtt/RttServiceImpl$RttServiceSynchronized;->cleanUpOnDisable()V
SPLcom/android/server/wifi/rtt/RttServiceImpl$RttServiceSynchronized;->executeNextRangingRequestIfPossible(Z)V
SPLcom/android/server/wifi/rtt/RttServiceImpl$RttShellCommand;->reset()V
SPLcom/android/server/wifi/rtt/RttServiceImpl;->disable()V
SPLcom/android/server/wifi/rtt/RttServiceImpl;->enableIfPossible()V
SPLcom/android/server/wifi/rtt/RttServiceImpl;->isAvailable()Z
SPLcom/android/server/wifi/rtt/RttServiceImpl;->lambda$disable$2$RttServiceImpl()V
SPLcom/android/server/wifi/rtt/RttServiceImpl;->lambda$enableIfPossible$1$RttServiceImpl()V
SPLcom/android/server/wifi/rtt/RttServiceImpl;->lambda$start$0$RttServiceImpl(Lcom/android/server/wifi/rtt/RttNative;)V
SPLcom/android/server/wifi/rtt/RttServiceImpl;->start(Landroid/os/Looper;Lcom/android/server/wifi/Clock;Landroid/net/wifi/aware/IWifiAwareManager;Lcom/android/server/wifi/rtt/RttNative;Lcom/android/server/wifi/rtt/RttMetrics;Lcom/android/server/wifi/util/WifiPermissionsUtil;Lcom/android/server/wifi/FrameworkFacade;)V
SPLcom/android/server/wifi/scanner/BackgroundScanScheduler;-><init>(Lcom/android/server/wifi/scanner/ChannelHelper;)V
SPLcom/android/server/wifi/scanner/BackgroundScanScheduler;->createSchedule(Ljava/util/List;I)V
SPLcom/android/server/wifi/scanner/BackgroundScanScheduler;->getMaxApPerScan()I
SPLcom/android/server/wifi/scanner/BackgroundScanScheduler;->getMaxBatch()I
SPLcom/android/server/wifi/scanner/BackgroundScanScheduler;->getMaxChannelsPerBucket()I
SPLcom/android/server/wifi/scanner/BackgroundScanScheduler;->setMaxApPerScan(I)V
SPLcom/android/server/wifi/scanner/BackgroundScanScheduler;->setMaxBuckets(I)V
SPLcom/android/server/wifi/scanner/HalWifiScannerImpl;->cleanup()V
SPLcom/android/server/wifi/scanner/HalWifiScannerImpl;->getChannelHelper()Lcom/android/server/wifi/scanner/ChannelHelper;
SPLcom/android/server/wifi/scanner/HalWifiScannerImpl;->getScanCapabilities(Lcom/android/server/wifi/WifiNative$ScanCapabilities;)Z
SPLcom/android/server/wifi/scanner/WifiScannerImpl$1;-><init>()V
SPLcom/android/server/wifi/scanner/WifiScannerImpl$1;->create(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/wifi/Clock;)Lcom/android/server/wifi/scanner/WifiScannerImpl;
SPLcom/android/server/wifi/scanner/WifiScannerImpl$2;-><init>()V
SPLcom/android/server/wifi/scanner/WifiScannerImpl;-><init>()V
SPLcom/android/server/wifi/scanner/WifiScanningService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wifi/scanner/WifiScanningService;->onBootPhase(I)V
SPLcom/android/server/wifi/scanner/WifiScanningService;->onStart()V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;->getUid()I
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;->toString()Ljava/lang/String;
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$RequestList;->addRequest(Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;ILandroid/os/WorkSource;Ljava/lang/Object;)V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$RequestList;->removeRequest(Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;I)Ljava/lang/Object;
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiBackgroundScanStateMachine$DefaultState;->enter()V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiBackgroundScanStateMachine$DefaultState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiBackgroundScanStateMachine$StartedState;->enter()V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiBackgroundScanStateMachine$StartedState;->exit()V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiBackgroundScanStateMachine$StartedState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiBackgroundScanStateMachine;-><init>(Lcom/android/server/wifi/scanner/WifiScanningServiceImpl;Landroid/os/Looper;)V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiBackgroundScanStateMachine;->sendBackgroundScanFailedToAllAndClear(ILjava/lang/String;)V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine$DefaultState;->enter()V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine$DefaultState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine$StartedState;->enter()V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine$StartedState;->exit()V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine$StartedState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine;-><init>(Lcom/android/server/wifi/scanner/WifiScanningServiceImpl;Landroid/os/Looper;)V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiPnoScanStateMachine;->sendPnoScanFailedToAllAndClear(ILjava/lang/String;)V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine$DefaultState;->enter()V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine$DefaultState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine$DriverStartedState;->exit()V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine$DriverStartedState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine$IdleState;->enter()V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine$IdleState;->processMessage(Landroid/os/Message;)Z
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;-><init>(Lcom/android/server/wifi/scanner/WifiScanningServiceImpl;Landroid/os/Looper;)V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;->sendOpFailedToAllAndClear(Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$RequestList;ILjava/lang/String;)V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl$WifiSingleScanStateMachine;->tryToStartNewScan()V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl;-><init>(Landroid/content/Context;Landroid/os/Looper;Lcom/android/server/wifi/scanner/WifiScannerImpl$WifiScannerImplFactory;Lcom/android/internal/app/IBatteryStats;Lcom/android/server/wifi/WifiInjector;)V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl;->computeWorkSource(Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;Landroid/os/WorkSource;)Landroid/os/WorkSource;
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl;->enforcePermission(ILandroid/os/Message;)V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl;->getMessenger()Landroid/os/Messenger;
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl;->logScanRequest(Ljava/lang/String;Lcom/android/server/wifi/scanner/WifiScanningServiceImpl$ClientInfo;ILandroid/os/WorkSource;Landroid/net/wifi/WifiScanner$ScanSettings;Landroid/net/wifi/WifiScanner$PnoSettings;)V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl;->replySucceeded(Landroid/os/Message;)V
SPLcom/android/server/wifi/scanner/WifiScanningServiceImpl;->startService()V
SPLcom/android/server/wifi/scanner/WificondChannelHelper;-><init>(Lcom/android/server/wifi/WifiNative;)V
SPLcom/android/server/wifi/scanner/WificondChannelHelper;->updateChannels()V
SPLcom/android/server/wifi/scanner/WificondScannerImpl;-><init>(Landroid/content/Context;Ljava/lang/String;Lcom/android/server/wifi/WifiNative;Lcom/android/server/wifi/WifiMonitor;Lcom/android/server/wifi/scanner/ChannelHelper;Landroid/os/Looper;Lcom/android/server/wifi/Clock;)V
SPLcom/android/server/wifi/scanner/WificondScannerImpl;->cleanup()V
SPLcom/android/server/wifi/util/DataIntegrityChecker;-><init>(Ljava/lang/String;)V
SPLcom/android/server/wifi/util/ExternalCallbackTracker$ExternalCallbackHolder;->createAndLinkToDeath(Landroid/os/IBinder;Ljava/lang/Object;Lcom/android/server/wifi/util/ExternalCallbackTracker$ExternalCallbackHolder$DeathCallback;)Lcom/android/server/wifi/util/ExternalCallbackTracker$ExternalCallbackHolder;
SPLcom/android/server/wifi/util/ExternalCallbackTracker;->add(Landroid/os/IBinder;Ljava/lang/Object;I)Z
SPLcom/android/server/wifi/util/IntHistogram;-><init>([I)V
SPLcom/android/server/wifi/util/MetricsUtils$LogHistParms;-><init>(IIIII)V
SPLcom/android/server/wifi/util/MetricsUtils;->addValueToLogHistogram(JLandroid/util/SparseIntArray;Lcom/android/server/wifi/util/MetricsUtils$LogHistParms;)I
SPLcom/android/server/wifi/util/NativeUtil;->byteArrayFromArrayList(Ljava/util/ArrayList;)[B
SPLcom/android/server/wifi/util/NativeUtil;->hexOrQuotedStringToBytes(Ljava/lang/String;)Ljava/util/ArrayList;
SPLcom/android/server/wifi/util/WifiAsyncChannel;->replyToMessage(Landroid/os/Message;Landroid/os/Message;)V
SPLcom/android/server/wifi/util/WifiAsyncChannel;->sendMessageSynchronously(Landroid/os/Message;)Landroid/os/Message;
SPLcom/android/server/wifi/util/WifiPermissionsUtil;-><init>(Lcom/android/server/wifi/util/WifiPermissionsWrapper;Landroid/content/Context;Landroid/os/UserManager;Lcom/android/server/wifi/WifiInjector;)V
SPLcom/android/server/wifi/util/WifiPermissionsUtil;->isLocationModeEnabled()Z
SPLcom/android/server/wifi/util/WifiPermissionsUtil;->retrieveLocationManagerIfNecessary()Z
SPLcom/android/server/wifi/util/WifiPermissionsWrapper;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wifi/util/WifiPermissionsWrapper;->getCurrentUser()I
SPLcom/android/server/wm/-$$Lambda$01bPtngJg5AqEoOWfW3rWfV7MH4;-><init>()V
SPLcom/android/server/wm/-$$Lambda$01bPtngJg5AqEoOWfW3rWfV7MH4;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$1636dquQO0UvkFayOGf_gceB4iw;-><init>()V
SPLcom/android/server/wm/-$$Lambda$1636dquQO0UvkFayOGf_gceB4iw;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$3W4Y_XVQUddVKzLjibuHW7h0R1g;-><init>()V
SPLcom/android/server/wm/-$$Lambda$3W4Y_XVQUddVKzLjibuHW7h0R1g;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$6DEhn1zqxqV5_Ytb_NyzMW23Ano;-><init>()V
SPLcom/android/server/wm/-$$Lambda$ADNhW0r9Skcs9ezrOGURijI-lyQ;-><init>()V
SPLcom/android/server/wm/-$$Lambda$ADNhW0r9Skcs9ezrOGURijI-lyQ;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$ActivityStackSupervisor$28Zuzbi6usdgbDcOi8hrJg6nZO0;->run()V
SPLcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$-xFyZDUKMraVkermSJGXQdN3oJ4;->run()V
SPLcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$7Ia1bmRpPHHSNlbH8cuLw8dKG04;->run()V
SPLcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$BXul1K8BX6JEv_ff3NT76qpeZGQ;->run()V
SPLcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$iduseKQrjIWQYD0hJ8Q5DMmuSfE;->run()V
SPLcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$oP6xxIfnD4kb4JN7aSJU073ULR4;->run()V
SPLcom/android/server/wm/-$$Lambda$ActivityTaskManagerService$p4I6RZJqLXjaEjdISFyNzjAe4HE;->run()V
SPLcom/android/server/wm/-$$Lambda$AppTransitionController$ESsBJ2royCDDfelW3z7cgYH5q2I;-><init>()V
SPLcom/android/server/wm/-$$Lambda$AppTransitionController$j4jrKo6PKtYRjRfPVQMMiQB02jg;-><init>()V
SPLcom/android/server/wm/-$$Lambda$AppWindowToken$jUUD3GIacKfmiVanGs_Dyy3FFqI;-><init>()V
SPLcom/android/server/wm/-$$Lambda$AppWindowToken$jUUD3GIacKfmiVanGs_Dyy3FFqI;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$BoundsAnimationController$3-yWz6AXIW5r1KElGtHEgHZdi5Q;->run()V
SPLcom/android/server/wm/-$$Lambda$DZzr1xJVO2dSdamoKdlelCfv9o4;-><init>()V
SPLcom/android/server/wm/-$$Lambda$DZzr1xJVO2dSdamoKdlelCfv9o4;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$DisplayContent$0yxrqH9eGY2qTjH1u_BvaVrXCSA;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$DisplayContent$7uZtakUXzuXqF_Qht5Uq7LUvubI;->apply(Ljava/lang/Object;)Z
SPLcom/android/server/wm/-$$Lambda$DisplayContent$7voe_dEKk2BYMriCvPuvaznb9WQ;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$DisplayContent$GuCKVzKP141d6J0gfRAjKtuBJUU;-><init>()V
SPLcom/android/server/wm/-$$Lambda$DisplayContent$GuCKVzKP141d6J0gfRAjKtuBJUU;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$DisplayContent$NonAppWindowContainers$FI_O7m2qEDfIRZef3D32AxG-rcs;-><init>()V
SPLcom/android/server/wm/-$$Lambda$DisplayContent$NonAppWindowContainers$FI_O7m2qEDfIRZef3D32AxG-rcs;->test(Ljava/lang/Object;)Z
SPLcom/android/server/wm/-$$Lambda$DisplayContent$NonAppWindowContainers$nqCymC3xR9b3qaeohnnJJpSiajc;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
SPLcom/android/server/wm/-$$Lambda$DisplayContent$fiC19lMy-d_-rvza7hhOSw6bOM8;->compute(Ljava/lang/Object;I)Ljava/lang/Object;
SPLcom/android/server/wm/-$$Lambda$DisplayContent$hRKjZwmneu0T85LNNY6_Zcs4gKM;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$DisplayContent$qT01Aq6xt_ZOs86A1yDQe-qmPFQ;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$DisplayContent$qxt4izS31fb0LF2uo_OF9DMa7gc;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$DisplayPolicy$n40v5T_KP7EALj7NP3i_hv76V5o;->run()V
SPLcom/android/server/wm/-$$Lambda$DisplayPolicy$xlVRxCROc8UPmV4pH747oZzvS58;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$HLz_SQuxQoIiuaK5SB5xJ6FnoxY;-><init>()V
SPLcom/android/server/wm/-$$Lambda$HLz_SQuxQoIiuaK5SB5xJ6FnoxY;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$InsetsStateController$pXoYGy4X5aPw1QFi0iIWKiTMlDg;->apply(Ljava/lang/Object;)Ljava/lang/Object;
SPLcom/android/server/wm/-$$Lambda$InsetsStateController$sIYEJIR4ztgffCLMi5Z1RvdxyYs;-><init>()V
SPLcom/android/server/wm/-$$Lambda$InsetsStateController$sIYEJIR4ztgffCLMi5Z1RvdxyYs;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$LYW1ECaEajjYgarzgKdTZ4O1fi0;->run()V
SPLcom/android/server/wm/-$$Lambda$OPdXuZQLetMnocdH6XV32JbNQ3I;-><init>()V
SPLcom/android/server/wm/-$$Lambda$OuObUsm0bB9g5X0kIXYkBYHvodY;-><init>()V
SPLcom/android/server/wm/-$$Lambda$PersisterQueue$HOTPBvinkMOqT3zxV3gRm6Y9Wi4;-><init>()V
SPLcom/android/server/wm/-$$Lambda$RecentTasks$KPkDUQ9KJ-vmXlmV8HHAucQJJdQ;-><init>()V
SPLcom/android/server/wm/-$$Lambda$RootWindowContainer$Vvv8jzH2oSE9-eakZwTuKd5NpsU;-><init>()V
SPLcom/android/server/wm/-$$Lambda$RootWindowContainer$Vvv8jzH2oSE9-eakZwTuKd5NpsU;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$RootWindowContainer$vMW2dyMvZQ0PDhptvNKN5WXpK_w;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$RootWindowContainer$zN9AhOirpieCrP6YNeTmpaApULQ;-><init>()V
SPLcom/android/server/wm/-$$Lambda$RootWindowContainer$zN9AhOirpieCrP6YNeTmpaApULQ;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$RunningTasks$B8bQN-i7MO0XIePhmkVnejRGNp0;-><init>()V
SPLcom/android/server/wm/-$$Lambda$RunningTasks$B8bQN-i7MO0XIePhmkVnejRGNp0;->compare(Ljava/lang/Object;Ljava/lang/Object;)I
SPLcom/android/server/wm/-$$Lambda$StatusBarController$1$3FiQ0kybPCSlgcNJkCsNm5M12iA;->run()V
SPLcom/android/server/wm/-$$Lambda$StatusBarController$1$t71qcQIBSxRShk0Xohf1lk53bOw;->run()V
SPLcom/android/server/wm/-$$Lambda$StatusBarController$1$x4q7e0Eysf0ynMSdT1A-JN_ucuI;->run()V
SPLcom/android/server/wm/-$$Lambda$SurfaceAnimationRunner$xDyZdsMrcbp64p4BQmOGPvVnSWA;->run()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$0m_-qN9QkcgkoWun2Biw8le4l1Y;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$1ziXgnyLi0gQjqMGJAbSzs0-dmE;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$1ziXgnyLi0gQjqMGJAbSzs0-dmE;->accept(Landroid/app/ITaskStackListener;Landroid/os/Message;)V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$9ngbiJ2r3x2ASHwN59tUFO2-2BQ;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$Ge3jFevRwpndz6qRSLDXODq2VjE;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$Ge3jFevRwpndz6qRSLDXODq2VjE;->accept(Landroid/app/ITaskStackListener;Landroid/os/Message;)V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$M2NSB3SSVJR2Tu4vihNfsIL31s4;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$MS67FdGix7tWO0Od9imcaKVXL7I;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$NLoKy9SbVr1EJpEjznsKi7yAlpg;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$SAbrujQOZNUflKs1FAg2mBnjx3A;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$SAbrujQOZNUflKs1FAg2mBnjx3A;->accept(Landroid/app/ITaskStackListener;Landroid/os/Message;)V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$SByuGj5tpcCpjTH9lf5zHHv2gNM;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$ZLPZtiEvD_F4WUgH7BD4KPpdAWM;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$byMDuIFUN4cQ1lT9jVjMwLhaLDw;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$k0FXXC-HcWJhmtm6-Kruo6nGeXI;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$kss8MGli3T9b_Y-QDzR2cB843y8;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$ncM_yje7-m7HuiJvorBIH_C8Ou4;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$qONfw3ssOxjb_iMuO2oMzCbXfrg;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$wuBjs4dj7gB_MI4dIdt2gV2Osus;-><init>()V
SPLcom/android/server/wm/-$$Lambda$TaskChangeNotificationController$yaW9HlZsz3L55CTQ4b7y33IGo94;-><init>()V
SPLcom/android/server/wm/-$$Lambda$UB90fpYUkajpKCLGR93ZDlgDhyw;-><init>()V
SPLcom/android/server/wm/-$$Lambda$UB90fpYUkajpKCLGR93ZDlgDhyw;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$WallpaperController$6pruPGLeSJAwNl9vGfC87eso21w;->apply(Ljava/lang/Object;)Z
SPLcom/android/server/wm/-$$Lambda$WindowAnimator$U3Fu5_RzEyNo8Jt6zTb2ozdXiqM;->run()V
SPLcom/android/server/wm/-$$Lambda$WindowAnimator$ddXU8gK8rmDqri0OZVMNa3Y4GHk;->doFrame(J)V
SPLcom/android/server/wm/-$$Lambda$WindowManagerService$Ui3P_hFzUBaAtWwv4aQ-Lnn2NnQ;->run()V
SPLcom/android/server/wm/-$$Lambda$WindowManagerService$wGh8jzmWqrd_7ruovSXZoiIk1s0;->run()V
SPLcom/android/server/wm/-$$Lambda$WindowSurfacePlacer$4Hbamt-LFcbu8AoZBoOZN_LveKQ;->run()V
SPLcom/android/server/wm/-$$Lambda$WindowToken$tFLHn4S6WuSXW1gp1kvT_sp7WC0;-><init>(Lcom/android/server/wm/WindowToken;)V
SPLcom/android/server/wm/-$$Lambda$XZ-U3HlCFtHp_gydNmNMeRmQMCI;-><init>()V
SPLcom/android/server/wm/-$$Lambda$XZ-U3HlCFtHp_gydNmNMeRmQMCI;->make(Landroid/view/SurfaceSession;)Landroid/view/SurfaceControl$Builder;
SPLcom/android/server/wm/-$$Lambda$_jL5KNK44AQYPj1d8Hd3FYO0W-M;-><init>()V
SPLcom/android/server/wm/-$$Lambda$_jL5KNK44AQYPj1d8Hd3FYO0W-M;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$cJE-iQ28Rv-ThCcuht9wXeFzPgo;-><init>()V
SPLcom/android/server/wm/-$$Lambda$cJE-iQ28Rv-ThCcuht9wXeFzPgo;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$hBnABSAsqXWvQ0zKwHWE4BZ3Mc0;-><init>()V
SPLcom/android/server/wm/-$$Lambda$hBnABSAsqXWvQ0zKwHWE4BZ3Mc0;->make()Landroid/view/SurfaceControl$Transaction;
SPLcom/android/server/wm/-$$Lambda$hOONSPF2N4ZIr-bSc1utsg8aP-c;-><init>()V
SPLcom/android/server/wm/-$$Lambda$hOONSPF2N4ZIr-bSc1utsg8aP-c;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$hT1kyMEAhvB1-Uxr0DFAlnuU3cQ;-><init>()V
SPLcom/android/server/wm/-$$Lambda$hT1kyMEAhvB1-Uxr0DFAlnuU3cQ;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$iQxeP_PsHHArcPSFabJ3FXyPKNc;->run()V
SPLcom/android/server/wm/-$$Lambda$ibmQVLjaQW2x74Wk8TcE0Og2MJM;-><init>()V
SPLcom/android/server/wm/-$$Lambda$ibmQVLjaQW2x74Wk8TcE0Og2MJM;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$p4YgPONtKWpvUwa_nwQPB8_Za6I;-><init>()V
SPLcom/android/server/wm/-$$Lambda$p4YgPONtKWpvUwa_nwQPB8_Za6I;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$pOh7At8PXGw9JWVkfdjoNb7hsIg;-><init>()V
SPLcom/android/server/wm/-$$Lambda$pOh7At8PXGw9JWVkfdjoNb7hsIg;->accept(Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$swA_sUfSJdP8eC8AA9Iby3-SuOY;-><init>()V
SPLcom/android/server/wm/-$$Lambda$swA_sUfSJdP8eC8AA9Iby3-SuOY;->accept(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/wm/-$$Lambda$yACUZqn1Ak-GL14-Nu3kHUSaLX0;-><init>()V
SPLcom/android/server/wm/-$$Lambda$yIIsPVyXvnU3Rv8mcliit-gIpSs;->run()V
SPLcom/android/server/wm/-$$Lambda$zwLNi4Hz7werGBGptK8eYRpBWpw;-><init>()V
SPLcom/android/server/wm/-$$Lambda$zwLNi4Hz7werGBGptK8eYRpBWpw;->accept(Ljava/lang/Object;Ljava/lang/Object;)V
SPLcom/android/server/wm/ActivityDisplay;-><init>(Lcom/android/server/wm/RootActivityContainer;Landroid/view/Display;)V
SPLcom/android/server/wm/ActivityDisplay;->addChild(Lcom/android/server/wm/ActivityStack;I)V
SPLcom/android/server/wm/ActivityDisplay;->addStackReferenceIfNeeded(Lcom/android/server/wm/ActivityStack;)V
SPLcom/android/server/wm/ActivityDisplay;->allResumedActivitiesComplete()Z
SPLcom/android/server/wm/ActivityDisplay;->createDisplayContent()Lcom/android/server/wm/DisplayContent;
SPLcom/android/server/wm/ActivityDisplay;->createStack(IIZ)Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityDisplay;->createStackUnchecked(IIIZ)Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityDisplay;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V
SPLcom/android/server/wm/ActivityDisplay;->ensureActivitiesVisible(Lcom/android/server/wm/ActivityRecord;IZZ)V
SPLcom/android/server/wm/ActivityDisplay;->findTaskLocked(Lcom/android/server/wm/ActivityRecord;ZLcom/android/server/wm/RootActivityContainer$FindTaskResult;)V
SPLcom/android/server/wm/ActivityDisplay;->getChildAt(I)Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityDisplay;->getChildAt(I)Lcom/android/server/wm/ConfigurationContainer;
SPLcom/android/server/wm/ActivityDisplay;->getChildCount()I
SPLcom/android/server/wm/ActivityDisplay;->getFocusedStack()Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityDisplay;->getHomeStack()Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityDisplay;->getIndexOf(Lcom/android/server/wm/ActivityStack;)I
SPLcom/android/server/wm/ActivityDisplay;->getLastFocusedStack()Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityDisplay;->getNextStackId()I
SPLcom/android/server/wm/ActivityDisplay;->getOrCreateStack(IIZ)Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityDisplay;->getParent()Lcom/android/server/wm/ConfigurationContainer;
SPLcom/android/server/wm/ActivityDisplay;->getResumedActivity()Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/ActivityDisplay;->getSplitScreenPrimaryStack()Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityDisplay;->getStack(I)Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityDisplay;->getStack(II)Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityDisplay;->getTopInsertPosition(Lcom/android/server/wm/ActivityStack;I)I
SPLcom/android/server/wm/ActivityDisplay;->getTopStack()Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityDisplay;->hasSplitScreenPrimaryStack()Z
SPLcom/android/server/wm/ActivityDisplay;->isPrivate()Z
SPLcom/android/server/wm/ActivityDisplay;->isRemoved()Z
SPLcom/android/server/wm/ActivityDisplay;->isSingleTaskInstance()Z
SPLcom/android/server/wm/ActivityDisplay;->isSleeping()Z
SPLcom/android/server/wm/ActivityDisplay;->isTopNotPinnedStack(Lcom/android/server/wm/ActivityStack;)Z
SPLcom/android/server/wm/ActivityDisplay;->isTopStack(Lcom/android/server/wm/ActivityStack;)Z
SPLcom/android/server/wm/ActivityDisplay;->isWindowingModeSupported(IZZZZI)Z
SPLcom/android/server/wm/ActivityDisplay;->onConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/ActivityDisplay;->onDisplayChanged()V
SPLcom/android/server/wm/ActivityDisplay;->onInitializeOverrideConfiguration(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/ActivityDisplay;->onLockTaskPackagesUpdated()V
SPLcom/android/server/wm/ActivityDisplay;->onRequestedOverrideConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/ActivityDisplay;->onStackWindowingModeChanged(Lcom/android/server/wm/ActivityStack;)V
SPLcom/android/server/wm/ActivityDisplay;->pauseBackStacks(ZLcom/android/server/wm/ActivityRecord;Z)Z
SPLcom/android/server/wm/ActivityDisplay;->positionChildAt(Lcom/android/server/wm/ActivityStack;IZLjava/lang/String;)V
SPLcom/android/server/wm/ActivityDisplay;->positionChildAtTop(Lcom/android/server/wm/ActivityStack;ZLjava/lang/String;)V
SPLcom/android/server/wm/ActivityDisplay;->setFocusedApp(Lcom/android/server/wm/ActivityRecord;Z)V
SPLcom/android/server/wm/ActivityDisplay;->setIsSleeping(Z)V
SPLcom/android/server/wm/ActivityDisplay;->shouldSleep()Z
SPLcom/android/server/wm/ActivityDisplay;->topRunningActivity()Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/ActivityDisplay;->topRunningActivity(Z)Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/ActivityDisplay;->validateWindowingMode(ILcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/TaskRecord;I)I
SPLcom/android/server/wm/ActivityMetricsLogger;-><init>(Lcom/android/server/wm/ActivityStackSupervisor;Landroid/content/Context;Landroid/os/Looper;)V
SPLcom/android/server/wm/ActivityMetricsLogger;->logWindowState()V
SPLcom/android/server/wm/ActivityMetricsLogger;->notifyBindApplication(Landroid/content/pm/ApplicationInfo;)V
SPLcom/android/server/wm/ActivityMetricsLogger;->notifyTransitionStarting(Landroid/util/SparseIntArray;J)V
SPLcom/android/server/wm/ActivityMetricsLogger;->notifyVisibilityChanged(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityMetricsLogger;->notifyWindowsDrawn(IJ)Lcom/android/server/wm/ActivityMetricsLogger$WindowingModeTransitionInfoSnapshot;
SPLcom/android/server/wm/ActivityRecord$Token;-><init>(Lcom/android/server/wm/ActivityRecord;Landroid/content/Intent;)V
SPLcom/android/server/wm/ActivityRecord$Token;->toString()Ljava/lang/String;
SPLcom/android/server/wm/ActivityRecord;-><init>(Lcom/android/server/wm/ActivityTaskManagerService;Lcom/android/server/wm/WindowProcessController;IILjava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/content/pm/ActivityInfo;Landroid/content/res/Configuration;Lcom/android/server/wm/ActivityRecord;Ljava/lang/String;IZZLcom/android/server/wm/ActivityStackSupervisor;Landroid/app/ActivityOptions;Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityRecord;->activityStoppedLocked(Landroid/os/Bundle;Landroid/os/PersistableBundle;Ljava/lang/CharSequence;)V
SPLcom/android/server/wm/ActivityRecord;->addStartingWindow(Ljava/lang/String;ILandroid/content/res/CompatibilityInfo;Ljava/lang/CharSequence;IIIILandroid/os/IBinder;ZZZZZZ)Z
SPLcom/android/server/wm/ActivityRecord;->allowTaskSnapshot()Z
SPLcom/android/server/wm/ActivityRecord;->applyOptionsLocked()V
SPLcom/android/server/wm/ActivityRecord;->applyOptionsLocked(Landroid/app/ActivityOptions;Landroid/content/Intent;)V
SPLcom/android/server/wm/ActivityRecord;->attachedToProcess()Z
SPLcom/android/server/wm/ActivityRecord;->canResumeByCompat()Z
SPLcom/android/server/wm/ActivityRecord;->canShowWhenLocked()Z
SPLcom/android/server/wm/ActivityRecord;->checkEnterPictureInPictureState(Ljava/lang/String;Z)Z
SPLcom/android/server/wm/ActivityRecord;->completeResumeLocked()V
SPLcom/android/server/wm/ActivityRecord;->computeBounds(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/ActivityRecord;->continueLaunchTickingLocked()Z
SPLcom/android/server/wm/ActivityRecord;->createAppWindow(Lcom/android/server/wm/WindowManagerService;Landroid/view/IApplicationToken;ZLcom/android/server/wm/DisplayContent;JZZIIIIZZ)Lcom/android/server/wm/AppWindowToken;
SPLcom/android/server/wm/ActivityRecord;->createAppWindowToken()V
SPLcom/android/server/wm/ActivityRecord;->ensureActivityConfiguration(IZZ)Z
SPLcom/android/server/wm/ActivityRecord;->forTokenLocked(Landroid/os/IBinder;)Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/ActivityRecord;->getActivityStack()Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityRecord;->getChildCount()I
SPLcom/android/server/wm/ActivityRecord;->getConfigurationChanges(Landroid/content/res/Configuration;)I
SPLcom/android/server/wm/ActivityRecord;->getDisplay()Lcom/android/server/wm/ActivityDisplay;
SPLcom/android/server/wm/ActivityRecord;->getDisplayId()I
SPLcom/android/server/wm/ActivityRecord;->getParent()Lcom/android/server/wm/ConfigurationContainer;
SPLcom/android/server/wm/ActivityRecord;->getRequestedConfigurationOrientation()I
SPLcom/android/server/wm/ActivityRecord;->getUriPermissionsLocked()Lcom/android/server/uri/UriPermissionOwner;
SPLcom/android/server/wm/ActivityRecord;->handleAlreadyVisible()Z
SPLcom/android/server/wm/ActivityRecord;->inSizeCompatMode()Z
SPLcom/android/server/wm/ActivityRecord;->isHomeIntent(Landroid/content/Intent;)Z
SPLcom/android/server/wm/ActivityRecord;->isProcessRunning()Z
SPLcom/android/server/wm/ActivityRecord;->makeActiveIfNeeded(Lcom/android/server/wm/ActivityRecord;)Z
SPLcom/android/server/wm/ActivityRecord;->moveFocusableActivityToTop(Ljava/lang/String;)Z
SPLcom/android/server/wm/ActivityRecord;->okToShowLocked()Z
SPLcom/android/server/wm/ActivityRecord;->onConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/ActivityRecord;->onWindowsDrawn(ZJ)V
SPLcom/android/server/wm/ActivityRecord;->onWindowsGone()V
SPLcom/android/server/wm/ActivityRecord;->onWindowsVisible()V
SPLcom/android/server/wm/ActivityRecord;->resolveOverrideConfiguration(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/ActivityRecord;->resumeKeyDispatchingLocked()V
SPLcom/android/server/wm/ActivityRecord;->setActivityType(ZILandroid/content/Intent;Landroid/app/ActivityOptions;Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityRecord;->setLastReportedConfiguration(Landroid/util/MergedConfiguration;)V
SPLcom/android/server/wm/ActivityRecord;->setProcess(Lcom/android/server/wm/WindowProcessController;)V
SPLcom/android/server/wm/ActivityRecord;->setSleeping(ZZ)V
SPLcom/android/server/wm/ActivityRecord;->setState(Lcom/android/server/wm/ActivityStack$ActivityState;Ljava/lang/String;)V
SPLcom/android/server/wm/ActivityRecord;->setTask(Lcom/android/server/wm/TaskRecord;Z)V
SPLcom/android/server/wm/ActivityRecord;->setTaskDescription(Landroid/app/ActivityManager$TaskDescription;)V
SPLcom/android/server/wm/ActivityRecord;->setVisibility(Z)V
SPLcom/android/server/wm/ActivityRecord;->shouldBeVisible(Z)Z
SPLcom/android/server/wm/ActivityRecord;->shouldMakeActive(Lcom/android/server/wm/ActivityRecord;)Z
SPLcom/android/server/wm/ActivityRecord;->shouldResumeActivity(Lcom/android/server/wm/ActivityRecord;)Z
SPLcom/android/server/wm/ActivityRecord;->showStartingWindow(Lcom/android/server/wm/ActivityRecord;ZZ)V
SPLcom/android/server/wm/ActivityRecord;->showStartingWindow(Lcom/android/server/wm/ActivityRecord;ZZZ)V
SPLcom/android/server/wm/ActivityRecord;->startFreezingScreenLocked(Lcom/android/server/wm/WindowProcessController;I)V
SPLcom/android/server/wm/ActivityRecord;->startLaunchTickingLocked()V
SPLcom/android/server/wm/ActivityRecord;->toString()Ljava/lang/String;
SPLcom/android/server/wm/ActivityRecord;->updateOverrideConfiguration()V
SPLcom/android/server/wm/ActivityStack$ActivityState;-><init>(Ljava/lang/String;I)V
SPLcom/android/server/wm/ActivityStack$ActivityState;->values()[Lcom/android/server/wm/ActivityStack$ActivityState;
SPLcom/android/server/wm/ActivityStack;-><init>(Lcom/android/server/wm/ActivityDisplay;ILcom/android/server/wm/ActivityStackSupervisor;IIZ)V
SPLcom/android/server/wm/ActivityStack;->activityPausedLocked(Landroid/os/IBinder;Z)V
SPLcom/android/server/wm/ActivityStack;->addTask(Lcom/android/server/wm/TaskRecord;IZLjava/lang/String;)V
SPLcom/android/server/wm/ActivityStack;->addTask(Lcom/android/server/wm/TaskRecord;ZLjava/lang/String;)V
SPLcom/android/server/wm/ActivityStack;->addToStopping(Lcom/android/server/wm/ActivityRecord;ZZ)V
SPLcom/android/server/wm/ActivityStack;->adjustFocusedActivityStack(Lcom/android/server/wm/ActivityRecord;Ljava/lang/String;)V
SPLcom/android/server/wm/ActivityStack;->canEnterPipOnTaskSwitch(Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/TaskRecord;Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;)Z
SPLcom/android/server/wm/ActivityStack;->canShowWithInsecureKeyguard()Z
SPLcom/android/server/wm/ActivityStack;->cancelInitializingActivities()V
SPLcom/android/server/wm/ActivityStack;->checkKeyguardVisibility(Lcom/android/server/wm/ActivityRecord;ZZ)Z
SPLcom/android/server/wm/ActivityStack;->checkReadyForSleep()V
SPLcom/android/server/wm/ActivityStack;->completePauseLocked(ZLcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityStack;->continueUpdateBounds()V
SPLcom/android/server/wm/ActivityStack;->createTaskRecord(ILandroid/content/pm/ActivityInfo;Landroid/content/Intent;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ZLcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;)Lcom/android/server/wm/TaskRecord;
SPLcom/android/server/wm/ActivityStack;->createTaskStack(IZLandroid/graphics/Rect;)V
SPLcom/android/server/wm/ActivityStack;->dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;ZZLjava/lang/String;Z)Z
SPLcom/android/server/wm/ActivityStack;->dumpActivitiesLocked(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;ZZLjava/lang/String;Z)Z
SPLcom/android/server/wm/ActivityStack;->ensureActivitiesVisibleLocked(Lcom/android/server/wm/ActivityRecord;IZZ)V
SPLcom/android/server/wm/ActivityStack;->findTaskLocked(Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/RootActivityContainer$FindTaskResult;)V
SPLcom/android/server/wm/ActivityStack;->finishDisabledPackageActivitiesLocked(Ljava/lang/String;Ljava/util/Set;ZZI)Z
SPLcom/android/server/wm/ActivityStack;->getAdjustedPositionForTask(Lcom/android/server/wm/TaskRecord;ILcom/android/server/wm/ActivityRecord;)I
SPLcom/android/server/wm/ActivityStack;->getAllRunningVisibleActivitiesLocked(Ljava/util/ArrayList;)V
SPLcom/android/server/wm/ActivityStack;->getAllTasks()Ljava/util/ArrayList;
SPLcom/android/server/wm/ActivityStack;->getChildAt(I)Lcom/android/server/wm/ConfigurationContainer;
SPLcom/android/server/wm/ActivityStack;->getChildAt(I)Lcom/android/server/wm/TaskRecord;
SPLcom/android/server/wm/ActivityStack;->getChildCount()I
SPLcom/android/server/wm/ActivityStack;->getParent()Lcom/android/server/wm/ActivityDisplay;
SPLcom/android/server/wm/ActivityStack;->getParent()Lcom/android/server/wm/ConfigurationContainer;
SPLcom/android/server/wm/ActivityStack;->getResumedActivity()Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/ActivityStack;->getRunningTasks(Ljava/util/List;IIIZ)V
SPLcom/android/server/wm/ActivityStack;->getTaskStack()Lcom/android/server/wm/TaskStack;
SPLcom/android/server/wm/ActivityStack;->getTopActivity()Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/ActivityStack;->getTopDismissingKeyguardActivity()Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/ActivityStack;->getVisibility(Lcom/android/server/wm/ActivityRecord;)I
SPLcom/android/server/wm/ActivityStack;->getWindowContainerBounds(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/ActivityStack;->goToSleep()V
SPLcom/android/server/wm/ActivityStack;->goToSleepIfPossible(Z)Z
SPLcom/android/server/wm/ActivityStack;->handleAppDiedLocked(Lcom/android/server/wm/WindowProcessController;)Z
SPLcom/android/server/wm/ActivityStack;->isAttached()Z
SPLcom/android/server/wm/ActivityStack;->isCompatible(II)Z
SPLcom/android/server/wm/ActivityStack;->isFocusable()Z
SPLcom/android/server/wm/ActivityStack;->isFocusableAndVisible()Z
SPLcom/android/server/wm/ActivityStack;->isFocusedStackOnDisplay()Z
SPLcom/android/server/wm/ActivityStack;->isInStackLocked(Landroid/os/IBinder;)Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/ActivityStack;->isInStackLocked(Lcom/android/server/wm/ActivityRecord;)Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/ActivityStack;->isInStackLocked(Lcom/android/server/wm/TaskRecord;)Z
SPLcom/android/server/wm/ActivityStack;->isSingleTaskInstance()Z
SPLcom/android/server/wm/ActivityStack;->isStackTranslucent(Lcom/android/server/wm/ActivityRecord;)Z
SPLcom/android/server/wm/ActivityStack;->isTopStackOnDisplay()Z
SPLcom/android/server/wm/ActivityStack;->logStartActivity(ILcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/TaskRecord;)V
SPLcom/android/server/wm/ActivityStack;->makeInvisible(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityStack;->makeVisibleAndRestartIfNeeded(Lcom/android/server/wm/ActivityRecord;IZZLcom/android/server/wm/ActivityRecord;)Z
SPLcom/android/server/wm/ActivityStack;->minimalResumeActivityLocked(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityStack;->moveToFront(Ljava/lang/String;)V
SPLcom/android/server/wm/ActivityStack;->moveToFront(Ljava/lang/String;Lcom/android/server/wm/TaskRecord;)V
SPLcom/android/server/wm/ActivityStack;->notifyActivityDrawnLocked(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityStack;->numActivities()I
SPLcom/android/server/wm/ActivityStack;->onActivityAddedToStack(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityStack;->onActivityStateChanged(Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityStack$ActivityState;Ljava/lang/String;)V
SPLcom/android/server/wm/ActivityStack;->onConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/ActivityStack;->onLockTaskPackagesUpdated()V
SPLcom/android/server/wm/ActivityStack;->positionChildWindowContainerAtTop(Lcom/android/server/wm/TaskRecord;)V
SPLcom/android/server/wm/ActivityStack;->postAddTask(Lcom/android/server/wm/TaskRecord;Lcom/android/server/wm/ActivityStack;Z)V
SPLcom/android/server/wm/ActivityStack;->rankTaskLayers(I)I
SPLcom/android/server/wm/ActivityStack;->removeHistoryRecordsForAppLocked(Lcom/android/server/wm/WindowProcessController;)Z
SPLcom/android/server/wm/ActivityStack;->resumeTopActivityInnerLocked(Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;)Z
SPLcom/android/server/wm/ActivityStack;->resumeTopActivityUncheckedLocked(Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;)Z
SPLcom/android/server/wm/ActivityStack;->setParent(Lcom/android/server/wm/ActivityDisplay;)V
SPLcom/android/server/wm/ActivityStack;->setWindowingMode(IZZZZZ)V
SPLcom/android/server/wm/ActivityStack;->shouldBeVisible(Lcom/android/server/wm/ActivityRecord;)Z
SPLcom/android/server/wm/ActivityStack;->shouldSleepActivities()Z
SPLcom/android/server/wm/ActivityStack;->shouldSleepOrShutDownActivities()Z
SPLcom/android/server/wm/ActivityStack;->startActivityLocked(Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityRecord;ZZLandroid/app/ActivityOptions;)V
SPLcom/android/server/wm/ActivityStack;->startPausingLocked(ZZLcom/android/server/wm/ActivityRecord;Z)Z
SPLcom/android/server/wm/ActivityStack;->stopActivityLocked(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityStack;->taskForIdLocked(I)Lcom/android/server/wm/TaskRecord;
SPLcom/android/server/wm/ActivityStack;->toString()Ljava/lang/String;
SPLcom/android/server/wm/ActivityStack;->topActivityOccludesKeyguard()Z
SPLcom/android/server/wm/ActivityStack;->topRunningNonDelayedActivityLocked(Lcom/android/server/wm/ActivityRecord;)Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/ActivityStack;->updateLRUListLocked(Lcom/android/server/wm/ActivityRecord;)Z
SPLcom/android/server/wm/ActivityStackSupervisor$ActivityStackSupervisorHandler;->activityIdleInternal(Lcom/android/server/wm/ActivityRecord;Z)V
SPLcom/android/server/wm/ActivityStackSupervisor$ActivityStackSupervisorHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/wm/ActivityStackSupervisor;-><init>(Lcom/android/server/wm/ActivityTaskManagerService;Landroid/os/Looper;)V
SPLcom/android/server/wm/ActivityStackSupervisor;->activityIdleInternalLocked(Landroid/os/IBinder;ZZLandroid/content/res/Configuration;)Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/ActivityStackSupervisor;->activitySleptLocked(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityStackSupervisor;->beginDeferResume()V
SPLcom/android/server/wm/ActivityStackSupervisor;->canPlaceEntityOnDisplay(IIILandroid/content/pm/ActivityInfo;)Z
SPLcom/android/server/wm/ActivityStackSupervisor;->canUseActivityOptionsLaunchBounds(Landroid/app/ActivityOptions;)Z
SPLcom/android/server/wm/ActivityStackSupervisor;->checkFinishBootingLocked()Z
SPLcom/android/server/wm/ActivityStackSupervisor;->checkReadyForSleepLocked(Z)V
SPLcom/android/server/wm/ActivityStackSupervisor;->checkStartAnyActivityPermission(Landroid/content/Intent;Landroid/content/pm/ActivityInfo;Ljava/lang/String;IIILjava/lang/String;ZZLcom/android/server/wm/WindowProcessController;Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityStack;)Z
SPLcom/android/server/wm/ActivityStackSupervisor;->createRunningTasks()Lcom/android/server/wm/RunningTasks;
SPLcom/android/server/wm/ActivityStackSupervisor;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V
SPLcom/android/server/wm/ActivityStackSupervisor;->dumpHistoryList(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;ZZZLjava/lang/String;ZLjava/lang/String;Lcom/android/server/wm/TaskRecord;)Z
SPLcom/android/server/wm/ActivityStackSupervisor;->endDeferResume()V
SPLcom/android/server/wm/ActivityStackSupervisor;->getActivityMetricsLogger()Lcom/android/server/wm/ActivityMetricsLogger;
SPLcom/android/server/wm/ActivityStackSupervisor;->getKeyguardController()Lcom/android/server/wm/KeyguardController;
SPLcom/android/server/wm/ActivityStackSupervisor;->getLaunchParamsController()Lcom/android/server/wm/LaunchParamsController;
SPLcom/android/server/wm/ActivityStackSupervisor;->getNextTaskIdForUserLocked(I)I
SPLcom/android/server/wm/ActivityStackSupervisor;->goingToSleepLocked()V
SPLcom/android/server/wm/ActivityStackSupervisor;->handleNonResizableTaskIfNeeded(Lcom/android/server/wm/TaskRecord;IILcom/android/server/wm/ActivityStack;)V
SPLcom/android/server/wm/ActivityStackSupervisor;->handleNonResizableTaskIfNeeded(Lcom/android/server/wm/TaskRecord;IILcom/android/server/wm/ActivityStack;Z)V
SPLcom/android/server/wm/ActivityStackSupervisor;->initPowerManagement()V
SPLcom/android/server/wm/ActivityStackSupervisor;->initialize()V
SPLcom/android/server/wm/ActivityStackSupervisor;->isCallerAllowedToLaunchOnDisplay(IIILandroid/content/pm/ActivityInfo;)Z
SPLcom/android/server/wm/ActivityStackSupervisor;->isCurrentProfileLocked(I)Z
SPLcom/android/server/wm/ActivityStackSupervisor;->isStoppingNoHistoryActivity()Z
SPLcom/android/server/wm/ActivityStackSupervisor;->lambda$activityIdleInternalLocked$0$ActivityStackSupervisor()V
SPLcom/android/server/wm/ActivityStackSupervisor;->logIfTransactionTooLarge(Landroid/content/Intent;Landroid/os/Bundle;)V
SPLcom/android/server/wm/ActivityStackSupervisor;->logStackState()V
SPLcom/android/server/wm/ActivityStackSupervisor;->notifyAppTransitionDone()V
SPLcom/android/server/wm/ActivityStackSupervisor;->onRecentTaskAdded(Lcom/android/server/wm/TaskRecord;)V
SPLcom/android/server/wm/ActivityStackSupervisor;->onSystemReady()V
SPLcom/android/server/wm/ActivityStackSupervisor;->processStoppingActivitiesLocked(Lcom/android/server/wm/ActivityRecord;ZZ)Ljava/util/ArrayList;
SPLcom/android/server/wm/ActivityStackSupervisor;->readyToResume()Z
SPLcom/android/server/wm/ActivityStackSupervisor;->realStartActivityLocked(Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/WindowProcessController;ZZ)Z
SPLcom/android/server/wm/ActivityStackSupervisor;->removeSleepTimeouts()V
SPLcom/android/server/wm/ActivityStackSupervisor;->removeTimeoutsForActivityLocked(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityStackSupervisor;->reportActivityLaunchedLocked(ZLcom/android/server/wm/ActivityRecord;JI)V
SPLcom/android/server/wm/ActivityStackSupervisor;->reportActivityVisibleLocked(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityStackSupervisor;->reportResumedActivityLocked(Lcom/android/server/wm/ActivityRecord;)Z
SPLcom/android/server/wm/ActivityStackSupervisor;->reportWaitingActivityLaunchedIfNeeded(Lcom/android/server/wm/ActivityRecord;I)V
SPLcom/android/server/wm/ActivityStackSupervisor;->scheduleIdleTimeoutLocked(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityStackSupervisor;->sendWaitingVisibleReportLocked(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityStackSupervisor;->setLaunchSource(I)V
SPLcom/android/server/wm/ActivityStackSupervisor;->setRecentTasks(Lcom/android/server/wm/RecentTasks;)V
SPLcom/android/server/wm/ActivityStackSupervisor;->setWindowManager(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/ActivityStackSupervisor;->startSpecificActivityLocked(Lcom/android/server/wm/ActivityRecord;ZZ)V
SPLcom/android/server/wm/ActivityStackSupervisor;->updateHomeProcess(Lcom/android/server/wm/WindowProcessController;)V
SPLcom/android/server/wm/ActivityStartController;-><init>(Lcom/android/server/wm/ActivityTaskManagerService;Lcom/android/server/wm/ActivityStackSupervisor;Lcom/android/server/wm/ActivityStarter$Factory;)V
SPLcom/android/server/wm/ActivityStartController;->clearPendingActivityLaunches(Ljava/lang/String;)Z
SPLcom/android/server/wm/ActivityStartController;->doPendingActivityLaunches(Z)V
SPLcom/android/server/wm/ActivityStartController;->getPendingRemoteAnimationRegistry()Lcom/android/server/wm/PendingRemoteAnimationRegistry;
SPLcom/android/server/wm/ActivityStartController;->obtainStarter(Landroid/content/Intent;Ljava/lang/String;)Lcom/android/server/wm/ActivityStarter;
SPLcom/android/server/wm/ActivityStartController;->onExecutionComplete(Lcom/android/server/wm/ActivityStarter;)V
SPLcom/android/server/wm/ActivityStartController;->startHomeActivity(Landroid/content/Intent;Landroid/content/pm/ActivityInfo;Ljava/lang/String;I)V
SPLcom/android/server/wm/ActivityStartController;->startSetupActivity()V
SPLcom/android/server/wm/ActivityStartInterceptor;->intercept(Landroid/content/Intent;Landroid/content/pm/ResolveInfo;Landroid/content/pm/ActivityInfo;Ljava/lang/String;Lcom/android/server/wm/TaskRecord;IILandroid/app/ActivityOptions;)Z
SPLcom/android/server/wm/ActivityStartInterceptor;->interceptHarmfulAppIfNeeded()Z
SPLcom/android/server/wm/ActivityStartInterceptor;->interceptQuietProfileIfNeeded()Z
SPLcom/android/server/wm/ActivityStartInterceptor;->interceptSuspendedPackageIfNeeded()Z
SPLcom/android/server/wm/ActivityStartInterceptor;->interceptWithConfirmCredentialsIfNeeded(Landroid/content/pm/ActivityInfo;I)Landroid/content/Intent;
SPLcom/android/server/wm/ActivityStartInterceptor;->interceptWorkProfileChallengeIfNeeded()Z
SPLcom/android/server/wm/ActivityStartInterceptor;->setStates(IIIILjava/lang/String;)V
SPLcom/android/server/wm/ActivityStarter$DefaultFactory;->obtain()Lcom/android/server/wm/ActivityStarter;
SPLcom/android/server/wm/ActivityStarter$DefaultFactory;->recycle(Lcom/android/server/wm/ActivityStarter;)V
SPLcom/android/server/wm/ActivityStarter$DefaultFactory;->setController(Lcom/android/server/wm/ActivityStartController;)V
SPLcom/android/server/wm/ActivityStarter$Request;->reset()V
SPLcom/android/server/wm/ActivityStarter$Request;->set(Lcom/android/server/wm/ActivityStarter$Request;)V
SPLcom/android/server/wm/ActivityStarter;-><init>(Lcom/android/server/wm/ActivityStartController;Lcom/android/server/wm/ActivityTaskManagerService;Lcom/android/server/wm/ActivityStackSupervisor;Lcom/android/server/wm/ActivityStartInterceptor;)V
SPLcom/android/server/wm/ActivityStarter;->addOrReparentStartingActivity(Lcom/android/server/wm/TaskRecord;Ljava/lang/String;)V
SPLcom/android/server/wm/ActivityStarter;->adjustLaunchFlagsToDocumentMode(Lcom/android/server/wm/ActivityRecord;ZZI)I
SPLcom/android/server/wm/ActivityStarter;->computeLaunchingTaskFlags()V
SPLcom/android/server/wm/ActivityStarter;->computeSourceStack()V
SPLcom/android/server/wm/ActivityStarter;->computeStackFocus(Lcom/android/server/wm/ActivityRecord;ZILandroid/app/ActivityOptions;)Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityStarter;->execute()I
SPLcom/android/server/wm/ActivityStarter;->getLaunchStack(Lcom/android/server/wm/ActivityRecord;ILcom/android/server/wm/TaskRecord;Landroid/app/ActivityOptions;)Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityStarter;->getReusableIntentActivity()Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/ActivityStarter;->postStartActivityProcessing(Lcom/android/server/wm/ActivityRecord;ILcom/android/server/wm/ActivityStack;)V
SPLcom/android/server/wm/ActivityStarter;->reset(Z)V
SPLcom/android/server/wm/ActivityStarter;->sendNewTaskResultRequestIfNeeded()V
SPLcom/android/server/wm/ActivityStarter;->set(Lcom/android/server/wm/ActivityStarter;)V
SPLcom/android/server/wm/ActivityStarter;->setActivityInfo(Landroid/content/pm/ActivityInfo;)Lcom/android/server/wm/ActivityStarter;
SPLcom/android/server/wm/ActivityStarter;->setActivityOptions(Landroid/os/Bundle;)Lcom/android/server/wm/ActivityStarter;
SPLcom/android/server/wm/ActivityStarter;->setActivityOptions(Lcom/android/server/wm/SafeActivityOptions;)Lcom/android/server/wm/ActivityStarter;
SPLcom/android/server/wm/ActivityStarter;->setCallingUid(I)Lcom/android/server/wm/ActivityStarter;
SPLcom/android/server/wm/ActivityStarter;->setInitialState(Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;Lcom/android/server/wm/TaskRecord;ZILcom/android/server/wm/ActivityRecord;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;)V
SPLcom/android/server/wm/ActivityStarter;->setIntent(Landroid/content/Intent;)Lcom/android/server/wm/ActivityStarter;
SPLcom/android/server/wm/ActivityStarter;->setOutActivity([Lcom/android/server/wm/ActivityRecord;)Lcom/android/server/wm/ActivityStarter;
SPLcom/android/server/wm/ActivityStarter;->setReason(Ljava/lang/String;)Lcom/android/server/wm/ActivityStarter;
SPLcom/android/server/wm/ActivityStarter;->setTaskFromReuseOrCreateNewTask(Lcom/android/server/wm/TaskRecord;)I
SPLcom/android/server/wm/ActivityStarter;->shouldAbortBackgroundActivityStart(IILjava/lang/String;IILcom/android/server/wm/WindowProcessController;Lcom/android/server/am/PendingIntentRecord;ZLandroid/content/Intent;)Z
SPLcom/android/server/wm/ActivityStarter;->startActivity(Landroid/app/IApplicationThread;Landroid/content/Intent;Landroid/content/Intent;Ljava/lang/String;Landroid/content/pm/ActivityInfo;Landroid/content/pm/ResolveInfo;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;Landroid/os/IBinder;Ljava/lang/String;IIILjava/lang/String;IIILcom/android/server/wm/SafeActivityOptions;ZZ[Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/TaskRecord;Ljava/lang/String;ZLcom/android/server/am/PendingIntentRecord;Z)I
SPLcom/android/server/wm/ActivityStarter;->startActivity(Landroid/app/IApplicationThread;Landroid/content/Intent;Landroid/content/Intent;Ljava/lang/String;Landroid/content/pm/ActivityInfo;Landroid/content/pm/ResolveInfo;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;Landroid/os/IBinder;Ljava/lang/String;IIILjava/lang/String;IIILcom/android/server/wm/SafeActivityOptions;ZZ[Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/TaskRecord;ZLcom/android/server/am/PendingIntentRecord;Z)I
SPLcom/android/server/wm/ActivityStarter;->startActivity(Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityRecord;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;IZLandroid/app/ActivityOptions;Lcom/android/server/wm/TaskRecord;[Lcom/android/server/wm/ActivityRecord;)I
SPLcom/android/server/wm/ActivityStarter;->startActivityUnchecked(Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityRecord;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;IZLandroid/app/ActivityOptions;Lcom/android/server/wm/TaskRecord;[Lcom/android/server/wm/ActivityRecord;)I
SPLcom/android/server/wm/ActivityStarter;->updateBounds(Lcom/android/server/wm/TaskRecord;Landroid/graphics/Rect;)V
SPLcom/android/server/wm/ActivityTaskManagerService$FontScaleSettingObserver;-><init>(Lcom/android/server/wm/ActivityTaskManagerService;)V
SPLcom/android/server/wm/ActivityTaskManagerService$Lifecycle;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wm/ActivityTaskManagerService$Lifecycle;->onStart()V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->attachApplication(Lcom/android/server/wm/WindowProcessController;)Z
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->clearHeavyWeightProcessIfEquals(Lcom/android/server/wm/WindowProcessController;)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->compatibilityInfoForPackage(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/CompatibilityInfo;
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->dump(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;IZZLjava/lang/String;)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->dumpForProcesses(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;ZLjava/lang/String;IZZI)Z
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->enableScreenAfterBoot(Z)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->enforceCallerIsRecentsOrHasPermission(Ljava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->getHomeIntent()Landroid/content/Intent;
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->getHomeProcess()Lcom/android/server/wm/WindowProcessController;
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->getPreviousProcess()Lcom/android/server/wm/WindowProcessController;
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->getTopApp()Lcom/android/server/wm/WindowProcessController;
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->getTopProcessState()I
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->handleAppDied(Lcom/android/server/wm/WindowProcessController;ZLjava/lang/Runnable;)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->isFactoryTestProcess(Lcom/android/server/wm/WindowProcessController;)Z
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->isGetTasksAllowed(Ljava/lang/String;II)Z
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->isHeavyWeightProcess(Lcom/android/server/wm/WindowProcessController;)Z
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->isSleeping()Z
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->notifyActiveVoiceInteractionServiceChanged(Landroid/content/ComponentName;)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->notifyAppTransitionFinished()V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->notifyAppTransitionStarting(Landroid/util/SparseIntArray;J)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->notifyDockedStackMinimizedChanged(Z)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->notifyKeyguardTrustedChanged()V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onCleanUpApplicationRecord(Lcom/android/server/wm/WindowProcessController;)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onForceStopPackage(Ljava/lang/String;ZZI)Z
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onPackageUninstalled(Ljava/lang/String;)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onProcessAdded(Lcom/android/server/wm/WindowProcessController;)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onProcessMapped(ILcom/android/server/wm/WindowProcessController;)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onProcessRemoved(Ljava/lang/String;I)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onProcessUnMapped(I)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onUidActive(II)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onUidInactive(I)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->onUidProcStateChanged(II)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->preBindApplication(Lcom/android/server/wm/WindowProcessController;)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->rankTaskLayersIfNeeded()V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->registerScreenObserver(Lcom/android/server/wm/ActivityTaskManagerInternal$ScreenObserver;)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->removeRecentTasksByPackageName(Ljava/lang/String;I)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->resumeTopActivities(Z)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->setDeviceOwnerPackageName(Ljava/lang/String;)V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->showSystemReadyErrorDialogsIfNeeded()V
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->startHomeOnAllDisplays(ILjava/lang/String;)Z
SPLcom/android/server/wm/ActivityTaskManagerService$LocalService;->updateTopComponentForFactoryTest()V
SPLcom/android/server/wm/ActivityTaskManagerService;-><init>(Landroid/content/Context;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->acquireSleepToken(Ljava/lang/String;I)Lcom/android/server/wm/ActivityTaskManagerInternal$SleepToken;
SPLcom/android/server/wm/ActivityTaskManagerService;->activityIdle(Landroid/os/IBinder;Landroid/content/res/Configuration;Z)V
SPLcom/android/server/wm/ActivityTaskManagerService;->activityPaused(Landroid/os/IBinder;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->activityResumed(Landroid/os/IBinder;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->activitySlept(Landroid/os/IBinder;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->activityStopped(Landroid/os/IBinder;Landroid/os/Bundle;Landroid/os/PersistableBundle;Ljava/lang/CharSequence;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->applyUpdateLockStateLocked(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->applyUpdateVrModeLocked(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->checkAppSwitchAllowedLocked(IIIILjava/lang/String;)Z
SPLcom/android/server/wm/ActivityTaskManagerService;->checkGetTasksPermission(Ljava/lang/String;II)I
SPLcom/android/server/wm/ActivityTaskManagerService;->checkPermission(Ljava/lang/String;II)I
SPLcom/android/server/wm/ActivityTaskManagerService;->clearHeavyWeightProcessIfEquals(Lcom/android/server/wm/WindowProcessController;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->compatibilityInfoForPackageLocked(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/CompatibilityInfo;
SPLcom/android/server/wm/ActivityTaskManagerService;->createRecentTasks()Lcom/android/server/wm/RecentTasks;
SPLcom/android/server/wm/ActivityTaskManagerService;->createStackSupervisor()Lcom/android/server/wm/ActivityStackSupervisor;
SPLcom/android/server/wm/ActivityTaskManagerService;->dumpActivitiesLocked(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;IZZLjava/lang/String;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->dumpActivitiesLocked(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;IZZLjava/lang/String;Ljava/lang/String;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->finishRunningVoiceLocked()V
SPLcom/android/server/wm/ActivityTaskManagerService;->getActivityDisplayId(Landroid/os/IBinder;)I
SPLcom/android/server/wm/ActivityTaskManagerService;->getActivityOptions(Landroid/os/IBinder;)Landroid/os/Bundle;
SPLcom/android/server/wm/ActivityTaskManagerService;->getActivityStartController()Lcom/android/server/wm/ActivityStartController;
SPLcom/android/server/wm/ActivityTaskManagerService;->getAppInfoForUser(Landroid/content/pm/ApplicationInfo;I)Landroid/content/pm/ApplicationInfo;
SPLcom/android/server/wm/ActivityTaskManagerService;->getAppWarningsLocked()Lcom/android/server/wm/AppWarnings;
SPLcom/android/server/wm/ActivityTaskManagerService;->getFilteredTasks(III)Ljava/util/List;
SPLcom/android/server/wm/ActivityTaskManagerService;->getFocusedStackInfo()Landroid/app/ActivityManager$StackInfo;
SPLcom/android/server/wm/ActivityTaskManagerService;->getGlobalConfiguration()Landroid/content/res/Configuration;
SPLcom/android/server/wm/ActivityTaskManagerService;->getGlobalLock()Lcom/android/server/wm/WindowManagerGlobalLock;
SPLcom/android/server/wm/ActivityTaskManagerService;->getHomeIntent()Landroid/content/Intent;
SPLcom/android/server/wm/ActivityTaskManagerService;->getLifecycleManager()Lcom/android/server/wm/ClientLifecycleManager;
SPLcom/android/server/wm/ActivityTaskManagerService;->getLockTaskController()Lcom/android/server/wm/LockTaskController;
SPLcom/android/server/wm/ActivityTaskManagerService;->getLockTaskModeState()I
SPLcom/android/server/wm/ActivityTaskManagerService;->getPackageManager()Landroid/content/pm/IPackageManager;
SPLcom/android/server/wm/ActivityTaskManagerService;->getPackageManagerInternalLocked()Landroid/content/pm/PackageManagerInternal;
SPLcom/android/server/wm/ActivityTaskManagerService;->getProcessController(Ljava/lang/String;I)Lcom/android/server/wm/WindowProcessController;
SPLcom/android/server/wm/ActivityTaskManagerService;->getStackInfo(II)Landroid/app/ActivityManager$StackInfo;
SPLcom/android/server/wm/ActivityTaskManagerService;->getTaskChangeNotificationController()Lcom/android/server/wm/TaskChangeNotificationController;
SPLcom/android/server/wm/ActivityTaskManagerService;->getTasks(I)Ljava/util/List;
SPLcom/android/server/wm/ActivityTaskManagerService;->getTopDisplayFocusedStack()Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/ActivityTaskManagerService;->getUserManager()Lcom/android/server/pm/UserManagerService;
SPLcom/android/server/wm/ActivityTaskManagerService;->increaseConfigurationSeqLocked()I
SPLcom/android/server/wm/ActivityTaskManagerService;->initialize(Lcom/android/server/firewall/IntentFirewall;Lcom/android/server/am/PendingIntentController;Landroid/os/Looper;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->installSystemProviders()V
SPLcom/android/server/wm/ActivityTaskManagerService;->isBooted()Z
SPLcom/android/server/wm/ActivityTaskManagerService;->isBooting()Z
SPLcom/android/server/wm/ActivityTaskManagerService;->isGetTasksAllowed(Ljava/lang/String;II)Z
SPLcom/android/server/wm/ActivityTaskManagerService;->isSleepingLocked()Z
SPLcom/android/server/wm/ActivityTaskManagerService;->isSleepingOrShuttingDownLocked()Z
SPLcom/android/server/wm/ActivityTaskManagerService;->lambda$applyUpdateLockStateLocked$0$ActivityTaskManagerService(ZLcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->lambda$applyUpdateVrModeLocked$5$ActivityTaskManagerService(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->lambda$applyUpdateVrModeLocked$5(Lcom/android/server/wm/ActivityTaskManagerService;Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->lambda$notifyEnterAnimationComplete$1$ActivityTaskManagerService(Landroid/os/IBinder;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->lambda$notifyEnterAnimationComplete$1(Lcom/android/server/wm/ActivityTaskManagerService;Landroid/os/IBinder;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->lambda$postFinishBooting$6$ActivityTaskManagerService(ZZ)V
SPLcom/android/server/wm/ActivityTaskManagerService;->lambda$scheduleAppGcsLocked$7$ActivityTaskManagerService()V
SPLcom/android/server/wm/ActivityTaskManagerService;->lambda$setLockScreenShown$2$ActivityTaskManagerService(Z)V
SPLcom/android/server/wm/ActivityTaskManagerService;->notifyActivityDrawn(Landroid/os/IBinder;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->notifyEnterAnimationComplete(Landroid/os/IBinder;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->onActivityManagerInternalAdded()V
SPLcom/android/server/wm/ActivityTaskManagerService;->onInitPowerManagement()V
SPLcom/android/server/wm/ActivityTaskManagerService;->onStartActivitySetDidAppSwitch()V
SPLcom/android/server/wm/ActivityTaskManagerService;->onSystemReady()V
SPLcom/android/server/wm/ActivityTaskManagerService;->performDisplayOverrideConfigUpdate(Landroid/content/res/Configuration;ZI)I
SPLcom/android/server/wm/ActivityTaskManagerService;->postFinishBooting(ZZ)V
SPLcom/android/server/wm/ActivityTaskManagerService;->registerTaskStackListener(Landroid/app/ITaskStackListener;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->reportSizeConfigurations(Landroid/os/IBinder;[I[I[I)V
SPLcom/android/server/wm/ActivityTaskManagerService;->retrieveSettings(Landroid/content/ContentResolver;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->scheduleAppGcsLocked()V
SPLcom/android/server/wm/ActivityTaskManagerService;->setBooted(Z)V
SPLcom/android/server/wm/ActivityTaskManagerService;->setBooting(Z)V
SPLcom/android/server/wm/ActivityTaskManagerService;->setDeviceOwnerPackageName(Ljava/lang/String;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->setLockScreenShown(ZZ)V
SPLcom/android/server/wm/ActivityTaskManagerService;->setLockScreenShown(ZZ[I)V
SPLcom/android/server/wm/ActivityTaskManagerService;->setResumedActivityUncheckLocked(Lcom/android/server/wm/ActivityRecord;Ljava/lang/String;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->setTaskDescription(Landroid/os/IBinder;Landroid/app/ActivityManager$TaskDescription;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->setUsageStatsManager(Landroid/app/usage/UsageStatsManagerInternal;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->setWindowManager(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->updateActivityUsageStats(Lcom/android/server/wm/ActivityRecord;I)V
SPLcom/android/server/wm/ActivityTaskManagerService;->updateBatteryStats(Lcom/android/server/wm/ActivityRecord;Z)V
SPLcom/android/server/wm/ActivityTaskManagerService;->updateConfiguration(Landroid/content/res/Configuration;)Z
SPLcom/android/server/wm/ActivityTaskManagerService;->updateConfigurationLocked(Landroid/content/res/Configuration;Lcom/android/server/wm/ActivityRecord;Z)Z
SPLcom/android/server/wm/ActivityTaskManagerService;->updateConfigurationLocked(Landroid/content/res/Configuration;Lcom/android/server/wm/ActivityRecord;ZZ)Z
SPLcom/android/server/wm/ActivityTaskManagerService;->updateConfigurationLocked(Landroid/content/res/Configuration;Lcom/android/server/wm/ActivityRecord;ZZIZLcom/android/server/wm/ActivityTaskManagerService$UpdateConfigurationResult;)Z
SPLcom/android/server/wm/ActivityTaskManagerService;->updateCpuStats()V
SPLcom/android/server/wm/ActivityTaskManagerService;->updateDisplayOverrideConfiguration(Landroid/content/res/Configuration;I)Z
SPLcom/android/server/wm/ActivityTaskManagerService;->updateDisplayOverrideConfigurationLocked(Landroid/content/res/Configuration;Lcom/android/server/wm/ActivityRecord;ZI)Z
SPLcom/android/server/wm/ActivityTaskManagerService;->updateDisplayOverrideConfigurationLocked(Landroid/content/res/Configuration;Lcom/android/server/wm/ActivityRecord;ZILcom/android/server/wm/ActivityTaskManagerService$UpdateConfigurationResult;)Z
SPLcom/android/server/wm/ActivityTaskManagerService;->updateGlobalConfigurationLocked(Landroid/content/res/Configuration;ZZIZ)I
SPLcom/android/server/wm/ActivityTaskManagerService;->updateLockTaskFeatures(II)V
SPLcom/android/server/wm/ActivityTaskManagerService;->updateLockTaskPackages(I[Ljava/lang/String;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->updateShouldShowDialogsLocked(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/ActivityTaskManagerService;->updateSleepIfNeededLocked()V
SPLcom/android/server/wm/AppTransition;-><init>(Landroid/content/Context;Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/AppTransition;->clear()V
SPLcom/android/server/wm/AppTransition;->getAppTransition()I
SPLcom/android/server/wm/AppTransition;->getTransitFlags()I
SPLcom/android/server/wm/AppTransition;->goodToGo(ILcom/android/server/wm/AppWindowToken;Landroid/util/ArraySet;)I
SPLcom/android/server/wm/AppTransition;->isFetchingAppTransitionsSpecs()Z
SPLcom/android/server/wm/AppTransition;->isReady()Z
SPLcom/android/server/wm/AppTransition;->isRunning()Z
SPLcom/android/server/wm/AppTransition;->isTimeout()Z
SPLcom/android/server/wm/AppTransition;->isTransitionEqual(I)Z
SPLcom/android/server/wm/AppTransition;->isTransitionSet()Z
SPLcom/android/server/wm/AppTransition;->notifyAppTransitionFinishedLocked(Landroid/os/IBinder;)V
SPLcom/android/server/wm/AppTransition;->notifyAppTransitionStartingLocked(IJJJ)I
SPLcom/android/server/wm/AppTransition;->postAnimationCallback()V
SPLcom/android/server/wm/AppTransition;->prepareAppTransitionLocked(IZIZ)Z
SPLcom/android/server/wm/AppTransition;->registerListenerLocked(Lcom/android/server/wm/WindowManagerInternal$AppTransitionListener;)V
SPLcom/android/server/wm/AppTransition;->removeAppTransitionTimeoutCallbacks()V
SPLcom/android/server/wm/AppTransition;->setIdle()V
SPLcom/android/server/wm/AppTransition;->setLastAppTransition(ILcom/android/server/wm/AppWindowToken;Lcom/android/server/wm/AppWindowToken;Lcom/android/server/wm/AppWindowToken;)V
SPLcom/android/server/wm/AppTransition;->setReady()V
SPLcom/android/server/wm/AppTransition;->updateBooster()V
SPLcom/android/server/wm/AppTransitionController;->collectActivityTypes(Landroid/util/ArraySet;Landroid/util/ArraySet;Landroid/util/ArraySet;)Landroid/util/ArraySet;
SPLcom/android/server/wm/AppTransitionController;->findAnimLayoutParamsToken(ILandroid/util/ArraySet;)Lcom/android/server/wm/AppWindowToken;
SPLcom/android/server/wm/AppTransitionController;->getTopApp(Landroid/util/ArraySet;Z)Lcom/android/server/wm/AppWindowToken;
SPLcom/android/server/wm/AppTransitionController;->handleAppTransitionReady()V
SPLcom/android/server/wm/AppTransitionController;->handleChangingApps(ILandroid/view/WindowManager$LayoutParams;Z)V
SPLcom/android/server/wm/AppTransitionController;->handleClosingApps(ILandroid/view/WindowManager$LayoutParams;Z)V
SPLcom/android/server/wm/AppTransitionController;->handleNonAppWindowsInTransition(II)V
SPLcom/android/server/wm/AppTransitionController;->handleOpeningApps(ILandroid/view/WindowManager$LayoutParams;Z)V
SPLcom/android/server/wm/AppTransitionController;->lookForHighestTokenWithFilter(Landroid/util/ArraySet;Landroid/util/ArraySet;Landroid/util/ArraySet;Ljava/util/function/Predicate;)Lcom/android/server/wm/AppWindowToken;
SPLcom/android/server/wm/AppTransitionController;->maybeUpdateTransitToTranslucentAnim(I)I
SPLcom/android/server/wm/AppTransitionController;->maybeUpdateTransitToWallpaper(IZZ)I
SPLcom/android/server/wm/AppTransitionController;->transitionGoodToGo(Landroid/util/ArraySet;Landroid/util/SparseIntArray;)Z
SPLcom/android/server/wm/AppWarnings$UiHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/wm/AppWarnings;-><init>(Lcom/android/server/wm/ActivityTaskManagerService;Landroid/content/Context;Landroid/os/Handler;Landroid/os/Handler;Ljava/io/File;)V
SPLcom/android/server/wm/AppWarnings;->hideDialogsForPackageUiThread(Ljava/lang/String;)V
SPLcom/android/server/wm/AppWarnings;->onDensityChanged()V
SPLcom/android/server/wm/AppWarnings;->onPackageUninstalled(Ljava/lang/String;)V
SPLcom/android/server/wm/AppWarnings;->onStartActivity(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/AppWarnings;->readConfigFromFileAmsThread()V
SPLcom/android/server/wm/AppWarnings;->removePackageAndHideDialogs(Ljava/lang/String;)V
SPLcom/android/server/wm/AppWarnings;->showDeprecatedTargetDialogIfNeeded(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/AppWarnings;->showUnsupportedCompileSdkDialogIfNeeded(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/AppWarnings;->showUnsupportedDisplaySizeDialogIfNeeded(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/AppWindowToken;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/view/IApplicationToken;Landroid/content/ComponentName;ZLcom/android/server/wm/DisplayContent;JZZIIIIZZLcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/AppWindowToken;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/view/IApplicationToken;Landroid/content/ComponentName;ZLcom/android/server/wm/DisplayContent;Z)V
SPLcom/android/server/wm/AppWindowToken;->addStartingWindow(Ljava/lang/String;ILandroid/content/res/CompatibilityInfo;Ljava/lang/CharSequence;IIIILandroid/os/IBinder;ZZZZZZ)Z
SPLcom/android/server/wm/AppWindowToken;->addWindow(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/AppWindowToken;->allDrawnStatesConsidered()Z
SPLcom/android/server/wm/AppWindowToken;->asAppWindowToken()Lcom/android/server/wm/AppWindowToken;
SPLcom/android/server/wm/AppWindowToken;->canShowWindows()Z
SPLcom/android/server/wm/AppWindowToken;->canTurnScreenOn()Z
SPLcom/android/server/wm/AppWindowToken;->checkAppWindowsReadyToShow()V
SPLcom/android/server/wm/AppWindowToken;->checkCompleteDeferredRemoval()Z
SPLcom/android/server/wm/AppWindowToken;->checkKeyguardFlagsChanged()V
SPLcom/android/server/wm/AppWindowToken;->clearAllDrawn()V
SPLcom/android/server/wm/AppWindowToken;->commitVisibility(Landroid/view/WindowManager$LayoutParams;ZIZZ)Z
SPLcom/android/server/wm/AppWindowToken;->containsDismissKeyguardWindow()Z
SPLcom/android/server/wm/AppWindowToken;->containsShowWhenLockedWindow()Z
SPLcom/android/server/wm/AppWindowToken;->destroySurfaces()V
SPLcom/android/server/wm/AppWindowToken;->destroySurfaces(Z)V
SPLcom/android/server/wm/AppWindowToken;->findMainWindow()Lcom/android/server/wm/WindowState;
SPLcom/android/server/wm/AppWindowToken;->findMainWindow(Z)Lcom/android/server/wm/WindowState;
SPLcom/android/server/wm/AppWindowToken;->getBounds()Landroid/graphics/Rect;
SPLcom/android/server/wm/AppWindowToken;->getDisplayedBounds()Landroid/graphics/Rect;
SPLcom/android/server/wm/AppWindowToken;->getOrientationIgnoreVisibility()I
SPLcom/android/server/wm/AppWindowToken;->getResolvedOverrideBounds()Landroid/graphics/Rect;
SPLcom/android/server/wm/AppWindowToken;->getStack()Lcom/android/server/wm/TaskStack;
SPLcom/android/server/wm/AppWindowToken;->inSizeCompatMode()Z
SPLcom/android/server/wm/AppWindowToken;->isAppAnimating()Z
SPLcom/android/server/wm/AppWindowToken;->isClientHidden()Z
SPLcom/android/server/wm/AppWindowToken;->isFreezingScreen()Z
SPLcom/android/server/wm/AppWindowToken;->isLetterboxOverlappingWith(Landroid/graphics/Rect;)Z
SPLcom/android/server/wm/AppWindowToken;->isRelaunching()Z
SPLcom/android/server/wm/AppWindowToken;->isSelfAnimating()Z
SPLcom/android/server/wm/AppWindowToken;->isVisible()Z
SPLcom/android/server/wm/AppWindowToken;->isWaitingForTransitionStart()Z
SPLcom/android/server/wm/AppWindowToken;->layoutLetterbox(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/AppWindowToken;->matchParentBounds()Z
SPLcom/android/server/wm/AppWindowToken;->needsZBoost()Z
SPLcom/android/server/wm/AppWindowToken;->notifyAppStopped()V
SPLcom/android/server/wm/AppWindowToken;->onAnimationFinished()V
SPLcom/android/server/wm/AppWindowToken;->onAppTransitionDone()V
SPLcom/android/server/wm/AppWindowToken;->onConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/AppWindowToken;->onDisplayChanged(Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/AppWindowToken;->onFirstWindowDrawn(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowStateAnimator;)V
SPLcom/android/server/wm/AppWindowToken;->onParentChanged()V
SPLcom/android/server/wm/AppWindowToken;->prepareSurfaces()V
SPLcom/android/server/wm/AppWindowToken;->removeDeadWindows()V
SPLcom/android/server/wm/AppWindowToken;->removeReplacedWindowIfNeeded(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/AppWindowToken;->removeStartingWindow()V
SPLcom/android/server/wm/AppWindowToken;->requestUpdateWallpaperIfNeeded()V
SPLcom/android/server/wm/AppWindowToken;->setAppLayoutChanges(ILjava/lang/String;)V
SPLcom/android/server/wm/AppWindowToken;->setClientHidden(Z)V
SPLcom/android/server/wm/AppWindowToken;->setHidden(Z)V
SPLcom/android/server/wm/AppWindowToken;->setVisibility(ZZ)V
SPLcom/android/server/wm/AppWindowToken;->setWillCloseOrEnterPip(Z)V
SPLcom/android/server/wm/AppWindowToken;->shouldStartChangeTransition(II)Z
SPLcom/android/server/wm/AppWindowToken;->showAllWindowsLocked()V
SPLcom/android/server/wm/AppWindowToken;->stopFreezingScreen(ZZ)V
SPLcom/android/server/wm/AppWindowToken;->toString()Ljava/lang/String;
SPLcom/android/server/wm/AppWindowToken;->transferStartingWindowFromHiddenAboveTokenIfNeeded()V
SPLcom/android/server/wm/AppWindowToken;->updateAllDrawn()V
SPLcom/android/server/wm/AppWindowToken;->updateDrawnWindowStates(Lcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/AppWindowToken;->updateLetterboxSurface(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/AppWindowToken;->updateReportedVisibilityLocked()V
SPLcom/android/server/wm/AppWindowToken;->windowsAreFocusable()Z
SPLcom/android/server/wm/BarController$BarHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/wm/BarController;-><init>(Ljava/lang/String;IIIIII)V
SPLcom/android/server/wm/BarController;->applyTranslucentFlagLw(Lcom/android/server/wm/WindowState;II)I
SPLcom/android/server/wm/BarController;->checkHiddenLw()Z
SPLcom/android/server/wm/BarController;->computeStateLw(ZZLcom/android/server/wm/WindowState;Z)I
SPLcom/android/server/wm/BarController;->getStatusBarInternal()Lcom/android/server/statusbar/StatusBarManagerInternal;
SPLcom/android/server/wm/BarController;->isTransientShowRequested()Z
SPLcom/android/server/wm/BarController;->isTransientShowing()Z
SPLcom/android/server/wm/BarController;->isTransparentAllowed(Lcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/BarController;->setBarShowingLw(Z)Z
SPLcom/android/server/wm/BarController;->setContentFrame(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/BarController;->setOnBarVisibilityChangedListener(Lcom/android/server/wm/BarController$OnBarVisibilityChangedListener;Z)V
SPLcom/android/server/wm/BarController;->setShowTransparent(Z)V
SPLcom/android/server/wm/BarController;->setWindow(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/BarController;->skipAnimation()Z
SPLcom/android/server/wm/BarController;->updateVisibilityLw(ZII)I
SPLcom/android/server/wm/BarController;->wasRecentlyTranslucent()Z
SPLcom/android/server/wm/BoundsAnimationController$AppTransitionNotifier;->onAppTransitionFinishedLocked(Landroid/os/IBinder;)V
SPLcom/android/server/wm/BoundsAnimationController;-><init>(Landroid/content/Context;Lcom/android/server/wm/AppTransition;Landroid/os/Handler;Landroid/animation/AnimationHandler;)V
SPLcom/android/server/wm/BoundsAnimationController;->lambda$new$0$BoundsAnimationController(Landroid/animation/AnimationHandler;)V
SPLcom/android/server/wm/ClientLifecycleManager;->scheduleTransaction(Landroid/app/IApplicationThread;Landroid/app/servertransaction/ClientTransactionItem;)V
SPLcom/android/server/wm/ClientLifecycleManager;->scheduleTransaction(Landroid/app/IApplicationThread;Landroid/os/IBinder;Landroid/app/servertransaction/ActivityLifecycleItem;)V
SPLcom/android/server/wm/ClientLifecycleManager;->scheduleTransaction(Landroid/app/servertransaction/ClientTransaction;)V
SPLcom/android/server/wm/CompatModePackages;-><init>(Lcom/android/server/wm/ActivityTaskManagerService;Ljava/io/File;Landroid/os/Handler;)V
SPLcom/android/server/wm/ConfigurationContainer;-><init>()V
SPLcom/android/server/wm/ConfigurationContainer;->diffRequestedOverrideBounds(Landroid/graphics/Rect;)I
SPLcom/android/server/wm/ConfigurationContainer;->equivalentBounds(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z
SPLcom/android/server/wm/ConfigurationContainer;->equivalentRequestedOverrideBounds(Landroid/graphics/Rect;)Z
SPLcom/android/server/wm/ConfigurationContainer;->getBounds(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/ConfigurationContainer;->getName()Ljava/lang/String;
SPLcom/android/server/wm/ConfigurationContainer;->getRequestedOverrideWindowingMode()I
SPLcom/android/server/wm/ConfigurationContainer;->getResolvedOverrideConfiguration()Landroid/content/res/Configuration;
SPLcom/android/server/wm/ConfigurationContainer;->inFreeformWindowingMode()Z
SPLcom/android/server/wm/ConfigurationContainer;->inMultiWindowMode()Z
SPLcom/android/server/wm/ConfigurationContainer;->inSplitScreenSecondaryWindowingMode()Z
SPLcom/android/server/wm/ConfigurationContainer;->inSplitScreenWindowingMode()Z
SPLcom/android/server/wm/ConfigurationContainer;->isActivityTypeAssistant()Z
SPLcom/android/server/wm/ConfigurationContainer;->isActivityTypeHome()Z
SPLcom/android/server/wm/ConfigurationContainer;->isActivityTypeRecents()Z
SPLcom/android/server/wm/ConfigurationContainer;->isActivityTypeStandard()Z
SPLcom/android/server/wm/ConfigurationContainer;->isActivityTypeStandardOrUndefined()Z
SPLcom/android/server/wm/ConfigurationContainer;->isAlwaysOnTop()Z
SPLcom/android/server/wm/ConfigurationContainer;->isCompatible(II)Z
SPLcom/android/server/wm/ConfigurationContainer;->onConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/ConfigurationContainer;->onMergedOverrideConfigurationChanged()V
SPLcom/android/server/wm/ConfigurationContainer;->onRequestedOverrideConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/ConfigurationContainer;->registerConfigurationChangeListener(Lcom/android/server/wm/ConfigurationContainerListener;)V
SPLcom/android/server/wm/ConfigurationContainer;->resolveOverrideConfiguration(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/ConfigurationContainer;->setActivityType(I)V
SPLcom/android/server/wm/ConfigurationContainer;->setBounds(IIII)I
SPLcom/android/server/wm/ConfigurationContainer;->setBounds(Landroid/graphics/Rect;)I
SPLcom/android/server/wm/DisplayContent$AboveAppWindowContainers;->assignChildLayers(Landroid/view/SurfaceControl$Transaction;)V
SPLcom/android/server/wm/DisplayContent$AboveAppWindowContainers;->assignChildLayers(Landroid/view/SurfaceControl$Transaction;Lcom/android/server/wm/WindowContainer;)V
SPLcom/android/server/wm/DisplayContent$AboveAppWindowContainers;->makeChildSurface(Lcom/android/server/wm/WindowContainer;)Landroid/view/SurfaceControl$Builder;
SPLcom/android/server/wm/DisplayContent$NonAppWindowContainers;-><init>(Lcom/android/server/wm/DisplayContent;Ljava/lang/String;Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/DisplayContent$NonAppWindowContainers;->addChild(Lcom/android/server/wm/WindowToken;)V
SPLcom/android/server/wm/DisplayContent$NonAppWindowContainers;->getName()Ljava/lang/String;
SPLcom/android/server/wm/DisplayContent$NonAppWindowContainers;->getOrientation()I
SPLcom/android/server/wm/DisplayContent$NonAppWindowContainers;->lambda$new$0$DisplayContent$NonAppWindowContainers(Lcom/android/server/wm/WindowToken;Lcom/android/server/wm/WindowToken;)I
SPLcom/android/server/wm/DisplayContent$NonAppWindowContainers;->prepareSurfaces()V
SPLcom/android/server/wm/DisplayContent$TaskStackContainers;->addStackReferenceIfNeeded(Lcom/android/server/wm/TaskStack;)V
SPLcom/android/server/wm/DisplayContent$TaskStackContainers;->assignChildLayers(Landroid/view/SurfaceControl$Transaction;)V
SPLcom/android/server/wm/DisplayContent$TaskStackContainers;->assignStackOrdering(Landroid/view/SurfaceControl$Transaction;)V
SPLcom/android/server/wm/DisplayContent$TaskStackContainers;->findPositionForStack(ILcom/android/server/wm/TaskStack;Z)I
SPLcom/android/server/wm/DisplayContent$TaskStackContainers;->getStack(II)Lcom/android/server/wm/TaskStack;
SPLcom/android/server/wm/DisplayContent$TaskStackContainers;->getTopStack()Lcom/android/server/wm/TaskStack;
SPLcom/android/server/wm/DisplayContent$TaskStackContainers;->onParentChanged()V
SPLcom/android/server/wm/DisplayContent$TaskStackContainers;->positionChildAt(ILcom/android/server/wm/TaskStack;Z)V
SPLcom/android/server/wm/DisplayContent$TaskStackContainers;->positionChildAt(ILcom/android/server/wm/WindowContainer;Z)V
SPLcom/android/server/wm/DisplayContent$TaskStackContainers;->removeExistingAppTokensIfPossible()V
SPLcom/android/server/wm/DisplayContent$TaskStackContainers;->setExitingTokensHasVisible(Z)V
SPLcom/android/server/wm/DisplayContent;-><init>(Landroid/view/Display;Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/ActivityDisplay;)V
SPLcom/android/server/wm/DisplayContent;->addWindowToken(Landroid/os/IBinder;Lcom/android/server/wm/WindowToken;)V
SPLcom/android/server/wm/DisplayContent;->adjustDisplaySizeRanges(Landroid/view/DisplayInfo;IIII)V
SPLcom/android/server/wm/DisplayContent;->adjustForImeIfNeeded()V
SPLcom/android/server/wm/DisplayContent;->amendWindowTapExcludeRegion(Landroid/graphics/Region;)V
SPLcom/android/server/wm/DisplayContent;->applySurfaceChangesTransaction(Z)V
SPLcom/android/server/wm/DisplayContent;->assignChildLayers(Landroid/view/SurfaceControl$Transaction;)V
SPLcom/android/server/wm/DisplayContent;->assignWindowLayers(Z)V
SPLcom/android/server/wm/DisplayContent;->calculateBounds(Landroid/view/DisplayInfo;Landroid/graphics/Rect;)V
SPLcom/android/server/wm/DisplayContent;->calculateDisplayCutoutForRotation(I)Lcom/android/server/wm/utils/WmDisplayCutout;
SPLcom/android/server/wm/DisplayContent;->calculateDisplayCutoutForRotationUncached(Landroid/view/DisplayCutout;I)Lcom/android/server/wm/utils/WmDisplayCutout;
SPLcom/android/server/wm/DisplayContent;->checkCompleteDeferredRemoval()Z
SPLcom/android/server/wm/DisplayContent;->computeCompatSmallestWidth(ZIIILandroid/view/DisplayCutout;)I
SPLcom/android/server/wm/DisplayContent;->computeImeTarget(Z)Lcom/android/server/wm/WindowState;
SPLcom/android/server/wm/DisplayContent;->computeImeTargetIfNeeded(Lcom/android/server/wm/AppWindowToken;)V
SPLcom/android/server/wm/DisplayContent;->computeScreenConfiguration(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/DisplayContent;->computeSizeRangesAndScreenLayout(Landroid/view/DisplayInfo;ZIIIFLandroid/content/res/Configuration;)V
SPLcom/android/server/wm/DisplayContent;->configureDisplayPolicy()V
SPLcom/android/server/wm/DisplayContent;->executeAppTransition()V
SPLcom/android/server/wm/DisplayContent;->findFocusedWindow()Lcom/android/server/wm/WindowState;
SPLcom/android/server/wm/DisplayContent;->findFocusedWindowIfNeeded()Lcom/android/server/wm/WindowState;
SPLcom/android/server/wm/DisplayContent;->getAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;
SPLcom/android/server/wm/DisplayContent;->getBounds(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/DisplayContent;->getDisplay()Landroid/view/Display;
SPLcom/android/server/wm/DisplayContent;->getDisplayInfo()Landroid/view/DisplayInfo;
SPLcom/android/server/wm/DisplayContent;->getDisplayMetrics()Landroid/util/DisplayMetrics;
SPLcom/android/server/wm/DisplayContent;->getDisplayRotation()Lcom/android/server/wm/DisplayRotation;
SPLcom/android/server/wm/DisplayContent;->getDockedDividerController()Lcom/android/server/wm/DockedStackDividerController;
SPLcom/android/server/wm/DisplayContent;->getInputMonitor()Lcom/android/server/wm/InputMonitor;
SPLcom/android/server/wm/DisplayContent;->getInsetsStateController()Lcom/android/server/wm/InsetsStateController;
SPLcom/android/server/wm/DisplayContent;->getLastHasContent()Z
SPLcom/android/server/wm/DisplayContent;->getMetricsLogger()Lcom/android/internal/logging/MetricsLogger;
SPLcom/android/server/wm/DisplayContent;->getNaturalOrientation()I
SPLcom/android/server/wm/DisplayContent;->getNeedsMenu(Lcom/android/server/wm/WindowState;Lcom/android/server/policy/WindowManagerPolicy$WindowState;)Z
SPLcom/android/server/wm/DisplayContent;->getOrientation()I
SPLcom/android/server/wm/DisplayContent;->getPinnedStack()Lcom/android/server/wm/TaskStack;
SPLcom/android/server/wm/DisplayContent;->getPinnedStackController()Lcom/android/server/wm/PinnedStackController;
SPLcom/android/server/wm/DisplayContent;->getRotation()I
SPLcom/android/server/wm/DisplayContent;->getSession()Landroid/view/SurfaceSession;
SPLcom/android/server/wm/DisplayContent;->getSplitScreenPrimaryStack()Lcom/android/server/wm/TaskStack;
SPLcom/android/server/wm/DisplayContent;->getSplitScreenPrimaryStackIgnoringVisibility()Lcom/android/server/wm/TaskStack;
SPLcom/android/server/wm/DisplayContent;->getStack(II)Lcom/android/server/wm/TaskStack;
SPLcom/android/server/wm/DisplayContent;->getStacks()Lcom/android/server/wm/WindowList;
SPLcom/android/server/wm/DisplayContent;->getTopStack()Lcom/android/server/wm/TaskStack;
SPLcom/android/server/wm/DisplayContent;->getTopStackInWindowingMode(I)Lcom/android/server/wm/TaskStack;
SPLcom/android/server/wm/DisplayContent;->getWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/WindowToken;
SPLcom/android/server/wm/DisplayContent;->handleAnimatingStoppedAndTransition()V
SPLcom/android/server/wm/DisplayContent;->handlesOrientationChangeFromDescendant()Z
SPLcom/android/server/wm/DisplayContent;->hasAccess(I)Z
SPLcom/android/server/wm/DisplayContent;->initializeDisplayBaseInfo()V
SPLcom/android/server/wm/DisplayContent;->isInputMethodClientFocus(II)Z
SPLcom/android/server/wm/DisplayContent;->isLayoutNeeded()Z
SPLcom/android/server/wm/DisplayContent;->isNextTransitionForward()Z
SPLcom/android/server/wm/DisplayContent;->isReady()Z
SPLcom/android/server/wm/DisplayContent;->isStackVisible(I)Z
SPLcom/android/server/wm/DisplayContent;->lambda$new$0$DisplayContent(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/DisplayContent;->lambda$new$1(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/DisplayContent;->lambda$new$2$DisplayContent(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/DisplayContent;->lambda$new$2(Lcom/android/server/wm/DisplayContent;Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/DisplayContent;->lambda$new$3$DisplayContent(Lcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/DisplayContent;->lambda$new$3(Lcom/android/server/wm/DisplayContent;Lcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/DisplayContent;->lambda$new$4$DisplayContent(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/DisplayContent;->lambda$new$4(Lcom/android/server/wm/DisplayContent;Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/DisplayContent;->lambda$new$5$DisplayContent(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/DisplayContent;->lambda$new$5(Lcom/android/server/wm/DisplayContent;Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/DisplayContent;->lambda$new$8$DisplayContent(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/DisplayContent;->lambda$new$8(Lcom/android/server/wm/DisplayContent;Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/DisplayContent;->layoutAndAssignWindowLayersIfNeeded()V
SPLcom/android/server/wm/DisplayContent;->makeChildSurface(Lcom/android/server/wm/WindowContainer;)Landroid/view/SurfaceControl$Builder;
SPLcom/android/server/wm/DisplayContent;->okToAnimate()Z
SPLcom/android/server/wm/DisplayContent;->okToDisplay()Z
SPLcom/android/server/wm/DisplayContent;->onAppTransitionDone()V
SPLcom/android/server/wm/DisplayContent;->onConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/DisplayContent;->onDescendantOverrideConfigurationChanged()V
SPLcom/android/server/wm/DisplayContent;->onParentChanged()V
SPLcom/android/server/wm/DisplayContent;->performLayout(ZZ)V
SPLcom/android/server/wm/DisplayContent;->positionChildAt(ILcom/android/server/wm/DisplayContent$DisplayChildWindowContainer;Z)V
SPLcom/android/server/wm/DisplayContent;->positionChildAt(ILcom/android/server/wm/WindowContainer;Z)V
SPLcom/android/server/wm/DisplayContent;->positionStackAt(ILcom/android/server/wm/TaskStack;Z)V
SPLcom/android/server/wm/DisplayContent;->preOnConfigurationChanged()V
SPLcom/android/server/wm/DisplayContent;->prepareAppTransition(IZ)V
SPLcom/android/server/wm/DisplayContent;->prepareAppTransition(IZIZ)V
SPLcom/android/server/wm/DisplayContent;->prepareFreezingTaskBounds()V
SPLcom/android/server/wm/DisplayContent;->prepareSurfaces()V
SPLcom/android/server/wm/DisplayContent;->reParentWindowToken(Lcom/android/server/wm/WindowToken;)V
SPLcom/android/server/wm/DisplayContent;->reapplyMagnificationSpec()V
SPLcom/android/server/wm/DisplayContent;->reduceCompatConfigWidthSize(IIILandroid/util/DisplayMetrics;IILandroid/view/DisplayCutout;)I
SPLcom/android/server/wm/DisplayContent;->reduceConfigLayout(IIFIIILandroid/view/DisplayCutout;)I
SPLcom/android/server/wm/DisplayContent;->registerPointerEventListener(Landroid/view/WindowManagerPolicyConstants$PointerEventListener;)V
SPLcom/android/server/wm/DisplayContent;->removeExistingTokensIfPossible()V
SPLcom/android/server/wm/DisplayContent;->scheduleToastWindowsTimeoutIfNeededLocked(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/DisplayContent;->sendNewConfiguration()V
SPLcom/android/server/wm/DisplayContent;->setExitingTokensHasVisible(Z)V
SPLcom/android/server/wm/DisplayContent;->setFocusedApp(Lcom/android/server/wm/AppWindowToken;)Z
SPLcom/android/server/wm/DisplayContent;->setInsetProvider(ILcom/android/server/wm/WindowState;Lcom/android/internal/util/function/TriConsumer;)V
SPLcom/android/server/wm/DisplayContent;->setLayoutNeeded()V
SPLcom/android/server/wm/DisplayContent;->setStackOnDisplay(IZLcom/android/server/wm/TaskStack;)V
SPLcom/android/server/wm/DisplayContent;->setWindowingMode(I)V
SPLcom/android/server/wm/DisplayContent;->updateBackgroundForAnimator()V
SPLcom/android/server/wm/DisplayContent;->updateBaseDisplayMetrics(III)V
SPLcom/android/server/wm/DisplayContent;->updateBaseDisplayMetricsIfNeeded()V
SPLcom/android/server/wm/DisplayContent;->updateBounds()V
SPLcom/android/server/wm/DisplayContent;->updateDisplayAndOrientation(I)Landroid/view/DisplayInfo;
SPLcom/android/server/wm/DisplayContent;->updateDisplayInfo()V
SPLcom/android/server/wm/DisplayContent;->updateFocusedWindowLocked(IZ)Z
SPLcom/android/server/wm/DisplayContent;->updateOrientationFromAppTokens()Z
SPLcom/android/server/wm/DisplayContent;->updateOrientationFromAppTokens(Landroid/content/res/Configuration;Landroid/os/IBinder;Z)Landroid/content/res/Configuration;
SPLcom/android/server/wm/DisplayContent;->updateRotationUnchecked()Z
SPLcom/android/server/wm/DisplayContent;->updateRotationUnchecked(Z)Z
SPLcom/android/server/wm/DisplayContent;->updateTouchExcludeRegion()V
SPLcom/android/server/wm/DisplayContent;->updateWindowsForAnimator()V
SPLcom/android/server/wm/DisplayFrames;-><init>(ILandroid/view/DisplayInfo;Lcom/android/server/wm/utils/WmDisplayCutout;)V
SPLcom/android/server/wm/DisplayFrames;->getInputMethodWindowVisibleHeight()I
SPLcom/android/server/wm/DisplayFrames;->onBeginLayout()V
SPLcom/android/server/wm/DisplayFrames;->onDisplayInfoUpdated(Landroid/view/DisplayInfo;Lcom/android/server/wm/utils/WmDisplayCutout;)V
SPLcom/android/server/wm/DisplayPolicy$1;->onBarVisibilityChanged(Z)V
SPLcom/android/server/wm/DisplayPolicy;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/DisplayPolicy;->adjustWindowParamsLw(Lcom/android/server/wm/WindowState;Landroid/view/WindowManager$LayoutParams;Z)V
SPLcom/android/server/wm/DisplayPolicy;->allowAppAnimationsLw()Z
SPLcom/android/server/wm/DisplayPolicy;->applyStableConstraints(IILandroid/graphics/Rect;Lcom/android/server/wm/DisplayFrames;)V
SPLcom/android/server/wm/DisplayPolicy;->beginLayoutLw(Lcom/android/server/wm/DisplayFrames;I)V
SPLcom/android/server/wm/DisplayPolicy;->beginPostLayoutPolicyLw()V
SPLcom/android/server/wm/DisplayPolicy;->canReceiveInput(Lcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/DisplayPolicy;->chooseNavigationColorWindowLw(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;I)Lcom/android/server/wm/WindowState;
SPLcom/android/server/wm/DisplayPolicy;->configure(III)V
SPLcom/android/server/wm/DisplayPolicy;->configureNavBarOpacity(IZZZ)I
SPLcom/android/server/wm/DisplayPolicy;->drawsStatusBarBackground(ILcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/DisplayPolicy;->finishPostLayoutPolicyLw()I
SPLcom/android/server/wm/DisplayPolicy;->focusChangedLw(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)I
SPLcom/android/server/wm/DisplayPolicy;->getConfigDisplayHeight(IIIILandroid/view/DisplayCutout;)I
SPLcom/android/server/wm/DisplayPolicy;->getConfigDisplayWidth(IIIILandroid/view/DisplayCutout;)I
SPLcom/android/server/wm/DisplayPolicy;->getImpliedSysUiFlagsForLayout(Landroid/view/WindowManager$LayoutParams;)I
SPLcom/android/server/wm/DisplayPolicy;->getLayoutHintLw(Landroid/view/WindowManager$LayoutParams;Landroid/graphics/Rect;Lcom/android/server/wm/DisplayFrames;ZLandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;)Z
SPLcom/android/server/wm/DisplayPolicy;->getNonDecorDisplayHeight(IIIILandroid/view/DisplayCutout;)I
SPLcom/android/server/wm/DisplayPolicy;->getNonDecorDisplayWidth(IIIILandroid/view/DisplayCutout;)I
SPLcom/android/server/wm/DisplayPolicy;->getNonDecorInsetsLw(IIILandroid/view/DisplayCutout;Landroid/graphics/Rect;)V
SPLcom/android/server/wm/DisplayPolicy;->getStableInsetsLw(IIILandroid/view/DisplayCutout;Landroid/graphics/Rect;)V
SPLcom/android/server/wm/DisplayPolicy;->getStatusBarManagerInternal()Lcom/android/server/statusbar/StatusBarManagerInternal;
SPLcom/android/server/wm/DisplayPolicy;->getSystemUiContext()Landroid/content/Context;
SPLcom/android/server/wm/DisplayPolicy;->hasStatusBar()Z
SPLcom/android/server/wm/DisplayPolicy;->isAwake()Z
SPLcom/android/server/wm/DisplayPolicy;->isImmersiveMode(I)Z
SPLcom/android/server/wm/DisplayPolicy;->isKeyguardDrawComplete()Z
SPLcom/android/server/wm/DisplayPolicy;->isKeyguardOccluded()Z
SPLcom/android/server/wm/DisplayPolicy;->isNavBarForcedShownLw(Lcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/DisplayPolicy;->isScreenOnEarly()Z
SPLcom/android/server/wm/DisplayPolicy;->isShowingDreamLw()Z
SPLcom/android/server/wm/DisplayPolicy;->isStatusBarKeyguard()Z
SPLcom/android/server/wm/DisplayPolicy;->isWindowManagerDrawComplete()Z
SPLcom/android/server/wm/DisplayPolicy;->lambda$prepareAddWindowLw$2$DisplayPolicy(Lcom/android/server/wm/DisplayFrames;Lcom/android/server/wm/WindowState;Landroid/graphics/Rect;)V
SPLcom/android/server/wm/DisplayPolicy;->lambda$updateSystemUiVisibilityLw$5$DisplayPolicy(IIILandroid/graphics/Rect;Landroid/graphics/Rect;Lcom/android/server/wm/WindowState;Z)V
SPLcom/android/server/wm/DisplayPolicy;->lambda$updateSystemUiVisibilityLw$5(Lcom/android/server/wm/DisplayPolicy;IIILandroid/graphics/Rect;Landroid/graphics/Rect;Lcom/android/server/wm/WindowState;Z)V
SPLcom/android/server/wm/DisplayPolicy;->layoutNavigationBar(Lcom/android/server/wm/DisplayFrames;IZZZZ)Z
SPLcom/android/server/wm/DisplayPolicy;->layoutScreenDecorWindows(Lcom/android/server/wm/DisplayFrames;)V
SPLcom/android/server/wm/DisplayPolicy;->layoutStatusBar(Lcom/android/server/wm/DisplayFrames;IZ)Z
SPLcom/android/server/wm/DisplayPolicy;->layoutWallpaper(Lcom/android/server/wm/DisplayFrames;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
SPLcom/android/server/wm/DisplayPolicy;->layoutWindowLw(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;Lcom/android/server/wm/DisplayFrames;)V
SPLcom/android/server/wm/DisplayPolicy;->onConfigurationChanged()V
SPLcom/android/server/wm/DisplayPolicy;->prepareAddWindowLw(Lcom/android/server/wm/WindowState;Landroid/view/WindowManager$LayoutParams;)I
SPLcom/android/server/wm/DisplayPolicy;->resetSystemUiVisibilityLw()V
SPLcom/android/server/wm/DisplayPolicy;->screenTurnedOn(Lcom/android/server/policy/WindowManagerPolicy$ScreenOnListener;)V
SPLcom/android/server/wm/DisplayPolicy;->selectRotationAnimationLw([I)V
SPLcom/android/server/wm/DisplayPolicy;->setAwake(Z)V
SPLcom/android/server/wm/DisplayPolicy;->setHdmiPlugged(ZZ)V
SPLcom/android/server/wm/DisplayPolicy;->setLidState(I)V
SPLcom/android/server/wm/DisplayPolicy;->shouldUseOutsets(Landroid/view/WindowManager$LayoutParams;I)Z
SPLcom/android/server/wm/DisplayPolicy;->systemReady()V
SPLcom/android/server/wm/DisplayPolicy;->updateConfigurationDependentBehaviors()V
SPLcom/android/server/wm/DisplayPolicy;->updateLightNavigationBarLw(ILcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)I
SPLcom/android/server/wm/DisplayPolicy;->updateLightStatusBarLw(ILcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)I
SPLcom/android/server/wm/DisplayPolicy;->updateSystemBarsLw(Lcom/android/server/wm/WindowState;II)I
SPLcom/android/server/wm/DisplayPolicy;->updateSystemUiVisibilityLw()I
SPLcom/android/server/wm/DisplayPolicy;->updateWindowSleepToken()V
SPLcom/android/server/wm/DisplayRotation$SettingsObserver;->observe()V
SPLcom/android/server/wm/DisplayRotation$SettingsObserver;->onChange(Z)V
SPLcom/android/server/wm/DisplayRotation;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/DisplayContent;Lcom/android/server/wm/DisplayPolicy;Lcom/android/server/wm/DisplayWindowSettings;Landroid/content/Context;Ljava/lang/Object;)V
SPLcom/android/server/wm/DisplayRotation;->configure(IIII)V
SPLcom/android/server/wm/DisplayRotation;->getDisplayPolicy()Lcom/android/server/wm/DisplayPolicy;
SPLcom/android/server/wm/DisplayRotation;->getLandscapeRotation()I
SPLcom/android/server/wm/DisplayRotation;->getPortraitRotation()I
SPLcom/android/server/wm/DisplayRotation;->getSeascapeRotation()I
SPLcom/android/server/wm/DisplayRotation;->getUpsideDownRotation()I
SPLcom/android/server/wm/DisplayRotation;->isFixedToUserRotation()Z
SPLcom/android/server/wm/DisplayRotation;->isNonDecorDisplayCloseToSquare(III)Z
SPLcom/android/server/wm/DisplayRotation;->onUserSwitch()V
SPLcom/android/server/wm/DisplayRotation;->readRotation(I)I
SPLcom/android/server/wm/DisplayRotation;->respectAppRequestedOrientation()Z
SPLcom/android/server/wm/DisplayRotation;->restoreSettings(III)V
SPLcom/android/server/wm/DisplayRotation;->restoreSettings(IIZ)V
SPLcom/android/server/wm/DisplayRotation;->setCurrentOrientation(I)V
SPLcom/android/server/wm/DisplayRotation;->setFixedToUserRotation(Z)V
SPLcom/android/server/wm/DisplayRotation;->updateOrientationListener()V
SPLcom/android/server/wm/DisplayRotation;->updateOrientationListenerLw()V
SPLcom/android/server/wm/DisplayRotation;->updateSettings()Z
SPLcom/android/server/wm/DisplayWindowSettings;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/DisplayWindowSettings;-><init>(Lcom/android/server/wm/WindowManagerService;Ljava/io/File;)V
SPLcom/android/server/wm/DisplayWindowSettings;->applySettingsToDisplayLocked(Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/DisplayWindowSettings;->getWindowingModeLocked(Lcom/android/server/wm/DisplayWindowSettings$Entry;I)I
SPLcom/android/server/wm/DisplayWindowSettings;->readSettings()V
SPLcom/android/server/wm/DockedStackDividerController;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/DockedStackDividerController;->animate(J)Z
SPLcom/android/server/wm/DockedStackDividerController;->checkMinimizeChanged(Z)V
SPLcom/android/server/wm/DockedStackDividerController;->getContentWidth()I
SPLcom/android/server/wm/DockedStackDividerController;->initSnapAlgorithmForRotations()V
SPLcom/android/server/wm/DockedStackDividerController;->isHomeStackResizable()Z
SPLcom/android/server/wm/DockedStackDividerController;->isMinimizedDock()Z
SPLcom/android/server/wm/DockedStackDividerController;->isResizing()Z
SPLcom/android/server/wm/DockedStackDividerController;->loadDimens()V
SPLcom/android/server/wm/DockedStackDividerController;->notifyAdjustedForImeChanged(ZJ)V
SPLcom/android/server/wm/DockedStackDividerController;->notifyAppTransitionStarting(Landroid/util/ArraySet;I)V
SPLcom/android/server/wm/DockedStackDividerController;->notifyAppVisibilityChanged()V
SPLcom/android/server/wm/DockedStackDividerController;->notifyDockedDividerVisibilityChanged(Z)V
SPLcom/android/server/wm/DockedStackDividerController;->notifyDockedStackExistsChanged(Z)V
SPLcom/android/server/wm/DockedStackDividerController;->notifyDockedStackMinimizedChanged(ZZZ)V
SPLcom/android/server/wm/DockedStackDividerController;->onConfigurationChanged()V
SPLcom/android/server/wm/DockedStackDividerController;->positionDockedStackedDivider(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/DockedStackDividerController;->reevaluateVisibility(Z)V
SPLcom/android/server/wm/DockedStackDividerController;->registerDockedStackListener(Landroid/view/IDockedStackListener;)V
SPLcom/android/server/wm/DockedStackDividerController;->setAdjustedForIme(ZZZLcom/android/server/wm/WindowState;I)V
SPLcom/android/server/wm/DockedStackDividerController;->setMinimizedDockedStack(ZZ)V
SPLcom/android/server/wm/DockedStackDividerController;->setTouchRegion(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/DockedStackDividerController;->setWindow(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/DragDropController;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/os/Looper;)V
SPLcom/android/server/wm/DragDropController;->dragDropActiveLocked()Z
SPLcom/android/server/wm/DragDropController;->hideInputSurface(Landroid/view/SurfaceControl$Transaction;I)V
SPLcom/android/server/wm/ImmersiveModeConfirmation;-><init>(Landroid/content/Context;Landroid/os/Looper;Z)V
SPLcom/android/server/wm/ImmersiveModeConfirmation;->getWindowToken()Landroid/os/IBinder;
SPLcom/android/server/wm/ImmersiveModeConfirmation;->loadSetting(ILandroid/content/Context;)Z
SPLcom/android/server/wm/InputConsumerImpl;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/os/IBinder;Ljava/lang/String;Landroid/view/InputChannel;ILandroid/os/UserHandle;I)V
SPLcom/android/server/wm/InputConsumerImpl;->hide(Landroid/view/SurfaceControl$Transaction;)V
SPLcom/android/server/wm/InputConsumerImpl;->layout(Landroid/view/SurfaceControl$Transaction;II)V
SPLcom/android/server/wm/InputConsumerImpl;->linkToDeathRecipient()V
SPLcom/android/server/wm/InputManagerCallback;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/InputManagerCallback;->getPointerDisplayId()I
SPLcom/android/server/wm/InputManagerCallback;->notifyConfigurationChanged()V
SPLcom/android/server/wm/InputManagerCallback;->waitForInputDevicesReady(J)Z
SPLcom/android/server/wm/InputMonitor$1;->run()V
SPLcom/android/server/wm/InputMonitor$UpdateInputForAllWindowsConsumer;->updateInputWindows(Z)V
SPLcom/android/server/wm/InputMonitor;-><init>(Lcom/android/server/wm/WindowManagerService;I)V
SPLcom/android/server/wm/InputMonitor;->createInputConsumer(Landroid/os/IBinder;Ljava/lang/String;Landroid/view/InputChannel;ILandroid/os/UserHandle;)V
SPLcom/android/server/wm/InputMonitor;->populateInputWindowHandle(Landroid/view/InputWindowHandle;Lcom/android/server/wm/WindowState;IIZZZ)V
SPLcom/android/server/wm/InputMonitor;->setFocusedAppLw(Lcom/android/server/wm/AppWindowToken;)V
SPLcom/android/server/wm/InputMonitor;->setUpdateInputWindowsNeededLw()V
SPLcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V
SPLcom/android/server/wm/InsetsSourceProvider;-><init>(Landroid/view/InsetsSource;Lcom/android/server/wm/InsetsStateController;Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/InsetsSourceProvider;->getSource()Landroid/view/InsetsSource;
SPLcom/android/server/wm/InsetsSourceProvider;->isClientVisible()Z
SPLcom/android/server/wm/InsetsSourceProvider;->isControllable()Z
SPLcom/android/server/wm/InsetsSourceProvider;->onPostLayout()V
SPLcom/android/server/wm/InsetsSourceProvider;->setWindow(Lcom/android/server/wm/WindowState;Lcom/android/internal/util/function/TriConsumer;)V
SPLcom/android/server/wm/InsetsStateController;-><init>(Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/InsetsStateController;->getInsetsForDispatch(Lcom/android/server/wm/WindowState;)Landroid/view/InsetsState;
SPLcom/android/server/wm/InsetsStateController;->getSourceProvider(I)Lcom/android/server/wm/InsetsSourceProvider;
SPLcom/android/server/wm/InsetsStateController;->lambda$getSourceProvider$1$InsetsStateController(Ljava/lang/Integer;)Lcom/android/server/wm/InsetsSourceProvider;
SPLcom/android/server/wm/InsetsStateController;->onBarControllingWindowChanged(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/InsetsStateController;->onControlChanged(ILcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/InsetsStateController;->onPostLayout()V
SPLcom/android/server/wm/KeyguardController$KeyguardDisplayState;->acquiredSleepToken()V
SPLcom/android/server/wm/KeyguardController$KeyguardDisplayState;->dumpStatus(Ljava/io/PrintWriter;Ljava/lang/String;)V
SPLcom/android/server/wm/KeyguardController$KeyguardDisplayState;->visibilitiesUpdated(Lcom/android/server/wm/KeyguardController;Lcom/android/server/wm/ActivityDisplay;)V
SPLcom/android/server/wm/KeyguardController;->beginActivityVisibilityUpdate()V
SPLcom/android/server/wm/KeyguardController;->canShowActivityWhileKeyguardShowing(Lcom/android/server/wm/ActivityRecord;Z)Z
SPLcom/android/server/wm/KeyguardController;->dismissDockedStackIfNeeded()V
SPLcom/android/server/wm/KeyguardController;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V
SPLcom/android/server/wm/KeyguardController;->endActivityVisibilityUpdate()V
SPLcom/android/server/wm/KeyguardController;->isKeyguardGoingAway()Z
SPLcom/android/server/wm/KeyguardController;->isKeyguardLocked()Z
SPLcom/android/server/wm/KeyguardController;->isKeyguardOrAodShowing(I)Z
SPLcom/android/server/wm/KeyguardController;->isKeyguardShowing(I)Z
SPLcom/android/server/wm/KeyguardController;->setKeyguardShown(ZZ)V
SPLcom/android/server/wm/KeyguardController;->setKeyguardShown(ZZ[I)V
SPLcom/android/server/wm/KeyguardController;->setWindowManager(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/KeyguardController;->updateKeyguardSleepToken()V
SPLcom/android/server/wm/KeyguardController;->visibilitiesUpdated()V
SPLcom/android/server/wm/KeyguardDisableHandler;-><init>(Lcom/android/server/wm/KeyguardDisableHandler$Injector;Landroid/os/Handler;)V
SPLcom/android/server/wm/KeyguardDisableHandler;->create(Landroid/content/Context;Lcom/android/server/policy/WindowManagerPolicy;Landroid/os/Handler;)Lcom/android/server/wm/KeyguardDisableHandler;
SPLcom/android/server/wm/LaunchParamsController$LaunchParams;->hasPreferredDisplay()Z
SPLcom/android/server/wm/LaunchParamsController$LaunchParams;->hasWindowingMode()Z
SPLcom/android/server/wm/LaunchParamsController$LaunchParams;->isEmpty()Z
SPLcom/android/server/wm/LaunchParamsController$LaunchParams;->reset()V
SPLcom/android/server/wm/LaunchParamsController$LaunchParams;->set(Lcom/android/server/wm/LaunchParamsController$LaunchParams;)V
SPLcom/android/server/wm/LaunchParamsController;-><init>(Lcom/android/server/wm/ActivityTaskManagerService;Lcom/android/server/wm/LaunchParamsPersister;)V
SPLcom/android/server/wm/LaunchParamsController;->calculate(Lcom/android/server/wm/TaskRecord;Landroid/content/pm/ActivityInfo$WindowLayout;Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;ILcom/android/server/wm/LaunchParamsController$LaunchParams;)V
SPLcom/android/server/wm/LaunchParamsController;->layoutTask(Lcom/android/server/wm/TaskRecord;Landroid/content/pm/ActivityInfo$WindowLayout;Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;)Z
SPLcom/android/server/wm/LaunchParamsController;->registerDefaultModifiers(Lcom/android/server/wm/ActivityStackSupervisor;)V
SPLcom/android/server/wm/LaunchParamsController;->registerModifier(Lcom/android/server/wm/LaunchParamsController$LaunchParamsModifier;)V
SPLcom/android/server/wm/LaunchParamsPersister;->getLaunchParams(Lcom/android/server/wm/TaskRecord;Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/LaunchParamsController$LaunchParams;)V
SPLcom/android/server/wm/LaunchParamsPersister;->onSystemReady()V
SPLcom/android/server/wm/LockTaskController;-><init>(Landroid/content/Context;Lcom/android/server/wm/ActivityStackSupervisor;Landroid/os/Handler;)V
SPLcom/android/server/wm/LockTaskController;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V
SPLcom/android/server/wm/LockTaskController;->getLockTaskModeState()I
SPLcom/android/server/wm/LockTaskController;->isLockTaskModeViolation(Lcom/android/server/wm/TaskRecord;)Z
SPLcom/android/server/wm/LockTaskController;->isLockTaskModeViolation(Lcom/android/server/wm/TaskRecord;Z)Z
SPLcom/android/server/wm/LockTaskController;->isLockTaskModeViolationInternal(Lcom/android/server/wm/TaskRecord;Z)Z
SPLcom/android/server/wm/LockTaskController;->isPackageWhitelisted(ILjava/lang/String;)Z
SPLcom/android/server/wm/LockTaskController;->isTaskLocked(Lcom/android/server/wm/TaskRecord;)Z
SPLcom/android/server/wm/LockTaskController;->isTaskWhitelisted(Lcom/android/server/wm/TaskRecord;)Z
SPLcom/android/server/wm/LockTaskController;->lockTaskModeToString()Ljava/lang/String;
SPLcom/android/server/wm/LockTaskController;->setWindowManager(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/LockTaskController;->updateLockTaskFeatures(II)V
SPLcom/android/server/wm/LockTaskController;->updateLockTaskPackages(I[Ljava/lang/String;)V
SPLcom/android/server/wm/MirrorActiveUids;->onUidActive(II)V
SPLcom/android/server/wm/MirrorActiveUids;->onUidInactive(I)V
SPLcom/android/server/wm/MirrorActiveUids;->onUidProcStateChanged(II)V
SPLcom/android/server/wm/NavigationBarExperiments;->getNavigationBarFrameHeight()I
SPLcom/android/server/wm/NavigationBarExperiments;->getNavigationBarHeight()I
SPLcom/android/server/wm/NavigationBarExperiments;->offsetWindowFramesForNavBar(ILcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/NavigationBarExperiments;->onConfigurationChanged(Landroid/content/Context;)V
SPLcom/android/server/wm/PendingRemoteAnimationRegistry;->overrideOptionsIfNeeded(Ljava/lang/String;Landroid/app/ActivityOptions;)Landroid/app/ActivityOptions;
SPLcom/android/server/wm/PersisterQueue$LazyTaskWriterThread;->run()V
SPLcom/android/server/wm/PersisterQueue;-><init>(JJ)V
SPLcom/android/server/wm/PersisterQueue;->addListener(Lcom/android/server/wm/PersisterQueue$Listener;)V
SPLcom/android/server/wm/PersisterQueue;->processNextItem()V
SPLcom/android/server/wm/PersisterQueue;->startPersisting()V
SPLcom/android/server/wm/PinnedStackController;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/PinnedStackController;->getDefaultBounds(F)Landroid/graphics/Rect;
SPLcom/android/server/wm/PinnedStackController;->getInsetBounds(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/PinnedStackController;->getMovementBounds(Landroid/graphics/Rect;)Landroid/graphics/Rect;
SPLcom/android/server/wm/PinnedStackController;->getMovementBounds(Landroid/graphics/Rect;ZZ)Landroid/graphics/Rect;
SPLcom/android/server/wm/PinnedStackController;->isValidPictureInPictureAspectRatio(F)Z
SPLcom/android/server/wm/PinnedStackController;->notifyActionsChanged(Ljava/util/List;)V
SPLcom/android/server/wm/PinnedStackController;->notifyImeVisibilityChanged(ZI)V
SPLcom/android/server/wm/PinnedStackController;->notifyMinimizeChanged(Z)V
SPLcom/android/server/wm/PinnedStackController;->notifyMovementBoundsChanged(ZZ)V
SPLcom/android/server/wm/PinnedStackController;->notifyShelfVisibilityChanged(ZI)V
SPLcom/android/server/wm/PinnedStackController;->onConfigurationChanged()V
SPLcom/android/server/wm/PinnedStackController;->onDisplayInfoChanged(Landroid/view/DisplayInfo;)V
SPLcom/android/server/wm/PinnedStackController;->registerPinnedStackListener(Landroid/view/IPinnedStackListener;)V
SPLcom/android/server/wm/PinnedStackController;->reloadResources()V
SPLcom/android/server/wm/PinnedStackController;->resetReentrySnapFraction(Lcom/android/server/wm/AppWindowToken;)V
SPLcom/android/server/wm/PinnedStackController;->setAdjustedForIme(ZI)V
SPLcom/android/server/wm/PinnedStackController;->transformBoundsToAspectRatio(Landroid/graphics/Rect;FZ)Landroid/graphics/Rect;
SPLcom/android/server/wm/PointerEventDispatcher;->registerInputEventListener(Landroid/view/WindowManagerPolicyConstants$PointerEventListener;)V
SPLcom/android/server/wm/PolicyControl;->getSystemUiVisibility(Lcom/android/server/wm/WindowState;Landroid/view/WindowManager$LayoutParams;)I
SPLcom/android/server/wm/PolicyControl;->reloadFromSetting(Landroid/content/Context;)Z
SPLcom/android/server/wm/RecentTasks;-><init>(Lcom/android/server/wm/ActivityTaskManagerService;Lcom/android/server/wm/ActivityStackSupervisor;)V
SPLcom/android/server/wm/RecentTasks;->add(Lcom/android/server/wm/TaskRecord;)V
SPLcom/android/server/wm/RecentTasks;->containsTaskId(II)Z
SPLcom/android/server/wm/RecentTasks;->findRemoveIndexForAddTask(Lcom/android/server/wm/TaskRecord;)I
SPLcom/android/server/wm/RecentTasks;->getCurrentProfileIds()[I
SPLcom/android/server/wm/RecentTasks;->getPersistableTaskIds(Landroid/util/ArraySet;)V
SPLcom/android/server/wm/RecentTasks;->getTask(I)Lcom/android/server/wm/TaskRecord;
SPLcom/android/server/wm/RecentTasks;->getUserInfo(I)Landroid/content/pm/UserInfo;
SPLcom/android/server/wm/RecentTasks;->isActiveRecentTask(Lcom/android/server/wm/TaskRecord;Landroid/util/SparseBooleanArray;)Z
SPLcom/android/server/wm/RecentTasks;->isRecentsComponentHomeActivity(I)Z
SPLcom/android/server/wm/RecentTasks;->isVisibleRecentTask(Lcom/android/server/wm/TaskRecord;)Z
SPLcom/android/server/wm/RecentTasks;->loadParametersFromResources(Landroid/content/res/Resources;)V
SPLcom/android/server/wm/RecentTasks;->loadPersistedTaskIdsForUserLocked(I)V
SPLcom/android/server/wm/RecentTasks;->loadRecentsComponent(Landroid/content/res/Resources;)V
SPLcom/android/server/wm/RecentTasks;->onSystemReadyLocked()V
SPLcom/android/server/wm/RecentTasks;->registerCallback(Lcom/android/server/wm/RecentTasks$Callbacks;)V
SPLcom/android/server/wm/RecentTasks;->removeTasksByPackageName(Ljava/lang/String;I)V
SPLcom/android/server/wm/RecentTasks;->trimInactiveRecentTasks()V
SPLcom/android/server/wm/RecentTasks;->usersWithRecentsLoadedLocked()[I
SPLcom/android/server/wm/RootActivityContainer$FindTaskResult;->clear()V
SPLcom/android/server/wm/RootActivityContainer;-><init>(Lcom/android/server/wm/ActivityTaskManagerService;)V
SPLcom/android/server/wm/RootActivityContainer;->addChild(Lcom/android/server/wm/ActivityDisplay;I)V
SPLcom/android/server/wm/RootActivityContainer;->allPausedActivitiesComplete()Z
SPLcom/android/server/wm/RootActivityContainer;->allResumedActivitiesIdle()Z
SPLcom/android/server/wm/RootActivityContainer;->allResumedActivitiesVisible()Z
SPLcom/android/server/wm/RootActivityContainer;->anyTaskForId(II)Lcom/android/server/wm/TaskRecord;
SPLcom/android/server/wm/RootActivityContainer;->anyTaskForId(IILandroid/app/ActivityOptions;Z)Lcom/android/server/wm/TaskRecord;
SPLcom/android/server/wm/RootActivityContainer;->applySleepTokens(Z)V
SPLcom/android/server/wm/RootActivityContainer;->attachApplication(Lcom/android/server/wm/WindowProcessController;)Z
SPLcom/android/server/wm/RootActivityContainer;->canStartHomeOnDisplay(Landroid/content/pm/ActivityInfo;IZ)Z
SPLcom/android/server/wm/RootActivityContainer;->cancelInitializingActivities()V
SPLcom/android/server/wm/RootActivityContainer;->continueUpdateBounds(I)V
SPLcom/android/server/wm/RootActivityContainer;->createSleepToken(Ljava/lang/String;I)Lcom/android/server/wm/ActivityTaskManagerInternal$SleepToken;
SPLcom/android/server/wm/RootActivityContainer;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V
SPLcom/android/server/wm/RootActivityContainer;->dumpActivities(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;ZZLjava/lang/String;)Z
SPLcom/android/server/wm/RootActivityContainer;->dumpDisplayConfigs(Ljava/io/PrintWriter;Ljava/lang/String;)V
SPLcom/android/server/wm/RootActivityContainer;->ensureActivitiesVisible(Lcom/android/server/wm/ActivityRecord;IZ)V
SPLcom/android/server/wm/RootActivityContainer;->ensureActivitiesVisible(Lcom/android/server/wm/ActivityRecord;IZZ)V
SPLcom/android/server/wm/RootActivityContainer;->ensureVisibilityAndConfig(Lcom/android/server/wm/ActivityRecord;IZZ)Z
SPLcom/android/server/wm/RootActivityContainer;->executeAppTransitionForAllDisplay()V
SPLcom/android/server/wm/RootActivityContainer;->findTask(Lcom/android/server/wm/ActivityRecord;I)Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/RootActivityContainer;->finishDisabledPackageActivities(Ljava/lang/String;Ljava/util/Set;ZZI)Z
SPLcom/android/server/wm/RootActivityContainer;->getActivityDisplayOrCreate(I)Lcom/android/server/wm/ActivityDisplay;
SPLcom/android/server/wm/RootActivityContainer;->getChildAt(I)Lcom/android/server/wm/ActivityDisplay;
SPLcom/android/server/wm/RootActivityContainer;->getChildAt(I)Lcom/android/server/wm/ConfigurationContainer;
SPLcom/android/server/wm/RootActivityContainer;->getChildCount()I
SPLcom/android/server/wm/RootActivityContainer;->getDefaultDisplay()Lcom/android/server/wm/ActivityDisplay;
SPLcom/android/server/wm/RootActivityContainer;->getDisplayOverrideConfiguration(I)Landroid/content/res/Configuration;
SPLcom/android/server/wm/RootActivityContainer;->getLaunchStack(Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;Lcom/android/server/wm/TaskRecord;ZLcom/android/server/wm/LaunchParamsController$LaunchParams;)Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/RootActivityContainer;->getRunningTasks(ILjava/util/List;IIIZ)V
SPLcom/android/server/wm/RootActivityContainer;->getStack(I)Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/RootActivityContainer;->getStackInfo(I)Landroid/app/ActivityManager$StackInfo;
SPLcom/android/server/wm/RootActivityContainer;->getStackInfo(II)Landroid/app/ActivityManager$StackInfo;
SPLcom/android/server/wm/RootActivityContainer;->getStackInfo(Lcom/android/server/wm/ActivityStack;)Landroid/app/ActivityManager$StackInfo;
SPLcom/android/server/wm/RootActivityContainer;->getTopDisplayFocusedStack()Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/RootActivityContainer;->getTopResumedActivity()Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/RootActivityContainer;->getValidLaunchStackOnDisplay(ILcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/TaskRecord;Landroid/app/ActivityOptions;Lcom/android/server/wm/LaunchParamsController$LaunchParams;)Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/RootActivityContainer;->handleAppDied(Lcom/android/server/wm/WindowProcessController;)Z
SPLcom/android/server/wm/RootActivityContainer;->hasAwakeDisplay()Z
SPLcom/android/server/wm/RootActivityContainer;->invalidateTaskLayers()V
SPLcom/android/server/wm/RootActivityContainer;->isDisplayAdded(I)Z
SPLcom/android/server/wm/RootActivityContainer;->isFocusable(Lcom/android/server/wm/ConfigurationContainer;Z)Z
SPLcom/android/server/wm/RootActivityContainer;->isInAnyStack(Landroid/os/IBinder;)Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/RootActivityContainer;->isTopDisplayFocusedStack(Lcom/android/server/wm/ActivityStack;)Z
SPLcom/android/server/wm/RootActivityContainer;->isValidLaunchStack(Lcom/android/server/wm/ActivityStack;Lcom/android/server/wm/ActivityRecord;I)Z
SPLcom/android/server/wm/RootActivityContainer;->onChildPositionChanged(Lcom/android/server/wm/ActivityDisplay;I)V
SPLcom/android/server/wm/RootActivityContainer;->onDisplayChanged(I)V
SPLcom/android/server/wm/RootActivityContainer;->positionChildAt(Lcom/android/server/wm/ActivityDisplay;I)V
SPLcom/android/server/wm/RootActivityContainer;->putStacksToSleep(ZZ)Z
SPLcom/android/server/wm/RootActivityContainer;->rankTaskLayersIfNeeded()V
SPLcom/android/server/wm/RootActivityContainer;->resolveActivityType(Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;Lcom/android/server/wm/TaskRecord;)I
SPLcom/android/server/wm/RootActivityContainer;->resolveHomeActivity(ILandroid/content/Intent;)Landroid/content/pm/ActivityInfo;
SPLcom/android/server/wm/RootActivityContainer;->resumeFocusedStacksTopActivities()Z
SPLcom/android/server/wm/RootActivityContainer;->resumeFocusedStacksTopActivities(Lcom/android/server/wm/ActivityStack;Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;)Z
SPLcom/android/server/wm/RootActivityContainer;->sendPowerHintForLaunchEndIfNeeded()V
SPLcom/android/server/wm/RootActivityContainer;->sendPowerHintForLaunchStartIfNeeded(ZLcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/RootActivityContainer;->setDisplayOverrideConfiguration(Landroid/content/res/Configuration;I)V
SPLcom/android/server/wm/RootActivityContainer;->setDockedStackMinimized(Z)V
SPLcom/android/server/wm/RootActivityContainer;->setWindowContainer(Lcom/android/server/wm/RootWindowContainer;)V
SPLcom/android/server/wm/RootActivityContainer;->setWindowManager(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/RootActivityContainer;->startHomeOnAllDisplays(ILjava/lang/String;)Z
SPLcom/android/server/wm/RootActivityContainer;->startHomeOnDisplay(ILjava/lang/String;I)Z
SPLcom/android/server/wm/RootActivityContainer;->startHomeOnEmptyDisplays(Ljava/lang/String;)V
SPLcom/android/server/wm/RootActivityContainer;->topRunningActivity()Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/RootActivityContainer;->updatePreviousProcess(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/RootActivityContainer;->updateTopResumedActivityIfNeeded()V
SPLcom/android/server/wm/RootActivityContainer;->updateUIDsPresentOnDisplay()V
SPLcom/android/server/wm/RootActivityContainer;->updateUserStack(ILcom/android/server/wm/ActivityStack;)V
SPLcom/android/server/wm/RootWindowContainer$MyHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/wm/RootWindowContainer;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/RootWindowContainer;->applySurfaceChangesTransaction(Z)V
SPLcom/android/server/wm/RootWindowContainer;->checkAppTransitionReady(Lcom/android/server/wm/WindowSurfacePlacer;)V
SPLcom/android/server/wm/RootWindowContainer;->copyAnimToLayoutParams()Z
SPLcom/android/server/wm/RootWindowContainer;->createDisplayContent(Landroid/view/Display;Lcom/android/server/wm/ActivityDisplay;)Lcom/android/server/wm/DisplayContent;
SPLcom/android/server/wm/RootWindowContainer;->forAllDisplayPolicies(Ljava/util/function/Consumer;)V
SPLcom/android/server/wm/RootWindowContainer;->forAllDisplays(Ljava/util/function/Consumer;)V
SPLcom/android/server/wm/RootWindowContainer;->getAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;
SPLcom/android/server/wm/RootWindowContainer;->getStack(II)Lcom/android/server/wm/TaskStack;
SPLcom/android/server/wm/RootWindowContainer;->getTopFocusedDisplayContent()Lcom/android/server/wm/DisplayContent;
SPLcom/android/server/wm/RootWindowContainer;->getWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/WindowToken;
SPLcom/android/server/wm/RootWindowContainer;->getWindowTokenDisplay(Lcom/android/server/wm/WindowToken;)Lcom/android/server/wm/DisplayContent;
SPLcom/android/server/wm/RootWindowContainer;->handleNotObscuredLocked(Lcom/android/server/wm/WindowState;ZZ)Z
SPLcom/android/server/wm/RootWindowContainer;->handleResizingWindows()V
SPLcom/android/server/wm/RootWindowContainer;->hasPendingLayoutChanges(Lcom/android/server/wm/WindowAnimator;)Z
SPLcom/android/server/wm/RootWindowContainer;->isLayoutNeeded()Z
SPLcom/android/server/wm/RootWindowContainer;->onChildPositionChanged()V
SPLcom/android/server/wm/RootWindowContainer;->onConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/RootWindowContainer;->positionChildAt(ILcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/RootWindowContainer;->positionChildAt(ILcom/android/server/wm/DisplayContent;Z)V
SPLcom/android/server/wm/RootWindowContainer;->positionChildAt(ILcom/android/server/wm/WindowContainer;Z)V
SPLcom/android/server/wm/RootWindowContainer;->removeReplacedWindows()V
SPLcom/android/server/wm/RootWindowContainer;->scheduleAnimation()V
SPLcom/android/server/wm/RootWindowContainer;->setDisplayOverrideConfigurationIfNeeded(Landroid/content/res/Configuration;Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/RootWindowContainer;->setRootActivityContainer(Lcom/android/server/wm/RootActivityContainer;)V
SPLcom/android/server/wm/RootWindowContainer;->setSecureSurfaceState(IZ)V
SPLcom/android/server/wm/RootWindowContainer;->updateFocusedWindowLocked(IZ)Z
SPLcom/android/server/wm/RunningTasks;->getTasks(ILjava/util/List;IILjava/util/ArrayList;IZ)V
SPLcom/android/server/wm/SafeActivityOptions;-><init>(Landroid/app/ActivityOptions;)V
SPLcom/android/server/wm/SafeActivityOptions;->checkPermissions(Landroid/content/Intent;Landroid/content/pm/ActivityInfo;Lcom/android/server/wm/WindowProcessController;Lcom/android/server/wm/ActivityStackSupervisor;Landroid/app/ActivityOptions;II)V
SPLcom/android/server/wm/SafeActivityOptions;->fromBundle(Landroid/os/Bundle;)Lcom/android/server/wm/SafeActivityOptions;
SPLcom/android/server/wm/SafeActivityOptions;->getOptions(Landroid/content/Intent;Landroid/content/pm/ActivityInfo;Lcom/android/server/wm/WindowProcessController;Lcom/android/server/wm/ActivityStackSupervisor;)Landroid/app/ActivityOptions;
SPLcom/android/server/wm/SafeActivityOptions;->mergeActivityOptions(Landroid/app/ActivityOptions;Landroid/app/ActivityOptions;)Landroid/app/ActivityOptions;
SPLcom/android/server/wm/SafeActivityOptions;->popAppVerificationBundle()Landroid/os/Bundle;
SPLcom/android/server/wm/Session;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/view/IWindowSessionCallback;)V
SPLcom/android/server/wm/Session;->addToDisplay(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/view/InputChannel;Landroid/view/InsetsState;)I
SPLcom/android/server/wm/Session;->finishDrawing(Landroid/view/IWindow;)V
SPLcom/android/server/wm/Session;->getInTouchMode()Z
SPLcom/android/server/wm/Session;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
SPLcom/android/server/wm/Session;->onWindowSurfaceVisibilityChanged(Lcom/android/server/wm/WindowSurfaceController;ZI)V
SPLcom/android/server/wm/Session;->relayout(Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IIIIJLandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/util/MergedConfiguration;Landroid/view/SurfaceControl;Landroid/view/InsetsState;)I
SPLcom/android/server/wm/Session;->setInsets(Landroid/view/IWindow;ILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Region;)V
SPLcom/android/server/wm/Session;->windowAddedLocked(Ljava/lang/String;)V
SPLcom/android/server/wm/StatusBarController$1;->lambda$$0$StatusBarController$1()V
SPLcom/android/server/wm/StatusBarController$1;->lambda$$2$StatusBarController$1()V
SPLcom/android/server/wm/StatusBarController$1;->lambda$onAppTransitionStartingLocked$3$StatusBarController$1(JJ)V
SPLcom/android/server/wm/StatusBarController$1;->onAppTransitionFinishedLocked(Landroid/os/IBinder;)V
SPLcom/android/server/wm/StatusBarController$1;->onAppTransitionPendingLocked()V
SPLcom/android/server/wm/StatusBarController$1;->onAppTransitionStartingLocked(IJJJ)I
SPLcom/android/server/wm/StatusBarController;->getAppTransitionListener()Lcom/android/server/wm/WindowManagerInternal$AppTransitionListener;
SPLcom/android/server/wm/StatusBarController;->setTopAppHidesStatusBar(Z)V
SPLcom/android/server/wm/StatusBarController;->skipAnimation()Z
SPLcom/android/server/wm/SurfaceAnimationRunner;-><init>(Landroid/animation/AnimationHandler$AnimationFrameCallbackProvider;Lcom/android/server/wm/SurfaceAnimationRunner$AnimatorFactory;Landroid/view/SurfaceControl$Transaction;Landroid/os/PowerManagerInternal;)V
SPLcom/android/server/wm/SurfaceAnimationRunner;-><init>(Landroid/os/PowerManagerInternal;)V
SPLcom/android/server/wm/SurfaceAnimationRunner;->continueStartingAnimations()V
SPLcom/android/server/wm/SurfaceAnimationRunner;->deferStartingAnimations()V
SPLcom/android/server/wm/SurfaceAnimationRunner;->lambda$new$0$SurfaceAnimationRunner()V
SPLcom/android/server/wm/SurfaceAnimationThread;->ensureThreadLocked()V
SPLcom/android/server/wm/SurfaceAnimationThread;->get()Lcom/android/server/wm/SurfaceAnimationThread;
SPLcom/android/server/wm/SurfaceAnimationThread;->getHandler()Landroid/os/Handler;
SPLcom/android/server/wm/SurfaceAnimator;->cancelAnimation()V
SPLcom/android/server/wm/SurfaceAnimator;->cancelAnimation(Landroid/view/SurfaceControl$Transaction;ZZ)V
SPLcom/android/server/wm/SurfaceAnimator;->getAnimation()Lcom/android/server/wm/AnimationAdapter;
SPLcom/android/server/wm/SurfaceAnimator;->reset(Landroid/view/SurfaceControl$Transaction;Z)V
SPLcom/android/server/wm/SurfaceAnimator;->setLayer(Landroid/view/SurfaceControl$Transaction;I)V
SPLcom/android/server/wm/SurfaceAnimator;->setRelativeLayer(Landroid/view/SurfaceControl$Transaction;Landroid/view/SurfaceControl;I)V
SPLcom/android/server/wm/SystemGesturesPointerEventListener;-><init>(Landroid/content/Context;Landroid/os/Handler;Lcom/android/server/wm/SystemGesturesPointerEventListener$Callbacks;)V
SPLcom/android/server/wm/SystemGesturesPointerEventListener;->systemReady()V
SPLcom/android/server/wm/Task;-><init>(ILcom/android/server/wm/TaskStack;ILcom/android/server/wm/WindowManagerService;IZLandroid/app/ActivityManager$TaskDescription;Lcom/android/server/wm/TaskRecord;)V
SPLcom/android/server/wm/Task;->addChild(Lcom/android/server/wm/AppWindowToken;I)V
SPLcom/android/server/wm/Task;->adjustBoundsForDisplayChangeIfNeeded(Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/Task;->canAffectSystemUiFlags()Z
SPLcom/android/server/wm/Task;->cropWindowsToStackBounds()Z
SPLcom/android/server/wm/Task;->forceWindowsScaleable(Z)V
SPLcom/android/server/wm/Task;->getAdjustedAddPosition(I)I
SPLcom/android/server/wm/Task;->getBounds(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/Task;->getDimBounds(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/Task;->getDimmer()Lcom/android/server/wm/Dimmer;
SPLcom/android/server/wm/Task;->getDisplayContent()Lcom/android/server/wm/DisplayContent;
SPLcom/android/server/wm/Task;->getDisplayedBounds()Landroid/graphics/Rect;
SPLcom/android/server/wm/Task;->getName()Ljava/lang/String;
SPLcom/android/server/wm/Task;->getOverrideDisplayedBounds()Landroid/graphics/Rect;
SPLcom/android/server/wm/Task;->getTopVisibleAppToken()Lcom/android/server/wm/AppWindowToken;
SPLcom/android/server/wm/Task;->isFloating()Z
SPLcom/android/server/wm/Task;->isFullscreen()Z
SPLcom/android/server/wm/Task;->isResizeable()Z
SPLcom/android/server/wm/Task;->isTaskAnimating()Z
SPLcom/android/server/wm/Task;->makeSurface()Landroid/view/SurfaceControl$Builder;
SPLcom/android/server/wm/Task;->onDisplayChanged(Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/Task;->onParentChanged()V
SPLcom/android/server/wm/Task;->positionChildAt(ILcom/android/server/wm/AppWindowToken;Z)V
SPLcom/android/server/wm/Task;->positionChildAt(Lcom/android/server/wm/AppWindowToken;I)V
SPLcom/android/server/wm/Task;->prepareFreezingBounds()V
SPLcom/android/server/wm/Task;->prepareSurfaces()V
SPLcom/android/server/wm/Task;->setBounds(Landroid/graphics/Rect;)I
SPLcom/android/server/wm/Task;->setOverrideDisplayedBounds(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/Task;->setTaskDescription(Landroid/app/ActivityManager$TaskDescription;)V
SPLcom/android/server/wm/Task;->showForAllUsers()Z
SPLcom/android/server/wm/Task;->toShortString()Ljava/lang/String;
SPLcom/android/server/wm/TaskChangeNotificationController$MainHandler;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/wm/TaskChangeNotificationController;-><init>(Ljava/lang/Object;Lcom/android/server/wm/ActivityStackSupervisor;Landroid/os/Handler;)V
SPLcom/android/server/wm/TaskChangeNotificationController;->forAllLocalListeners(Lcom/android/server/wm/TaskChangeNotificationController$TaskStackConsumer;Landroid/os/Message;)V
SPLcom/android/server/wm/TaskChangeNotificationController;->forAllRemoteListeners(Lcom/android/server/wm/TaskChangeNotificationController$TaskStackConsumer;Landroid/os/Message;)V
SPLcom/android/server/wm/TaskChangeNotificationController;->notifyTaskCreated(ILandroid/content/ComponentName;)V
SPLcom/android/server/wm/TaskChangeNotificationController;->notifyTaskDescriptionChanged(ILandroid/app/ActivityManager$TaskDescription;)V
SPLcom/android/server/wm/TaskChangeNotificationController;->notifyTaskDescriptionChanged(Landroid/app/TaskInfo;)V
SPLcom/android/server/wm/TaskChangeNotificationController;->notifyTaskStackChanged()V
SPLcom/android/server/wm/TaskChangeNotificationController;->registerTaskStackListener(Landroid/app/ITaskStackListener;)V
SPLcom/android/server/wm/TaskLaunchParamsModifier;->calculate(Lcom/android/server/wm/TaskRecord;Landroid/content/pm/ActivityInfo$WindowLayout;Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;ILcom/android/server/wm/LaunchParamsController$LaunchParams;Lcom/android/server/wm/LaunchParamsController$LaunchParams;)I
SPLcom/android/server/wm/TaskLaunchParamsModifier;->canApplyFreeformWindowPolicy(Lcom/android/server/wm/ActivityDisplay;I)Z
SPLcom/android/server/wm/TaskLaunchParamsModifier;->getPreferredLaunchDisplay(Lcom/android/server/wm/TaskRecord;Landroid/app/ActivityOptions;Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/LaunchParamsController$LaunchParams;)I
SPLcom/android/server/wm/TaskLaunchParamsModifier;->getTaskBounds(Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityDisplay;Landroid/content/pm/ActivityInfo$WindowLayout;IZLandroid/graphics/Rect;)V
SPLcom/android/server/wm/TaskLaunchParamsModifier;->onCalculate(Lcom/android/server/wm/TaskRecord;Landroid/content/pm/ActivityInfo$WindowLayout;Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityRecord;Landroid/app/ActivityOptions;ILcom/android/server/wm/LaunchParamsController$LaunchParams;Lcom/android/server/wm/LaunchParamsController$LaunchParams;)I
SPLcom/android/server/wm/TaskPersister;-><init>(Ljava/io/File;Lcom/android/server/wm/ActivityStackSupervisor;Lcom/android/server/wm/ActivityTaskManagerService;Lcom/android/server/wm/RecentTasks;Lcom/android/server/wm/PersisterQueue;)V
SPLcom/android/server/wm/TaskPersister;->getUserPersistedTaskIdsFile(I)Ljava/io/File;
SPLcom/android/server/wm/TaskPersister;->loadPersistedTaskIdsForUser(I)Landroid/util/SparseBooleanArray;
SPLcom/android/server/wm/TaskPersister;->onPreProcessItem(Z)V
SPLcom/android/server/wm/TaskPersister;->removeObsoleteFiles(Landroid/util/ArraySet;)V
SPLcom/android/server/wm/TaskPersister;->writeTaskIdsFiles()V
SPLcom/android/server/wm/TaskPositioningController;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/input/InputManagerService;Landroid/app/IActivityTaskManager;Landroid/os/Looper;)V
SPLcom/android/server/wm/TaskPositioningController;->hideInputSurface(Landroid/view/SurfaceControl$Transaction;I)V
SPLcom/android/server/wm/TaskPositioningController;->isPositioningLocked()Z
SPLcom/android/server/wm/TaskRecord$TaskActivitiesReport;->reset()V
SPLcom/android/server/wm/TaskRecord$TaskRecordFactory;->create(Lcom/android/server/wm/ActivityTaskManagerService;ILandroid/content/pm/ActivityInfo;Landroid/content/Intent;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;)Lcom/android/server/wm/TaskRecord;
SPLcom/android/server/wm/TaskRecord;-><init>(Lcom/android/server/wm/ActivityTaskManagerService;ILandroid/content/pm/ActivityInfo;Landroid/content/Intent;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;)V
SPLcom/android/server/wm/TaskRecord;->addActivityAtIndex(ILcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/TaskRecord;->addActivityToTop(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/TaskRecord;->clearAllPendingOptions()V
SPLcom/android/server/wm/TaskRecord;->clearRootProcess()V
SPLcom/android/server/wm/TaskRecord;->createTask(ZZ)V
SPLcom/android/server/wm/TaskRecord;->fillTaskInfo(Landroid/app/TaskInfo;)V
SPLcom/android/server/wm/TaskRecord;->findEffectiveRootIndex()I
SPLcom/android/server/wm/TaskRecord;->getActivityType()I
SPLcom/android/server/wm/TaskRecord;->getAllRunningVisibleActivitiesLocked(Ljava/util/ArrayList;)V
SPLcom/android/server/wm/TaskRecord;->getBaseIntent()Landroid/content/Intent;
SPLcom/android/server/wm/TaskRecord;->getChildAt(I)Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/TaskRecord;->getChildAt(I)Lcom/android/server/wm/ConfigurationContainer;
SPLcom/android/server/wm/TaskRecord;->getChildCount()I
SPLcom/android/server/wm/TaskRecord;->getLaunchBounds()Landroid/graphics/Rect;
SPLcom/android/server/wm/TaskRecord;->getNumRunningActivities(Lcom/android/server/wm/TaskRecord$TaskActivitiesReport;)V
SPLcom/android/server/wm/TaskRecord;->getParent()Lcom/android/server/wm/ConfigurationContainer;
SPLcom/android/server/wm/TaskRecord;->getRootActivity()Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/TaskRecord;->getStack()Lcom/android/server/wm/ActivityStack;
SPLcom/android/server/wm/TaskRecord;->getStackId()I
SPLcom/android/server/wm/TaskRecord;->getTask()Lcom/android/server/wm/Task;
SPLcom/android/server/wm/TaskRecord;->getTaskInfo()Landroid/app/ActivityManager$RunningTaskInfo;
SPLcom/android/server/wm/TaskRecord;->getTaskRecordFactory()Lcom/android/server/wm/TaskRecord$TaskRecordFactory;
SPLcom/android/server/wm/TaskRecord;->getTopActivity()Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/TaskRecord;->getTopActivity(Z)Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/TaskRecord;->getTopActivityRequestedOrientation()I
SPLcom/android/server/wm/TaskRecord;->getWindowContainerBounds(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/TaskRecord;->isResizeable()Z
SPLcom/android/server/wm/TaskRecord;->okToShowLocked()Z
SPLcom/android/server/wm/TaskRecord;->onActivityStateChanged(Lcom/android/server/wm/ActivityRecord;Lcom/android/server/wm/ActivityStack$ActivityState;Ljava/lang/String;)V
SPLcom/android/server/wm/TaskRecord;->onConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/TaskRecord;->onParentChanged()V
SPLcom/android/server/wm/TaskRecord;->resolveOverrideConfiguration(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/TaskRecord;->saveLaunchingStateIfNeeded()V
SPLcom/android/server/wm/TaskRecord;->setDisplayedBounds(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/TaskRecord;->setFrontOfTask()V
SPLcom/android/server/wm/TaskRecord;->setIntent(Landroid/content/Intent;Landroid/content/pm/ActivityInfo;)V
SPLcom/android/server/wm/TaskRecord;->setIntent(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/TaskRecord;->setLockTaskAuth()V
SPLcom/android/server/wm/TaskRecord;->setLockTaskAuth(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/TaskRecord;->setRootProcess(Lcom/android/server/wm/WindowProcessController;)V
SPLcom/android/server/wm/TaskRecord;->setStack(Lcom/android/server/wm/ActivityStack;)V
SPLcom/android/server/wm/TaskRecord;->supportsSplitScreenWindowingMode()Z
SPLcom/android/server/wm/TaskRecord;->topRunningActivityLocked()Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/TaskRecord;->topRunningActivityWithStartingWindowLocked()Lcom/android/server/wm/ActivityRecord;
SPLcom/android/server/wm/TaskRecord;->touchActiveTime()V
SPLcom/android/server/wm/TaskRecord;->updateEffectiveIntent()V
SPLcom/android/server/wm/TaskRecord;->updateOverrideConfiguration(Landroid/graphics/Rect;)Z
SPLcom/android/server/wm/TaskRecord;->updateOverrideConfiguration(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z
SPLcom/android/server/wm/TaskRecord;->updateOverrideConfigurationFromLaunchBounds()Landroid/graphics/Rect;
SPLcom/android/server/wm/TaskRecord;->updateTaskDescription()V
SPLcom/android/server/wm/TaskSnapshotController;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/TaskSnapshotController;->getClosingTasks(Landroid/util/ArraySet;Landroid/util/ArraySet;)V
SPLcom/android/server/wm/TaskSnapshotController;->getSnapshotMode(Lcom/android/server/wm/Task;)I
SPLcom/android/server/wm/TaskSnapshotController;->notifyAppVisibilityChanged(Lcom/android/server/wm/AppWindowToken;Z)V
SPLcom/android/server/wm/TaskSnapshotController;->onTransitionStarting(Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/TaskSnapshotController;->removeObsoleteTaskFiles(Landroid/util/ArraySet;[I)V
SPLcom/android/server/wm/TaskSnapshotController;->snapshotTasks(Landroid/util/ArraySet;)V
SPLcom/android/server/wm/TaskSnapshotController;->systemReady()V
SPLcom/android/server/wm/TaskSnapshotPersister$1;->run()V
SPLcom/android/server/wm/TaskSnapshotPersister$RemoveObsoleteFilesQueueItem;->write()V
SPLcom/android/server/wm/TaskSnapshotPersister$WriteQueueItem;->onDequeuedLocked()V
SPLcom/android/server/wm/TaskSnapshotPersister;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/TaskSnapshotPersister$DirectoryResolver;)V
SPLcom/android/server/wm/TaskSnapshotPersister;->ensureStoreQueueDepthLocked()V
SPLcom/android/server/wm/TaskSnapshotPersister;->removeObsoleteFiles(Landroid/util/ArraySet;[I)V
SPLcom/android/server/wm/TaskSnapshotPersister;->start()V
SPLcom/android/server/wm/TaskStack;-><init>(Lcom/android/server/wm/WindowManagerService;ILcom/android/server/wm/ActivityStack;)V
SPLcom/android/server/wm/TaskStack;->addTask(Lcom/android/server/wm/Task;IZZ)V
SPLcom/android/server/wm/TaskStack;->checkCompleteDeferredRemoval()Z
SPLcom/android/server/wm/TaskStack;->computeMinPosition(II)I
SPLcom/android/server/wm/TaskStack;->fillsParent()Z
SPLcom/android/server/wm/TaskStack;->findHomeTask()Lcom/android/server/wm/Task;
SPLcom/android/server/wm/TaskStack;->findPositionForTask(Lcom/android/server/wm/Task;IZZ)I
SPLcom/android/server/wm/TaskStack;->getAnimatingAppWindowTokenRegistry()Lcom/android/server/wm/AnimatingAppWindowTokenRegistry;
SPLcom/android/server/wm/TaskStack;->getBounds()Landroid/graphics/Rect;
SPLcom/android/server/wm/TaskStack;->getBounds(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/TaskStack;->getDimBounds(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/TaskStack;->getName()Ljava/lang/String;
SPLcom/android/server/wm/TaskStack;->getPendingTransaction()Landroid/view/SurfaceControl$Transaction;
SPLcom/android/server/wm/TaskStack;->getRelativeDisplayedPosition(Landroid/graphics/Point;)V
SPLcom/android/server/wm/TaskStack;->isAdjustedForIme()Z
SPLcom/android/server/wm/TaskStack;->isAdjustedForMinimizedDockedStack()Z
SPLcom/android/server/wm/TaskStack;->isAnimatingBounds()Z
SPLcom/android/server/wm/TaskStack;->isForceScaled()Z
SPLcom/android/server/wm/TaskStack;->isTaskAnimating()Z
SPLcom/android/server/wm/TaskStack;->onConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/TaskStack;->onDisplayChanged(Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/TaskStack;->onParentChanged()V
SPLcom/android/server/wm/TaskStack;->onRequestedOverrideConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/TaskStack;->positionChildAt(ILcom/android/server/wm/Task;Z)V
SPLcom/android/server/wm/TaskStack;->positionChildAt(ILcom/android/server/wm/Task;ZZ)V
SPLcom/android/server/wm/TaskStack;->positionChildAtTop(Lcom/android/server/wm/Task;Z)V
SPLcom/android/server/wm/TaskStack;->prepareFreezingTaskBounds()V
SPLcom/android/server/wm/TaskStack;->prepareSurfaces()V
SPLcom/android/server/wm/TaskStack;->resetAdjustedForIme(Z)V
SPLcom/android/server/wm/TaskStack;->resetAnimationBackgroundAnimator()V
SPLcom/android/server/wm/TaskStack;->setTouchExcludeRegion(Lcom/android/server/wm/Task;ILandroid/graphics/Region;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
SPLcom/android/server/wm/TaskStack;->shouldIgnoreInput()Z
SPLcom/android/server/wm/TaskStack;->toShortString()Ljava/lang/String;
SPLcom/android/server/wm/TaskStack;->updateSurfaceSize(Landroid/view/SurfaceControl$Transaction;)V
SPLcom/android/server/wm/TaskTapPointerEventListener;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/TaskTapPointerEventListener;->setTouchExcludeRegion(Landroid/graphics/Region;)V
SPLcom/android/server/wm/UnknownAppVisibilityController;->allResolved()Z
SPLcom/android/server/wm/UnknownAppVisibilityController;->clear()V
SPLcom/android/server/wm/UnknownAppVisibilityController;->notifyAppResumedFinished(Lcom/android/server/wm/AppWindowToken;)V
SPLcom/android/server/wm/UnknownAppVisibilityController;->notifyRelayouted(Lcom/android/server/wm/AppWindowToken;)V
SPLcom/android/server/wm/VrController;->changeVrModeLocked(ZLcom/android/server/wm/WindowProcessController;)Z
SPLcom/android/server/wm/VrController;->onVrModeChanged(Lcom/android/server/wm/ActivityRecord;)Z
SPLcom/android/server/wm/VrController;->setVrRenderThreadLocked(IIZ)I
SPLcom/android/server/wm/VrController;->toString()Ljava/lang/String;
SPLcom/android/server/wm/WallpaperController;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/WallpaperController;->addWallpaperToken(Lcom/android/server/wm/WallpaperWindowToken;)V
SPLcom/android/server/wm/WallpaperController;->adjustWallpaperWindows()V
SPLcom/android/server/wm/WallpaperController;->adjustWallpaperWindowsForAppTransitionIfNeeded(Landroid/util/ArraySet;Landroid/util/ArraySet;)V
SPLcom/android/server/wm/WallpaperController;->clearLastWallpaperTimeoutTime()V
SPLcom/android/server/wm/WallpaperController;->findWallpaperTarget()V
SPLcom/android/server/wm/WallpaperController;->getWallpaperTarget()Lcom/android/server/wm/WindowState;
SPLcom/android/server/wm/WallpaperController;->hideDeferredWallpapersIfNeeded()V
SPLcom/android/server/wm/WallpaperController;->hideWallpapers(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/WallpaperController;->isBelowWallpaperTarget(Lcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/WallpaperController;->isWallpaperTarget(Lcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/WallpaperController;->isWallpaperTargetAnimating()Z
SPLcom/android/server/wm/WallpaperController;->isWallpaperVisible()Z
SPLcom/android/server/wm/WallpaperController;->isWallpaperVisible(Lcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/WallpaperController;->lambda$new$0$WallpaperController(Lcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/WallpaperController;->lambda$new$0(Lcom/android/server/wm/WallpaperController;Lcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/WallpaperController;->updateWallpaperOffset(Lcom/android/server/wm/WindowState;IIZ)Z
SPLcom/android/server/wm/WallpaperController;->updateWallpaperTokens(Z)V
SPLcom/android/server/wm/WallpaperController;->updateWallpaperWindowsTarget(Lcom/android/server/wm/WallpaperController$FindWallpaperTargetResult;)V
SPLcom/android/server/wm/WallpaperVisibilityListeners;-><init>()V
SPLcom/android/server/wm/WallpaperVisibilityListeners;->notifyWallpaperVisibilityChanged(Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/WallpaperVisibilityListeners;->registerWallpaperVisibilityListener(Landroid/view/IWallpaperVisibilityListener;I)V
SPLcom/android/server/wm/WallpaperWindowToken;->hideWallpaperToken(ZLjava/lang/String;)V
SPLcom/android/server/wm/WallpaperWindowToken;->toString()Ljava/lang/String;
SPLcom/android/server/wm/WallpaperWindowToken;->updateWallpaperWindows(Z)V
SPLcom/android/server/wm/WindowAnimator;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/WindowAnimator;->addDisplayLocked(I)V
SPLcom/android/server/wm/WindowAnimator;->animate(J)V
SPLcom/android/server/wm/WindowAnimator;->executeAfterPrepareSurfacesRunnables()V
SPLcom/android/server/wm/WindowAnimator;->getDisplayContentsAnimatorLocked(I)Lcom/android/server/wm/WindowAnimator$DisplayContentsAnimator;
SPLcom/android/server/wm/WindowAnimator;->getPendingLayoutChanges(I)I
SPLcom/android/server/wm/WindowAnimator;->getScreenRotationAnimationLocked(I)Lcom/android/server/wm/ScreenRotationAnimation;
SPLcom/android/server/wm/WindowAnimator;->lambda$new$0$WindowAnimator()V
SPLcom/android/server/wm/WindowAnimator;->lambda$new$1$WindowAnimator(J)V
SPLcom/android/server/wm/WindowAnimator;->lambda$new$1(Lcom/android/server/wm/WindowAnimator;J)V
SPLcom/android/server/wm/WindowAnimator;->orAnimating(Z)V
SPLcom/android/server/wm/WindowAnimator;->ready()V
SPLcom/android/server/wm/WindowAnimator;->requestRemovalOfReplacedWindows(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/WindowAnimator;->setPendingLayoutChanges(II)V
SPLcom/android/server/wm/WindowContainer;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/WindowContainer;->addChild(Lcom/android/server/wm/WindowContainer;I)V
SPLcom/android/server/wm/WindowContainer;->addChild(Lcom/android/server/wm/WindowContainer;Ljava/util/Comparator;)V
SPLcom/android/server/wm/WindowContainer;->assignChildLayers()V
SPLcom/android/server/wm/WindowContainer;->assignChildLayers(Landroid/view/SurfaceControl$Transaction;)V
SPLcom/android/server/wm/WindowContainer;->assignLayer(Landroid/view/SurfaceControl$Transaction;I)V
SPLcom/android/server/wm/WindowContainer;->assignRelativeLayer(Landroid/view/SurfaceControl$Transaction;Landroid/view/SurfaceControl;I)V
SPLcom/android/server/wm/WindowContainer;->cancelAnimation()V
SPLcom/android/server/wm/WindowContainer;->commitPendingTransaction()V
SPLcom/android/server/wm/WindowContainer;->compareTo(Lcom/android/server/wm/WindowContainer;)I
SPLcom/android/server/wm/WindowContainer;->getAnimation()Lcom/android/server/wm/AnimationAdapter;
SPLcom/android/server/wm/WindowContainer;->getChildAt(I)Lcom/android/server/wm/ConfigurationContainer;
SPLcom/android/server/wm/WindowContainer;->getChildAt(I)Lcom/android/server/wm/WindowContainer;
SPLcom/android/server/wm/WindowContainer;->getChildCount()I
SPLcom/android/server/wm/WindowContainer;->getParent()Lcom/android/server/wm/ConfigurationContainer;
SPLcom/android/server/wm/WindowContainer;->getParent()Lcom/android/server/wm/WindowContainer;
SPLcom/android/server/wm/WindowContainer;->getParentSurfaceControl()Landroid/view/SurfaceControl;
SPLcom/android/server/wm/WindowContainer;->getRelativeDisplayedPosition(Landroid/graphics/Point;)V
SPLcom/android/server/wm/WindowContainer;->getSession()Landroid/view/SurfaceSession;
SPLcom/android/server/wm/WindowContainer;->getSurfaceControl()Landroid/view/SurfaceControl;
SPLcom/android/server/wm/WindowContainer;->getTopChild()Lcom/android/server/wm/WindowContainer;
SPLcom/android/server/wm/WindowContainer;->handlesOrientationChangeFromDescendant()Z
SPLcom/android/server/wm/WindowContainer;->hasContentToDisplay()Z
SPLcom/android/server/wm/WindowContainer;->isVisible()Z
SPLcom/android/server/wm/WindowContainer;->makeChildSurface(Lcom/android/server/wm/WindowContainer;)Landroid/view/SurfaceControl$Builder;
SPLcom/android/server/wm/WindowContainer;->makeSurface()Landroid/view/SurfaceControl$Builder;
SPLcom/android/server/wm/WindowContainer;->needsZBoost()Z
SPLcom/android/server/wm/WindowContainer;->onAppTransitionDone()V
SPLcom/android/server/wm/WindowContainer;->onChildPositionChanged()V
SPLcom/android/server/wm/WindowContainer;->onConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/WindowContainer;->onDescendantOverrideConfigurationChanged()V
SPLcom/android/server/wm/WindowContainer;->onDisplayChanged(Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/WindowContainer;->onParentChanged()V
SPLcom/android/server/wm/WindowContainer;->onRequestedOverrideConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/WindowContainer;->onResize()V
SPLcom/android/server/wm/WindowContainer;->positionChildAt(ILcom/android/server/wm/WindowContainer;Z)V
SPLcom/android/server/wm/WindowContainer;->sendAppVisibilityToClients()V
SPLcom/android/server/wm/WindowContainer;->setLayer(Landroid/view/SurfaceControl$Transaction;I)V
SPLcom/android/server/wm/WindowContainer;->setOrientation(I)V
SPLcom/android/server/wm/WindowContainer;->setOrientation(ILandroid/os/IBinder;Lcom/android/server/wm/ConfigurationContainer;)V
SPLcom/android/server/wm/WindowContainer;->setRelativeLayer(Landroid/view/SurfaceControl$Transaction;Landroid/view/SurfaceControl;I)V
SPLcom/android/server/wm/WindowContainer;->updateSurfacePosition()V
SPLcom/android/server/wm/WindowFrames;-><init>()V
SPLcom/android/server/wm/WindowFrames;->calculateDockedDividerInsets(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowFrames;->calculateInsets(ZZLandroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowFrames;->calculateOutsets()V
SPLcom/android/server/wm/WindowFrames;->didFrameSizeChange()Z
SPLcom/android/server/wm/WindowFrames;->hasContentChanged()Z
SPLcom/android/server/wm/WindowFrames;->offsetFrames(II)V
SPLcom/android/server/wm/WindowFrames;->parentFrameWasClippedByDisplayCutout()Z
SPLcom/android/server/wm/WindowFrames;->resetInsetsChanged()V
SPLcom/android/server/wm/WindowFrames;->setDisplayCutout(Lcom/android/server/wm/utils/WmDisplayCutout;)V
SPLcom/android/server/wm/WindowFrames;->setFrames(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowFrames;->setHasOutsets(Z)V
SPLcom/android/server/wm/WindowFrames;->setParentFrameWasClippedByDisplayCutout(Z)V
SPLcom/android/server/wm/WindowFrames;->setReportResizeHints()Z
SPLcom/android/server/wm/WindowFrames;->updateLastInsetValues()V
SPLcom/android/server/wm/WindowHashMap;-><init>()V
SPLcom/android/server/wm/WindowList;->peekLast()Ljava/lang/Object;
SPLcom/android/server/wm/WindowManagerInternal$AppTransitionListener;->onAppTransitionFinishedLocked(Landroid/os/IBinder;)V
SPLcom/android/server/wm/WindowManagerInternal$AppTransitionListener;->onAppTransitionPendingLocked()V
SPLcom/android/server/wm/WindowManagerInternal$AppTransitionListener;->onAppTransitionStartingLocked(IJJJ)I
SPLcom/android/server/wm/WindowManagerService$1;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/WindowManagerService$2;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/WindowManagerService$3;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/WindowManagerService$4;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/WindowManagerService$4;->onAppTransitionFinishedLocked(Landroid/os/IBinder;)V
SPLcom/android/server/wm/WindowManagerService$5;->run()V
SPLcom/android/server/wm/WindowManagerService$6;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/WindowManagerService$7;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/WindowManagerService$8;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/WindowManagerService$H;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/WindowManagerService$H;->handleMessage(Landroid/os/Message;)V
SPLcom/android/server/wm/WindowManagerService$LocalService;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/WindowManagerService$1;)V
SPLcom/android/server/wm/WindowManagerService$LocalService;->getDisplayIdForWindow(Landroid/os/IBinder;)I
SPLcom/android/server/wm/WindowManagerService$LocalService;->isInputMethodClientFocus(III)Z
SPLcom/android/server/wm/WindowManagerService$LocalService;->isStackVisible(I)Z
SPLcom/android/server/wm/WindowManagerService$LocalService;->isUidAllowedOnDisplay(II)Z
SPLcom/android/server/wm/WindowManagerService$LocalService;->registerAppTransitionListener(Lcom/android/server/wm/WindowManagerInternal$AppTransitionListener;)V
SPLcom/android/server/wm/WindowManagerService$LocalService;->requestTraversalFromDisplayManager()V
SPLcom/android/server/wm/WindowManagerService$LocalService;->setOnHardKeyboardStatusChangeListener(Lcom/android/server/wm/WindowManagerInternal$OnHardKeyboardStatusChangeListener;)V
SPLcom/android/server/wm/WindowManagerService$MousePositionTracker;-><init>(Lcom/android/server/wm/WindowManagerService$1;)V
SPLcom/android/server/wm/WindowManagerService$SettingsObserver;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/WindowManagerService$SettingsObserver;->updateSystemUiSettings()V
SPLcom/android/server/wm/WindowManagerService;-><init>(Landroid/content/Context;Lcom/android/server/input/InputManagerService;ZZLcom/android/server/policy/WindowManagerPolicy;Lcom/android/server/wm/ActivityTaskManagerService;)V
SPLcom/android/server/wm/WindowManagerService;-><init>(Landroid/content/Context;Lcom/android/server/input/InputManagerService;ZZLcom/android/server/policy/WindowManagerPolicy;Lcom/android/server/wm/ActivityTaskManagerService;Lcom/android/server/wm/TransactionFactory;)V
SPLcom/android/server/wm/WindowManagerService;->access$1100(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/WindowManagerService;->access$700(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/WindowManagerService;->addWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/view/InputChannel;Landroid/view/InsetsState;)I
SPLcom/android/server/wm/WindowManagerService;->addWindowToken(Landroid/os/IBinder;II)V
SPLcom/android/server/wm/WindowManagerService;->applyForcedPropertiesForDefaultDisplay()V
SPLcom/android/server/wm/WindowManagerService;->applyForcedPropertiesForDefaultDisplay()Z
SPLcom/android/server/wm/WindowManagerService;->boostPriorityForLockedSection()V
SPLcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z
SPLcom/android/server/wm/WindowManagerService;->checkDrawnWindowsLocked()V
SPLcom/android/server/wm/WindowManagerService;->closeSurfaceTransaction(Ljava/lang/String;)V
SPLcom/android/server/wm/WindowManagerService;->computeNewConfiguration(I)Landroid/content/res/Configuration;
SPLcom/android/server/wm/WindowManagerService;->continueSurfaceLayout()V
SPLcom/android/server/wm/WindowManagerService;->createInputConsumer(Landroid/os/IBinder;Ljava/lang/String;ILandroid/view/InputChannel;)V
SPLcom/android/server/wm/WindowManagerService;->createSurfaceControl(Landroid/view/SurfaceControl;ILcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowStateAnimator;)I
SPLcom/android/server/wm/WindowManagerService;->createWatermarkInTransaction()V
SPLcom/android/server/wm/WindowManagerService;->deferSurfaceLayout()V
SPLcom/android/server/wm/WindowManagerService;->destroyInputConsumer(Ljava/lang/String;I)Z
SPLcom/android/server/wm/WindowManagerService;->destroyPreservedSurfaceLocked()V
SPLcom/android/server/wm/WindowManagerService;->detectSafeMode()Z
SPLcom/android/server/wm/WindowManagerService;->displayReady()V
SPLcom/android/server/wm/WindowManagerService;->enableScreenAfterBoot()V
SPLcom/android/server/wm/WindowManagerService;->enableScreenIfNeededLocked()V
SPLcom/android/server/wm/WindowManagerService;->excludeWindowTypeFromTapOutTask(I)Z
SPLcom/android/server/wm/WindowManagerService;->finishDrawingWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;)V
SPLcom/android/server/wm/WindowManagerService;->getBaseDisplaySize(ILandroid/graphics/Point;)V
SPLcom/android/server/wm/WindowManagerService;->getCameraLensCoverState()I
SPLcom/android/server/wm/WindowManagerService;->getCurrentAnimatorScale()F
SPLcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;
SPLcom/android/server/wm/WindowManagerService;->getDisplayContentOrCreate(ILandroid/os/IBinder;)Lcom/android/server/wm/DisplayContent;
SPLcom/android/server/wm/WindowManagerService;->getDockedStackSide()I
SPLcom/android/server/wm/WindowManagerService;->getForcedDisplayDensityForUserLocked(I)I
SPLcom/android/server/wm/WindowManagerService;->getImeFocusStackLocked()Lcom/android/server/wm/TaskStack;
SPLcom/android/server/wm/WindowManagerService;->getInitialDisplaySize(ILandroid/graphics/Point;)V
SPLcom/android/server/wm/WindowManagerService;->getInputManagerCallback()Lcom/android/server/wm/InputManagerCallback;
SPLcom/android/server/wm/WindowManagerService;->getLidState()I
SPLcom/android/server/wm/WindowManagerService;->getRecentsAnimationController()Lcom/android/server/wm/RecentsAnimationController;
SPLcom/android/server/wm/WindowManagerService;->getStableInsets(ILandroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowManagerService;->getStableInsetsLocked(ILandroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowManagerService;->getStackBounds(IILandroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowManagerService;->getWindowManagerLock()Ljava/lang/Object;
SPLcom/android/server/wm/WindowManagerService;->hasHdrSupport()Z
SPLcom/android/server/wm/WindowManagerService;->hasNavigationBar(I)Z
SPLcom/android/server/wm/WindowManagerService;->hasWideColorGamutSupport()Z
SPLcom/android/server/wm/WindowManagerService;->hideBootMessagesLocked()V
SPLcom/android/server/wm/WindowManagerService;->isCurrentProfileLocked(I)Z
SPLcom/android/server/wm/WindowManagerService;->isKeyguardLocked()Z
SPLcom/android/server/wm/WindowManagerService;->isSecureLocked(Lcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/WindowManagerService;->isShowingDream()Z
SPLcom/android/server/wm/WindowManagerService;->main(Landroid/content/Context;Lcom/android/server/input/InputManagerService;ZZLcom/android/server/policy/WindowManagerPolicy;Lcom/android/server/wm/ActivityTaskManagerService;)Lcom/android/server/wm/WindowManagerService;
SPLcom/android/server/wm/WindowManagerService;->makeSurfaceBuilder(Landroid/view/SurfaceSession;)Landroid/view/SurfaceControl$Builder;
SPLcom/android/server/wm/WindowManagerService;->makeWindowFreezingScreenIfNeededLocked(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/WindowManagerService;->monitor()V
SPLcom/android/server/wm/WindowManagerService;->notifyAppResumedFinished(Landroid/os/IBinder;)V
SPLcom/android/server/wm/WindowManagerService;->notifyFocusChanged()V
SPLcom/android/server/wm/WindowManagerService;->notifyKeyguardTrustedChanged()V
SPLcom/android/server/wm/WindowManagerService;->onAnimationFinished()V
SPLcom/android/server/wm/WindowManagerService;->onInitReady()V
SPLcom/android/server/wm/WindowManagerService;->onKeyguardShowingAndNotOccludedChanged()V
SPLcom/android/server/wm/WindowManagerService;->onSystemUiStarted()V
SPLcom/android/server/wm/WindowManagerService;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
SPLcom/android/server/wm/WindowManagerService;->onUserSwitched()V
SPLcom/android/server/wm/WindowManagerService;->openSession(Landroid/view/IWindowSessionCallback;)Landroid/view/IWindowSession;
SPLcom/android/server/wm/WindowManagerService;->openSurfaceTransaction()V
SPLcom/android/server/wm/WindowManagerService;->performEnableScreen()V
SPLcom/android/server/wm/WindowManagerService;->prepareNoneTransitionForRelaunching(Lcom/android/server/wm/AppWindowToken;)V
SPLcom/android/server/wm/WindowManagerService;->prepareWindowReplacementTransition(Lcom/android/server/wm/AppWindowToken;)Z
SPLcom/android/server/wm/WindowManagerService;->queryHdrSupport()Z
SPLcom/android/server/wm/WindowManagerService;->queryWideColorGamutSupport()Z
SPLcom/android/server/wm/WindowManagerService;->reconfigureDisplayLocked(Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/WindowManagerService;->refreshScreenCaptureDisabled(I)V
SPLcom/android/server/wm/WindowManagerService;->registerDockedStackListener(Landroid/view/IDockedStackListener;)V
SPLcom/android/server/wm/WindowManagerService;->registerPinnedStackListener(ILandroid/view/IPinnedStackListener;)V
SPLcom/android/server/wm/WindowManagerService;->registerShortcutKey(JLcom/android/internal/policy/IShortcutService;)V
SPLcom/android/server/wm/WindowManagerService;->registerWallpaperVisibilityListener(Landroid/view/IWallpaperVisibilityListener;I)Z
SPLcom/android/server/wm/WindowManagerService;->relayoutWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IIIIJLandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/DisplayCutout$ParcelableWrapper;Landroid/util/MergedConfiguration;Landroid/view/SurfaceControl;Landroid/view/InsetsState;)I
SPLcom/android/server/wm/WindowManagerService;->removeObsoleteTaskFiles(Landroid/util/ArraySet;[I)V
SPLcom/android/server/wm/WindowManagerService;->requestTraversal()V
SPLcom/android/server/wm/WindowManagerService;->resetPriorityAfterLockedSection()V
SPLcom/android/server/wm/WindowManagerService;->sendNewConfiguration(I)V
SPLcom/android/server/wm/WindowManagerService;->setAnimatorDurationScale(F)V
SPLcom/android/server/wm/WindowManagerService;->setAodShowing(Z)V
SPLcom/android/server/wm/WindowManagerService;->setDockedStackDividerTouchRegion(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowManagerService;->setEventDispatching(Z)V
SPLcom/android/server/wm/WindowManagerService;->setForceResizableTasks(Z)V
SPLcom/android/server/wm/WindowManagerService;->setHoldScreenLocked(Lcom/android/server/wm/Session;)V
SPLcom/android/server/wm/WindowManagerService;->setInsetsWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;ILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Region;)V
SPLcom/android/server/wm/WindowManagerService;->setIsPc(Z)V
SPLcom/android/server/wm/WindowManagerService;->setKeyguardGoingAway(Z)V
SPLcom/android/server/wm/WindowManagerService;->setKeyguardOrAodShowingOnDefaultDisplay(Z)V
SPLcom/android/server/wm/WindowManagerService;->setNewDisplayOverrideConfiguration(Landroid/content/res/Configuration;Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/WindowManagerService;->setSupportsFreeformWindowManagement(Z)V
SPLcom/android/server/wm/WindowManagerService;->setSupportsPictureInPicture(Z)V
SPLcom/android/server/wm/WindowManagerService;->showEmulatorDisplayOverlayIfNeeded()V
SPLcom/android/server/wm/WindowManagerService;->startFreezingDisplayLocked(IILcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/WindowManagerService;->stopFreezingDisplayLocked()V
SPLcom/android/server/wm/WindowManagerService;->systemReady()V
SPLcom/android/server/wm/WindowManagerService;->traceStateLocked(Ljava/lang/String;)V
SPLcom/android/server/wm/WindowManagerService;->tryStartExitingAnimation(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowStateAnimator;Z)Z
SPLcom/android/server/wm/WindowManagerService;->updateCircularDisplayMaskIfNeeded()V
SPLcom/android/server/wm/WindowManagerService;->updateFocusedWindowLocked(IZ)Z
SPLcom/android/server/wm/WindowManagerService;->updateNonSystemOverlayWindowsVisibilityIfNeeded(Lcom/android/server/wm/WindowState;Z)V
SPLcom/android/server/wm/WindowManagerService;->updateRotation(ZZ)V
SPLcom/android/server/wm/WindowManagerService;->updateRotationUnchecked(ZZ)V
SPLcom/android/server/wm/WindowManagerService;->watchRotation(Landroid/view/IRotationWatcher;I)I
SPLcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/os/IBinder;Z)Lcom/android/server/wm/WindowState;
SPLcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/view/IWindow;Z)Lcom/android/server/wm/WindowState;
SPLcom/android/server/wm/WindowManagerThreadPriorityBooster;-><init>()V
SPLcom/android/server/wm/WindowManagerThreadPriorityBooster;->setAppTransitionRunning(Z)V
SPLcom/android/server/wm/WindowProcessController;-><init>(Lcom/android/server/wm/ActivityTaskManagerService;Landroid/content/pm/ApplicationInfo;Ljava/lang/String;IILjava/lang/Object;Lcom/android/server/wm/WindowProcessListener;)V
SPLcom/android/server/wm/WindowProcessController;->addActivityIfNeeded(Lcom/android/server/wm/ActivityRecord;)V
SPLcom/android/server/wm/WindowProcessController;->addPackage(Ljava/lang/String;)V
SPLcom/android/server/wm/WindowProcessController;->clearActivities()V
SPLcom/android/server/wm/WindowProcessController;->clearRecentTasks()V
SPLcom/android/server/wm/WindowProcessController;->clearWaitingToKill()V
SPLcom/android/server/wm/WindowProcessController;->getChildCount()I
SPLcom/android/server/wm/WindowProcessController;->getCpuTime()J
SPLcom/android/server/wm/WindowProcessController;->getCurrentSchedulingGroup()I
SPLcom/android/server/wm/WindowProcessController;->getPid()I
SPLcom/android/server/wm/WindowProcessController;->getReportedProcState()I
SPLcom/android/server/wm/WindowProcessController;->getThread()Landroid/app/IApplicationThread;
SPLcom/android/server/wm/WindowProcessController;->hasActivities()Z
SPLcom/android/server/wm/WindowProcessController;->hasActivitiesOrRecentTasks()Z
SPLcom/android/server/wm/WindowProcessController;->hasRecentTasks()Z
SPLcom/android/server/wm/WindowProcessController;->hasThread()Z
SPLcom/android/server/wm/WindowProcessController;->hasVisibleActivities()Z
SPLcom/android/server/wm/WindowProcessController;->isCrashing()Z
SPLcom/android/server/wm/WindowProcessController;->isHomeProcess()Z
SPLcom/android/server/wm/WindowProcessController;->isInstrumenting()Z
SPLcom/android/server/wm/WindowProcessController;->isNotResponding()Z
SPLcom/android/server/wm/WindowProcessController;->isPreviousProcess()Z
SPLcom/android/server/wm/WindowProcessController;->isRemoved()Z
SPLcom/android/server/wm/WindowProcessController;->onConfigurationChanged(Landroid/content/res/Configuration;)V
SPLcom/android/server/wm/WindowProcessController;->onStartActivity(I)Landroid/app/ProfilerInfo;
SPLcom/android/server/wm/WindowProcessController;->onTopProcChanged()V
SPLcom/android/server/wm/WindowProcessController;->setAllowBackgroundActivityStarts(Z)V
SPLcom/android/server/wm/WindowProcessController;->setCrashing(Z)V
SPLcom/android/server/wm/WindowProcessController;->setDebugging(Z)V
SPLcom/android/server/wm/WindowProcessController;->setFgInteractionTime(J)V
SPLcom/android/server/wm/WindowProcessController;->setHasClientActivities(Z)V
SPLcom/android/server/wm/WindowProcessController;->setInteractionEventTime(J)V
SPLcom/android/server/wm/WindowProcessController;->setNotResponding(Z)V
SPLcom/android/server/wm/WindowProcessController;->setPendingUiClean(Z)V
SPLcom/android/server/wm/WindowProcessController;->setPersistent(Z)V
SPLcom/android/server/wm/WindowProcessController;->setPid(I)V
SPLcom/android/server/wm/WindowProcessController;->setReportedProcState(I)V
SPLcom/android/server/wm/WindowProcessController;->setRequiredAbi(Ljava/lang/String;)V
SPLcom/android/server/wm/WindowProcessController;->setThread(Landroid/app/IApplicationThread;)V
SPLcom/android/server/wm/WindowProcessController;->setUsingWrapper(Z)V
SPLcom/android/server/wm/WindowProcessController;->setWhenUnimportant(J)V
SPLcom/android/server/wm/WindowProcessController;->updateConfiguration()V
SPLcom/android/server/wm/WindowProcessController;->updateProcessInfo(ZZZZ)V
SPLcom/android/server/wm/WindowProcessController;->updateServiceConnectionActivities()V
SPLcom/android/server/wm/WindowProcessController;->updateTopResumingActivityInProcessIfNeeded(Lcom/android/server/wm/ActivityRecord;)Z
SPLcom/android/server/wm/WindowState$1;-><init>()V
SPLcom/android/server/wm/WindowState$DeathRecipient;-><init>(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/WindowState$WindowId;-><init>(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/WindowState;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/Session;Landroid/view/IWindow;Lcom/android/server/wm/WindowToken;Lcom/android/server/wm/WindowState;IILandroid/view/WindowManager$LayoutParams;IIZ)V
SPLcom/android/server/wm/WindowState;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/Session;Landroid/view/IWindow;Lcom/android/server/wm/WindowToken;Lcom/android/server/wm/WindowState;IILandroid/view/WindowManager$LayoutParams;IIZLcom/android/server/wm/WindowState$PowerManagerWrapper;)V
SPLcom/android/server/wm/WindowState;->adjustStartingWindowFlags()V
SPLcom/android/server/wm/WindowState;->applyAdjustForImeIfNeeded()V
SPLcom/android/server/wm/WindowState;->applyGravityAndUpdateFrame(Landroid/graphics/Rect;Landroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowState;->assignChildLayers(Landroid/view/SurfaceControl$Transaction;)V
SPLcom/android/server/wm/WindowState;->assignLayer(Landroid/view/SurfaceControl$Transaction;I)V
SPLcom/android/server/wm/WindowState;->attach()V
SPLcom/android/server/wm/WindowState;->calculatePolicyCrop(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowState;->calculateSystemDecorRect(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowState;->canAddInternalSystemWindow()Z
SPLcom/android/server/wm/WindowState;->computeFrameLw()V
SPLcom/android/server/wm/WindowState;->destroySurface(ZZ)Z
SPLcom/android/server/wm/WindowState;->destroySurfaceUnchecked()V
SPLcom/android/server/wm/WindowState;->dispatchResized(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;ZLandroid/util/MergedConfiguration;ZILandroid/view/DisplayCutout;)V
SPLcom/android/server/wm/WindowState;->dispatchWallpaperVisibility(Z)V
SPLcom/android/server/wm/WindowState;->expandForSurfaceInsets(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowState;->fillsDisplay()Z
SPLcom/android/server/wm/WindowState;->finishSeamlessRotation(Z)V
SPLcom/android/server/wm/WindowState;->getAppToken()Landroid/view/IApplicationToken;
SPLcom/android/server/wm/WindowState;->getBackdropFrame(Landroid/graphics/Rect;)Landroid/graphics/Rect;
SPLcom/android/server/wm/WindowState;->getBaseType()I
SPLcom/android/server/wm/WindowState;->getBounds()Landroid/graphics/Rect;
SPLcom/android/server/wm/WindowState;->getCompatFrame(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowState;->getCompatFrameSize(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowState;->getContentFrameLw()Landroid/graphics/Rect;
SPLcom/android/server/wm/WindowState;->getDisplayInfo()Landroid/view/DisplayInfo;
SPLcom/android/server/wm/WindowState;->getDrawnStateEvaluated()Z
SPLcom/android/server/wm/WindowState;->getInputDispatchingTimeoutNanos()J
SPLcom/android/server/wm/WindowState;->getInsetProvider()Lcom/android/server/wm/InsetsSourceProvider;
SPLcom/android/server/wm/WindowState;->getInsetsForRelayout(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowState;->getLastReportedMergedConfiguration(Landroid/util/MergedConfiguration;)V
SPLcom/android/server/wm/WindowState;->getMergedConfiguration(Landroid/util/MergedConfiguration;)V
SPLcom/android/server/wm/WindowState;->getName()Ljava/lang/String;
SPLcom/android/server/wm/WindowState;->getNeedsMenuLw(Lcom/android/server/policy/WindowManagerPolicy$WindowState;)Z
SPLcom/android/server/wm/WindowState;->getOwningPackage()Ljava/lang/String;
SPLcom/android/server/wm/WindowState;->getOwningUid()I
SPLcom/android/server/wm/WindowState;->getReplacingWindow()Lcom/android/server/wm/WindowState;
SPLcom/android/server/wm/WindowState;->getSession()Landroid/view/SurfaceSession;
SPLcom/android/server/wm/WindowState;->getSurfaceTouchableRegion(Landroid/graphics/Region;I)I
SPLcom/android/server/wm/WindowState;->getSystemUiVisibility()I
SPLcom/android/server/wm/WindowState;->getWindow(Ljava/util/function/Predicate;)Lcom/android/server/wm/WindowState;
SPLcom/android/server/wm/WindowState;->getWindowFrames()Lcom/android/server/wm/WindowFrames;
SPLcom/android/server/wm/WindowState;->getWmDisplayCutout()Lcom/android/server/wm/utils/WmDisplayCutout;
SPLcom/android/server/wm/WindowState;->handleWindowMovedIfNeeded()V
SPLcom/android/server/wm/WindowState;->hasContentToDisplay()Z
SPLcom/android/server/wm/WindowState;->hasMoved()Z
SPLcom/android/server/wm/WindowState;->hideLw(Z)Z
SPLcom/android/server/wm/WindowState;->hideLw(ZZ)Z
SPLcom/android/server/wm/WindowState;->hideNonSystemOverlayWindowsWhenVisible()Z
SPLcom/android/server/wm/WindowState;->hideWallpaperWindow(ZLjava/lang/String;)V
SPLcom/android/server/wm/WindowState;->initAppOpsState()V
SPLcom/android/server/wm/WindowState;->isAnimatingLw()Z
SPLcom/android/server/wm/WindowState;->isConfigChanged()Z
SPLcom/android/server/wm/WindowState;->isDefaultDisplay()Z
SPLcom/android/server/wm/WindowState;->isDimming()Z
SPLcom/android/server/wm/WindowState;->isDockedResizing()Z
SPLcom/android/server/wm/WindowState;->isDragResizing()Z
SPLcom/android/server/wm/WindowState;->isDrawFinishedLw()Z
SPLcom/android/server/wm/WindowState;->isFocused()Z
SPLcom/android/server/wm/WindowState;->isHiddenFromUserLocked()Z
SPLcom/android/server/wm/WindowState;->isInMultiWindowMode()Z
SPLcom/android/server/wm/WindowState;->isInputMethodWindow()Z
SPLcom/android/server/wm/WindowState;->isInteresting()Z
SPLcom/android/server/wm/WindowState;->isLaidOut()Z
SPLcom/android/server/wm/WindowState;->isLetterboxedAppWindow()Z
SPLcom/android/server/wm/WindowState;->isLetterboxedForDisplayCutoutLw()Z
SPLcom/android/server/wm/WindowState;->isLetterboxedOverlappingWith(Landroid/graphics/Rect;)Z
SPLcom/android/server/wm/WindowState;->isObscuringDisplay()Z
SPLcom/android/server/wm/WindowState;->isOpaqueDrawn()Z
SPLcom/android/server/wm/WindowState;->isReadyForDisplay()Z
SPLcom/android/server/wm/WindowState;->isRtl()Z
SPLcom/android/server/wm/WindowState;->isSelfOrAncestorWindowAnimatingExit()Z
SPLcom/android/server/wm/WindowState;->isVisibleNow()Z
SPLcom/android/server/wm/WindowState;->isVoiceInteraction()Z
SPLcom/android/server/wm/WindowState;->isWinVisibleLw()Z
SPLcom/android/server/wm/WindowState;->mightAffectAllDrawn()Z
SPLcom/android/server/wm/WindowState;->needsRelativeLayeringToIme()Z
SPLcom/android/server/wm/WindowState;->needsZBoost()Z
SPLcom/android/server/wm/WindowState;->notifyInsetsChanged()V
SPLcom/android/server/wm/WindowState;->onAppVisibilityChanged(ZZ)Z
SPLcom/android/server/wm/WindowState;->onDisplayChanged(Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/WindowState;->onExitAnimationDone()V
SPLcom/android/server/wm/WindowState;->onParentChanged()V
SPLcom/android/server/wm/WindowState;->openInputChannel(Landroid/view/InputChannel;)V
SPLcom/android/server/wm/WindowState;->performShowLocked()Z
SPLcom/android/server/wm/WindowState;->prelayout()V
SPLcom/android/server/wm/WindowState;->prepareWindowToDisplayDuringRelayout(Z)V
SPLcom/android/server/wm/WindowState;->relayoutVisibleWindow(III)I
SPLcom/android/server/wm/WindowState;->removeReplacedWindowIfNeeded(Lcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/WindowState;->reportFocusChangedSerialized(ZZ)V
SPLcom/android/server/wm/WindowState;->reportResized()V
SPLcom/android/server/wm/WindowState;->sendAppVisibilityToClients()V
SPLcom/android/server/wm/WindowState;->setDisplayLayoutNeeded()V
SPLcom/android/server/wm/WindowState;->setDrawnStateEvaluated(Z)V
SPLcom/android/server/wm/WindowState;->setForceHideNonSystemOverlayWindowIfNeeded(Z)V
SPLcom/android/server/wm/WindowState;->setFrameNumber(J)V
SPLcom/android/server/wm/WindowState;->setHasSurface(Z)V
SPLcom/android/server/wm/WindowState;->setHiddenWhileSuspended(Z)V
SPLcom/android/server/wm/WindowState;->setInsetProvider(Lcom/android/server/wm/InsetsSourceProvider;)V
SPLcom/android/server/wm/WindowState;->setLastReportedMergedConfiguration(Landroid/util/MergedConfiguration;)V
SPLcom/android/server/wm/WindowState;->setOrientationChanging(Z)V
SPLcom/android/server/wm/WindowState;->setReplacementWindowIfNeeded(Lcom/android/server/wm/WindowState;)Z
SPLcom/android/server/wm/WindowState;->setReportResizeHints()Z
SPLcom/android/server/wm/WindowState;->setRequestedSize(II)V
SPLcom/android/server/wm/WindowState;->setShowToOwnerOnlyLocked(Z)V
SPLcom/android/server/wm/WindowState;->setWindowScale(II)V
SPLcom/android/server/wm/WindowState;->showLw(Z)Z
SPLcom/android/server/wm/WindowState;->showLw(ZZ)Z
SPLcom/android/server/wm/WindowState;->surfaceInsetsChanging()Z
SPLcom/android/server/wm/WindowState;->toString()Ljava/lang/String;
SPLcom/android/server/wm/WindowState;->transformClipRectFromScreenToSurfaceSpace(Landroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowState;->updateLastInsetValues()V
SPLcom/android/server/wm/WindowState;->updateReportedVisibility(Lcom/android/server/wm/WindowState$UpdateReportedVisibilityResults;)V
SPLcom/android/server/wm/WindowState;->updateResizingWindowIfNeeded()V
SPLcom/android/server/wm/WindowStateAnimator;-><init>(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/WindowStateAnimator;->applyAnimationLocked(IZ)Z
SPLcom/android/server/wm/WindowStateAnimator;->applyEnterAnimationLocked()V
SPLcom/android/server/wm/WindowStateAnimator;->calculateCrop(Landroid/graphics/Rect;)Z
SPLcom/android/server/wm/WindowStateAnimator;->calculateSurfaceBounds(Lcom/android/server/wm/WindowState;Landroid/view/WindowManager$LayoutParams;Landroid/graphics/Rect;)V
SPLcom/android/server/wm/WindowStateAnimator;->commitFinishDrawingLocked()Z
SPLcom/android/server/wm/WindowStateAnimator;->computeShownFrameLocked()V
SPLcom/android/server/wm/WindowStateAnimator;->createSurfaceLocked(II)Lcom/android/server/wm/WindowSurfaceController;
SPLcom/android/server/wm/WindowStateAnimator;->destroyPreservedSurfaceLocked()V
SPLcom/android/server/wm/WindowStateAnimator;->destroySurface()V
SPLcom/android/server/wm/WindowStateAnimator;->destroySurfaceLocked()V
SPLcom/android/server/wm/WindowStateAnimator;->detachChildren()V
SPLcom/android/server/wm/WindowStateAnimator;->finishDrawingLocked()Z
SPLcom/android/server/wm/WindowStateAnimator;->getShown()Z
SPLcom/android/server/wm/WindowStateAnimator;->hide(Landroid/view/SurfaceControl$Transaction;Ljava/lang/String;)V
SPLcom/android/server/wm/WindowStateAnimator;->hide(Ljava/lang/String;)V
SPLcom/android/server/wm/WindowStateAnimator;->isForceScaled()Z
SPLcom/android/server/wm/WindowStateAnimator;->markPreservedSurfaceForDestroy()V
SPLcom/android/server/wm/WindowStateAnimator;->resetDrawState()V
SPLcom/android/server/wm/WindowStateAnimator;->setOffsetPositionForStackResize(Z)V
SPLcom/android/server/wm/WindowStateAnimator;->setSecureLocked(Z)V
SPLcom/android/server/wm/WindowStateAnimator;->setSurfaceBoundariesLocked(Z)V
SPLcom/android/server/wm/WindowStateAnimator;->setWallpaperOffset(II)Z
SPLcom/android/server/wm/WindowStateAnimator;->showSurfaceRobustlyLocked()Z
SPLcom/android/server/wm/WindowSurfaceController;-><init>(Landroid/view/SurfaceSession;Ljava/lang/String;IIIILcom/android/server/wm/WindowStateAnimator;II)V
SPLcom/android/server/wm/WindowSurfaceController;->clearCropInTransaction(Z)V
SPLcom/android/server/wm/WindowSurfaceController;->destroyNotInTransaction()V
SPLcom/android/server/wm/WindowSurfaceController;->detachChildren()V
SPLcom/android/server/wm/WindowSurfaceController;->getHeight()I
SPLcom/android/server/wm/WindowSurfaceController;->getShown()Z
SPLcom/android/server/wm/WindowSurfaceController;->getSurfaceControl(Landroid/view/SurfaceControl;)V
SPLcom/android/server/wm/WindowSurfaceController;->getWidth()I
SPLcom/android/server/wm/WindowSurfaceController;->hide(Landroid/view/SurfaceControl$Transaction;Ljava/lang/String;)V
SPLcom/android/server/wm/WindowSurfaceController;->hideSurface(Landroid/view/SurfaceControl$Transaction;)V
SPLcom/android/server/wm/WindowSurfaceController;->prepareToShowInTransaction(FFFFFZ)Z
SPLcom/android/server/wm/WindowSurfaceController;->setBufferSizeInTransaction(IIZ)Z
SPLcom/android/server/wm/WindowSurfaceController;->setCropInTransaction(Landroid/graphics/Rect;Z)V
SPLcom/android/server/wm/WindowSurfaceController;->setMatrix(Landroid/view/SurfaceControl$Transaction;FFFFZ)V
SPLcom/android/server/wm/WindowSurfaceController;->setMatrixInTransaction(FFFFZ)V
SPLcom/android/server/wm/WindowSurfaceController;->setPosition(Landroid/view/SurfaceControl$Transaction;FFZ)V
SPLcom/android/server/wm/WindowSurfaceController;->setPositionInTransaction(FFZ)V
SPLcom/android/server/wm/WindowSurfaceController;->setSecure(Z)V
SPLcom/android/server/wm/WindowSurfaceController;->setShown(Z)V
SPLcom/android/server/wm/WindowSurfaceController;->showRobustlyInTransaction()Z
SPLcom/android/server/wm/WindowSurfaceController;->showSurface()Z
SPLcom/android/server/wm/WindowSurfaceController;->updateVisibility()Z
SPLcom/android/server/wm/WindowSurfacePlacer;-><init>(Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/WindowSurfacePlacer;->continueLayout()V
SPLcom/android/server/wm/WindowSurfacePlacer;->deferLayout()V
SPLcom/android/server/wm/WindowSurfacePlacer;->lambda$new$0$WindowSurfacePlacer()V
SPLcom/android/server/wm/WindowSurfacePlacer;->lambda$new$0(Lcom/android/server/wm/WindowSurfacePlacer;)V
SPLcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement(Z)V
SPLcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacementLoop()V
SPLcom/android/server/wm/WindowSurfacePlacer;->requestTraversal()V
SPLcom/android/server/wm/WindowToken;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/os/IBinder;IZLcom/android/server/wm/DisplayContent;ZZ)V
SPLcom/android/server/wm/WindowToken;->addWindow(Lcom/android/server/wm/WindowState;)V
SPLcom/android/server/wm/WindowToken;->asAppWindowToken()Lcom/android/server/wm/AppWindowToken;
SPLcom/android/server/wm/WindowToken;->getName()Ljava/lang/String;
SPLcom/android/server/wm/WindowToken;->getReplacingWindow()Lcom/android/server/wm/WindowState;
SPLcom/android/server/wm/WindowToken;->okToAnimate()Z
SPLcom/android/server/wm/WindowToken;->okToDisplay()Z
SPLcom/android/server/wm/WindowToken;->onDisplayChanged(Lcom/android/server/wm/DisplayContent;)V
SPLcom/android/server/wm/WindowToken;->setHidden(Z)V
SPLcom/android/server/wm/WindowToken;->toString()Ljava/lang/String;
SPLcom/android/server/wm/WindowTraceBuffer;->resetBuffer()V
SPLcom/android/server/wm/WindowTraceBuffer;->setCapacity(I)V
SPLcom/android/server/wm/WindowTracing;-><init>(Ljava/io/File;Lcom/android/server/wm/WindowManagerService;Landroid/view/Choreographer;Lcom/android/server/wm/WindowManagerGlobalLock;)V
SPLcom/android/server/wm/WindowTracing;-><init>(Ljava/io/File;Lcom/android/server/wm/WindowManagerService;Landroid/view/Choreographer;Lcom/android/server/wm/WindowManagerGlobalLock;I)V
SPLcom/android/server/wm/WindowTracing;->createDefaultAndStartLooper(Landroid/content/Context;)Lcom/android/server/wm/WindowTracing;
SPLcom/android/server/wm/WindowTracing;->createDefaultAndStartLooper(Lcom/android/server/wm/WindowManagerService;Landroid/view/Choreographer;)Lcom/android/server/wm/WindowTracing;
SPLcom/android/server/wm/WindowTracing;->isEnabled()Z
SPLcom/android/server/wm/WindowTracing;->logState(Ljava/lang/String;)V
SPLcom/android/server/wm/WindowTracing;->setLogLevel(ILjava/io/PrintWriter;)V
SPLcom/android/server/wm/WindowTracing;->traceStateLocked(Ljava/lang/String;Lcom/android/server/wm/WindowManagerService;)V
SPLcom/android/server/wm/utils/CoordinateTransforms;->transformPhysicalToLogicalCoordinates(IIILandroid/graphics/Matrix;)V
SPLcom/android/server/wm/utils/DisplayRotationUtil;->getRotatedBounds([Landroid/graphics/Rect;III)[Landroid/graphics/Rect;
SPLcom/android/server/wm/utils/InsetUtils;->rotateInsets(Landroid/graphics/Rect;I)V
SPLcom/android/server/wm/utils/RotationCache;->getOrCompute(Ljava/lang/Object;I)Ljava/lang/Object;
SPLcom/android/server/wm/utils/WmDisplayCutout;-><init>(Landroid/view/DisplayCutout;Landroid/util/Size;)V
SPLcom/android/server/wm/utils/WmDisplayCutout;->calculateRelativeTo(Landroid/graphics/Rect;)Lcom/android/server/wm/utils/WmDisplayCutout;
SPLcom/android/server/wm/utils/WmDisplayCutout;->computeSafeInsets(Landroid/util/Size;Landroid/view/DisplayCutout;)Landroid/graphics/Rect;
SPLcom/android/server/wm/utils/WmDisplayCutout;->computeSafeInsets(Landroid/view/DisplayCutout;II)Lcom/android/server/wm/utils/WmDisplayCutout;
SPLcom/android/server/wm/utils/WmDisplayCutout;->equals(Ljava/lang/Object;)Z
SPLcom/android/server/wm/utils/WmDisplayCutout;->findInsetForSide(Landroid/util/Size;Ljava/util/List;I)I
SPLcom/android/server/wm/utils/WmDisplayCutout;->getDisplayCutout()Landroid/view/DisplayCutout;
SPLcom/android/server/wm/utils/WmDisplayCutout;->inset(IIII)Lcom/android/server/wm/utils/WmDisplayCutout;
SPLcom/google/android/startop/iorap/IorapForwardingService;-><init>(Landroid/content/Context;)V
SPLcom/google/android/startop/iorap/IorapForwardingService;->connectToRemoteAndConfigure()Z
SPLcom/google/android/startop/iorap/IorapForwardingService;->connectToRemoteAndConfigureLocked()Z
SPLcom/google/android/startop/iorap/IorapForwardingService;->isIorapEnabled()Z
SPLcom/google/android/startop/iorap/IorapForwardingService;->onStart()V
SPLcom/google/android/startop/iorap/IorapForwardingService;->retryConnectToRemoteAndConfigure(I)Z
SPLfi/iki/elonen/NanoHTTPD;->getHostname()Ljava/lang/String;
SPLfi/iki/elonen/NanoHTTPD;->setAsyncRunner(Lfi/iki/elonen/NanoHTTPD$AsyncRunner;)V
SPLfi/iki/elonen/NanoHTTPD;->setTempFileManagerFactory(Lfi/iki/elonen/NanoHTTPD$TempFileManagerFactory;)V
