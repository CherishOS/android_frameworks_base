// Baseline format: 1.0
AcronymName: android.app.NotificationChannel#isImportanceLockedByOEM():
    Acronyms should not be capitalized in method names: was `isImportanceLockedByOEM`, should this be `isImportanceLockedByOem`?
AcronymName: android.app.NotificationChannel#setImportanceLockedByOEM(boolean):
    Acronyms should not be capitalized in method names: was `setImportanceLockedByOEM`, should this be `setImportanceLockedByOem`?


ArrayReturn: android.media.AudioRecordingConfiguration#AudioRecordingConfiguration(int, int, int, android.media.AudioFormat, android.media.AudioFormat, int, String, int, boolean, int, android.media.audiofx.AudioEffect.Descriptor[], android.media.audiofx.AudioEffect.Descriptor[]) parameter #10:
    Method parameter should be Collection<Descriptor> (or subclass) instead of raw array; was `android.media.audiofx.AudioEffect.Descriptor[]`
ArrayReturn: android.media.AudioRecordingConfiguration#AudioRecordingConfiguration(int, int, int, android.media.AudioFormat, android.media.AudioFormat, int, String, int, boolean, int, android.media.audiofx.AudioEffect.Descriptor[], android.media.audiofx.AudioEffect.Descriptor[]) parameter #11:
    Method parameter should be Collection<Descriptor> (or subclass) instead of raw array; was `android.media.audiofx.AudioEffect.Descriptor[]`
ArrayReturn: android.view.Display#getSupportedWideColorGamut():
    Method should return Collection<ColorSpace> (or subclass) instead of raw array; was `android.graphics.ColorSpace[]`
ArrayReturn: android.view.FocusFinder#sort(android.view.View[], int, int, android.view.ViewGroup, boolean) parameter #0:
    Method parameter should be Collection<View> (or subclass) instead of raw array; was `android.view.View[]`
ArrayReturn: android.view.contentcapture.ViewNode.ViewStructureImpl#setAutofillOptions(CharSequence[]) parameter #0:
    Method parameter should be Collection<CharSequence> (or subclass) instead of raw array; was `java.lang.CharSequence[]`


AutoBoxing: android.os.VintfObject#getTargetFrameworkCompatibilityMatrixVersion():
    Must avoid boxed primitives (`java.lang.Long`)


BuilderSetStyle: android.os.StrictMode.ThreadPolicy.Builder#detectExplicitGc():
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method android.os.StrictMode.ThreadPolicy.Builder.detectExplicitGc()
BuilderSetStyle: android.os.StrictMode.VmPolicy.Builder#permitIncorrectContextUse():
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method android.os.StrictMode.VmPolicy.Builder.permitIncorrectContextUse()


ConcreteCollection: android.content.AutofillOptions#disabledActivities:
    Field type is concrete collection (`android.util.ArrayMap`); must be higher-level interface
ConcreteCollection: android.content.AutofillOptions#whitelistedActivitiesForAugmentedAutofill:
    Field type is concrete collection (`android.util.ArraySet`); must be higher-level interface
ConcreteCollection: android.content.ContentCaptureOptions#ContentCaptureOptions(int, int, int, int, int, android.util.ArraySet<android.content.ComponentName>) parameter #5:
    Parameter type is concrete collection (`android.util.ArraySet`); must be higher-level interface
ConcreteCollection: android.content.ContentCaptureOptions#whitelistedComponents:
    Field type is concrete collection (`android.util.ArraySet`); must be higher-level interface
ConcreteCollection: android.database.sqlite.SQLiteDebug.PagerStats#dbStats:
    Field type is concrete collection (`java.util.ArrayList`); must be higher-level interface
ConcreteCollection: android.service.autofill.CompositeUserData#getFieldClassificationAlgorithms():
    Return type is concrete collection (`android.util.ArrayMap`); must be higher-level interface
ConcreteCollection: android.service.autofill.CompositeUserData#getFieldClassificationArgs():
    Return type is concrete collection (`android.util.ArrayMap`); must be higher-level interface
ConcreteCollection: android.service.autofill.InternalTransformation#batchApply(android.service.autofill.ValueFinder, android.widget.RemoteViews, java.util.ArrayList<android.util.Pair<java.lang.Integer,android.service.autofill.InternalTransformation>>) parameter #2:
    Parameter type is concrete collection (`java.util.ArrayList`); must be higher-level interface
ConcreteCollection: android.service.autofill.UserData#getFieldClassificationAlgorithms():
    Return type is concrete collection (`android.util.ArrayMap`); must be higher-level interface


ContextFirst: android.os.VibrationEffect#get(android.net.Uri, android.content.Context) parameter #1:
    Context is distinct, so it must be the first argument (method `get`)


EndsWithImpl: android.view.contentcapture.ViewNode.ViewStructureImpl:
    Don't expose your implementation details: `ViewStructureImpl` ends with `Impl`


Enum: android.view.inspector.InspectableProperty.ValueType:
    Enums are discouraged in Android APIs


EqualsAndHashCode: android.os.StrictMode.ViolationInfo#hashCode():
    Must override both equals and hashCode; missing one in android.os.StrictMode.ViolationInfo


ExecutorRegistration: android.media.audiofx.AudioEffect#setParameterListener(android.media.audiofx.AudioEffect.OnParameterChangeListener):
    Registration methods should have overload that accepts delivery Executor: `setParameterListener`
ExecutorRegistration: android.permission.PermissionControllerManager#countPermissionApps(java.util.List<java.lang.String>, int, android.permission.PermissionControllerManager.OnCountPermissionAppsResultCallback, android.os.Handler):
    Registration methods should have overload that accepts delivery Executor: `countPermissionApps`
ExecutorRegistration: android.permission.PermissionControllerManager#getAppPermissions(String, android.permission.PermissionControllerManager.OnGetAppPermissionResultCallback, android.os.Handler):
    Registration methods should have overload that accepts delivery Executor: `getAppPermissions`
ExecutorRegistration: android.service.watchdog.ExplicitHealthCheckService#setCallback(android.os.RemoteCallback):
    Registration methods should have overload that accepts delivery Executor: `setCallback`
ExecutorRegistration: android.window.WindowOrganizer#applySyncTransaction(android.window.WindowContainerTransaction, android.window.WindowContainerTransactionCallback):
    Registration methods should have overload that accepts delivery Executor: `applySyncTransaction`


ForbiddenSuperClass: android.app.AppDetailsActivity:
    AppDetailsActivity should not extend `Activity`. Activity subclasses are impossible to compose. Expose a composable API instead.


GenericException: android.service.autofill.CharSequenceTransformation#apply(android.service.autofill.ValueFinder, android.widget.RemoteViews, int):
    Methods must not throw generic exceptions (`java.lang.Exception`)
GenericException: android.service.autofill.DateTransformation#apply(android.service.autofill.ValueFinder, android.widget.RemoteViews, int):
    Methods must not throw generic exceptions (`java.lang.Exception`)
GenericException: android.service.autofill.ImageTransformation#apply(android.service.autofill.ValueFinder, android.widget.RemoteViews, int):
    Methods must not throw generic exceptions (`java.lang.Exception`)


GetterSetterNames: android.location.GnssClock#setBiasNanos(double):
    Symmetric method for `hasBiasNanos` must be named `setHasBiasNanos`; was `setBiasNanos`
GetterSetterNames: android.location.GnssClock#setBiasUncertaintyNanos(double):
    Symmetric method for `hasBiasUncertaintyNanos` must be named `setHasBiasUncertaintyNanos`; was `setBiasUncertaintyNanos`
GetterSetterNames: android.location.GnssClock#setDriftNanosPerSecond(double):
    Symmetric method for `hasDriftNanosPerSecond` must be named `setHasDriftNanosPerSecond`; was `setDriftNanosPerSecond`
GetterSetterNames: android.location.GnssClock#setDriftUncertaintyNanosPerSecond(double):
    Symmetric method for `hasDriftUncertaintyNanosPerSecond` must be named `setHasDriftUncertaintyNanosPerSecond`; was `setDriftUncertaintyNanosPerSecond`
GetterSetterNames: android.location.GnssClock#setElapsedRealtimeNanos(long):
    Symmetric method for `hasElapsedRealtimeNanos` must be named `setHasElapsedRealtimeNanos`; was `setElapsedRealtimeNanos`
GetterSetterNames: android.location.GnssClock#setElapsedRealtimeUncertaintyNanos(double):
    Symmetric method for `hasElapsedRealtimeUncertaintyNanos` must be named `setHasElapsedRealtimeUncertaintyNanos`; was `setElapsedRealtimeUncertaintyNanos`
GetterSetterNames: android.location.GnssClock#setFullBiasNanos(long):
    Symmetric method for `hasFullBiasNanos` must be named `setHasFullBiasNanos`; was `setFullBiasNanos`
GetterSetterNames: android.location.GnssClock#setLeapSecond(int):
    Symmetric method for `hasLeapSecond` must be named `setHasLeapSecond`; was `setLeapSecond`
GetterSetterNames: android.location.GnssClock#setReferenceCarrierFrequencyHzForIsb(double):
    Symmetric method for `hasReferenceCarrierFrequencyHzForIsb` must be named `setHasReferenceCarrierFrequencyHzForIsb`; was `setReferenceCarrierFrequencyHzForIsb`
GetterSetterNames: android.location.GnssClock#setReferenceCodeTypeForIsb(String):
    Symmetric method for `hasReferenceCodeTypeForIsb` must be named `setHasReferenceCodeTypeForIsb`; was `setReferenceCodeTypeForIsb`
GetterSetterNames: android.location.GnssClock#setReferenceConstellationTypeForIsb(int):
    Symmetric method for `hasReferenceConstellationTypeForIsb` must be named `setHasReferenceConstellationTypeForIsb`; was `setReferenceConstellationTypeForIsb`
GetterSetterNames: android.location.GnssClock#setTimeUncertaintyNanos(double):
    Symmetric method for `hasTimeUncertaintyNanos` must be named `setHasTimeUncertaintyNanos`; was `setTimeUncertaintyNanos`
GetterSetterNames: android.location.GnssMeasurement#setBasebandCn0DbHz(double):
    Symmetric method for `hasBasebandCn0DbHz` must be named `setHasBasebandCn0DbHz`; was `setBasebandCn0DbHz`
GetterSetterNames: android.location.GnssMeasurement#setCarrierFrequencyHz(float):
    Symmetric method for `hasCarrierFrequencyHz` must be named `setHasCarrierFrequencyHz`; was `setCarrierFrequencyHz`
GetterSetterNames: android.location.GnssMeasurement#setCodeType(String):
    Symmetric method for `hasCodeType` must be named `setHasCodeType`; was `setCodeType`
GetterSetterNames: android.location.GnssMeasurement#setCorrelationVectors(java.util.Collection<android.location.CorrelationVector>):
    Symmetric method for `hasCorrelationVectors` must be named `setHasCorrelationVectors`; was `setCorrelationVectors`
GetterSetterNames: android.location.GnssMeasurement#setFullInterSignalBiasNanos(double):
    Symmetric method for `hasFullInterSignalBiasNanos` must be named `setHasFullInterSignalBiasNanos`; was `setFullInterSignalBiasNanos`
GetterSetterNames: android.location.GnssMeasurement#setFullInterSignalBiasUncertaintyNanos(double):
    Symmetric method for `hasFullInterSignalBiasUncertaintyNanos` must be named `setHasFullInterSignalBiasUncertaintyNanos`; was `setFullInterSignalBiasUncertaintyNanos`
GetterSetterNames: android.location.GnssMeasurement#setSatelliteInterSignalBiasNanos(double):
    Symmetric method for `hasSatelliteInterSignalBiasNanos` must be named `setHasSatelliteInterSignalBiasNanos`; was `setSatelliteInterSignalBiasNanos`
GetterSetterNames: android.location.GnssMeasurement#setSatelliteInterSignalBiasUncertaintyNanos(double):
    Symmetric method for `hasSatelliteInterSignalBiasUncertaintyNanos` must be named `setHasSatelliteInterSignalBiasUncertaintyNanos`; was `setSatelliteInterSignalBiasUncertaintyNanos`
GetterSetterNames: android.location.GnssMeasurement#setSatellitePvt(android.location.SatellitePvt):
    Symmetric method for `hasSatellitePvt` must be named `setHasSatellitePvt`; was `setSatellitePvt`
GetterSetterNames: android.location.GnssMeasurement#setSnrInDb(double):
    Symmetric method for `hasSnrInDb` must be named `setHasSnrInDb`; was `setSnrInDb`
GetterSetterNames: android.net.NetworkPolicyManager#getRestrictBackground():
    Symmetric method for `setRestrictBackground` must be named `isRestrictBackground`; was `getRestrictBackground`


IntentBuilderName: android.hardware.soundtrigger.KeyphraseEnrollmentInfo#getManageKeyphraseIntent(int, String, java.util.Locale):
    Methods creating an Intent should be named `create<Foo>Intent()`, was `getManageKeyphraseIntent`


IntentName: android.provider.Settings.Secure#VOICE_INTERACTION_SERVICE:
    Intent action constant name must be ACTION_FOO: VOICE_INTERACTION_SERVICE
IntentName: android.provider.Telephony.Sms.Intents#SMS_CARRIER_PROVISION_ACTION:
    Intent action constant name must be ACTION_FOO: SMS_CARRIER_PROVISION_ACTION


KotlinOperator: android.os.PackageTagsList#contains(android.os.PackageTagsList):
    Method can be invoked as a "in" operator from Kotlin: `contains` (this is usually desirable; just make sure it makes sense for this type of object)
KotlinOperator: android.util.SparseArrayMap#get(int, K):
    Method can be invoked with an indexing operator from Kotlin: `get` (this is usually desirable; just make sure it makes sense for this type of object)


ListenerLast: android.permission.PermissionControllerManager#countPermissionApps(java.util.List<java.lang.String>, int, android.permission.PermissionControllerManager.OnCountPermissionAppsResultCallback, android.os.Handler) parameter #3:
    Listeners should always be at end of argument list (method `countPermissionApps`)
ListenerLast: android.permission.PermissionControllerManager#getAppPermissions(String, android.permission.PermissionControllerManager.OnGetAppPermissionResultCallback, android.os.Handler) parameter #2:
    Listeners should always be at end of argument list (method `getAppPermissions`)


ManagerConstructor: android.content.pm.ShortcutManager#ShortcutManager(android.content.Context):
    Managers must always be obtained from Context; no direct constructors


MinMaxConstant: android.os.UserHandle#MIN_SECONDARY_USER_ID:
    If min/max could change in future, make them dynamic methods: android.os.UserHandle#MIN_SECONDARY_USER_ID
MinMaxConstant: android.view.autofill.AutofillManager#MAX_TEMP_AUGMENTED_SERVICE_DURATION_MS:
    If min/max could change in future, make them dynamic methods: android.view.autofill.AutofillManager#MAX_TEMP_AUGMENTED_SERVICE_DURATION_MS


MissingGetterMatchingBuilder: android.media.VolumeShaper.Configuration.Builder#setOptionFlags(int):
    android.media.VolumeShaper.Configuration does not declare a `getOptionFlags()` method matching method android.media.VolumeShaper.Configuration.Builder.setOptionFlags(int)
MissingGetterMatchingBuilder: android.media.audiopolicy.AudioPolicy.Builder#setIsTestFocusPolicy(boolean):
    android.media.audiopolicy.AudioPolicy does not declare a `isIsTestFocusPolicy()` method matching method android.media.audiopolicy.AudioPolicy.Builder.setIsTestFocusPolicy(boolean)
MissingGetterMatchingBuilder: android.security.keystore.KeyGenParameterSpec.Builder#setUniqueIdIncluded(boolean):
    android.security.keystore.KeyGenParameterSpec does not declare a `isUniqueIdIncluded()` method matching method android.security.keystore.KeyGenParameterSpec.Builder.setUniqueIdIncluded(boolean)
MissingGetterMatchingBuilder: android.telecom.ConnectionRequest.Builder#setIsAdhocConferenceCall(boolean):
    android.telecom.ConnectionRequest does not declare a `isIsAdhocConferenceCall()` method matching method android.telecom.ConnectionRequest.Builder.setIsAdhocConferenceCall(boolean)
MissingGetterMatchingBuilder: android.telecom.ConnectionRequest.Builder#setRttPipeFromInCall(android.os.ParcelFileDescriptor):
    android.telecom.ConnectionRequest does not declare a `getRttPipeFromInCall()` method matching method android.telecom.ConnectionRequest.Builder.setRttPipeFromInCall(android.os.ParcelFileDescriptor)
MissingGetterMatchingBuilder: android.telecom.ConnectionRequest.Builder#setRttPipeToInCall(android.os.ParcelFileDescriptor):
    android.telecom.ConnectionRequest does not declare a `getRttPipeToInCall()` method matching method android.telecom.ConnectionRequest.Builder.setRttPipeToInCall(android.os.ParcelFileDescriptor)
MissingGetterMatchingBuilder: android.telecom.ConnectionRequest.Builder#setShouldShowIncomingCallUi(boolean):
    android.telecom.ConnectionRequest does not declare a `shouldShowIncomingCallUi()` method matching method android.telecom.ConnectionRequest.Builder.setShouldShowIncomingCallUi(boolean)
MissingGetterMatchingBuilder: android.view.Display.Mode.Builder#setResolution(int, int):
    android.view.Display.Mode does not declare a `getResolution()` method matching method android.view.Display.Mode.Builder.setResolution(int,int)


MissingNullability: android.app.Activity#onMovedToDisplay(int, android.content.res.Configuration) parameter #1:
    Missing nullability on parameter `config` in method `onMovedToDisplay`
MissingNullability: android.app.ActivityManager#alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName) parameter #0:
    Missing nullability on parameter `activity` in method `alwaysShowUnsupportedCompileSdkWarning`
MissingNullability: android.app.ActivityManager#holdLock(android.os.IBinder, int) parameter #0:
    Missing nullability on parameter `token` in method `holdLock`
MissingNullability: android.app.ActivityManager#scheduleApplicationInfoChanged(java.util.List<java.lang.String>, int) parameter #0:
    Missing nullability on parameter `packages` in method `scheduleApplicationInfoChanged`
MissingNullability: android.app.ActivityManager.TaskDescription#getIconFilename():
    Missing nullability on method `getIconFilename` return
MissingNullability: android.app.ActivityTaskManager#clearLaunchParamsForPackages(java.util.List<java.lang.String>) parameter #0:
    Missing nullability on parameter `packageNames` in method `clearLaunchParamsForPackages`
MissingNullability: android.app.ActivityTaskManager#resizeTask(int, android.graphics.Rect) parameter #1:
    Missing nullability on parameter `bounds` in method `resizeTask`
MissingNullability: android.app.ActivityTaskManager#supportsMultiWindow(android.content.Context) parameter #0:
    Missing nullability on parameter `context` in method `supportsMultiWindow`
MissingNullability: android.app.ActivityTaskManager#supportsSplitScreenMultiWindow(android.content.Context) parameter #0:
    Missing nullability on parameter `context` in method `supportsSplitScreenMultiWindow`
MissingNullability: android.app.AppDetailsActivity#onCreate(android.os.Bundle) parameter #0:
    Missing nullability on parameter `savedInstanceState` in method `onCreate`
MissingNullability: android.app.AppOpsManager#isOperationActive(int, int, String) parameter #2:
    Missing nullability on parameter `packageName` in method `isOperationActive`
MissingNullability: android.app.AppOpsManager#opToPermission(int):
    Missing nullability on method `opToPermission` return
MissingNullability: android.app.AppOpsManager#permissionToOpCode(String) parameter #0:
    Missing nullability on parameter `permission` in method `permissionToOpCode`
MissingNullability: android.app.AppOpsManager#setMode(int, int, String, int) parameter #2:
    Missing nullability on parameter `packageName` in method `setMode`
MissingNullability: android.app.NotificationManager#allowAssistantAdjustment(String) parameter #0:
    Missing nullability on parameter `capability` in method `allowAssistantAdjustment`
MissingNullability: android.app.NotificationManager#disallowAssistantAdjustment(String) parameter #0:
    Missing nullability on parameter `capability` in method `disallowAssistantAdjustment`
MissingNullability: android.app.NotificationManager#getEffectsSuppressor():
    Missing nullability on method `getEffectsSuppressor` return
MissingNullability: android.app.TimePickerDialog#getTimePicker():
    Missing nullability on method `getTimePicker` return
MissingNullability: android.app.WindowConfiguration#compareTo(android.app.WindowConfiguration) parameter #0:
    Missing nullability on parameter `that` in method `compareTo`
MissingNullability: android.app.WindowConfiguration#getAppBounds():
    Missing nullability on method `getAppBounds` return
MissingNullability: android.app.WindowConfiguration#getBounds():
    Missing nullability on method `getBounds` return
MissingNullability: android.app.WindowConfiguration#setAppBounds(android.graphics.Rect) parameter #0:
    Missing nullability on parameter `rect` in method `setAppBounds`
MissingNullability: android.app.WindowConfiguration#setBounds(android.graphics.Rect) parameter #0:
    Missing nullability on parameter `rect` in method `setBounds`
MissingNullability: android.app.WindowConfiguration#setTo(android.app.WindowConfiguration) parameter #0:
    Missing nullability on parameter `other` in method `setTo`
MissingNullability: android.app.WindowConfiguration#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.app.admin.DevicePolicyManager#getOwnerInstalledCaCerts(android.os.UserHandle):
    Missing nullability on method `getOwnerInstalledCaCerts` return
MissingNullability: android.app.admin.SecurityLog.SecurityEvent#SecurityEvent(long, byte[]) parameter #1:
    Missing nullability on parameter `data` in method `SecurityEvent`
MissingNullability: android.app.prediction.AppPredictor#getSessionId():
    Missing nullability on method `getSessionId` return
MissingNullability: android.content.AutofillOptions#forWhitelistingItself():
    Missing nullability on method `forWhitelistingItself` return
MissingNullability: android.content.AutofillOptions#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `parcel` in method `writeToParcel`
MissingNullability: android.content.ContentCaptureOptions#forWhitelistingItself():
    Missing nullability on method `forWhitelistingItself` return
MissingNullability: android.content.ContentCaptureOptions#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `parcel` in method `writeToParcel`
MissingNullability: android.content.ContentResolver#getSyncAdapterPackagesForAuthorityAsUser(String, int):
    Missing nullability on method `getSyncAdapterPackagesForAuthorityAsUser` return
MissingNullability: android.content.ContentResolver#getSyncAdapterPackagesForAuthorityAsUser(String, int) parameter #0:
    Missing nullability on parameter `authority` in method `getSyncAdapterPackagesForAuthorityAsUser`
MissingNullability: android.content.pm.ActivityInfo#isTranslucentOrFloating(android.content.res.TypedArray) parameter #0:
    Missing nullability on parameter `attributes` in method `isTranslucentOrFloating`
MissingNullability: android.content.pm.LauncherApps#LauncherApps(android.content.Context) parameter #0:
    Missing nullability on parameter `context` in method `LauncherApps`
MissingNullability: android.content.pm.PackageManager#getHoldLockToken():
    Missing nullability on method `getHoldLockToken` return
MissingNullability: android.content.pm.PackageManager#getNamesForUids(int[]) parameter #0:
    Missing nullability on parameter `uids` in method `getNamesForUids`
MissingNullability: android.content.pm.PackageManager#holdLock(android.os.IBinder, int) parameter #0:
    Missing nullability on parameter `token` in method `holdLock`
MissingNullability: android.content.pm.ShortcutManager#ShortcutManager(android.content.Context) parameter #0:
    Missing nullability on parameter `context` in method `ShortcutManager`
MissingNullability: android.content.pm.UserInfo#UserInfo(android.content.pm.UserInfo) parameter #0:
    Missing nullability on parameter `orig` in method `UserInfo`
MissingNullability: android.content.pm.UserInfo#UserInfo(int, String, String, int) parameter #1:
    Missing nullability on parameter `name` in method `UserInfo`
MissingNullability: android.content.pm.UserInfo#UserInfo(int, String, String, int) parameter #2:
    Missing nullability on parameter `iconPath` in method `UserInfo`
MissingNullability: android.content.pm.UserInfo#UserInfo(int, String, String, int, String) parameter #1:
    Missing nullability on parameter `name` in method `UserInfo`
MissingNullability: android.content.pm.UserInfo#UserInfo(int, String, String, int, String) parameter #2:
    Missing nullability on parameter `iconPath` in method `UserInfo`
MissingNullability: android.content.pm.UserInfo#UserInfo(int, String, String, int, String) parameter #4:
    Missing nullability on parameter `userType` in method `UserInfo`
MissingNullability: android.content.pm.UserInfo#UserInfo(int, String, int) parameter #1:
    Missing nullability on parameter `name` in method `UserInfo`
MissingNullability: android.content.pm.UserInfo#getUserHandle():
    Missing nullability on method `getUserHandle` return
MissingNullability: android.content.pm.UserInfo#iconPath:
    Missing nullability on field `iconPath` in class `class android.content.pm.UserInfo`
MissingNullability: android.content.pm.UserInfo#lastLoggedInFingerprint:
    Missing nullability on field `lastLoggedInFingerprint` in class `class android.content.pm.UserInfo`
MissingNullability: android.content.pm.UserInfo#name:
    Missing nullability on field `name` in class `class android.content.pm.UserInfo`
MissingNullability: android.content.pm.UserInfo#userType:
    Missing nullability on field `userType` in class `class android.content.pm.UserInfo`
MissingNullability: android.content.pm.UserInfo#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.content.res.AssetManager#getOverlayablesToString(String) parameter #0:
    Missing nullability on parameter `packageName` in method `getOverlayablesToString`
MissingNullability: android.content.res.Configuration#windowConfiguration:
    Missing nullability on field `windowConfiguration` in class `class android.content.res.Configuration`
MissingNullability: android.database.sqlite.SQLiteDebug#dump(android.util.Printer, String[]) parameter #0:
    Missing nullability on parameter `printer` in method `dump`
MissingNullability: android.database.sqlite.SQLiteDebug#dump(android.util.Printer, String[]) parameter #1:
    Missing nullability on parameter `args` in method `dump`
MissingNullability: android.database.sqlite.SQLiteDebug#getDatabaseInfo():
    Missing nullability on method `getDatabaseInfo` return
MissingNullability: android.database.sqlite.SQLiteDebug.DbStats#DbStats(String, long, long, int, int, int, int) parameter #0:
    Missing nullability on parameter `dbName` in method `DbStats`
MissingNullability: android.database.sqlite.SQLiteDebug.DbStats#cache:
    Missing nullability on field `cache` in class `class android.database.sqlite.SQLiteDebug.DbStats`
MissingNullability: android.database.sqlite.SQLiteDebug.DbStats#dbName:
    Missing nullability on field `dbName` in class `class android.database.sqlite.SQLiteDebug.DbStats`
MissingNullability: android.database.sqlite.SQLiteDebug.PagerStats#dbStats:
    Missing nullability on field `dbStats` in class `class android.database.sqlite.SQLiteDebug.PagerStats`
MissingNullability: android.database.sqlite.SQLiteDirectCursorDriver#SQLiteDirectCursorDriver(android.database.sqlite.SQLiteDatabase, String, String, android.os.CancellationSignal) parameter #0:
    Missing nullability on parameter `db` in method `SQLiteDirectCursorDriver`
MissingNullability: android.database.sqlite.SQLiteDirectCursorDriver#SQLiteDirectCursorDriver(android.database.sqlite.SQLiteDatabase, String, String, android.os.CancellationSignal) parameter #1:
    Missing nullability on parameter `sql` in method `SQLiteDirectCursorDriver`
MissingNullability: android.database.sqlite.SQLiteDirectCursorDriver#SQLiteDirectCursorDriver(android.database.sqlite.SQLiteDatabase, String, String, android.os.CancellationSignal) parameter #2:
    Missing nullability on parameter `editTable` in method `SQLiteDirectCursorDriver`
MissingNullability: android.database.sqlite.SQLiteDirectCursorDriver#SQLiteDirectCursorDriver(android.database.sqlite.SQLiteDatabase, String, String, android.os.CancellationSignal) parameter #3:
    Missing nullability on parameter `cancellationSignal` in method `SQLiteDirectCursorDriver`
MissingNullability: android.database.sqlite.SQLiteDirectCursorDriver#cursorRequeried(android.database.Cursor) parameter #0:
    Missing nullability on parameter `cursor` in method `cursorRequeried`
MissingNullability: android.database.sqlite.SQLiteDirectCursorDriver#query(android.database.sqlite.SQLiteDatabase.CursorFactory, String[]):
    Missing nullability on method `query` return
MissingNullability: android.database.sqlite.SQLiteDirectCursorDriver#query(android.database.sqlite.SQLiteDatabase.CursorFactory, String[]) parameter #0:
    Missing nullability on parameter `factory` in method `query`
MissingNullability: android.database.sqlite.SQLiteDirectCursorDriver#query(android.database.sqlite.SQLiteDatabase.CursorFactory, String[]) parameter #1:
    Missing nullability on parameter `selectionArgs` in method `query`
MissingNullability: android.database.sqlite.SQLiteDirectCursorDriver#setBindArguments(String[]) parameter #0:
    Missing nullability on parameter `bindArgs` in method `setBindArguments`
MissingNullability: android.database.sqlite.SQLiteGlobal#getDefaultJournalMode():
    Missing nullability on method `getDefaultJournalMode` return
MissingNullability: android.database.sqlite.SQLiteGlobal#getDefaultSyncMode():
    Missing nullability on method `getDefaultSyncMode` return
MissingNullability: android.database.sqlite.SQLiteGlobal#getWALSyncMode():
    Missing nullability on method `getWALSyncMode` return
MissingNullability: android.graphics.ImageDecoder#createSource(android.content.res.Resources, java.io.InputStream, int) parameter #0:
    Missing nullability on parameter `res` in method `createSource`
MissingNullability: android.graphics.drawable.AdaptiveIconDrawable#getSafeZone():
    Missing nullability on method `getSafeZone` return
MissingNullability: android.graphics.drawable.ColorDrawable#getXfermode():
    Missing nullability on method `getXfermode` return
MissingNullability: android.hardware.camera2.CameraManager#getCameraIdListNoLazy():
    Missing nullability on method `getCameraIdListNoLazy` return
MissingNullability: android.hardware.display.AmbientDisplayConfiguration#AmbientDisplayConfiguration(android.content.Context) parameter #0:
    Missing nullability on parameter `context` in method `AmbientDisplayConfiguration`
MissingNullability: android.location.GnssClock#set(android.location.GnssClock) parameter #0:
    Missing nullability on parameter `clock` in method `set`
MissingNullability: android.location.GnssMeasurement#set(android.location.GnssMeasurement) parameter #0:
    Missing nullability on parameter `measurement` in method `set`
MissingNullability: android.location.GnssNavigationMessage#set(android.location.GnssNavigationMessage) parameter #0:
    Missing nullability on parameter `navigationMessage` in method `set`
MissingNullability: android.location.GnssNavigationMessage#setData(byte[]) parameter #0:
    Missing nullability on parameter `value` in method `setData`
MissingNullability: android.media.AudioAttributes#getSdkUsages():
    Missing nullability on method `getSdkUsages` return
MissingNullability: android.media.AudioManager#getPublicStreamTypes():
    Missing nullability on method `getPublicStreamTypes` return
MissingNullability: android.media.AudioRecordingConfiguration#AudioRecordingConfiguration(int, int, int, android.media.AudioFormat, android.media.AudioFormat, int, String) parameter #3:
    Missing nullability on parameter `clientFormat` in method `AudioRecordingConfiguration`
MissingNullability: android.media.AudioRecordingConfiguration#AudioRecordingConfiguration(int, int, int, android.media.AudioFormat, android.media.AudioFormat, int, String) parameter #4:
    Missing nullability on parameter `devFormat` in method `AudioRecordingConfiguration`
MissingNullability: android.media.AudioRecordingConfiguration#AudioRecordingConfiguration(int, int, int, android.media.AudioFormat, android.media.AudioFormat, int, String) parameter #6:
    Missing nullability on parameter `packageName` in method `AudioRecordingConfiguration`
MissingNullability: android.media.AudioRecordingConfiguration#AudioRecordingConfiguration(int, int, int, android.media.AudioFormat, android.media.AudioFormat, int, String, int, boolean, int, android.media.audiofx.AudioEffect.Descriptor[], android.media.audiofx.AudioEffect.Descriptor[]) parameter #10:
    Missing nullability on parameter `clientEffects` in method `AudioRecordingConfiguration`
MissingNullability: android.media.AudioRecordingConfiguration#AudioRecordingConfiguration(int, int, int, android.media.AudioFormat, android.media.AudioFormat, int, String, int, boolean, int, android.media.audiofx.AudioEffect.Descriptor[], android.media.audiofx.AudioEffect.Descriptor[]) parameter #11:
    Missing nullability on parameter `deviceEffects` in method `AudioRecordingConfiguration`
MissingNullability: android.media.AudioRecordingConfiguration#AudioRecordingConfiguration(int, int, int, android.media.AudioFormat, android.media.AudioFormat, int, String, int, boolean, int, android.media.audiofx.AudioEffect.Descriptor[], android.media.audiofx.AudioEffect.Descriptor[]) parameter #3:
    Missing nullability on parameter `clientFormat` in method `AudioRecordingConfiguration`
MissingNullability: android.media.AudioRecordingConfiguration#AudioRecordingConfiguration(int, int, int, android.media.AudioFormat, android.media.AudioFormat, int, String, int, boolean, int, android.media.audiofx.AudioEffect.Descriptor[], android.media.audiofx.AudioEffect.Descriptor[]) parameter #4:
    Missing nullability on parameter `devFormat` in method `AudioRecordingConfiguration`
MissingNullability: android.media.AudioRecordingConfiguration#AudioRecordingConfiguration(int, int, int, android.media.AudioFormat, android.media.AudioFormat, int, String, int, boolean, int, android.media.audiofx.AudioEffect.Descriptor[], android.media.audiofx.AudioEffect.Descriptor[]) parameter #6:
    Missing nullability on parameter `packageName` in method `AudioRecordingConfiguration`
MissingNullability: android.media.PlaybackParams#setAudioStretchMode(int):
    Missing nullability on method `setAudioStretchMode` return
MissingNullability: android.media.audiofx.AudioEffect#EFFECT_TYPE_NULL:
    Missing nullability on field `EFFECT_TYPE_NULL` in class `class android.media.audiofx.AudioEffect`
MissingNullability: android.media.audiofx.AudioEffect#byteArrayToInt(byte[]) parameter #0:
    Missing nullability on parameter `valueBuf` in method `byteArrayToInt`
MissingNullability: android.media.audiofx.AudioEffect#byteArrayToShort(byte[]) parameter #0:
    Missing nullability on parameter `valueBuf` in method `byteArrayToShort`
MissingNullability: android.media.audiofx.AudioEffect#getParameter(byte[], byte[]) parameter #0:
    Missing nullability on parameter `param` in method `getParameter`
MissingNullability: android.media.audiofx.AudioEffect#getParameter(byte[], byte[]) parameter #1:
    Missing nullability on parameter `value` in method `getParameter`
MissingNullability: android.media.audiofx.AudioEffect#getParameter(int, byte[]) parameter #1:
    Missing nullability on parameter `value` in method `getParameter`
MissingNullability: android.media.audiofx.AudioEffect#getParameter(int, int[]) parameter #1:
    Missing nullability on parameter `value` in method `getParameter`
MissingNullability: android.media.audiofx.AudioEffect#getParameter(int, short[]) parameter #1:
    Missing nullability on parameter `value` in method `getParameter`
MissingNullability: android.media.audiofx.AudioEffect#getParameter(int[], short[]) parameter #0:
    Missing nullability on parameter `param` in method `getParameter`
MissingNullability: android.media.audiofx.AudioEffect#getParameter(int[], short[]) parameter #1:
    Missing nullability on parameter `value` in method `getParameter`
MissingNullability: android.media.audiofx.AudioEffect#intToByteArray(int):
    Missing nullability on method `intToByteArray` return
MissingNullability: android.media.audiofx.AudioEffect#isEffectTypeAvailable(java.util.UUID) parameter #0:
    Missing nullability on parameter `type` in method `isEffectTypeAvailable`
MissingNullability: android.media.audiofx.AudioEffect#setParameter(byte[], byte[]) parameter #0:
    Missing nullability on parameter `param` in method `setParameter`
MissingNullability: android.media.audiofx.AudioEffect#setParameter(byte[], byte[]) parameter #1:
    Missing nullability on parameter `value` in method `setParameter`
MissingNullability: android.media.audiofx.AudioEffect#setParameter(int, byte[]) parameter #1:
    Missing nullability on parameter `value` in method `setParameter`
MissingNullability: android.media.audiofx.AudioEffect#setParameter(int[], byte[]) parameter #0:
    Missing nullability on parameter `param` in method `setParameter`
MissingNullability: android.media.audiofx.AudioEffect#setParameter(int[], byte[]) parameter #1:
    Missing nullability on parameter `value` in method `setParameter`
MissingNullability: android.media.audiofx.AudioEffect#setParameter(int[], int[]) parameter #0:
    Missing nullability on parameter `param` in method `setParameter`
MissingNullability: android.media.audiofx.AudioEffect#setParameter(int[], int[]) parameter #1:
    Missing nullability on parameter `value` in method `setParameter`
MissingNullability: android.media.audiofx.AudioEffect#setParameterListener(android.media.audiofx.AudioEffect.OnParameterChangeListener) parameter #0:
    Missing nullability on parameter `listener` in method `setParameterListener`
MissingNullability: android.media.audiofx.AudioEffect#shortToByteArray(short):
    Missing nullability on method `shortToByteArray` return
MissingNullability: android.media.audiofx.AudioEffect.Descriptor#Descriptor(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `Descriptor`
MissingNullability: android.media.audiofx.AudioEffect.Descriptor#writeToParcel(android.os.Parcel) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.media.audiofx.AudioEffect.OnParameterChangeListener#onParameterChange(android.media.audiofx.AudioEffect, int, byte[], byte[]) parameter #0:
    Missing nullability on parameter `effect` in method `onParameterChange`
MissingNullability: android.media.audiofx.AudioEffect.OnParameterChangeListener#onParameterChange(android.media.audiofx.AudioEffect, int, byte[], byte[]) parameter #2:
    Missing nullability on parameter `param` in method `onParameterChange`
MissingNullability: android.media.audiofx.AudioEffect.OnParameterChangeListener#onParameterChange(android.media.audiofx.AudioEffect, int, byte[], byte[]) parameter #3:
    Missing nullability on parameter `value` in method `onParameterChange`
MissingNullability: android.os.Build#is64BitAbi(String) parameter #0:
    Missing nullability on parameter `abi` in method `is64BitAbi`
MissingNullability: android.os.Build.VERSION#ACTIVE_CODENAMES:
    Missing nullability on field `ACTIVE_CODENAMES` in class `class android.os.Build.VERSION`
MissingNullability: android.os.Environment#buildPath(java.io.File, java.lang.String...):
    Missing nullability on method `buildPath` return
MissingNullability: android.os.Environment#buildPath(java.io.File, java.lang.String...) parameter #0:
    Missing nullability on parameter `base` in method `buildPath`
MissingNullability: android.os.Environment#buildPath(java.io.File, java.lang.String...) parameter #1:
    Missing nullability on parameter `segments` in method `buildPath`
MissingNullability: android.os.FileUtils#contains(java.io.File, java.io.File) parameter #0:
    Missing nullability on parameter `dir` in method `contains`
MissingNullability: android.os.FileUtils#contains(java.io.File, java.io.File) parameter #1:
    Missing nullability on parameter `file` in method `contains`
MissingNullability: android.os.ParcelFileDescriptor#getFile(java.io.FileDescriptor):
    Missing nullability on method `getFile` return
MissingNullability: android.os.ParcelFileDescriptor#getFile(java.io.FileDescriptor) parameter #0:
    Missing nullability on parameter `fd` in method `getFile`
MissingNullability: android.os.StrictMode#setViolationLogger(android.os.StrictMode.ViolationLogger) parameter #0:
    Missing nullability on parameter `listener` in method `setViolationLogger`
MissingNullability: android.os.StrictMode.ViolationInfo#ViolationInfo(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `ViolationInfo`
MissingNullability: android.os.StrictMode.ViolationInfo#ViolationInfo(android.os.Parcel, boolean) parameter #0:
    Missing nullability on parameter `in` in method `ViolationInfo`
MissingNullability: android.os.StrictMode.ViolationInfo#broadcastIntentAction:
    Missing nullability on field `broadcastIntentAction` in class `class android.os.StrictMode.ViolationInfo`
MissingNullability: android.os.StrictMode.ViolationInfo#dump(android.util.Printer, String) parameter #0:
    Missing nullability on parameter `pw` in method `dump`
MissingNullability: android.os.StrictMode.ViolationInfo#dump(android.util.Printer, String) parameter #1:
    Missing nullability on parameter `prefix` in method `dump`
MissingNullability: android.os.StrictMode.ViolationInfo#getStackTrace():
    Missing nullability on method `getStackTrace` return
MissingNullability: android.os.StrictMode.ViolationInfo#getViolationClass():
    Missing nullability on method `getViolationClass` return
MissingNullability: android.os.StrictMode.ViolationInfo#getViolationDetails():
    Missing nullability on method `getViolationDetails` return
MissingNullability: android.os.StrictMode.ViolationInfo#tags:
    Missing nullability on field `tags` in class `class android.os.StrictMode.ViolationInfo`
MissingNullability: android.os.StrictMode.ViolationInfo#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `dest` in method `writeToParcel`
MissingNullability: android.os.StrictMode.ViolationLogger#log(android.os.StrictMode.ViolationInfo) parameter #0:
    Missing nullability on parameter `info` in method `log`
MissingNullability: android.os.VibrationEffect#RINGTONES:
    Missing nullability on field `RINGTONES` in class `class android.os.VibrationEffect`
MissingNullability: android.os.VibrationEffect#get(android.net.Uri, android.content.Context) parameter #0:
    Missing nullability on parameter `uri` in method `get`
MissingNullability: android.os.VibrationEffect#get(android.net.Uri, android.content.Context) parameter #1:
    Missing nullability on parameter `context` in method `get`
MissingNullability: android.os.VibrationEffect#get(int):
    Missing nullability on method `get` return
MissingNullability: android.os.VibrationEffect#get(int, boolean):
    Missing nullability on method `get` return
MissingNullability: android.os.VintfObject#getHalNamesAndVersions():
    Missing nullability on method `getHalNamesAndVersions` return
MissingNullability: android.os.VintfObject#getSepolicyVersion():
    Missing nullability on method `getSepolicyVersion` return
MissingNullability: android.os.VintfObject#getTargetFrameworkCompatibilityMatrixVersion():
    Missing nullability on method `getTargetFrameworkCompatibilityMatrixVersion` return
MissingNullability: android.os.VintfObject#getVndkSnapshots():
    Missing nullability on method `getVndkSnapshots` return
MissingNullability: android.os.VintfObject#report():
    Missing nullability on method `report` return
MissingNullability: android.os.VintfRuntimeInfo#getCpuInfo():
    Missing nullability on method `getCpuInfo` return
MissingNullability: android.os.VintfRuntimeInfo#getHardwareId():
    Missing nullability on method `getHardwareId` return
MissingNullability: android.os.VintfRuntimeInfo#getKernelVersion():
    Missing nullability on method `getKernelVersion` return
MissingNullability: android.os.VintfRuntimeInfo#getNodeName():
    Missing nullability on method `getNodeName` return
MissingNullability: android.os.VintfRuntimeInfo#getOsName():
    Missing nullability on method `getOsName` return
MissingNullability: android.os.VintfRuntimeInfo#getOsRelease():
    Missing nullability on method `getOsRelease` return
MissingNullability: android.os.VintfRuntimeInfo#getOsVersion():
    Missing nullability on method `getOsVersion` return
MissingNullability: android.os.WorkSource#add(int, String) parameter #1:
    Missing nullability on parameter `name` in method `add`
MissingNullability: android.os.health.HealthKeys.Constants#Constants(Class) parameter #0:
    Missing nullability on parameter `clazz` in method `Constants`
MissingNullability: android.os.health.HealthKeys.Constants#getDataType():
    Missing nullability on method `getDataType` return
MissingNullability: android.os.health.HealthKeys.Constants#getKeys(int):
    Missing nullability on method `getKeys` return
MissingNullability: android.os.health.HealthStats#HealthStats(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `HealthStats`
MissingNullability: android.os.health.HealthStatsParceler#HealthStatsParceler(android.os.Parcel) parameter #0:
    Missing nullability on parameter `in` in method `HealthStatsParceler`
MissingNullability: android.os.health.HealthStatsParceler#HealthStatsParceler(android.os.health.HealthStatsWriter) parameter #0:
    Missing nullability on parameter `writer` in method `HealthStatsParceler`
MissingNullability: android.os.health.HealthStatsParceler#getHealthStats():
    Missing nullability on method `getHealthStats` return
MissingNullability: android.os.health.HealthStatsParceler#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `out` in method `writeToParcel`
MissingNullability: android.os.health.HealthStatsWriter#HealthStatsWriter(android.os.health.HealthKeys.Constants) parameter #0:
    Missing nullability on parameter `constants` in method `HealthStatsWriter`
MissingNullability: android.os.health.HealthStatsWriter#addMeasurements(int, String, long) parameter #1:
    Missing nullability on parameter `name` in method `addMeasurements`
MissingNullability: android.os.health.HealthStatsWriter#addStats(int, String, android.os.health.HealthStatsWriter) parameter #1:
    Missing nullability on parameter `name` in method `addStats`
MissingNullability: android.os.health.HealthStatsWriter#addStats(int, String, android.os.health.HealthStatsWriter) parameter #2:
    Missing nullability on parameter `value` in method `addStats`
MissingNullability: android.os.health.HealthStatsWriter#addTimers(int, String, android.os.health.TimerStat) parameter #1:
    Missing nullability on parameter `name` in method `addTimers`
MissingNullability: android.os.health.HealthStatsWriter#addTimers(int, String, android.os.health.TimerStat) parameter #2:
    Missing nullability on parameter `value` in method `addTimers`
MissingNullability: android.os.health.HealthStatsWriter#flattenToParcel(android.os.Parcel) parameter #0:
    Missing nullability on parameter `out` in method `flattenToParcel`
MissingNullability: android.os.storage.StorageVolume#getPath():
    Missing nullability on method `getPath` return
MissingNullability: android.provider.CalendarContract.Calendars#SYNC_WRITABLE_COLUMNS:
    Missing nullability on field `SYNC_WRITABLE_COLUMNS` in class `class android.provider.CalendarContract.Calendars`
MissingNullability: android.provider.CalendarContract.Events#SYNC_WRITABLE_COLUMNS:
    Missing nullability on field `SYNC_WRITABLE_COLUMNS` in class `class android.provider.CalendarContract.Events`
MissingNullability: android.provider.ContactsContract.RawContactsEntity#CORP_CONTENT_URI:
    Missing nullability on field `CORP_CONTENT_URI` in class `class android.provider.ContactsContract.RawContactsEntity`
MissingNullability: android.security.keystore.KeyProtection.Builder#setBoundToSpecificSecureUserId(long):
    Missing nullability on method `setBoundToSpecificSecureUserId` return
MissingNullability: android.service.autofill.CompositeUserData#getCategoryIds():
    Missing nullability on method `getCategoryIds` return
MissingNullability: android.service.autofill.CompositeUserData#getDefaultFieldClassificationArgs():
    Missing nullability on method `getDefaultFieldClassificationArgs` return
MissingNullability: android.service.autofill.CompositeUserData#getFieldClassificationAlgorithms():
    Missing nullability on method `getFieldClassificationAlgorithms` return
MissingNullability: android.service.autofill.CompositeUserData#getFieldClassificationArgs():
    Missing nullability on method `getFieldClassificationArgs` return
MissingNullability: android.service.autofill.CompositeUserData#getValues():
    Missing nullability on method `getValues` return
MissingNullability: android.service.autofill.CompositeUserData#writeToParcel(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `parcel` in method `writeToParcel`
MissingNullability: android.service.autofill.UserData#getFieldClassificationAlgorithms():
    Missing nullability on method `getFieldClassificationAlgorithms` return
MissingNullability: android.telecom.Call.Details#getTelecomCallId():
    Missing nullability on method `getTelecomCallId` return
MissingNullability: android.telephony.ServiceState#addNetworkRegistrationInfo(android.telephony.NetworkRegistrationInfo) parameter #0:
    Missing nullability on parameter `nri` in method `addNetworkRegistrationInfo`
MissingNullability: android.telephony.ServiceState#setCellBandwidths(int[]) parameter #0:
    Missing nullability on parameter `bandwidths` in method `setCellBandwidths`
MissingNullability: android.telephony.SmsManager#checkSmsShortCodeDestination(String, String) parameter #0:
    Missing nullability on parameter `destAddress` in method `checkSmsShortCodeDestination`
MissingNullability: android.telephony.SmsManager#checkSmsShortCodeDestination(String, String) parameter #1:
    Missing nullability on parameter `countryIso` in method `checkSmsShortCodeDestination`
MissingNullability: android.telephony.TelephonyManager#getLine1AlphaTag():
    Missing nullability on method `getLine1AlphaTag` return
MissingNullability: android.telephony.TelephonyManager#getRadioHalVersion():
    Missing nullability on method `getRadioHalVersion` return
MissingNullability: android.telephony.TelephonyManager#setCarrierTestOverride(String, String, String, String, String, String, String, String, String) parameter #0:
    Missing nullability on parameter `mccmnc` in method `setCarrierTestOverride`
MissingNullability: android.telephony.TelephonyManager#setCarrierTestOverride(String, String, String, String, String, String, String, String, String) parameter #1:
    Missing nullability on parameter `imsi` in method `setCarrierTestOverride`
MissingNullability: android.telephony.TelephonyManager#setCarrierTestOverride(String, String, String, String, String, String, String, String, String) parameter #2:
    Missing nullability on parameter `iccid` in method `setCarrierTestOverride`
MissingNullability: android.telephony.TelephonyManager#setCarrierTestOverride(String, String, String, String, String, String, String, String, String) parameter #3:
    Missing nullability on parameter `gid1` in method `setCarrierTestOverride`
MissingNullability: android.telephony.TelephonyManager#setCarrierTestOverride(String, String, String, String, String, String, String, String, String) parameter #4:
    Missing nullability on parameter `gid2` in method `setCarrierTestOverride`
MissingNullability: android.telephony.TelephonyManager#setCarrierTestOverride(String, String, String, String, String, String, String, String, String) parameter #5:
    Missing nullability on parameter `plmn` in method `setCarrierTestOverride`
MissingNullability: android.telephony.TelephonyManager#setCarrierTestOverride(String, String, String, String, String, String, String, String, String) parameter #6:
    Missing nullability on parameter `spn` in method `setCarrierTestOverride`
MissingNullability: android.telephony.TelephonyManager#setCarrierTestOverride(String, String, String, String, String, String, String, String, String) parameter #7:
    Missing nullability on parameter `carrierPriviledgeRules` in method `setCarrierTestOverride`
MissingNullability: android.telephony.TelephonyManager#setCarrierTestOverride(String, String, String, String, String, String, String, String, String) parameter #8:
    Missing nullability on parameter `apn` in method `setCarrierTestOverride`
MissingNullability: android.text.Selection.MemoryTextWatcher#afterTextChanged(android.text.Editable) parameter #0:
    Missing nullability on parameter `s` in method `afterTextChanged`
MissingNullability: android.text.Selection.MemoryTextWatcher#beforeTextChanged(CharSequence, int, int, int) parameter #0:
    Missing nullability on parameter `s` in method `beforeTextChanged`
MissingNullability: android.text.Selection.MemoryTextWatcher#onTextChanged(CharSequence, int, int, int) parameter #0:
    Missing nullability on parameter `s` in method `onTextChanged`
MissingNullability: android.transition.TransitionManager#getTransition(android.transition.Scene):
    Missing nullability on method `getTransition` return
MissingNullability: android.transition.TransitionManager#getTransition(android.transition.Scene) parameter #0:
    Missing nullability on parameter `scene` in method `getTransition`
MissingNullability: android.util.FeatureFlagUtils#getAllFeatureFlags():
    Missing nullability on method `getAllFeatureFlags` return
MissingNullability: android.util.FeatureFlagUtils#isEnabled(android.content.Context, String) parameter #0:
    Missing nullability on parameter `context` in method `isEnabled`
MissingNullability: android.util.FeatureFlagUtils#isEnabled(android.content.Context, String) parameter #1:
    Missing nullability on parameter `feature` in method `isEnabled`
MissingNullability: android.util.FeatureFlagUtils#setEnabled(android.content.Context, String, boolean) parameter #0:
    Missing nullability on parameter `context` in method `setEnabled`
MissingNullability: android.util.FeatureFlagUtils#setEnabled(android.content.Context, String, boolean) parameter #1:
    Missing nullability on parameter `feature` in method `setEnabled`
MissingNullability: android.util.TimeUtils#formatDuration(long):
    Missing nullability on method `formatDuration` return
MissingNullability: android.util.proto.EncodedBuffer#dumpBuffers(String) parameter #0:
    Missing nullability on parameter `tag` in method `dumpBuffers`
MissingNullability: android.util.proto.EncodedBuffer#dumpByteString(String, String, byte[]) parameter #0:
    Missing nullability on parameter `tag` in method `dumpByteString`
MissingNullability: android.util.proto.EncodedBuffer#dumpByteString(String, String, byte[]) parameter #1:
    Missing nullability on parameter `prefix` in method `dumpByteString`
MissingNullability: android.util.proto.EncodedBuffer#dumpByteString(String, String, byte[]) parameter #2:
    Missing nullability on parameter `buf` in method `dumpByteString`
MissingNullability: android.util.proto.EncodedBuffer#getBytes(int):
    Missing nullability on method `getBytes` return
MissingNullability: android.util.proto.EncodedBuffer#getDebugString():
    Missing nullability on method `getDebugString` return
MissingNullability: android.util.proto.EncodedBuffer#writeRawBuffer(byte[]) parameter #0:
    Missing nullability on parameter `val` in method `writeRawBuffer`
MissingNullability: android.util.proto.EncodedBuffer#writeRawBuffer(byte[], int, int) parameter #0:
    Missing nullability on parameter `val` in method `writeRawBuffer`
MissingNullability: android.util.proto.ProtoParseException#ProtoParseException(String) parameter #0:
    Missing nullability on parameter `msg` in method `ProtoParseException`
MissingNullability: android.util.proto.WireTypeMismatchException#WireTypeMismatchException(String) parameter #0:
    Missing nullability on parameter `msg` in method `WireTypeMismatchException`
MissingNullability: android.view.Choreographer#postCallback(int, Runnable, Object) parameter #1:
    Missing nullability on parameter `action` in method `postCallback`
MissingNullability: android.view.Choreographer#postCallback(int, Runnable, Object) parameter #2:
    Missing nullability on parameter `token` in method `postCallback`
MissingNullability: android.view.Choreographer#postCallbackDelayed(int, Runnable, Object, long) parameter #1:
    Missing nullability on parameter `action` in method `postCallbackDelayed`
MissingNullability: android.view.Choreographer#postCallbackDelayed(int, Runnable, Object, long) parameter #2:
    Missing nullability on parameter `token` in method `postCallbackDelayed`
MissingNullability: android.view.Choreographer#removeCallbacks(int, Runnable, Object) parameter #1:
    Missing nullability on parameter `action` in method `removeCallbacks`
MissingNullability: android.view.Choreographer#removeCallbacks(int, Runnable, Object) parameter #2:
    Missing nullability on parameter `token` in method `removeCallbacks`
MissingNullability: android.view.FocusFinder#sort(android.view.View[], int, int, android.view.ViewGroup, boolean) parameter #0:
    Missing nullability on parameter `views` in method `sort`
MissingNullability: android.view.FocusFinder#sort(android.view.View[], int, int, android.view.ViewGroup, boolean) parameter #3:
    Missing nullability on parameter `root` in method `sort`
MissingNullability: android.view.KeyEvent#actionToString(int):
    Missing nullability on method `actionToString` return
MissingNullability: android.view.SurfaceControlViewHost#relayout(android.view.WindowManager.LayoutParams) parameter #0:
    Missing nullability on parameter `attrs` in method `relayout`
MissingNullability: android.view.View#getTooltipView():
    Missing nullability on method `getTooltipView` return
MissingNullability: android.view.View#isDefaultFocusHighlightNeeded(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable) parameter #0:
    Missing nullability on parameter `background` in method `isDefaultFocusHighlightNeeded`
MissingNullability: android.view.View#isDefaultFocusHighlightNeeded(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable) parameter #1:
    Missing nullability on parameter `foreground` in method `isDefaultFocusHighlightNeeded`
MissingNullability: android.view.ViewDebug#startRenderingCommandsCapture(android.view.View, java.util.concurrent.Executor, java.util.concurrent.Callable<java.io.OutputStream>) parameter #0:
    Missing nullability on parameter `tree` in method `startRenderingCommandsCapture`
MissingNullability: android.view.ViewDebug#startRenderingCommandsCapture(android.view.View, java.util.concurrent.Executor, java.util.concurrent.Callable<java.io.OutputStream>) parameter #1:
    Missing nullability on parameter `executor` in method `startRenderingCommandsCapture`
MissingNullability: android.view.ViewDebug#startRenderingCommandsCapture(android.view.View, java.util.concurrent.Executor, java.util.concurrent.Callable<java.io.OutputStream>) parameter #2:
    Missing nullability on parameter `callback` in method `startRenderingCommandsCapture`
MissingNullability: android.view.WindowManager#holdLock(android.os.IBinder, int) parameter #0:
    Missing nullability on parameter `token` in method `holdLock`
MissingNullability: android.view.WindowManager.LayoutParams#accessibilityTitle:
    Missing nullability on field `accessibilityTitle` in class `class android.view.WindowManager.LayoutParams`
MissingNullability: android.view.accessibility.AccessibilityNodeInfo#writeToParcelNoRecycle(android.os.Parcel, int) parameter #0:
    Missing nullability on parameter `parcel` in method `writeToParcelNoRecycle`
MissingNullability: android.view.accessibility.AccessibilityWindowInfo#setNumInstancesInUseCounter(java.util.concurrent.atomic.AtomicInteger) parameter #0:
    Missing nullability on parameter `counter` in method `setNumInstancesInUseCounter`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#asyncNewChild(int):
    Missing nullability on method `asyncNewChild` return
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#getAutofillId():
    Missing nullability on method `getAutofillId` return
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#getExtras():
    Missing nullability on method `getExtras` return
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#getHint():
    Missing nullability on method `getHint` return
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#getNode():
    Missing nullability on method `getNode` return
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#getTempRect():
    Missing nullability on method `getTempRect` return
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#getText():
    Missing nullability on method `getText` return
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#newChild(int):
    Missing nullability on method `newChild` return
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#newHtmlInfoBuilder(String):
    Missing nullability on method `newHtmlInfoBuilder` return
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#newHtmlInfoBuilder(String) parameter #0:
    Missing nullability on parameter `tagName` in method `newHtmlInfoBuilder`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setAutofillHints(String[]) parameter #0:
    Missing nullability on parameter `hints` in method `setAutofillHints`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setAutofillId(android.view.autofill.AutofillId) parameter #0:
    Missing nullability on parameter `id` in method `setAutofillId`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setAutofillId(android.view.autofill.AutofillId, int) parameter #0:
    Missing nullability on parameter `parentId` in method `setAutofillId`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setAutofillOptions(CharSequence[]) parameter #0:
    Missing nullability on parameter `options` in method `setAutofillOptions`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setAutofillValue(android.view.autofill.AutofillValue) parameter #0:
    Missing nullability on parameter `value` in method `setAutofillValue`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setClassName(String) parameter #0:
    Missing nullability on parameter `className` in method `setClassName`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setContentDescription(CharSequence) parameter #0:
    Missing nullability on parameter `contentDescription` in method `setContentDescription`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setHint(CharSequence) parameter #0:
    Missing nullability on parameter `hint` in method `setHint`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setHintIdEntry(String) parameter #0:
    Missing nullability on parameter `entryName` in method `setHintIdEntry`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setHtmlInfo(android.view.ViewStructure.HtmlInfo) parameter #0:
    Missing nullability on parameter `htmlInfo` in method `setHtmlInfo`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setId(int, String, String, String) parameter #1:
    Missing nullability on parameter `packageName` in method `setId`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setId(int, String, String, String) parameter #2:
    Missing nullability on parameter `typeName` in method `setId`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setId(int, String, String, String) parameter #3:
    Missing nullability on parameter `entryName` in method `setId`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setLocaleList(android.os.LocaleList) parameter #0:
    Missing nullability on parameter `localeList` in method `setLocaleList`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setText(CharSequence) parameter #0:
    Missing nullability on parameter `text` in method `setText`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setText(CharSequence, int, int) parameter #0:
    Missing nullability on parameter `text` in method `setText`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setTextLines(int[], int[]) parameter #0:
    Missing nullability on parameter `charOffsets` in method `setTextLines`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setTextLines(int[], int[]) parameter #1:
    Missing nullability on parameter `baselines` in method `setTextLines`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setTransformation(android.graphics.Matrix) parameter #0:
    Missing nullability on parameter `matrix` in method `setTransformation`
MissingNullability: android.view.contentcapture.ViewNode.ViewStructureImpl#setWebDomain(String) parameter #0:
    Missing nullability on parameter `domain` in method `setWebDomain`
MissingNullability: android.widget.CalendarView#getBoundsForDate(long, android.graphics.Rect) parameter #1:
    Missing nullability on parameter `outBounds` in method `getBoundsForDate`
MissingNullability: android.widget.ImageView#isDefaultFocusHighlightNeeded(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable) parameter #0:
    Missing nullability on parameter `background` in method `isDefaultFocusHighlightNeeded`
MissingNullability: android.widget.ImageView#isDefaultFocusHighlightNeeded(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable) parameter #1:
    Missing nullability on parameter `foreground` in method `isDefaultFocusHighlightNeeded`
MissingNullability: android.widget.Magnifier#getMagnifierDefaultSize():
    Missing nullability on method `getMagnifierDefaultSize` return
MissingNullability: android.widget.Magnifier#setOnOperationCompleteCallback(android.widget.Magnifier.Callback) parameter #0:
    Missing nullability on parameter `callback` in method `setOnOperationCompleteCallback`
MissingNullability: android.widget.NumberPicker#getDisplayedValueForCurrentSelection():
    Missing nullability on method `getDisplayedValueForCurrentSelection` return
MissingNullability: android.widget.PopupMenu#getMenuListView():
    Missing nullability on method `getMenuListView` return
MissingNullability: android.widget.TimePicker#getAmView():
    Missing nullability on method `getAmView` return
MissingNullability: android.widget.TimePicker#getHourView():
    Missing nullability on method `getHourView` return
MissingNullability: android.widget.TimePicker#getMinuteView():
    Missing nullability on method `getMinuteView` return
MissingNullability: android.widget.TimePicker#getPmView():
    Missing nullability on method `getPmView` return


MutableBareField: android.content.AutofillOptions#appDisabledExpiration:
    Bare field appDisabledExpiration must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.AutofillOptions#augmentedAutofillEnabled:
    Bare field augmentedAutofillEnabled must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.AutofillOptions#disabledActivities:
    Bare field disabledActivities must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.AutofillOptions#whitelistedActivitiesForAugmentedAutofill:
    Bare field whitelistedActivitiesForAugmentedAutofill must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#convertedFromPreCreated:
    Bare field convertedFromPreCreated must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#creationTime:
    Bare field creationTime must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#flags:
    Bare field flags must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#guestToRemove:
    Bare field guestToRemove must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#iconPath:
    Bare field iconPath must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#id:
    Bare field id must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#lastLoggedInFingerprint:
    Bare field lastLoggedInFingerprint must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#lastLoggedInTime:
    Bare field lastLoggedInTime must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#name:
    Bare field name must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#partial:
    Bare field partial must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#preCreated:
    Bare field preCreated must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#profileBadge:
    Bare field profileBadge must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#profileGroupId:
    Bare field profileGroupId must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#restrictedProfileParentId:
    Bare field restrictedProfileParentId must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#serialNumber:
    Bare field serialNumber must be marked final, or moved behind accessors if mutable
MutableBareField: android.content.pm.UserInfo#userType:
    Bare field userType must be marked final, or moved behind accessors if mutable
MutableBareField: android.database.sqlite.SQLiteDebug.DbStats#cache:
    Bare field cache must be marked final, or moved behind accessors if mutable
MutableBareField: android.database.sqlite.SQLiteDebug.DbStats#dbName:
    Bare field dbName must be marked final, or moved behind accessors if mutable
MutableBareField: android.database.sqlite.SQLiteDebug.DbStats#dbSize:
    Bare field dbSize must be marked final, or moved behind accessors if mutable
MutableBareField: android.database.sqlite.SQLiteDebug.DbStats#lookaside:
    Bare field lookaside must be marked final, or moved behind accessors if mutable
MutableBareField: android.database.sqlite.SQLiteDebug.DbStats#pageSize:
    Bare field pageSize must be marked final, or moved behind accessors if mutable
MutableBareField: android.database.sqlite.SQLiteDebug.PagerStats#dbStats:
    Bare field dbStats must be marked final, or moved behind accessors if mutable
MutableBareField: android.database.sqlite.SQLiteDebug.PagerStats#largestMemAlloc:
    Bare field largestMemAlloc must be marked final, or moved behind accessors if mutable
MutableBareField: android.database.sqlite.SQLiteDebug.PagerStats#memoryUsed:
    Bare field memoryUsed must be marked final, or moved behind accessors if mutable
MutableBareField: android.database.sqlite.SQLiteDebug.PagerStats#pageCacheOverflow:
    Bare field pageCacheOverflow must be marked final, or moved behind accessors if mutable
MutableBareField: android.os.StrictMode.ViolationInfo#broadcastIntentAction:
    Bare field broadcastIntentAction must be marked final, or moved behind accessors if mutable
MutableBareField: android.os.StrictMode.ViolationInfo#durationMillis:
    Bare field durationMillis must be marked final, or moved behind accessors if mutable
MutableBareField: android.os.StrictMode.ViolationInfo#numAnimationsRunning:
    Bare field numAnimationsRunning must be marked final, or moved behind accessors if mutable
MutableBareField: android.os.StrictMode.ViolationInfo#numInstances:
    Bare field numInstances must be marked final, or moved behind accessors if mutable
MutableBareField: android.os.StrictMode.ViolationInfo#tags:
    Bare field tags must be marked final, or moved behind accessors if mutable
MutableBareField: android.os.StrictMode.ViolationInfo#violationNumThisLoop:
    Bare field violationNumThisLoop must be marked final, or moved behind accessors if mutable
MutableBareField: android.os.StrictMode.ViolationInfo#violationUptimeMillis:
    Bare field violationUptimeMillis must be marked final, or moved behind accessors if mutable


NoByteOrShort: android.media.audiofx.AudioEffect#byteArrayToShort(byte[]):
    Should avoid odd sized primitives; use `int` instead of `short` in method android.media.audiofx.AudioEffect.byteArrayToShort(byte[])
NoByteOrShort: android.media.audiofx.AudioEffect#setParameter(int, short) parameter #1:
    Should avoid odd sized primitives; use `int` instead of `short` in parameter value in android.media.audiofx.AudioEffect.setParameter(int param, short value)
NoByteOrShort: android.media.audiofx.AudioEffect#shortToByteArray(short) parameter #0:
    Should avoid odd sized primitives; use `int` instead of `short` in parameter value in android.media.audiofx.AudioEffect.shortToByteArray(short value)
NoByteOrShort: android.util.proto.EncodedBuffer#readRawByte():
    Should avoid odd sized primitives; use `int` instead of `byte` in method android.util.proto.EncodedBuffer.readRawByte()
NoByteOrShort: android.util.proto.EncodedBuffer#writeRawByte(byte) parameter #0:
    Should avoid odd sized primitives; use `int` instead of `byte` in parameter val in android.util.proto.EncodedBuffer.writeRawByte(byte val)


NoSettingsProvider: android.provider.Settings.Global#APP_OPS_CONSTANTS:
    New setting keys are not allowed (Field: APP_OPS_CONSTANTS); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Global#AUTOMATIC_POWER_SAVE_MODE:
    New setting keys are not allowed (Field: AUTOMATIC_POWER_SAVE_MODE); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Global#BATTERY_SAVER_CONSTANTS:
    New setting keys are not allowed (Field: BATTERY_SAVER_CONSTANTS); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Global#DYNAMIC_POWER_SAVINGS_DISABLE_THRESHOLD:
    New setting keys are not allowed (Field: DYNAMIC_POWER_SAVINGS_DISABLE_THRESHOLD); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Global#DYNAMIC_POWER_SAVINGS_ENABLED:
    New setting keys are not allowed (Field: DYNAMIC_POWER_SAVINGS_ENABLED); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Global#HIDDEN_API_BLACKLIST_EXEMPTIONS:
    New setting keys are not allowed (Field: HIDDEN_API_BLACKLIST_EXEMPTIONS); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Global#HIDDEN_API_POLICY:
    New setting keys are not allowed (Field: HIDDEN_API_POLICY); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Global#HIDE_ERROR_DIALOGS:
    New setting keys are not allowed (Field: HIDE_ERROR_DIALOGS); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Global#LOW_POWER_MODE:
    New setting keys are not allowed (Field: LOW_POWER_MODE); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Global#LOW_POWER_MODE_STICKY:
    New setting keys are not allowed (Field: LOW_POWER_MODE_STICKY); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Global#OVERLAY_DISPLAY_DEVICES:
    New setting keys are not allowed (Field: OVERLAY_DISPLAY_DEVICES); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Secure#ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED:
    New setting keys are not allowed (Field: ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Secure#ACCESSIBILITY_MAGNIFICATION_CAPABILITY:
    New setting keys are not allowed (Field: ACCESSIBILITY_MAGNIFICATION_CAPABILITY); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Secure#ACCESSIBILITY_MAGNIFICATION_MODE:
    New setting keys are not allowed (Field: ACCESSIBILITY_MAGNIFICATION_MODE); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Secure#ACCESSIBILITY_SHORTCUT_TARGET_SERVICE:
    New setting keys are not allowed (Field: ACCESSIBILITY_SHORTCUT_TARGET_SERVICE); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Secure#AUTOFILL_SERVICE:
    New setting keys are not allowed (Field: AUTOFILL_SERVICE); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Secure#CONTENT_CAPTURE_ENABLED:
    New setting keys are not allowed (Field: CONTENT_CAPTURE_ENABLED); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Secure#DISABLED_PRINT_SERVICES:
    New setting keys are not allowed (Field: DISABLED_PRINT_SERVICES); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Secure#ENABLED_VR_LISTENERS:
    New setting keys are not allowed (Field: ENABLED_VR_LISTENERS); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Secure#IMMERSIVE_MODE_CONFIRMATIONS:
    New setting keys are not allowed (Field: IMMERSIVE_MODE_CONFIRMATIONS); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Secure#NOTIFICATION_BADGING:
    New setting keys are not allowed (Field: NOTIFICATION_BADGING); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Secure#POWER_MENU_LOCKED_SHOW_CONTENT:
    New setting keys are not allowed (Field: POWER_MENU_LOCKED_SHOW_CONTENT); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Secure#SYNC_PARENT_SOUNDS:
    New setting keys are not allowed (Field: SYNC_PARENT_SOUNDS); use getters/setters in relevant manager class
NoSettingsProvider: android.provider.Settings.Secure#VOICE_INTERACTION_SERVICE:
    New setting keys are not allowed (Field: VOICE_INTERACTION_SERVICE); use getters/setters in relevant manager class


OnNameExpected: android.service.notification.ConditionProviderService#isBound():
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final
OnNameExpected: android.service.watchdog.ExplicitHealthCheckService#setCallback(android.os.RemoteCallback):
    If implemented by developer, should follow the on<Something> style; otherwise consider marking final


PackageLayering: android.util.FeatureFlagUtils:
    Method parameter type `android.content.Context` violates package layering: nothing in `package android.util` should depend on `package android.content`


ParcelConstructor: android.os.StrictMode.ViolationInfo#ViolationInfo(android.os.Parcel):
    Parcelable inflation is exposed through CREATOR, not raw constructors, in android.os.StrictMode.ViolationInfo
ParcelConstructor: android.os.health.HealthStatsParceler#HealthStatsParceler(android.os.Parcel):
    Parcelable inflation is exposed through CREATOR, not raw constructors, in android.os.health.HealthStatsParceler


ParcelCreator: android.app.WindowConfiguration:
    Parcelable requires a `CREATOR` field; missing in android.app.WindowConfiguration
ParcelCreator: android.service.autofill.InternalOnClickAction:
    Parcelable requires a `CREATOR` field; missing in android.service.autofill.InternalOnClickAction
ParcelCreator: android.service.autofill.InternalSanitizer:
    Parcelable requires a `CREATOR` field; missing in android.service.autofill.InternalSanitizer
ParcelCreator: android.service.autofill.InternalTransformation:
    Parcelable requires a `CREATOR` field; missing in android.service.autofill.InternalTransformation
ParcelCreator: android.service.autofill.InternalValidator:
    Parcelable requires a `CREATOR` field; missing in android.service.autofill.InternalValidator


ParcelNotFinal: android.app.WindowConfiguration:
    Parcelable classes must be final: android.app.WindowConfiguration is not final
ParcelNotFinal: android.content.pm.UserInfo:
    Parcelable classes must be final: android.content.pm.UserInfo is not final
ParcelNotFinal: android.os.health.HealthStatsParceler:
    Parcelable classes must be final: android.os.health.HealthStatsParceler is not final
ParcelNotFinal: android.service.autofill.InternalOnClickAction:
    Parcelable classes must be final: android.service.autofill.InternalOnClickAction is not final
ParcelNotFinal: android.service.autofill.InternalSanitizer:
    Parcelable classes must be final: android.service.autofill.InternalSanitizer is not final
ParcelNotFinal: android.service.autofill.InternalTransformation:
    Parcelable classes must be final: android.service.autofill.InternalTransformation is not final
ParcelNotFinal: android.service.autofill.InternalValidator:
    Parcelable classes must be final: android.service.autofill.InternalValidator is not final


ProtectedMember: android.app.AppDetailsActivity#onCreate(android.os.Bundle):
    Protected methods not allowed; must be public: method android.app.AppDetailsActivity.onCreate(android.os.Bundle)}
ProtectedMember: android.view.View#resetResolvedDrawables():
    Protected methods not allowed; must be public: method android.view.View.resetResolvedDrawables()}
ProtectedMember: android.view.ViewGroup#resetResolvedDrawables():
    Protected methods not allowed; must be public: method android.view.ViewGroup.resetResolvedDrawables()}


RethrowRemoteException: android.app.ActivityManager#resumeAppSwitches():
    Methods calling system APIs should rethrow `RemoteException` as `RuntimeException` (but do not list it in the throws clause)


SamShouldBeLast: android.database.sqlite.SQLiteDebug#dump(android.util.Printer, String[]):
    SAM-compatible parameters (such as parameter 1, "printer", in android.database.sqlite.SQLiteDebug.dump) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
SamShouldBeLast: android.database.sqlite.SQLiteDirectCursorDriver#query(android.database.sqlite.SQLiteDatabase.CursorFactory, String[]):
    SAM-compatible parameters (such as parameter 1, "factory", in android.database.sqlite.SQLiteDirectCursorDriver.query) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
SamShouldBeLast: android.os.StrictMode.ViolationInfo#dump(android.util.Printer, String):
    SAM-compatible parameters (such as parameter 1, "pw", in android.os.StrictMode.ViolationInfo.dump) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
SamShouldBeLast: android.permission.PermissionControllerManager#countPermissionApps(java.util.List<java.lang.String>, int, android.permission.PermissionControllerManager.OnCountPermissionAppsResultCallback, android.os.Handler):
    SAM-compatible parameters (such as parameter 3, "callback", in android.permission.PermissionControllerManager.countPermissionApps) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
SamShouldBeLast: android.permission.PermissionControllerManager#getAppPermissions(String, android.permission.PermissionControllerManager.OnGetAppPermissionResultCallback, android.os.Handler):
    SAM-compatible parameters (such as parameter 2, "callback", in android.permission.PermissionControllerManager.getAppPermissions) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
SamShouldBeLast: android.service.autofill.CharSequenceTransformation#apply(android.service.autofill.ValueFinder, android.widget.RemoteViews, int):
    SAM-compatible parameters (such as parameter 1, "finder", in android.service.autofill.CharSequenceTransformation.apply) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
SamShouldBeLast: android.service.autofill.DateTransformation#apply(android.service.autofill.ValueFinder, android.widget.RemoteViews, int):
    SAM-compatible parameters (such as parameter 1, "finder", in android.service.autofill.DateTransformation.apply) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
SamShouldBeLast: android.service.autofill.ImageTransformation#apply(android.service.autofill.ValueFinder, android.widget.RemoteViews, int):
    SAM-compatible parameters (such as parameter 1, "finder", in android.service.autofill.ImageTransformation.apply) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
SamShouldBeLast: android.service.autofill.InternalTransformation#batchApply(android.service.autofill.ValueFinder, android.widget.RemoteViews, java.util.ArrayList<android.util.Pair<java.lang.Integer,android.service.autofill.InternalTransformation>>):
    SAM-compatible parameters (such as parameter 1, "finder", in android.service.autofill.InternalTransformation.batchApply) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
SamShouldBeLast: android.view.Choreographer#postCallback(int, Runnable, Object):
    SAM-compatible parameters (such as parameter 2, "action", in android.view.Choreographer.postCallback) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
SamShouldBeLast: android.view.Choreographer#postCallbackDelayed(int, Runnable, Object, long):
    SAM-compatible parameters (such as parameter 2, "action", in android.view.Choreographer.postCallbackDelayed) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
SamShouldBeLast: android.view.Choreographer#removeCallbacks(int, Runnable, Object):
    SAM-compatible parameters (such as parameter 2, "action", in android.view.Choreographer.removeCallbacks) should be last to improve Kotlin interoperability; see https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions


StaticUtils: android.os.health.HealthKeys:
    Fully-static utility classes must not have constructor
StaticUtils: android.service.autofill.InternalTransformation:
    Fully-static utility classes must not have constructor
StaticUtils: android.util.FeatureFlagUtils:
    Fully-static utility classes must not have constructor


StreamFiles: android.os.Environment#buildPath(java.io.File, java.lang.String...):
    Methods accepting `File` should also accept `FileDescriptor` or streams: method android.os.Environment.buildPath(java.io.File,java.lang.String...)
StreamFiles: android.os.FileUtils#contains(java.io.File, java.io.File):
    Methods accepting `File` should also accept `FileDescriptor` or streams: method android.os.FileUtils.contains(java.io.File,java.io.File)


UseIcu: android.hardware.soundtrigger.KeyphraseEnrollmentInfo#getKeyphraseMetadata(String, java.util.Locale) parameter #1:
    Type `java.util.Locale` should be replaced with richer ICU type `android.icu.util.ULocale`
UseIcu: android.hardware.soundtrigger.KeyphraseEnrollmentInfo#getManageKeyphraseIntent(int, String, java.util.Locale) parameter #2:
    Type `java.util.Locale` should be replaced with richer ICU type `android.icu.util.ULocale`
UseIcu: android.hardware.soundtrigger.KeyphraseMetadata#supportsLocale(java.util.Locale) parameter #0:
    Type `java.util.Locale` should be replaced with richer ICU type `android.icu.util.ULocale`


UserHandle: android.app.admin.DevicePolicyManager#getOwnerInstalledCaCerts(android.os.UserHandle):
    When a method overload is needed to target a specific UserHandle, callers should be directed to use Context.createPackageContextAsUser() and re-obtain the relevant Manager, and no new API should be added
UserHandle: android.app.usage.StorageStatsManager#queryCratesForPackage(java.util.UUID, String, android.os.UserHandle):
    When a method overload is needed to target a specific UserHandle, callers should be directed to use Context.createPackageContextAsUser() and re-obtain the relevant Manager, and no new API should be added
UserHandle: android.app.usage.StorageStatsManager#queryCratesForUser(java.util.UUID, android.os.UserHandle):
    When a method overload is needed to target a specific UserHandle, callers should be directed to use Context.createPackageContextAsUser() and re-obtain the relevant Manager, and no new API should be added
UserHandle: android.content.pm.PackageManager#getInstallReason(String, android.os.UserHandle):
    When a method overload is needed to target a specific UserHandle, callers should be directed to use Context.createPackageContextAsUser() and re-obtain the relevant Manager, and no new API should be added


UserHandleName: android.content.AutofillOptions:
    Classes holding a set of parameters should be called `FooParams`, was `AutofillOptions`
UserHandleName: android.content.ContentCaptureOptions:
    Classes holding a set of parameters should be called `FooParams`, was `ContentCaptureOptions`


VisiblySynchronized: PsiThisExpression:this:
    Internal locks must not be exposed (synchronizing on this or class is still externally observable): method android.content.res.AssetManager.getApkPaths()
VisiblySynchronized: android.content.res.AssetManager#getApkPaths():
    Internal locks must not be exposed (synchronizing on this or class is still externally observable): method android.content.res.AssetManager.getApkPaths()
VisiblySynchronized: android.content.res.AssetManager#getLastResourceResolution():
    Internal locks must not be exposed (synchronizing on this or class is still externally observable): method android.content.res.AssetManager.getLastResourceResolution()
VisiblySynchronized: android.content.res.AssetManager#getOverlayablesToString(String):
    Internal locks must not be exposed (synchronizing on this or class is still externally observable): method android.content.res.AssetManager.getOverlayablesToString(String)
VisiblySynchronized: android.content.res.AssetManager#setResourceResolutionLoggingEnabled(boolean):
    Internal locks must not be exposed (synchronizing on this or class is still externally observable): method android.content.res.AssetManager.setResourceResolutionLoggingEnabled(boolean)
VisiblySynchronized: android.os.MessageQueue#removeSyncBarrier(int):
    Internal locks must not be exposed (synchronizing on this or class is still externally observable): method android.os.MessageQueue.removeSyncBarrier(int)
