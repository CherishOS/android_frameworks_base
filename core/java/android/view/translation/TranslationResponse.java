/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.view.translation;

import android.annotation.IntDef;
import android.annotation.NonNull;
import android.os.Parcel;
import android.os.Parcelable;
import android.service.translation.TranslationService;

import com.android.internal.util.DataClass;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.ArrayList;
import java.util.List;

/**
 * Response from the {@link TranslationService}, which contains the translated result.
 */
@DataClass(genBuilder = true, genToString = true, genHiddenConstDefs = true)
public final class TranslationResponse implements Parcelable {

    /**
     * The {@link TranslationService} was successful in translating.
     */
    public static final int TRANSLATION_STATUS_SUCCESS = 0;
    /**
     * The {@link TranslationService} returned unknown translation result.
     */
    public static final int TRANSLATION_STATUS_UNKNOWN_ERROR = 1;
    /**
     * The language of the request is not available to be translated.
     */
    public static final int TRANSLATION_STATUS_LANGUAGE_UNAVAILABLE = 2;

    /**
     * The translation result status code.
     */
    private final @TranslationStatus int mTranslationStatus;
    /**
     * The translation results. If there is no translation result, set it with an empty list.
     */
    @NonNull
    private List<TranslationRequest> mTranslations = new ArrayList();




    // Code below generated by codegen v1.0.22.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/frameworks/base/core/java/android/view/translation/TranslationResponse.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    /** @hide */
    @IntDef(prefix = "TRANSLATION_STATUS_", value = {
        TRANSLATION_STATUS_SUCCESS,
        TRANSLATION_STATUS_UNKNOWN_ERROR,
        TRANSLATION_STATUS_LANGUAGE_UNAVAILABLE
    })
    @Retention(RetentionPolicy.SOURCE)
    @DataClass.Generated.Member
    public @interface TranslationStatus {}

    /** @hide */
    @DataClass.Generated.Member
    public static String translationStatusToString(@TranslationStatus int value) {
        switch (value) {
            case TRANSLATION_STATUS_SUCCESS:
                    return "TRANSLATION_STATUS_SUCCESS";
            case TRANSLATION_STATUS_UNKNOWN_ERROR:
                    return "TRANSLATION_STATUS_UNKNOWN_ERROR";
            case TRANSLATION_STATUS_LANGUAGE_UNAVAILABLE:
                    return "TRANSLATION_STATUS_LANGUAGE_UNAVAILABLE";
            default: return Integer.toHexString(value);
        }
    }

    @DataClass.Generated.Member
    /* package-private */ TranslationResponse(
            @TranslationStatus int translationStatus,
            @NonNull List<TranslationRequest> translations) {
        this.mTranslationStatus = translationStatus;

        if (!(mTranslationStatus == TRANSLATION_STATUS_SUCCESS)
                && !(mTranslationStatus == TRANSLATION_STATUS_UNKNOWN_ERROR)
                && !(mTranslationStatus == TRANSLATION_STATUS_LANGUAGE_UNAVAILABLE)) {
            throw new java.lang.IllegalArgumentException(
                    "translationStatus was " + mTranslationStatus + " but must be one of: "
                            + "TRANSLATION_STATUS_SUCCESS(" + TRANSLATION_STATUS_SUCCESS + "), "
                            + "TRANSLATION_STATUS_UNKNOWN_ERROR(" + TRANSLATION_STATUS_UNKNOWN_ERROR + "), "
                            + "TRANSLATION_STATUS_LANGUAGE_UNAVAILABLE(" + TRANSLATION_STATUS_LANGUAGE_UNAVAILABLE + ")");
        }

        this.mTranslations = translations;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mTranslations);

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * The translation result status code.
     */
    @DataClass.Generated.Member
    public @TranslationStatus int getTranslationStatus() {
        return mTranslationStatus;
    }

    /**
     * The translation results. If there is no translation result, set it with an empty list.
     */
    @DataClass.Generated.Member
    public @NonNull List<TranslationRequest> getTranslations() {
        return mTranslations;
    }

    @Override
    @DataClass.Generated.Member
    public String toString() {
        // You can override field toString logic by defining methods like:
        // String fieldNameToString() { ... }

        return "TranslationResponse { " +
                "translationStatus = " + translationStatusToString(mTranslationStatus) + ", " +
                "translations = " + mTranslations +
        " }";
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@NonNull Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        dest.writeInt(mTranslationStatus);
        dest.writeParcelableList(mTranslations, flags);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    /* package-private */ TranslationResponse(@NonNull Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        int translationStatus = in.readInt();
        List<TranslationRequest> translations = new ArrayList<>();
        in.readParcelableList(translations, TranslationRequest.class.getClassLoader());

        this.mTranslationStatus = translationStatus;

        if (!(mTranslationStatus == TRANSLATION_STATUS_SUCCESS)
                && !(mTranslationStatus == TRANSLATION_STATUS_UNKNOWN_ERROR)
                && !(mTranslationStatus == TRANSLATION_STATUS_LANGUAGE_UNAVAILABLE)) {
            throw new java.lang.IllegalArgumentException(
                    "translationStatus was " + mTranslationStatus + " but must be one of: "
                            + "TRANSLATION_STATUS_SUCCESS(" + TRANSLATION_STATUS_SUCCESS + "), "
                            + "TRANSLATION_STATUS_UNKNOWN_ERROR(" + TRANSLATION_STATUS_UNKNOWN_ERROR + "), "
                            + "TRANSLATION_STATUS_LANGUAGE_UNAVAILABLE(" + TRANSLATION_STATUS_LANGUAGE_UNAVAILABLE + ")");
        }

        this.mTranslations = translations;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mTranslations);

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @NonNull Parcelable.Creator<TranslationResponse> CREATOR
            = new Parcelable.Creator<TranslationResponse>() {
        @Override
        public TranslationResponse[] newArray(int size) {
            return new TranslationResponse[size];
        }

        @Override
        public TranslationResponse createFromParcel(@NonNull Parcel in) {
            return new TranslationResponse(in);
        }
    };

    /**
     * A builder for {@link TranslationResponse}
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static final class Builder {

        private @TranslationStatus int mTranslationStatus;
        private @NonNull List<TranslationRequest> mTranslations;

        private long mBuilderFieldsSet = 0L;

        /**
         * Creates a new Builder.
         *
         * @param translationStatus
         *   The translation result status code.
         */
        public Builder(
                @TranslationStatus int translationStatus) {
            mTranslationStatus = translationStatus;

            if (!(mTranslationStatus == TRANSLATION_STATUS_SUCCESS)
                    && !(mTranslationStatus == TRANSLATION_STATUS_UNKNOWN_ERROR)
                    && !(mTranslationStatus == TRANSLATION_STATUS_LANGUAGE_UNAVAILABLE)) {
                throw new java.lang.IllegalArgumentException(
                        "translationStatus was " + mTranslationStatus + " but must be one of: "
                                + "TRANSLATION_STATUS_SUCCESS(" + TRANSLATION_STATUS_SUCCESS + "), "
                                + "TRANSLATION_STATUS_UNKNOWN_ERROR(" + TRANSLATION_STATUS_UNKNOWN_ERROR + "), "
                                + "TRANSLATION_STATUS_LANGUAGE_UNAVAILABLE(" + TRANSLATION_STATUS_LANGUAGE_UNAVAILABLE + ")");
            }

        }

        /**
         * The translation result status code.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setTranslationStatus(@TranslationStatus int value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mTranslationStatus = value;
            return this;
        }

        /**
         * The translation results. If there is no translation result, set it with an empty list.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setTranslations(@NonNull List<TranslationRequest> value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mTranslations = value;
            return this;
        }

        /** @see #setTranslations */
        @DataClass.Generated.Member
        public @NonNull Builder addTranslations(@NonNull TranslationRequest value) {
            // You can refine this method's name by providing item's singular name, e.g.:
            // @DataClass.PluralOf("item")) mItems = ...

            if (mTranslations == null) setTranslations(new ArrayList<>());
            mTranslations.add(value);
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @NonNull TranslationResponse build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4; // Mark builder used

            if ((mBuilderFieldsSet & 0x2) == 0) {
                mTranslations = new ArrayList();
            }
            TranslationResponse o = new TranslationResponse(
                    mTranslationStatus,
                    mTranslations);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x4) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1609973911361L,
            codegenVersion = "1.0.22",
            sourceFile = "frameworks/base/core/java/android/view/translation/TranslationResponse.java",
            inputSignatures = "public static final  int TRANSLATION_STATUS_SUCCESS\npublic static final  int TRANSLATION_STATUS_UNKNOWN_ERROR\npublic static final  int TRANSLATION_STATUS_LANGUAGE_UNAVAILABLE\nprivate final @android.view.translation.TranslationResponse.TranslationStatus int mTranslationStatus\nprivate @android.annotation.NonNull java.util.List<android.view.translation.TranslationRequest> mTranslations\nclass TranslationResponse extends java.lang.Object implements [android.os.Parcelable]\n@com.android.internal.util.DataClass(genBuilder=true, genToString=true, genHiddenConstDefs=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
