/**
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.view;

import android.annotation.FlaggedApi;
import android.annotation.NonNull;
import android.view.flags.Flags;

/**
 * Interface to represent an entity giving consistent feedback for different events surrounding view
 * scroll.
 *
 * <p>When you have access to the {@link MotionEvent}s that triggered the different scroll events,
 * use the {@link MotionEvent} based APIs in this class. If you do not have access to the motion
 * events, you can use the methods that accept the {@link InputDevice} ID (which can be obtained by
 * APIs like {@link MotionEvent#getDeviceId()} and {@link InputDevice#getId()}) and source (which
 * can be obtained by APIs like {@link MotionEvent#getSource()}) of the motion that caused the
 * scroll events.
 */
@FlaggedApi(Flags.FLAG_SCROLL_FEEDBACK_API)
public interface ScrollFeedbackProvider {
    /**
     * Call this when the view has snapped to an item, with a motion generated by an
     * {@link InputDevice} with an id of {@code inputDeviceId}, from an input {@code source} and on
     * a given motion event {@code axis}.
     *
     * <p>This method has the same purpose as {@link #onSnapToItem(MotionEvent, int)}. When a scroll
     * snap happens, call either this method or {@link #onSnapToItem(MotionEvent, int)}, not both.
     * This method is useful when you have no direct access to the {@link MotionEvent} that
     * caused the snap event.
     *
     * @param inputDeviceId the ID of the {@link InputDevice} that generated the motion triggering
     *          the snap.
     * @param source the input source of the motion causing the snap.
     * @param axis the axis of {@code event} that caused the item to snap.
     *
     * @see #onSnapToItem(MotionEvent, int)
     */
    void onSnapToItem(int inputDeviceId, int source, int axis);

    /**
     * Call this when the view has snapped to an item, with a motion from a given
     * {@link MotionEvent} on a given {@code axis}.
     *
     * <p>The interface is not aware of the internal scroll states of the view for which scroll
     * feedback is played. As such, the client should call
     * {@link #onScrollLimit(MotionEvent, int, int)} when scrolling has reached limit.
     *
     * @param event the {@link MotionEvent} that caused the item to snap.
     * @param axis the axis of {@code event} that caused the item to snap.
     *
     * @see #onSnapToItem(int, int, int)
     */
    default void onSnapToItem(@NonNull MotionEvent event, int axis) {
        onSnapToItem(event.getDeviceId(), event.getSource(), axis);
    }

    /**
     * Call this when the view has reached the scroll limit when scrolled by a motion generated by
     * an {@link InputDevice} with an id of {@code inputDeviceId}, from an input {@code source} and
     * on a given motion event {@code axis}.
     *
     * <p>This method has the same purpose as {@link #onScrollLimit(MotionEvent, int, boolean)}.
     * When a scroll limit happens, call either this method or
     * {@link #onScrollLimit(MotionEvent, int, boolean)}, not both. This method is useful when you
     * have no direct access to the {@link MotionEvent} that caused the scroll limit.
     *
     * @param inputDeviceId the ID of the {@link InputDevice} that caused scrolling to hit limit.
     * @param source the input source of the motion that caused scrolling to hit the limit.
     * @param axis the axis of {@code event} that caused scrolling to hit the limit.
     * @param isStart {@code true} if scrolling hit limit at the start of the scrolling list, and
     *                {@code false} if the scrolling hit limit at the end of the scrolling list.
     *
     * @see #onScrollLimit(MotionEvent, int, boolean)
     */
    void onScrollLimit(int inputDeviceId, int source, int axis, boolean isStart);

    /**
     * Call this when the view has reached the scroll limit when scrolled by the motion from a given
     * {@link MotionEvent} on a given {@code axis}.
     *
     * @param event the {@link MotionEvent} that caused scrolling to hit the limit.
     * @param axis the axis of {@code event} that caused scrolling to hit the limit.
     * @param isStart {@code true} if scrolling hit limit at the start of the scrolling list, and
     *                {@code false} if the scrolling hit limit at the end of the scrolling list.
     *
     * @see #onScrollLimit(int, int, int, boolean)
     */
    default void onScrollLimit(@NonNull MotionEvent event, int axis, boolean isStart) {
        onScrollLimit(event.getDeviceId(), event.getSource(), axis, isStart);
    }

    /**
     * Call this when the view has scrolled by {@code deltaInPixels} due to the motion generated by
     * an {@link InputDevice} with an id of {@code inputDeviceId}, from an input {@code source} and
     * on a given motion event {@code axis}.
     *
     * <p>This method has the same purpose as {@link #onScrollProgress(MotionEvent, int, int)}.
     * When a scroll progress happens, call either this method or
     * {@link #onScrollProgress(MotionEvent, int, int)}, not both. This method is useful when you
     * have no direct access to the {@link MotionEvent} that caused the scroll progress.
     *
     * @param inputDeviceId the ID of the {@link InputDevice} that caused scroll progress.
     * @param source the input source of the motion that caused scroll progress.
     * @param axis the axis of {@code event} that caused scroll progress.
     * @param deltaInPixels the amount of scroll progress, in pixels.
     *
     * @see #onScrollProgress(MotionEvent, int, int)
     */
    void onScrollProgress(int inputDeviceId, int source, int axis, int deltaInPixels);

    /**
     * Call this when the view has scrolled by {@code deltaInPixels} due to the motion from a given
     * {@link MotionEvent} on a given {@code axis}.
     *
     * <p>The interface is not aware of the internal scroll states of the view for which scroll
     * feedback is played. As such, the client should call
     * {@link #onScrollLimit(MotionEvent, int, int)} when scrolling has reached limit.
     *
     * @param event the {@link MotionEvent} that caused scroll progress.
     * @param axis the axis of {@code event} that caused scroll progress.
     * @param deltaInPixels the amount of scroll progress, in pixels.
     *
     * @see #onScrollProgress(int, int, int, int)
     */
    default void onScrollProgress(@NonNull MotionEvent event, int axis, int deltaInPixels) {
        onScrollProgress(event.getDeviceId(), event.getSource(), axis, deltaInPixels);
    }
}
