/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.content.pm;

import android.annotation.NonNull;
import android.annotation.Nullable;
import android.content.IntentSender;
import android.os.Parcel;
import android.os.Parcelable;

import com.android.internal.util.DataClass;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.security.cert.Certificate;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.List;

/**
 * A typed checksum.
 *
 * @see PackageManager#getChecksums(String, boolean, int, List, IntentSender)
 */
@DataClass(genHiddenConstructor = true)
public final class FileChecksum implements Parcelable {
    /**
     * Checksum for which split. Null indicates base.apk.
     */
    private final @Nullable String mSplitName;
    /**
     * Checksum kind.
     */
    private final @PackageManager.FileChecksumKind int mKind;
    /**
     * Checksum value.
     */
    private final @NonNull byte[] mValue;
    /**
     * For Installer-provided checksums, certificate of the Installer/AppStore.
     */
    private final @Nullable byte[] mSourceCertificate;

    /**
     * Constructor, internal use only
     *
     * @hide
     */
    public FileChecksum(@Nullable String splitName, @PackageManager.FileChecksumKind int kind,
            @NonNull byte[] value) {
        this(splitName, kind, value, (byte[]) null);
    }

    /**
     * Constructor, internal use only
     *
     * @hide
     */
    public FileChecksum(@Nullable String splitName, @PackageManager.FileChecksumKind int kind,
            @NonNull byte[] value, @Nullable Certificate sourceCertificate)
            throws CertificateEncodingException {
        this(splitName, kind, value,
                (sourceCertificate != null) ? sourceCertificate.getEncoded() : null);
    }

    /**
     * Certificate of the source of this checksum.
     * @throws CertificateException in case when certificate can't be re-created from serialized
     * data.
     */
    public @Nullable Certificate getSourceCertificate() throws CertificateException {
        if (mSourceCertificate == null) {
            return null;
        }
        final CertificateFactory cf = CertificateFactory.getInstance("X.509");
        final InputStream is = new ByteArrayInputStream(mSourceCertificate);
        final X509Certificate cert = (X509Certificate) cf.generateCertificate(is);
        return cert;
    }



    // Code below generated by codegen v1.0.15.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/frameworks/base/core/java/android/content/pm/FileChecksum.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    /**
     * Creates a new FileChecksum.
     *
     * @param splitName
     *   Checksum for which split. Null indicates base.apk.
     * @param kind
     *   Checksum kind.
     * @param value
     *   Checksum value.
     * @param sourceCertificate
     *   For Installer-provided checksums, certificate of the Installer/AppStore.
     * @hide
     */
    @DataClass.Generated.Member
    public FileChecksum(
            @Nullable String splitName,
            @PackageManager.FileChecksumKind int kind,
            @NonNull byte[] value,
            @Nullable byte[] sourceCertificate) {
        this.mSplitName = splitName;
        this.mKind = kind;
        com.android.internal.util.AnnotationValidations.validate(
                PackageManager.FileChecksumKind.class, null, mKind);
        this.mValue = value;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mValue);
        this.mSourceCertificate = sourceCertificate;

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * Checksum for which split. Null indicates base.apk.
     */
    @DataClass.Generated.Member
    public @Nullable String getSplitName() {
        return mSplitName;
    }

    /**
     * Checksum kind.
     */
    @DataClass.Generated.Member
    public @PackageManager.FileChecksumKind int getKind() {
        return mKind;
    }

    /**
     * Checksum value.
     */
    @DataClass.Generated.Member
    public @NonNull byte[] getValue() {
        return mValue;
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@NonNull Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        byte flg = 0;
        if (mSplitName != null) flg |= 0x1;
        if (mSourceCertificate != null) flg |= 0x8;
        dest.writeByte(flg);
        if (mSplitName != null) dest.writeString(mSplitName);
        dest.writeInt(mKind);
        dest.writeByteArray(mValue);
        if (mSourceCertificate != null) dest.writeByteArray(mSourceCertificate);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    /* package-private */ FileChecksum(@NonNull Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        byte flg = in.readByte();
        String splitName = (flg & 0x1) == 0 ? null : in.readString();
        int kind = in.readInt();
        byte[] value = in.createByteArray();
        byte[] sourceCertificate = (flg & 0x8) == 0 ? null : in.createByteArray();

        this.mSplitName = splitName;
        this.mKind = kind;
        com.android.internal.util.AnnotationValidations.validate(
                PackageManager.FileChecksumKind.class, null, mKind);
        this.mValue = value;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mValue);
        this.mSourceCertificate = sourceCertificate;

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @NonNull Parcelable.Creator<FileChecksum> CREATOR
            = new Parcelable.Creator<FileChecksum>() {
        @Override
        public FileChecksum[] newArray(int size) {
            return new FileChecksum[size];
        }

        @Override
        public FileChecksum createFromParcel(@NonNull Parcel in) {
            return new FileChecksum(in);
        }
    };

    @DataClass.Generated(
            time = 1598322801861L,
            codegenVersion = "1.0.15",
            sourceFile = "frameworks/base/core/java/android/content/pm/FileChecksum.java",
            inputSignatures = "private final @android.annotation.Nullable java.lang.String mSplitName\nprivate final @android.content.pm.PackageManager.FileChecksumKind int mKind\nprivate final @android.annotation.NonNull byte[] mValue\nprivate final @android.annotation.Nullable byte[] mSourceCertificate\npublic @android.annotation.Nullable java.security.cert.Certificate getSourceCertificate()\nclass FileChecksum extends java.lang.Object implements [android.os.Parcelable]\n@com.android.internal.util.DataClass(genHiddenConstructor=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
