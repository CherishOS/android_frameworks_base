/*
 * Copyright (C) 2021 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.content.pm.parsing.component;

import static android.content.pm.parsing.ParsingPackageImpl.sForInternedString;

import android.annotation.IntDef;
import android.annotation.NonNull;
import android.content.pm.PackageInfo;
import android.os.Parcel;
import android.os.Parcelable;

import com.android.internal.util.DataClass;
import com.android.internal.util.Parcelling;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

/**
 * A {@link android.R.styleable#AndroidManifestUsesPermission
 * &lt;uses-permission&gt;} tag parsed from the manifest.
 *
 * @hide
 */
@DataClass(genGetters = true, genSetters = true, genBuilder = false, genParcelable = true,
        genAidl = false)
public class ParsedUsesPermission implements Parcelable {

    @DataClass.ParcelWith(Parcelling.BuiltIn.ForInternedString.class)
    @NonNull
    private String name;

    @UsesPermissionFlags
    private int usesPermissionFlags;

    /**
     * Strong assertion by a developer that they will never use this permission to derive the
     * physical location of the device, regardless of ACCESS_FINE_LOCATION and/or
     * ACCESS_COARSE_LOCATION being granted.
     */
    public static final int FLAG_NEVER_FOR_LOCATION =
            PackageInfo.REQUESTED_PERMISSION_NEVER_FOR_LOCATION;

    /**
     * @hide
     */
    @Retention(RetentionPolicy.SOURCE)
    @IntDef(flag = true, prefix = { "FLAG_" }, value = {
            FLAG_NEVER_FOR_LOCATION
    })
    public @interface UsesPermissionFlags {}



    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/frameworks/base/core/java/android/content/pm/parsing/component/ParsedUsesPermission.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    public ParsedUsesPermission(
            @NonNull String name,
            @UsesPermissionFlags int usesPermissionFlags) {
        this.name = name;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, name);
        this.usesPermissionFlags = usesPermissionFlags;
        com.android.internal.util.AnnotationValidations.validate(
                UsesPermissionFlags.class, null, usesPermissionFlags);

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public @NonNull String getName() {
        return name;
    }

    @DataClass.Generated.Member
    public @UsesPermissionFlags int getUsesPermissionFlags() {
        return usesPermissionFlags;
    }

    @DataClass.Generated.Member
    public @NonNull ParsedUsesPermission setName(@NonNull String value) {
        name = value;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, name);
        return this;
    }

    @DataClass.Generated.Member
    public @NonNull ParsedUsesPermission setUsesPermissionFlags(@UsesPermissionFlags int value) {
        usesPermissionFlags = value;
        com.android.internal.util.AnnotationValidations.validate(
                UsesPermissionFlags.class, null, usesPermissionFlags);
        return this;
    }

    @DataClass.Generated.Member
    static Parcelling<String> sParcellingForName =
            Parcelling.Cache.get(
                    Parcelling.BuiltIn.ForInternedString.class);
    static {
        if (sParcellingForName == null) {
            sParcellingForName = Parcelling.Cache.put(
                    new Parcelling.BuiltIn.ForInternedString());
        }
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@NonNull Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        sParcellingForName.parcel(name, dest, flags);
        dest.writeInt(usesPermissionFlags);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    protected ParsedUsesPermission(@NonNull Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        String _name = sParcellingForName.unparcel(in);
        int _usesPermissionFlags = in.readInt();

        this.name = _name;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, name);
        this.usesPermissionFlags = _usesPermissionFlags;
        com.android.internal.util.AnnotationValidations.validate(
                UsesPermissionFlags.class, null, usesPermissionFlags);

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @NonNull Parcelable.Creator<ParsedUsesPermission> CREATOR
            = new Parcelable.Creator<ParsedUsesPermission>() {
        @Override
        public ParsedUsesPermission[] newArray(int size) {
            return new ParsedUsesPermission[size];
        }

        @Override
        public ParsedUsesPermission createFromParcel(@NonNull Parcel in) {
            return new ParsedUsesPermission(in);
        }
    };

    @DataClass.Generated(
            time = 1626207990753L,
            codegenVersion = "1.0.23",
            sourceFile = "frameworks/base/core/java/android/content/pm/parsing/component/ParsedUsesPermission.java",
            inputSignatures = "private @com.android.internal.util.DataClass.ParcelWith(com.android.internal.util.Parcelling.BuiltIn.ForInternedString.class) @android.annotation.NonNull java.lang.String name\nprivate @android.content.pm.parsing.component.ParsedUsesPermission.UsesPermissionFlags int usesPermissionFlags\npublic static final  int FLAG_NEVER_FOR_LOCATION\nclass ParsedUsesPermission extends java.lang.Object implements [android.os.Parcelable]\n@com.android.internal.util.DataClass(genGetters=true, genSetters=true, genBuilder=false, genParcelable=true, genAidl=false)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
