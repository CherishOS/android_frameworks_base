/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.service.translation;

import android.annotation.NonNull;
import android.annotation.SystemApi;
import android.os.Parcel;
import android.os.Parcelable;
import android.view.translation.TranslationSpec;

import com.android.internal.util.DataClass;

import java.util.ArrayList;
import java.util.List;

/**
 * Internal translation request sent to the {@link android.service.translation.TranslationService}
 * which contains the text to be translated.
 *
 * @hide
 */
@SystemApi
@DataClass(genConstructor = true, genBuilder = true, genToString = true)
public final class TranslationRequest implements Parcelable {

    private final int mRequestId;
    @NonNull
    private final TranslationSpec mSourceSpec;
    @NonNull
    private final TranslationSpec mDestSpec;
    @NonNull
    private final List<android.view.translation.TranslationRequest> mTranslationRequests;



    // Code below generated by codegen v1.0.22.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/frameworks/base/core/java/android/service/translation/TranslationRequest.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    public TranslationRequest(
            int requestId,
            @NonNull TranslationSpec sourceSpec,
            @NonNull TranslationSpec destSpec,
            @NonNull List<android.view.translation.TranslationRequest> translationRequests) {
        this.mRequestId = requestId;
        this.mSourceSpec = sourceSpec;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mSourceSpec);
        this.mDestSpec = destSpec;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mDestSpec);
        this.mTranslationRequests = translationRequests;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mTranslationRequests);

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public int getRequestId() {
        return mRequestId;
    }

    @DataClass.Generated.Member
    public @NonNull TranslationSpec getSourceSpec() {
        return mSourceSpec;
    }

    @DataClass.Generated.Member
    public @NonNull TranslationSpec getDestSpec() {
        return mDestSpec;
    }

    @DataClass.Generated.Member
    public @NonNull List<android.view.translation.TranslationRequest> getTranslationRequests() {
        return mTranslationRequests;
    }

    @Override
    @DataClass.Generated.Member
    public String toString() {
        // You can override field toString logic by defining methods like:
        // String fieldNameToString() { ... }

        return "TranslationRequest { " +
                "requestId = " + mRequestId + ", " +
                "sourceSpec = " + mSourceSpec + ", " +
                "destSpec = " + mDestSpec + ", " +
                "translationRequests = " + mTranslationRequests +
        " }";
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@NonNull Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        dest.writeInt(mRequestId);
        dest.writeTypedObject(mSourceSpec, flags);
        dest.writeTypedObject(mDestSpec, flags);
        dest.writeParcelableList(mTranslationRequests, flags);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    /* package-private */ TranslationRequest(@NonNull Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        int requestId = in.readInt();
        TranslationSpec sourceSpec = (TranslationSpec) in.readTypedObject(TranslationSpec.CREATOR);
        TranslationSpec destSpec = (TranslationSpec) in.readTypedObject(TranslationSpec.CREATOR);
        List<android.view.translation.TranslationRequest> translationRequests = new ArrayList<>();
        in.readParcelableList(translationRequests, android.view.translation.TranslationRequest.class.getClassLoader());

        this.mRequestId = requestId;
        this.mSourceSpec = sourceSpec;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mSourceSpec);
        this.mDestSpec = destSpec;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mDestSpec);
        this.mTranslationRequests = translationRequests;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mTranslationRequests);

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @NonNull Parcelable.Creator<TranslationRequest> CREATOR
            = new Parcelable.Creator<TranslationRequest>() {
        @Override
        public TranslationRequest[] newArray(int size) {
            return new TranslationRequest[size];
        }

        @Override
        public TranslationRequest createFromParcel(@NonNull Parcel in) {
            return new TranslationRequest(in);
        }
    };

    /**
     * A builder for {@link TranslationRequest}
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static final class Builder {

        private int mRequestId;
        private @NonNull TranslationSpec mSourceSpec;
        private @NonNull TranslationSpec mDestSpec;
        private @NonNull List<android.view.translation.TranslationRequest> mTranslationRequests;

        private long mBuilderFieldsSet = 0L;

        public Builder(
                int requestId,
                @NonNull TranslationSpec sourceSpec,
                @NonNull TranslationSpec destSpec,
                @NonNull List<android.view.translation.TranslationRequest> translationRequests) {
            mRequestId = requestId;
            mSourceSpec = sourceSpec;
            com.android.internal.util.AnnotationValidations.validate(
                    NonNull.class, null, mSourceSpec);
            mDestSpec = destSpec;
            com.android.internal.util.AnnotationValidations.validate(
                    NonNull.class, null, mDestSpec);
            mTranslationRequests = translationRequests;
            com.android.internal.util.AnnotationValidations.validate(
                    NonNull.class, null, mTranslationRequests);
        }

        @DataClass.Generated.Member
        public @NonNull Builder setRequestId(int value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mRequestId = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setSourceSpec(@NonNull TranslationSpec value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mSourceSpec = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setDestSpec(@NonNull TranslationSpec value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mDestSpec = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setTranslationRequests(@NonNull List<android.view.translation.TranslationRequest> value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8;
            mTranslationRequests = value;
            return this;
        }

        /** @see #setTranslationRequests */
        @DataClass.Generated.Member
        public @NonNull Builder addTranslationRequests(@NonNull android.view.translation.TranslationRequest value) {
            // You can refine this method's name by providing item's singular name, e.g.:
            // @DataClass.PluralOf("item")) mItems = ...

            if (mTranslationRequests == null) setTranslationRequests(new ArrayList<>());
            mTranslationRequests.add(value);
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @NonNull TranslationRequest build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x10; // Mark builder used

            TranslationRequest o = new TranslationRequest(
                    mRequestId,
                    mSourceSpec,
                    mDestSpec,
                    mTranslationRequests);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x10) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1609966181888L,
            codegenVersion = "1.0.22",
            sourceFile = "frameworks/base/core/java/android/service/translation/TranslationRequest.java",
            inputSignatures = "private final  int mRequestId\nprivate final @android.annotation.NonNull android.view.translation.TranslationSpec mSourceSpec\nprivate final @android.annotation.NonNull android.view.translation.TranslationSpec mDestSpec\nprivate final @android.annotation.NonNull java.util.List<android.view.translation.TranslationRequest> mTranslationRequests\nclass TranslationRequest extends java.lang.Object implements [android.os.Parcelable]\n@com.android.internal.util.DataClass(genConstructor=true, genBuilder=true, genToString=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
