/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.speech;

import android.annotation.NonNull;
import android.os.Parcelable;

import com.android.internal.util.DataClass;

import java.util.List;

/** Encodes the level of support for a given speech recognition request */
@DataClass(
        genConstructor = false,
        genBuilder = true,
        genEqualsHashCode = true,
        genHiddenConstDefs = true,
        genParcelable = true,
        genToString = true
)
public final class RecognitionSupport implements Parcelable {

    /** Support for this request is ready for use on this device for the returned languages. */
    @NonNull
    private List<String> mInstalledLanguages = null;

    /** Support for this request is scheduled for download for the returned languages. */
    @NonNull private List<String> mPendingLanguages = null;

    /** These languages are supported but need to be downloaded before use. */
    @NonNull
    private List<String> mSupportedLanguages = null;



    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/frameworks/base/core/java/android/speech/RecognitionSupport.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    /* package-private */ RecognitionSupport(
            @NonNull List<String> installedLanguages,
            @NonNull List<String> pendingLanguages,
            @NonNull List<String> supportedLanguages) {
        this.mInstalledLanguages = installedLanguages;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mInstalledLanguages);
        this.mPendingLanguages = pendingLanguages;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mPendingLanguages);
        this.mSupportedLanguages = supportedLanguages;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mSupportedLanguages);

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * Support for this request is ready for use on this device for the returned languages.
     */
    @DataClass.Generated.Member
    public @NonNull List<String> getInstalledLanguages() {
        return mInstalledLanguages;
    }

    /**
     * Support for this request is scheduled for download for the returned languages.
     */
    @DataClass.Generated.Member
    public @NonNull List<String> getPendingLanguages() {
        return mPendingLanguages;
    }

    /**
     * These languages are supported but need to be downloaded before use.
     */
    @DataClass.Generated.Member
    public @NonNull List<String> getSupportedLanguages() {
        return mSupportedLanguages;
    }

    @Override
    @DataClass.Generated.Member
    public String toString() {
        // You can override field toString logic by defining methods like:
        // String fieldNameToString() { ... }

        return "RecognitionSupport { " +
                "installedLanguages = " + mInstalledLanguages + ", " +
                "pendingLanguages = " + mPendingLanguages + ", " +
                "supportedLanguages = " + mSupportedLanguages +
        " }";
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@android.annotation.Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(RecognitionSupport other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        RecognitionSupport that = (RecognitionSupport) o;
        //noinspection PointlessBooleanExpression
        return true
                && java.util.Objects.equals(mInstalledLanguages, that.mInstalledLanguages)
                && java.util.Objects.equals(mPendingLanguages, that.mPendingLanguages)
                && java.util.Objects.equals(mSupportedLanguages, that.mSupportedLanguages);
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + java.util.Objects.hashCode(mInstalledLanguages);
        _hash = 31 * _hash + java.util.Objects.hashCode(mPendingLanguages);
        _hash = 31 * _hash + java.util.Objects.hashCode(mSupportedLanguages);
        return _hash;
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@NonNull android.os.Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        dest.writeStringList(mInstalledLanguages);
        dest.writeStringList(mPendingLanguages);
        dest.writeStringList(mSupportedLanguages);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    /* package-private */ RecognitionSupport(@NonNull android.os.Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        List<String> installedLanguages = new java.util.ArrayList<>();
        in.readStringList(installedLanguages);
        List<String> pendingLanguages = new java.util.ArrayList<>();
        in.readStringList(pendingLanguages);
        List<String> supportedLanguages = new java.util.ArrayList<>();
        in.readStringList(supportedLanguages);

        this.mInstalledLanguages = installedLanguages;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mInstalledLanguages);
        this.mPendingLanguages = pendingLanguages;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mPendingLanguages);
        this.mSupportedLanguages = supportedLanguages;
        com.android.internal.util.AnnotationValidations.validate(
                NonNull.class, null, mSupportedLanguages);

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @NonNull Parcelable.Creator<RecognitionSupport> CREATOR
            = new Parcelable.Creator<RecognitionSupport>() {
        @Override
        public RecognitionSupport[] newArray(int size) {
            return new RecognitionSupport[size];
        }

        @Override
        public RecognitionSupport createFromParcel(@NonNull android.os.Parcel in) {
            return new RecognitionSupport(in);
        }
    };

    /**
     * A builder for {@link RecognitionSupport}
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static final class Builder {

        private @NonNull List<String> mInstalledLanguages;
        private @NonNull List<String> mPendingLanguages;
        private @NonNull List<String> mSupportedLanguages;

        private long mBuilderFieldsSet = 0L;

        public Builder() {
        }

        /**
         * Support for this request is ready for use on this device for the returned languages.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setInstalledLanguages(@NonNull List<String> value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mInstalledLanguages = value;
            return this;
        }

        /** @see #setInstalledLanguages */
        @DataClass.Generated.Member
        public @NonNull Builder addInstalledLanguages(@NonNull String value) {
            // You can refine this method's name by providing item's singular name, e.g.:
            // @DataClass.PluralOf("item")) mItems = ...

            if (mInstalledLanguages == null) setInstalledLanguages(new java.util.ArrayList<>());
            mInstalledLanguages.add(value);
            return this;
        }

        /**
         * Support for this request is scheduled for download for the returned languages.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setPendingLanguages(@NonNull List<String> value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mPendingLanguages = value;
            return this;
        }

        /** @see #setPendingLanguages */
        @DataClass.Generated.Member
        public @NonNull Builder addPendingLanguages(@NonNull String value) {
            // You can refine this method's name by providing item's singular name, e.g.:
            // @DataClass.PluralOf("item")) mItems = ...

            if (mPendingLanguages == null) setPendingLanguages(new java.util.ArrayList<>());
            mPendingLanguages.add(value);
            return this;
        }

        /**
         * These languages are supported but need to be downloaded before use.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setSupportedLanguages(@NonNull List<String> value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mSupportedLanguages = value;
            return this;
        }

        /** @see #setSupportedLanguages */
        @DataClass.Generated.Member
        public @NonNull Builder addSupportedLanguages(@NonNull String value) {
            // You can refine this method's name by providing item's singular name, e.g.:
            // @DataClass.PluralOf("item")) mItems = ...

            if (mSupportedLanguages == null) setSupportedLanguages(new java.util.ArrayList<>());
            mSupportedLanguages.add(value);
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @NonNull RecognitionSupport build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8; // Mark builder used

            if ((mBuilderFieldsSet & 0x1) == 0) {
                mInstalledLanguages = null;
            }
            if ((mBuilderFieldsSet & 0x2) == 0) {
                mPendingLanguages = null;
            }
            if ((mBuilderFieldsSet & 0x4) == 0) {
                mSupportedLanguages = null;
            }
            RecognitionSupport o = new RecognitionSupport(
                    mInstalledLanguages,
                    mPendingLanguages,
                    mSupportedLanguages);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x8) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1639158640137L,
            codegenVersion = "1.0.23",
            sourceFile = "frameworks/base/core/java/android/speech/RecognitionSupport.java",
            inputSignatures = "private @android.annotation.NonNull java.util.List<java.lang.String> mInstalledLanguages\nprivate @android.annotation.NonNull java.util.List<java.lang.String> mPendingLanguages\nprivate @android.annotation.NonNull java.util.List<java.lang.String> mSupportedLanguages\nclass RecognitionSupport extends java.lang.Object implements [android.os.Parcelable]\n@com.android.internal.util.DataClass(genConstructor=false, genBuilder=true, genEqualsHashCode=true, genHiddenConstDefs=true, genParcelable=true, genToString=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
